version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: auraconnect-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-auraconnect}
      POSTGRES_USER: ${POSTGRES_USER:-auraconnect}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/alembic/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-auraconnect}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auraconnect-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: auraconnect-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auraconnect-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: auraconnect-backend
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-auraconnect}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-auraconnect}
      
      # Redis
      REDIS_URL: redis://default:${REDIS_PASSWORD:-changeme}@redis:6379/0
      
      # JWT & Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: ${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      PORT: 8000
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:80}
      
      # Payment Gateways
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      SQUARE_ACCESS_TOKEN: ${SQUARE_ACCESS_TOKEN}
      SQUARE_LOCATION_ID: ${SQUARE_LOCATION_ID}
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
      
      # Email
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@auraconnect.ai}
      
      # SMS (Twilio)
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      
      # Push Notifications
      FIREBASE_CREDENTIALS: ${FIREBASE_CREDENTIALS}
      
      # AWS (for file storage)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      
      # Feature Flags
      ENABLE_WEBHOOKS: ${ENABLE_WEBHOOKS:-true}
      ENABLE_WEBSOCKETS: ${ENABLE_WEBSOCKETS:-true}
      ENABLE_BACKGROUND_JOBS: ${ENABLE_BACKGROUND_JOBS:-true}
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - auraconnect-network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        alembic upgrade head &&
        echo 'Database migrations completed' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
        REACT_APP_ENVIRONMENT: ${REACT_APP_ENVIRONMENT:-development}
    container_name: auraconnect-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
      REACT_APP_WEBSOCKET_URL: ${REACT_APP_WEBSOCKET_URL:-ws://localhost:8000}
      REACT_APP_ENVIRONMENT: ${REACT_APP_ENVIRONMENT:-development}
      REACT_APP_GOOGLE_MAPS_API_KEY: ${REACT_APP_GOOGLE_MAPS_API_KEY}
      REACT_APP_STRIPE_PUBLISHABLE_KEY: ${REACT_APP_STRIPE_PUBLISHABLE_KEY}
      REACT_APP_SENTRY_DSN: ${REACT_APP_SENTRY_DSN}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - auraconnect-network

  # Background Worker (for async tasks)
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: auraconnect-worker
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-auraconnect}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-auraconnect}
      REDIS_URL: redis://default:${REDIS_PASSWORD:-changeme}@redis:6379/0
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auraconnect-network
    command: python -m app.workers.main

  # Nginx Reverse Proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: auraconnect-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    depends_on:
      - backend
      - frontend
    networks:
      - auraconnect-network
    profiles:
      - production

  # PgAdmin (optional, for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: auraconnect-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@auraconnect.ai}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - auraconnect-network
    profiles:
      - tools

  # RedisCommander (optional, for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: auraconnect-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-changeme}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    networks:
      - auraconnect-network
    profiles:
      - tools

  # Mailhog (optional, for email testing in development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: auraconnect-mailhog
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_UI_PORT:-8025}:8025"
    networks:
      - auraconnect-network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  nginx_logs:
    driver: local
  pgadmin_data:
    driver: local

networks:
  auraconnect-network:
    driver: bridge
    name: auraconnect-network