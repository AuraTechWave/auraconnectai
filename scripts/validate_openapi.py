#!/usr/bin/env python3
"""
OpenAPI Schema Validation Script

Validates the FastAPI application's OpenAPI schema for correctness and completeness.
Used by CI/CD pipeline to ensure API documentation is valid.
"""

import sys
import os
import json
import importlib.util
from pathlib import Path

# Add backend directory to path
backend_dir = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_dir))

try:
    # Import the FastAPI app
    from app.main import app
    from core.config import settings
except ImportError as e:
    print(f"‚ùå Failed to import FastAPI app: {e}")
    print("Make sure you're running this script from the project root")
    sys.exit(1)


def validate_openapi_schema():
    """Validate the OpenAPI schema generated by FastAPI"""
    print("üîç Validating OpenAPI schema...")
    
    try:
        # Generate OpenAPI schema
        openapi_schema = app.openapi()
        
        # Basic validation checks
        errors = []
        warnings = []
        
        # Check required fields
        if "openapi" not in openapi_schema:
            errors.append("Missing 'openapi' version field")
        
        if "info" not in openapi_schema:
            errors.append("Missing 'info' section")
        else:
            info = openapi_schema["info"]
            if "title" not in info:
                errors.append("Missing API title in info section")
            if "version" not in info:
                errors.append("Missing API version in info section")
        
        if "paths" not in openapi_schema:
            errors.append("Missing 'paths' section")
        else:
            paths = openapi_schema["paths"]
            if not paths:
                warnings.append("No API endpoints defined")
            
            # Validate each endpoint
            for path, methods in paths.items():
                for method, operation in methods.items():
                    if method not in ["get", "post", "put", "delete", "patch", "options", "head"]:
                        continue
                    
                    # Check for operation ID
                    if "operationId" not in operation:
                        warnings.append(f"{method.upper()} {path}: Missing operationId")
                    
                    # Check for responses
                    if "responses" not in operation:
                        errors.append(f"{method.upper()} {path}: Missing responses")
                    else:
                        responses = operation["responses"]
                        if "200" not in responses and "201" not in responses and "204" not in responses:
                            warnings.append(f"{method.upper()} {path}: No success response defined")
        
        # Check for components/schemas
        if "components" in openapi_schema:
            components = openapi_schema["components"]
            if "schemas" in components:
                print(f"‚úÖ Found {len(components['schemas'])} schema definitions")
            
            if "securitySchemes" in components:
                print(f"‚úÖ Found {len(components['securitySchemes'])} security schemes")
        
        # Check for security definitions
        if "security" in openapi_schema:
            print("‚úÖ Global security requirements defined")
        elif "components" in openapi_schema and "securitySchemes" in openapi_schema["components"]:
            warnings.append("Security schemes defined but no global security requirements")
        
        # Report results
        print(f"\nüìä Validation Results:")
        print(f"   - Total endpoints: {len(openapi_schema.get('paths', {}))}")
        print(f"   - Errors: {len(errors)}")
        print(f"   - Warnings: {len(warnings)}")
        
        if errors:
            print("\n‚ùå Errors found:")
            for error in errors:
                print(f"   - {error}")
            sys.exit(1)
        
        if warnings:
            print("\n‚ö†Ô∏è  Warnings:")
            for warning in warnings:
                print(f"   - {warning}")
        
        # Save the schema for inspection
        schema_path = backend_dir / "openapi.json"
        with open(schema_path, "w") as f:
            json.dump(openapi_schema, f, indent=2)
        print(f"\n‚úÖ OpenAPI schema saved to: {schema_path}")
        
        print("\n‚úÖ OpenAPI schema validation passed!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error during validation: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


def check_endpoint_consistency():
    """Check that all route files are properly registered"""
    print("\nüîç Checking endpoint consistency...")
    
    routes_dir = backend_dir / "modules"
    route_files = []
    
    # Find all route files
    for module_dir in routes_dir.iterdir():
        if module_dir.is_dir() and not module_dir.name.startswith("__"):
            routes_path = module_dir / "routes"
            if routes_path.exists():
                for route_file in routes_path.glob("*.py"):
                    if not route_file.name.startswith("__"):
                        route_files.append(route_file)
    
    print(f"   - Found {len(route_files)} route files")
    
    # Check if routes are registered in main.py
    main_file = backend_dir / "main.py"
    if main_file.exists():
        with open(main_file, "r") as f:
            main_content = f.read()
        
        unregistered = []
        for route_file in route_files:
            module_name = route_file.parent.parent.name
            route_name = route_file.stem
            
            # Check for common import patterns
            if f"from modules.{module_name}.routes import {route_name}" not in main_content:
                if f"modules.{module_name}.routes.{route_name}" not in main_content:
                    unregistered.append(f"modules.{module_name}.routes.{route_name}")
        
        if unregistered:
            print("\n‚ö†Ô∏è  Potentially unregistered route modules:")
            for module in unregistered:
                print(f"   - {module}")
    
    print("‚úÖ Endpoint consistency check completed")


def validate_response_models():
    """Validate that all response models are properly defined"""
    print("\nüîç Checking response models...")
    
    try:
        # Get the OpenAPI schema
        schema = app.openapi()
        
        if "components" in schema and "schemas" in schema["components"]:
            schemas = schema["components"]["schemas"]
            
            # Check for common issues
            for schema_name, schema_def in schemas.items():
                if "type" not in schema_def and "$ref" not in schema_def:
                    print(f"‚ö†Ô∏è  Schema '{schema_name}' missing type definition")
                
                if schema_def.get("type") == "object" and "properties" not in schema_def:
                    print(f"‚ö†Ô∏è  Object schema '{schema_name}' has no properties defined")
        
        print("‚úÖ Response model validation completed")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not validate response models: {e}")


if __name__ == "__main__":
    print("=" * 60)
    print("OpenAPI Schema Validator")
    print("=" * 60)
    
    # Run validation steps
    validate_openapi_schema()
    check_endpoint_consistency()
    validate_response_models()
    
    print("\n‚úÖ All validations passed!")
    print("=" * 60)