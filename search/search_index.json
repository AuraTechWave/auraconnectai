{"config":{"lang":["en"],"separator":"[\\s\\-\\.]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AuraConnect Documentation Hub","text":"<p>Welcome to AuraConnect - the comprehensive restaurant management platform that revolutionizes how restaurants operate.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#find-your-path","title":"\ud83c\udfaf Find Your Path","text":"<ul> <li>Developer Personas - Find documentation specific to your role</li> <li>Getting Started Guide - Set up your development environment</li> <li>Architecture Overview - Understand the system design</li> <li>API Documentation - Interactive API reference</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":""},{"location":"#for-developers","title":"For Developers","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Quick Start Guide</li> <li>Development Setup</li> <li>Developer Personas</li> </ul>"},{"location":"#architecture-design","title":"Architecture &amp; Design","text":"<ul> <li>System Architecture</li> <li>Order Management Architecture</li> <li>Staff Management Architecture</li> <li>API Reference</li> </ul>"},{"location":"#module-documentation","title":"Module Documentation","text":"<ul> <li>All Modules Overview</li> <li>Core Modules</li> <li>Orders Management</li> <li>Menu System</li> <li>Staff Management</li> <li>Financial Modules</li> <li>Payroll Architecture</li> <li>Tax Management</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>API Overview</li> <li>Orders API</li> <li>POS Sync Endpoints</li> <li>POS Analytics Endpoints</li> </ul>"},{"location":"#for-devops","title":"For DevOps","text":"<ul> <li>Deployment Guide</li> <li>CI/CD Setup</li> <li>Payroll Production Checklist</li> </ul>"},{"location":"#for-restaurant-operators","title":"For Restaurant Operators","text":"<ul> <li>Mobile App Guide</li> <li>Push Notifications</li> <li>POS Integration</li> </ul>"},{"location":"#featured-topics","title":"Featured Topics","text":""},{"location":"#integration-guides","title":"Integration Guides","text":"<ul> <li>POS System Integration</li> <li>POS Architecture</li> <li>Offline Sync</li> </ul>"},{"location":"#advanced-features","title":"Advanced Features","text":"<ul> <li>Menu Versioning</li> <li>AI Agents</li> <li>AI Customization</li> <li>Reservations</li> </ul>"},{"location":"#best-practices","title":"Best Practices","text":"<ul> <li>Developer Guide</li> <li>Payroll Tax Developer Guide</li> <li>Menu Versioning Setup</li> </ul>"},{"location":"#development-resources","title":"Development Resources","text":""},{"location":"#development-resources_1","title":"Development Resources","text":"<ul> <li>Feature Documentation</li> <li>Architecture Overview</li> <li>Compliance Guide</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>API Documentation</li> <li>Module Overview</li> <li>Feature Documentation</li> </ul>"},{"location":"#project-information","title":"Project Information","text":""},{"location":"#current-version","title":"Current Version","text":"<ul> <li>Version: 2.0.0</li> <li>Release Date: January 2025</li> <li>See README for latest updates</li> </ul>"},{"location":"#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.11+</li> <li>PostgreSQL 14+</li> <li>Redis 6+</li> <li>Node.js 18+ (frontend)</li> </ul>"},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>Backend: FastAPI, SQLAlchemy, Celery</li> <li>Frontend: React, TypeScript, Redux</li> <li>Database: PostgreSQL, Redis</li> <li>Infrastructure: Docker, Kubernetes, AWS/GCP</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li>Development Guide</li> <li>CI/CD Setup</li> <li>Developer Personas</li> </ul>"},{"location":"#support-community","title":"Support &amp; Community","text":""},{"location":"#get-help","title":"Get Help","text":"<ul> <li>Documentation: You are here!</li> <li>Issue Tracker: GitHub Issues</li> </ul>"},{"location":"#professional-support","title":"Professional Support","text":"<ul> <li>Email: support@auratechwave.com</li> <li>Enterprise: enterprise@auratechwave.com</li> <li>Phone: +1-555-AURA-TECH</li> </ul>"},{"location":"#search-documentation","title":"Search Documentation","text":"<p>Looking for something specific? Use the search box at the top of the page or browse the navigation menu.</p> <p>Built with \u2764\ufe0f by AuraTechWave Empowering restaurants with intelligent technology</p>"},{"location":"DEPLOYMENT/","title":"Deployment Guide - AuraConnect","text":"<p>Version: 1.0.0 | Last Updated: January 2025</p>"},{"location":"DEPLOYMENT/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Deployment Overview</li> <li>Pre-Deployment Checklist</li> <li>Docker Deployment</li> <li>Kubernetes Deployment</li> <li>AWS Deployment</li> <li>Railway Deployment</li> <li>Database Migration Strategy</li> <li>Environment Configuration</li> <li>Monitoring &amp; Logging</li> <li>Rollback Procedures</li> <li>Production Best Practices</li> </ol>"},{"location":"DEPLOYMENT/#deployment-overview","title":"Deployment Overview","text":"<p>AuraConnect supports multiple deployment strategies to accommodate different infrastructure requirements and scale.</p>"},{"location":"DEPLOYMENT/#deployment-options","title":"Deployment Options","text":"Platform Best For Complexity Cost Docker Compose Small-medium deployments Low $ Kubernetes Large scale, multi-region High $$$ AWS ECS/Fargate AWS-native deployments Medium $$ Railway Quick deployments, startups Low $"},{"location":"DEPLOYMENT/#pre-deployment-checklist","title":"Pre-Deployment Checklist","text":""},{"location":"DEPLOYMENT/#security-checklist","title":"Security Checklist","text":"<ul> <li> All secrets in environment variables</li> <li> SSL certificates configured</li> <li> Database backups enabled</li> <li> Security headers configured</li> <li> Rate limiting enabled</li> <li> CORS properly configured</li> <li> JWT secrets rotated</li> <li> Admin credentials changed</li> </ul>"},{"location":"DEPLOYMENT/#performance-checklist","title":"Performance Checklist","text":"<ul> <li> Database indexes created</li> <li> Redis caching configured</li> <li> Static assets CDN ready</li> <li> Image optimization complete</li> <li> Gzip compression enabled</li> <li> Connection pooling configured</li> </ul>"},{"location":"DEPLOYMENT/#monitoring-checklist","title":"Monitoring Checklist","text":"<ul> <li> Logging configured</li> <li> Error tracking enabled</li> <li> Health checks implemented</li> <li> Metrics collection setup</li> <li> Alerts configured</li> <li> Backup verification</li> </ul>"},{"location":"DEPLOYMENT/#docker-deployment","title":"Docker Deployment","text":""},{"location":"DEPLOYMENT/#production-docker-compose","title":"Production Docker Compose","text":"<pre><code># docker-compose.prod.yml\nversion: '3.8'\n\nservices:\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./nginx/ssl:/etc/nginx/ssl\n      - static_volume:/app/static\n    depends_on:\n      - backend\n      - frontend\n    restart: always\n\n  backend:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile.prod\n    environment:\n      - ENVIRONMENT=production\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=${REDIS_URL}\n      - JWT_SECRET_KEY=${JWT_SECRET_KEY}\n    volumes:\n      - static_volume:/app/static\n    depends_on:\n      - db\n      - redis\n    restart: always\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  frontend:\n    build:\n      context: ./frontend\n      dockerfile: Dockerfile.prod\n      args:\n        - REACT_APP_API_URL=${REACT_APP_API_URL}\n    restart: always\n\n  db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRES_DB=${POSTGRES_DB}\n      - POSTGRES_USER=${POSTGRES_USER}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./backups:/backups\n    restart: always\n    command: &gt;\n      postgres\n      -c shared_buffers=256MB\n      -c max_connections=200\n      -c effective_cache_size=1GB\n\n  redis:\n    image: redis:6-alpine\n    command: redis-server --requirepass ${REDIS_PASSWORD}\n    volumes:\n      - redis_data:/data\n    restart: always\n\n  celery:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile.prod\n    command: celery -A tasks worker --loglevel=info\n    environment:\n      - ENVIRONMENT=production\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=${REDIS_URL}\n    depends_on:\n      - redis\n      - db\n    restart: always\n\n  celery-beat:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile.prod\n    command: celery -A tasks beat --loglevel=info\n    environment:\n      - ENVIRONMENT=production\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=${REDIS_URL}\n    depends_on:\n      - redis\n      - db\n    restart: always\n\nvolumes:\n  postgres_data:\n  redis_data:\n  static_volume:\n</code></pre>"},{"location":"DEPLOYMENT/#backend-dockerfile-production","title":"Backend Dockerfile (Production)","text":"<pre><code># backend/Dockerfile.prod\nFROM python:3.11-slim as builder\n\n# Install build dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential \\\n    libpq-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Create virtual environment\nRUN python -m venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN pip install --upgrade pip &amp;&amp; \\\n    pip install --no-cache-dir -r requirements.txt\n\n# Production stage\nFROM python:3.11-slim\n\n# Install runtime dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    libpq-dev \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy virtual environment from builder\nCOPY --from=builder /opt/venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\n# Create non-root user\nRUN useradd -m -u 1000 appuser\n\n# Set working directory\nWORKDIR /app\n\n# Copy application code\nCOPY --chown=appuser:appuser . .\n\n# Switch to non-root user\nUSER appuser\n\n# Expose port\nEXPOSE 8000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8000/health || exit 1\n\n# Run gunicorn\nCMD [\"gunicorn\", \"main:app\", \\\n     \"--workers\", \"4\", \\\n     \"--worker-class\", \"uvicorn.workers.UvicornWorker\", \\\n     \"--bind\", \"0.0.0.0:8000\", \\\n     \"--access-logfile\", \"-\", \\\n     \"--error-logfile\", \"-\"]\n</code></pre>"},{"location":"DEPLOYMENT/#frontend-dockerfile-production","title":"Frontend Dockerfile (Production)","text":"<pre><code># frontend/Dockerfile.prod\n# Build stage\nFROM node:18-alpine as builder\n\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production\n\n# Copy source code\nCOPY . .\n\n# Build arguments\nARG REACT_APP_API_URL\nENV REACT_APP_API_URL=$REACT_APP_API_URL\n\n# Build application\nRUN npm run build\n\n# Production stage\nFROM nginx:alpine\n\n# Copy custom nginx config\nCOPY nginx.conf /etc/nginx/nginx.conf\n\n# Copy built files from builder\nCOPY --from=builder /app/build /usr/share/nginx/html\n\n# Add security headers\nRUN echo 'add_header X-Frame-Options \"SAMEORIGIN\" always;' &gt;&gt; /etc/nginx/conf.d/security.conf &amp;&amp; \\\n    echo 'add_header X-Content-Type-Options \"nosniff\" always;' &gt;&gt; /etc/nginx/conf.d/security.conf &amp;&amp; \\\n    echo 'add_header X-XSS-Protection \"1; mode=block\" always;' &gt;&gt; /etc/nginx/conf.d/security.conf\n\nEXPOSE 80\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>"},{"location":"DEPLOYMENT/#deployment-commands","title":"Deployment Commands","text":"<pre><code># Build and deploy\ndocker-compose -f docker-compose.prod.yml build\ndocker-compose -f docker-compose.prod.yml up -d\n\n# Run migrations\ndocker-compose -f docker-compose.prod.yml exec backend alembic upgrade head\n\n# Scale services\ndocker-compose -f docker-compose.prod.yml up -d --scale backend=3\n\n# View logs\ndocker-compose -f docker-compose.prod.yml logs -f backend\n\n# Backup database\ndocker-compose -f docker-compose.prod.yml exec db pg_dump -U postgres auraconnect &gt; backup.sql\n</code></pre>"},{"location":"DEPLOYMENT/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"DEPLOYMENT/#kubernetes-architecture","title":"Kubernetes Architecture","text":"<pre><code># k8s/namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: auraconnect\n</code></pre>"},{"location":"DEPLOYMENT/#backend-deployment","title":"Backend Deployment","text":"<pre><code># k8s/backend-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend\n  namespace: auraconnect\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n      - name: backend\n        image: auraconnect/backend:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: ENVIRONMENT\n          value: \"production\"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: database-url\n        - name: JWT_SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: jwt-secret\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: backend-service\n  namespace: auraconnect\nspec:\n  selector:\n    app: backend\n  ports:\n  - port: 80\n    targetPort: 8000\n  type: ClusterIP\n</code></pre>"},{"location":"DEPLOYMENT/#database-statefulset","title":"Database StatefulSet","text":"<pre><code># k8s/postgres-statefulset.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: postgres\n  namespace: auraconnect\nspec:\n  serviceName: postgres\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:14-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: auraconnect\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: username\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: password\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n  volumeClaimTemplates:\n  - metadata:\n      name: postgres-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      resources:\n        requests:\n          storage: 20Gi\n</code></pre>"},{"location":"DEPLOYMENT/#ingress-configuration","title":"Ingress Configuration","text":"<pre><code># k8s/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: auraconnect-ingress\n  namespace: auraconnect\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    nginx.ingress.kubernetes.io/rate-limit: \"100\"\nspec:\n  tls:\n  - hosts:\n    - api.auraconnect.com\n    - app.auraconnect.com\n    secretName: auraconnect-tls\n  rules:\n  - host: api.auraconnect.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: backend-service\n            port:\n              number: 80\n  - host: app.auraconnect.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: frontend-service\n            port:\n              number: 80\n</code></pre>"},{"location":"DEPLOYMENT/#horizontal-pod-autoscaler","title":"Horizontal Pod Autoscaler","text":"<pre><code># k8s/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: backend-hpa\n  namespace: auraconnect\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: backend\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre>"},{"location":"DEPLOYMENT/#deploy-to-kubernetes","title":"Deploy to Kubernetes","text":"<pre><code># Create namespace\nkubectl apply -f k8s/namespace.yaml\n\n# Create secrets\nkubectl create secret generic app-secrets \\\n  --from-literal=database-url=$DATABASE_URL \\\n  --from-literal=jwt-secret=$JWT_SECRET_KEY \\\n  -n auraconnect\n\n# Deploy all resources\nkubectl apply -f k8s/\n\n# Check deployment status\nkubectl get all -n auraconnect\n\n# View logs\nkubectl logs -f deployment/backend -n auraconnect\n\n# Scale deployment\nkubectl scale deployment backend --replicas=5 -n auraconnect\n</code></pre>"},{"location":"DEPLOYMENT/#aws-deployment","title":"AWS Deployment","text":""},{"location":"DEPLOYMENT/#aws-architecture","title":"AWS Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   CloudFront    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   ALB (HTTPS)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   ECS Fargate   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Backend  \u2502  \u2502\n\u2502  \u2502  Service  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      RDS        \u2502\n\u2502   PostgreSQL    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"DEPLOYMENT/#terraform-configuration","title":"Terraform Configuration","text":"<pre><code># terraform/main.tf\nprovider \"aws\" {\n  region = var.aws_region\n}\n\n# VPC\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n\n  name = \"auraconnect-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  azs             = [\"${var.aws_region}a\", \"${var.aws_region}b\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\"]\n\n  enable_nat_gateway = true\n  enable_vpn_gateway = true\n\n  tags = {\n    Environment = \"production\"\n  }\n}\n\n# RDS PostgreSQL\nresource \"aws_db_instance\" \"postgres\" {\n  identifier = \"auraconnect-db\"\n\n  engine         = \"postgres\"\n  engine_version = \"14.7\"\n  instance_class = \"db.t3.medium\"\n\n  allocated_storage     = 100\n  storage_encrypted     = true\n  storage_type         = \"gp3\"\n\n  db_name  = \"auraconnect\"\n  username = var.db_username\n  password = var.db_password\n\n  vpc_security_group_ids = [aws_security_group.rds.id]\n  db_subnet_group_name   = aws_db_subnet_group.main.name\n\n  backup_retention_period = 30\n  backup_window          = \"03:00-04:00\"\n  maintenance_window     = \"sun:04:00-sun:05:00\"\n\n  multi_az               = true\n  deletion_protection    = true\n\n  tags = {\n    Name        = \"auraconnect-db\"\n    Environment = \"production\"\n  }\n}\n\n# ECS Cluster\nresource \"aws_ecs_cluster\" \"main\" {\n  name = \"auraconnect-cluster\"\n\n  setting {\n    name  = \"containerInsights\"\n    value = \"enabled\"\n  }\n}\n\n# ECS Task Definition\nresource \"aws_ecs_task_definition\" \"backend\" {\n  family                   = \"auraconnect-backend\"\n  network_mode             = \"awsvpc\"\n  requires_compatibilities = [\"FARGATE\"]\n  cpu                      = \"1024\"\n  memory                   = \"2048\"\n\n  container_definitions = jsonencode([\n    {\n      name  = \"backend\"\n      image = \"${aws_ecr_repository.backend.repository_url}:latest\"\n\n      portMappings = [\n        {\n          containerPort = 8000\n          protocol      = \"tcp\"\n        }\n      ]\n\n      environment = [\n        {\n          name  = \"ENVIRONMENT\"\n          value = \"production\"\n        }\n      ]\n\n      secrets = [\n        {\n          name      = \"DATABASE_URL\"\n          valueFrom = aws_secretsmanager_secret.db_url.arn\n        },\n        {\n          name      = \"JWT_SECRET_KEY\"\n          valueFrom = aws_secretsmanager_secret.jwt_secret.arn\n        }\n      ]\n\n      logConfiguration = {\n        logDriver = \"awslogs\"\n        options = {\n          \"awslogs-group\"         = aws_cloudwatch_log_group.backend.name\n          \"awslogs-region\"        = var.aws_region\n          \"awslogs-stream-prefix\" = \"backend\"\n        }\n      }\n    }\n  ])\n}\n\n# ECS Service\nresource \"aws_ecs_service\" \"backend\" {\n  name            = \"auraconnect-backend\"\n  cluster         = aws_ecs_cluster.main.id\n  task_definition = aws_ecs_task_definition.backend.arn\n  desired_count   = 3\n  launch_type     = \"FARGATE\"\n\n  network_configuration {\n    subnets         = module.vpc.private_subnets\n    security_groups = [aws_security_group.backend.id]\n  }\n\n  load_balancer {\n    target_group_arn = aws_lb_target_group.backend.arn\n    container_name   = \"backend\"\n    container_port   = 8000\n  }\n\n  health_check_grace_period_seconds = 60\n}\n\n# Application Load Balancer\nresource \"aws_lb\" \"main\" {\n  name               = \"auraconnect-alb\"\n  internal           = false\n  load_balancer_type = \"application\"\n  security_groups    = [aws_security_group.alb.id]\n  subnets           = module.vpc.public_subnets\n\n  enable_deletion_protection = true\n  enable_http2              = true\n\n  tags = {\n    Name        = \"auraconnect-alb\"\n    Environment = \"production\"\n  }\n}\n</code></pre>"},{"location":"DEPLOYMENT/#aws-deployment-script","title":"AWS Deployment Script","text":"<pre><code>#!/bin/bash\n# deploy-aws.sh\n\n# Build and push Docker image\naws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY\ndocker build -t auraconnect-backend ./backend\ndocker tag auraconnect-backend:latest $ECR_REPOSITORY:latest\ndocker push $ECR_REPOSITORY:latest\n\n# Update ECS service\naws ecs update-service \\\n  --cluster auraconnect-cluster \\\n  --service auraconnect-backend \\\n  --force-new-deployment\n\n# Run database migrations\naws ecs run-task \\\n  --cluster auraconnect-cluster \\\n  --task-definition auraconnect-migration \\\n  --network-configuration \"awsvpcConfiguration={subnets=[$PRIVATE_SUBNET_IDS],securityGroups=[$SECURITY_GROUP_ID]}\"\n</code></pre>"},{"location":"DEPLOYMENT/#railway-deployment","title":"Railway Deployment","text":""},{"location":"DEPLOYMENT/#railway-configuration","title":"Railway Configuration","text":"<pre><code># railway.toml\n[build]\nbuilder = \"DOCKERFILE\"\ndockerfilePath = \"./backend/Dockerfile.prod\"\n\n[deploy]\nstartCommand = \"gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:$PORT\"\nhealthcheckPath = \"/health\"\nhealthcheckTimeout = 30\nrestartPolicyType = \"ON_FAILURE\"\nrestartPolicyMaxRetries = 3\n\n[environments.production]\nENVIRONMENT = \"production\"\n</code></pre>"},{"location":"DEPLOYMENT/#railway-deployment-steps","title":"Railway Deployment Steps","text":"<pre><code># Install Railway CLI\nnpm install -g @railway/cli\n\n# Login to Railway\nrailway login\n\n# Initialize project\nrailway init\n\n# Link to GitHub repo\nrailway link\n\n# Add PostgreSQL plugin\nrailway add postgresql\n\n# Add Redis plugin\nrailway add redis\n\n# Set environment variables\nrailway variables set JWT_SECRET_KEY=$JWT_SECRET_KEY\nrailway variables set STRIPE_API_KEY=$STRIPE_API_KEY\n\n# Deploy\nrailway up\n\n# Run migrations\nrailway run alembic upgrade head\n\n# View logs\nrailway logs\n</code></pre>"},{"location":"DEPLOYMENT/#database-migration-strategy","title":"Database Migration Strategy","text":""},{"location":"DEPLOYMENT/#safe-migration-process","title":"Safe Migration Process","text":"<pre><code># scripts/safe_migrate.py\nimport sys\nimport time\nfrom alembic import command\nfrom alembic.config import Config\nfrom sqlalchemy import create_engine, text\n\ndef safe_migrate():\n    \"\"\"Perform safe database migration with backup\"\"\"\n\n    # 1. Create backup\n    print(\"Creating database backup...\")\n    engine = create_engine(DATABASE_URL)\n\n    with engine.connect() as conn:\n        conn.execute(text(f\"\"\"\n            SELECT pg_terminate_backend(pid)\n            FROM pg_stat_activity\n            WHERE datname = 'auraconnect'\n            AND pid &lt;&gt; pg_backend_pid()\n        \"\"\"))\n\n        backup_name = f\"backup_{int(time.time())}.sql\"\n        os.system(f\"pg_dump {DATABASE_URL} &gt; backups/{backup_name}\")\n\n    # 2. Run migration\n    print(\"Running migrations...\")\n    alembic_cfg = Config(\"alembic.ini\")\n\n    try:\n        command.upgrade(alembic_cfg, \"head\")\n        print(\"Migration completed successfully!\")\n    except Exception as e:\n        print(f\"Migration failed: {e}\")\n        print(f\"Restore backup with: psql {DATABASE_URL} &lt; backups/{backup_name}\")\n        sys.exit(1)\n\n    # 3. Verify migration\n    print(\"Verifying migration...\")\n    with engine.connect() as conn:\n        result = conn.execute(text(\"SELECT version_num FROM alembic_version\"))\n        version = result.scalar()\n        print(f\"Current database version: {version}\")\n\nif __name__ == \"__main__\":\n    safe_migrate()\n</code></pre>"},{"location":"DEPLOYMENT/#zero-downtime-migration","title":"Zero-Downtime Migration","text":"<pre><code># Blue-Green deployment for migrations\n\n# 1. Create new database\ncreatedb auraconnect_new\n\n# 2. Restore from production\npg_dump auraconnect | psql auraconnect_new\n\n# 3. Run migrations on new database\nDATABASE_URL=postgresql://localhost/auraconnect_new alembic upgrade head\n\n# 4. Switch application to new database\n# Update environment variable and restart services\n\n# 5. Keep old database for rollback\n# After verification, drop old database\n</code></pre>"},{"location":"DEPLOYMENT/#environment-configuration","title":"Environment Configuration","text":""},{"location":"DEPLOYMENT/#production-environment-variables","title":"Production Environment Variables","text":"<pre><code># .env.production\n# Core Settings\nENVIRONMENT=production\nDEBUG=False\nLOG_LEVEL=INFO\n\n# Security\nSECRET_KEY=&lt;generate-with-openssl-rand-hex-32&gt;\nJWT_SECRET_KEY=&lt;generate-with-openssl-rand-hex-32&gt;\nJWT_ALGORITHM=HS256\nALLOWED_HOSTS=api.auraconnect.com,app.auraconnect.com\n\n# Database\nDATABASE_URL=postgresql://user:pass@rds.amazonaws.com:5432/auraconnect\nDATABASE_POOL_SIZE=50\nDATABASE_MAX_OVERFLOW=100\nDATABASE_POOL_TIMEOUT=30\n\n# Redis\nREDIS_URL=redis://:&lt;password&gt;@redis.auraconnect.com:6379/0\nREDIS_MAX_CONNECTIONS=100\n\n# Email\nEMAIL_HOST=smtp.sendgrid.net\nEMAIL_PORT=587\nEMAIL_HOST_USER=apikey\nEMAIL_HOST_PASSWORD=&lt;sendgrid-api-key&gt;\nEMAIL_USE_TLS=True\nDEFAULT_FROM_EMAIL=noreply@auraconnect.com\n\n# Storage\nAWS_ACCESS_KEY_ID=&lt;aws-access-key&gt;\nAWS_SECRET_ACCESS_KEY=&lt;aws-secret-key&gt;\nAWS_STORAGE_BUCKET_NAME=auraconnect-assets\nAWS_S3_REGION_NAME=us-east-1\n\n# Monitoring\nSENTRY_DSN=https://&lt;key&gt;@sentry.io/&lt;project&gt;\nNEW_RELIC_LICENSE_KEY=&lt;new-relic-key&gt;\n\n# Feature Flags\nENABLE_ANALYTICS=True\nENABLE_AI_RECOMMENDATIONS=True\nMAINTENANCE_MODE=False\n</code></pre>"},{"location":"DEPLOYMENT/#secrets-management","title":"Secrets Management","text":"<pre><code># core/secrets.py\nimport boto3\nfrom functools import lru_cache\n\nclass SecretsManager:\n    def __init__(self):\n        self.client = boto3.client('secretsmanager')\n\n    @lru_cache(maxsize=128)\n    def get_secret(self, secret_name: str) -&gt; str:\n        \"\"\"Retrieve secret from AWS Secrets Manager\"\"\"\n        try:\n            response = self.client.get_secret_value(SecretId=secret_name)\n            return response['SecretString']\n        except Exception as e:\n            logger.error(f\"Failed to retrieve secret {secret_name}: {e}\")\n            raise\n\nsecrets_manager = SecretsManager()\n\n# Usage\nDATABASE_URL = secrets_manager.get_secret(\"auraconnect/database-url\")\n</code></pre>"},{"location":"DEPLOYMENT/#monitoring-logging","title":"Monitoring &amp; Logging","text":""},{"location":"DEPLOYMENT/#logging-configuration","title":"Logging Configuration","text":"<pre><code># core/logging_config.py\nimport logging\nimport json\nfrom pythonjsonlogger import jsonlogger\n\ndef setup_logging():\n    \"\"\"Configure structured logging for production\"\"\"\n\n    # JSON formatter\n    formatter = jsonlogger.JsonFormatter(\n        '%(timestamp)s %(level)s %(name)s %(message)s',\n        timestamp=True\n    )\n\n    # Console handler\n    console_handler = logging.StreamHandler()\n    console_handler.setFormatter(formatter)\n\n    # File handler with rotation\n    from logging.handlers import RotatingFileHandler\n    file_handler = RotatingFileHandler(\n        'logs/auraconnect.log',\n        maxBytes=10485760,  # 10MB\n        backupCount=5\n    )\n    file_handler.setFormatter(formatter)\n\n    # Root logger\n    root_logger = logging.getLogger()\n    root_logger.setLevel(logging.INFO)\n    root_logger.addHandler(console_handler)\n    root_logger.addHandler(file_handler)\n\n    # Suppress noisy libraries\n    logging.getLogger('urllib3').setLevel(logging.WARNING)\n    logging.getLogger('botocore').setLevel(logging.WARNING)\n</code></pre>"},{"location":"DEPLOYMENT/#health-checks","title":"Health Checks","text":"<pre><code># core/health.py\nfrom fastapi import APIRouter, Response, status\nfrom sqlalchemy import text\nimport redis\n\nrouter = APIRouter()\n\n@router.get(\"/health\")\nasync def health_check():\n    \"\"\"Basic health check\"\"\"\n    return {\"status\": \"healthy\"}\n\n@router.get(\"/ready\")\nasync def readiness_check(response: Response):\n    \"\"\"Detailed readiness check\"\"\"\n    checks = {\n        \"database\": False,\n        \"redis\": False,\n        \"migrations\": False\n    }\n\n    # Check database\n    try:\n        db.execute(text(\"SELECT 1\"))\n        checks[\"database\"] = True\n    except:\n        pass\n\n    # Check Redis\n    try:\n        r = redis.from_url(settings.REDIS_URL)\n        r.ping()\n        checks[\"redis\"] = True\n    except:\n        pass\n\n    # Check migrations\n    try:\n        result = db.execute(text(\"SELECT version_num FROM alembic_version\"))\n        if result.scalar():\n            checks[\"migrations\"] = True\n    except:\n        pass\n\n    # Set response status\n    if not all(checks.values()):\n        response.status_code = status.HTTP_503_SERVICE_UNAVAILABLE\n\n    return {\n        \"status\": \"ready\" if all(checks.values()) else \"not ready\",\n        \"checks\": checks\n    }\n</code></pre>"},{"location":"DEPLOYMENT/#monitoring-stack","title":"Monitoring Stack","text":"<pre><code># docker-compose.monitoring.yml\nversion: '3.8'\n\nservices:\n  prometheus:\n    image: prom/prometheus:latest\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    ports:\n      - \"9090:9090\"\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n\n  grafana:\n    image: grafana/grafana:latest\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards\n    ports:\n      - \"3001:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}\n\n  loki:\n    image: grafana/loki:latest\n    ports:\n      - \"3100:3100\"\n    volumes:\n      - ./loki-config.yaml:/etc/loki/local-config.yaml\n      - loki_data:/loki\n\n  promtail:\n    image: grafana/promtail:latest\n    volumes:\n      - /var/log:/var/log\n      - ./promtail-config.yaml:/etc/promtail/config.yml\n    command: -config.file=/etc/promtail/config.yml\n\nvolumes:\n  prometheus_data:\n  grafana_data:\n  loki_data:\n</code></pre>"},{"location":"DEPLOYMENT/#rollback-procedures","title":"Rollback Procedures","text":""},{"location":"DEPLOYMENT/#automated-rollback","title":"Automated Rollback","text":"<pre><code>#!/bin/bash\n# rollback.sh\n\nDEPLOYMENT_ID=$1\nPREVIOUS_VERSION=$2\n\necho \"Starting rollback to version $PREVIOUS_VERSION...\"\n\n# 1. Tag current version as failed\ndocker tag auraconnect:latest auraconnect:failed-$DEPLOYMENT_ID\n\n# 2. Restore previous version\ndocker tag auraconnect:$PREVIOUS_VERSION auraconnect:latest\n\n# 3. Update services\ndocker-compose -f docker-compose.prod.yml up -d --no-deps backend\n\n# 4. Verify health\nsleep 30\nHEALTH_CHECK=$(curl -s http://localhost:8000/health | jq -r .status)\n\nif [ \"$HEALTH_CHECK\" != \"healthy\" ]; then\n    echo \"Rollback failed! Health check not passing\"\n    exit 1\nfi\n\necho \"Rollback completed successfully\"\n\n# 5. Optional: Rollback database if needed\n# psql $DATABASE_URL &lt; backups/backup_$PREVIOUS_VERSION.sql\n</code></pre>"},{"location":"DEPLOYMENT/#database-rollback","title":"Database Rollback","text":"<pre><code># scripts/db_rollback.py\nfrom alembic import command\nfrom alembic.config import Config\nimport sys\n\ndef rollback_migration(steps=1):\n    \"\"\"Rollback database migration by N steps\"\"\"\n\n    alembic_cfg = Config(\"alembic.ini\")\n\n    try:\n        # Downgrade by N steps\n        command.downgrade(alembic_cfg, f\"-{steps}\")\n        print(f\"Successfully rolled back {steps} migration(s)\")\n    except Exception as e:\n        print(f\"Rollback failed: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    steps = int(sys.argv[1]) if len(sys.argv) &gt; 1 else 1\n    rollback_migration(steps)\n</code></pre>"},{"location":"DEPLOYMENT/#production-best-practices","title":"Production Best Practices","text":""},{"location":"DEPLOYMENT/#1-security-hardening","title":"1. Security Hardening","text":"<pre><code># nginx/security.conf\n# Security headers\nadd_header X-Frame-Options \"SAMEORIGIN\" always;\nadd_header X-Content-Type-Options \"nosniff\" always;\nadd_header X-XSS-Protection \"1; mode=block\" always;\nadd_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\nadd_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';\" always;\n\n# Hide nginx version\nserver_tokens off;\n\n# Limit request size\nclient_max_body_size 10M;\n\n# Rate limiting\nlimit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\nlimit_req zone=api burst=20 nodelay;\n</code></pre>"},{"location":"DEPLOYMENT/#2-performance-optimization","title":"2. Performance Optimization","text":"<pre><code># Caching configuration\nfrom functools import lru_cache\nimport redis\nimport pickle\n\nredis_client = redis.from_url(settings.REDIS_URL)\n\ndef cache_result(ttl=3600):\n    \"\"\"Cache function results in Redis\"\"\"\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            # Create cache key\n            cache_key = f\"{func.__name__}:{str(args)}:{str(kwargs)}\"\n\n            # Try to get from cache\n            cached = redis_client.get(cache_key)\n            if cached:\n                return pickle.loads(cached)\n\n            # Execute function\n            result = func(*args, **kwargs)\n\n            # Store in cache\n            redis_client.setex(\n                cache_key,\n                ttl,\n                pickle.dumps(result)\n            )\n\n            return result\n        return wrapper\n    return decorator\n\n# Usage\n@cache_result(ttl=300)\ndef get_menu_items(restaurant_id: int):\n    return db.query(MenuItem).filter_by(restaurant_id=restaurant_id).all()\n</code></pre>"},{"location":"DEPLOYMENT/#3-backup-strategy","title":"3. Backup Strategy","text":"<pre><code>#!/bin/bash\n# backup.sh\n\n# Configuration\nBACKUP_DIR=\"/backups\"\nS3_BUCKET=\"auraconnect-backups\"\nRETENTION_DAYS=30\n\n# Create backup\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/auraconnect_$TIMESTAMP.sql\"\n\n# Dump database\npg_dump $DATABASE_URL &gt; $BACKUP_FILE\n\n# Compress\ngzip $BACKUP_FILE\n\n# Upload to S3\naws s3 cp \"$BACKUP_FILE.gz\" \"s3://$S3_BUCKET/postgres/\"\n\n# Clean old backups\nfind $BACKUP_DIR -name \"*.sql.gz\" -mtime +$RETENTION_DAYS -delete\n\n# Clean old S3 backups\naws s3 ls \"s3://$S3_BUCKET/postgres/\" | \\\n  awk '{print $4}' | \\\n  while read -r file; do\n    if [[ $(aws s3api head-object --bucket $S3_BUCKET --key \"postgres/$file\" | \\\n      jq -r '.LastModified' | \\\n      xargs -I {} date -d {} +%s) -lt $(date -d \"$RETENTION_DAYS days ago\" +%s) ]]; then\n      aws s3 rm \"s3://$S3_BUCKET/postgres/$file\"\n    fi\n  done\n</code></pre>"},{"location":"DEPLOYMENT/#4-deployment-checklist","title":"4. Deployment Checklist","text":"<pre><code>## Pre-Deployment\n- [ ] All tests passing\n- [ ] Security scan completed\n- [ ] Performance benchmarks met\n- [ ] Documentation updated\n- [ ] Backup created\n- [ ] Rollback plan ready\n\n## Deployment\n- [ ] Tag release version\n- [ ] Deploy to staging\n- [ ] Run smoke tests\n- [ ] Deploy to production (canary/blue-green)\n- [ ] Monitor metrics\n\n## Post-Deployment\n- [ ] Verify all services healthy\n- [ ] Check error rates\n- [ ] Monitor performance metrics\n- [ ] Test critical user flows\n- [ ] Update status page\n</code></pre> <p>For deployment support, contact the DevOps team at devops@auratechwave.com</p>"},{"location":"SECURITY/","title":"Security Documentation - AuraConnect","text":"<p>Version: 1.0.0 | Last Updated: January 2025</p>"},{"location":"SECURITY/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Security Overview</li> <li>Authentication &amp; Authorization</li> <li>Data Encryption</li> <li>API Security</li> <li>Payment Security (PCI Compliance)</li> <li>OWASP Top 10 Mitigation</li> <li>Security Best Practices</li> <li>Incident Response</li> <li>Security Checklist</li> <li>Vulnerability Reporting</li> </ol>"},{"location":"SECURITY/#security-overview","title":"Security Overview","text":"<p>AuraConnect implements multiple layers of security to protect sensitive restaurant data, customer information, and financial transactions. This document outlines our security architecture and best practices.</p>"},{"location":"SECURITY/#key-security-features","title":"Key Security Features","text":"<ul> <li>JWT-based authentication with refresh token rotation</li> <li>Role-Based Access Control (RBAC) with granular permissions</li> <li>End-to-end encryption for sensitive data</li> <li>PCI DSS compliance for payment processing</li> <li>OWASP security measures implementation</li> <li>Rate limiting and DDoS protection</li> <li>Comprehensive audit logging</li> </ul>"},{"location":"SECURITY/#authentication-authorization","title":"Authentication &amp; Authorization","text":""},{"location":"SECURITY/#jwt-implementation","title":"JWT Implementation","text":"<pre><code># JWT Configuration\nJWT_ALGORITHM = \"HS256\"\nJWT_ACCESS_TOKEN_EXPIRE_MINUTES = 30\nJWT_REFRESH_TOKEN_EXPIRE_DAYS = 7\n\n# Token Structure\n{\n  \"sub\": \"user_id\",\n  \"email\": \"user@example.com\",\n  \"roles\": [\"manager\", \"staff\"],\n  \"tenant_id\": 1,\n  \"exp\": 1234567890,\n  \"iat\": 1234567890,\n  \"jti\": \"unique_token_id\"\n}\n</code></pre>"},{"location":"SECURITY/#refresh-token-rotation","title":"Refresh Token Rotation","text":"<ol> <li>Single-use refresh tokens: Each refresh token can only be used once</li> <li>Token family tracking: Detects and invalidates compromised token families</li> <li>Automatic revocation: Suspicious activity triggers token revocation</li> </ol>"},{"location":"SECURITY/#rbac-implementation","title":"RBAC Implementation","text":"<pre><code># Permission Structure\npermissions = {\n    \"orders.view\": \"View orders\",\n    \"orders.create\": \"Create orders\",\n    \"orders.update\": \"Update orders\",\n    \"orders.delete\": \"Delete orders\",\n    \"staff.manage\": \"Manage staff members\",\n    \"payroll.process\": \"Process payroll\",\n    \"reports.financial\": \"View financial reports\"\n}\n\n# Role Hierarchy\nroles = {\n    \"super_admin\": [\"*\"],  # All permissions\n    \"restaurant_owner\": [\"orders.*\", \"staff.*\", \"menu.*\", \"reports.*\"],\n    \"manager\": [\"orders.*\", \"staff.view\", \"menu.*\", \"reports.basic\"],\n    \"staff\": [\"orders.create\", \"orders.view\", \"menu.view\"]\n}\n</code></pre>"},{"location":"SECURITY/#multi-factor-authentication-mfa","title":"Multi-Factor Authentication (MFA)","text":"<ul> <li>TOTP support: Time-based One-Time Passwords</li> <li>SMS verification: For critical operations</li> <li>Email verification: For account changes</li> <li>Backup codes: For account recovery</li> </ul>"},{"location":"SECURITY/#data-encryption","title":"Data Encryption","text":""},{"location":"SECURITY/#encryption-at-rest","title":"Encryption at Rest","text":"<pre><code># Database Encryption\n- PostgreSQL: Transparent Data Encryption (TDE)\n- Column-level encryption for PII\n- Encrypted backups with AES-256\n\n# File Storage\n- AWS S3: Server-Side Encryption (SSE-S3)\n- Local files: AES-256-GCM encryption\n</code></pre>"},{"location":"SECURITY/#encryption-in-transit","title":"Encryption in Transit","text":"<pre><code># TLS Configuration\n- Minimum TLS 1.2\n- Strong cipher suites only\n- HSTS enabled\n- Certificate pinning for mobile apps\n</code></pre>"},{"location":"SECURITY/#sensitive-data-handling","title":"Sensitive Data Handling","text":"<pre><code># PII Fields Encrypted\n- customer.ssn\n- staff.bank_account\n- payment.card_number\n- user.password (Argon2id hashing)\n\n# Encryption Library\nfrom cryptography.fernet import Fernet\n\nclass EncryptionService:\n    def encrypt_field(self, data: str) -&gt; str:\n        return self.cipher.encrypt(data.encode())\n\n    def decrypt_field(self, encrypted: str) -&gt; str:\n        return self.cipher.decrypt(encrypted).decode()\n</code></pre>"},{"location":"SECURITY/#api-security","title":"API Security","text":""},{"location":"SECURITY/#rate-limiting","title":"Rate Limiting","text":"<pre><code># Rate Limit Configuration\nRATE_LIMITS = {\n    \"default\": \"100/minute\",\n    \"auth\": \"5/minute\",\n    \"payment\": \"20/minute\",\n    \"report\": \"10/hour\"\n}\n\n# Implementation\nfrom fastapi_limiter import FastAPILimiter\n\n@app.get(\"/api/orders\")\n@limiter.limit(\"100/minute\")\nasync def get_orders():\n    pass\n</code></pre>"},{"location":"SECURITY/#input-validation","title":"Input Validation","text":"<pre><code># Pydantic Models for Validation\nclass OrderCreate(BaseModel):\n    items: List[OrderItem]\n    customer_id: conint(gt=0)\n    payment_method: Literal[\"cash\", \"card\", \"digital\"]\n\n    @validator('items')\n    def validate_items(cls, v):\n        if not v:\n            raise ValueError('Order must have at least one item')\n        return v\n</code></pre>"},{"location":"SECURITY/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<pre><code># Using SQLAlchemy ORM (Safe)\norders = db.query(Order).filter(\n    Order.restaurant_id == restaurant_id,\n    Order.status == status\n).all()\n\n# Parameterized Queries (Safe)\nquery = text(\"\"\"\n    SELECT * FROM orders \n    WHERE restaurant_id = :restaurant_id \n    AND status = :status\n\"\"\")\nresult = db.execute(query, {\n    \"restaurant_id\": restaurant_id,\n    \"status\": status\n})\n</code></pre>"},{"location":"SECURITY/#xss-prevention","title":"XSS Prevention","text":"<pre><code>// React automatically escapes content\nconst OrderItem = ({ description }) =&gt; (\n    &lt;div&gt;{description}&lt;/div&gt;  // Safe\n);\n\n// For HTML content, use DOMPurify\nimport DOMPurify from 'dompurify';\n\nconst SafeHTML = ({ html }) =&gt; (\n    &lt;div dangerouslySetInnerHTML={{\n        __html: DOMPurify.sanitize(html)\n    }} /&gt;\n);\n</code></pre>"},{"location":"SECURITY/#payment-security-pci-compliance","title":"Payment Security (PCI Compliance)","text":""},{"location":"SECURITY/#pci-dss-requirements","title":"PCI DSS Requirements","text":"<ol> <li>Never store sensitive cardholder data</li> <li>No credit card numbers in database</li> <li>No CVV storage</li> <li> <p>Use tokenization (Stripe, Square)</p> </li> <li> <p>Secure payment integration <pre><code>// Frontend - Use Stripe Elements\nconst stripe = Stripe(STRIPE_PUBLISHABLE_KEY);\nconst elements = stripe.elements();\n\n// Never send card details to your server\nconst { token } = await stripe.createToken(card);\n// Send only the token to backend\n</code></pre></p> </li> <li> <p>Backend payment processing <pre><code># Process payment with token only\nimport stripe\n\ndef process_payment(token: str, amount: int):\n    charge = stripe.Charge.create(\n        amount=amount,\n        currency=\"usd\",\n        source=token,\n        description=\"Order payment\"\n    )\n    # Store only charge ID, not card details\n    return charge.id\n</code></pre></p> </li> </ol>"},{"location":"SECURITY/#secure-payment-workflow","title":"Secure Payment Workflow","text":"<pre><code>sequenceDiagram\n    Customer-&gt;&gt;Frontend: Enter card details\n    Frontend-&gt;&gt;Stripe: Create payment token\n    Stripe-&gt;&gt;Frontend: Return token\n    Frontend-&gt;&gt;Backend: Send token + order\n    Backend-&gt;&gt;Stripe: Process payment\n    Stripe-&gt;&gt;Backend: Payment confirmation\n    Backend-&gt;&gt;Database: Store charge ID only\n    Backend-&gt;&gt;Frontend: Order confirmation</code></pre>"},{"location":"SECURITY/#owasp-top-10-mitigation","title":"OWASP Top 10 Mitigation","text":""},{"location":"SECURITY/#1-injection","title":"1. Injection","text":"<ul> <li>Mitigation: ORM usage, parameterized queries, input validation</li> <li>Implementation: SQLAlchemy ORM, Pydantic validation</li> </ul>"},{"location":"SECURITY/#2-broken-authentication","title":"2. Broken Authentication","text":"<ul> <li>Mitigation: Strong password policy, MFA, session management</li> <li>Implementation: Argon2 hashing, JWT with expiry, refresh token rotation</li> </ul>"},{"location":"SECURITY/#3-sensitive-data-exposure","title":"3. Sensitive Data Exposure","text":"<ul> <li>Mitigation: Encryption at rest/transit, data minimization</li> <li>Implementation: TLS 1.2+, AES-256 encryption, PII masking</li> </ul>"},{"location":"SECURITY/#4-xml-external-entities-xxe","title":"4. XML External Entities (XXE)","text":"<ul> <li>Mitigation: Disable XML parsing, use JSON</li> <li>Implementation: JSON-only APIs, no XML processing</li> </ul>"},{"location":"SECURITY/#5-broken-access-control","title":"5. Broken Access Control","text":"<ul> <li>Mitigation: RBAC, resource ownership checks</li> <li>Implementation: Permission decorators, tenant isolation</li> </ul>"},{"location":"SECURITY/#6-security-misconfiguration","title":"6. Security Misconfiguration","text":"<ul> <li>Mitigation: Secure defaults, automated security scanning</li> <li>Implementation: Environment-specific configs, security headers</li> </ul>"},{"location":"SECURITY/#7-cross-site-scripting-xss","title":"7. Cross-Site Scripting (XSS)","text":"<ul> <li>Mitigation: Content Security Policy, output encoding</li> <li>Implementation: React auto-escaping, DOMPurify for HTML</li> </ul>"},{"location":"SECURITY/#8-insecure-deserialization","title":"8. Insecure Deserialization","text":"<ul> <li>Mitigation: JSON Schema validation, type checking</li> <li>Implementation: Pydantic models, strict typing</li> </ul>"},{"location":"SECURITY/#9-using-components-with-known-vulnerabilities","title":"9. Using Components with Known Vulnerabilities","text":"<ul> <li>Mitigation: Dependency scanning, regular updates</li> <li>Implementation: Dependabot, npm audit, pip-audit</li> </ul>"},{"location":"SECURITY/#10-insufficient-logging-monitoring","title":"10. Insufficient Logging &amp; Monitoring","text":"<ul> <li>Mitigation: Comprehensive audit logs, alerting</li> <li>Implementation: Structured logging, Sentry integration</li> </ul>"},{"location":"SECURITY/#security-best-practices","title":"Security Best Practices","text":""},{"location":"SECURITY/#development-practices","title":"Development Practices","text":"<ol> <li>Code Reviews</li> <li>Security-focused review checklist</li> <li>Automated security scanning</li> <li> <p>Peer review for sensitive changes</p> </li> <li> <p>Secure Coding Standards <pre><code># Use secrets management\nfrom core.config import settings\n\n# Bad\nAPI_KEY = \"hardcoded_key\"\n\n# Good\nAPI_KEY = settings.EXTERNAL_API_KEY\n\n# Use environment variables\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\n</code></pre></p> </li> <li> <p>Dependency Management <pre><code># Regular vulnerability scanning\nnpm audit\npip-audit\n\n# Automated updates\ndependabot.yml configuration\n</code></pre></p> </li> </ol>"},{"location":"SECURITY/#infrastructure-security","title":"Infrastructure Security","text":"<ol> <li>Network Security</li> <li>VPC with private subnets</li> <li>Security groups with minimal access</li> <li> <p>WAF for DDoS protection</p> </li> <li> <p>Container Security <pre><code># Use specific versions\nFROM python:3.11-slim\n\n# Run as non-root\nRUN useradd -m appuser\nUSER appuser\n\n# Minimal attack surface\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    --no-install-recommends \\\n    build-essential \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre></p> </li> <li> <p>Secrets Management <pre><code># Kubernetes Secrets\napiVersion: v1\nkind: Secret\nmetadata:\n  name: api-secrets\ntype: Opaque\ndata:\n  database_url: &lt;base64_encoded&gt;\n  jwt_secret: &lt;base64_encoded&gt;\n</code></pre></p> </li> </ol>"},{"location":"SECURITY/#monitoring-alerting","title":"Monitoring &amp; Alerting","text":"<ol> <li>Security Events to Monitor</li> <li>Failed login attempts</li> <li>Permission violations</li> <li>Unusual API usage patterns</li> <li> <p>Data export activities</p> </li> <li> <p>Alerting Rules <pre><code># Alert on suspicious activity\nif failed_login_count &gt; 5:\n    alert(\"Multiple failed login attempts\", user_id)\n\nif api_calls_per_minute &gt; 1000:\n    alert(\"Potential DDoS attack\", ip_address)\n</code></pre></p> </li> </ol>"},{"location":"SECURITY/#incident-response","title":"Incident Response","text":""},{"location":"SECURITY/#response-plan","title":"Response Plan","text":"<ol> <li>Detection</li> <li>Automated alerts</li> <li>Log analysis</li> <li> <p>User reports</p> </li> <li> <p>Containment</p> </li> <li>Isolate affected systems</li> <li>Revoke compromised credentials</li> <li> <p>Block malicious IPs</p> </li> <li> <p>Eradication</p> </li> <li>Remove malicious code</li> <li>Patch vulnerabilities</li> <li> <p>Update security rules</p> </li> <li> <p>Recovery</p> </li> <li>Restore from clean backups</li> <li>Verify system integrity</li> <li> <p>Monitor for recurrence</p> </li> <li> <p>Post-Incident</p> </li> <li>Document lessons learned</li> <li>Update security procedures</li> <li>Communicate with stakeholders</li> </ol>"},{"location":"SECURITY/#contact-information","title":"Contact Information","text":"<pre><code>Security Team:\n  Email: security@auratechwave.com\n  Phone: +1 (555) 123-4567\n  On-Call: security-oncall@auratechwave.com\n\nIncident Response:\n  Critical: incident-critical@auratechwave.com\n  High: incident-high@auratechwave.com\n  Medium: incident-medium@auratechwave.com\n</code></pre>"},{"location":"SECURITY/#security-checklist","title":"Security Checklist","text":""},{"location":"SECURITY/#pre-deployment","title":"Pre-Deployment","text":"<ul> <li> All dependencies updated and scanned</li> <li> Environment variables configured</li> <li> SSL/TLS certificates valid</li> <li> Security headers configured</li> <li> Rate limiting enabled</li> <li> Logging configured</li> <li> Backup strategy tested</li> <li> Incident response plan reviewed</li> </ul>"},{"location":"SECURITY/#regular-audits","title":"Regular Audits","text":"<ul> <li> Weekly: Dependency vulnerability scan</li> <li> Monthly: Access control review</li> <li> Quarterly: Penetration testing</li> <li> Annually: Full security audit</li> </ul>"},{"location":"SECURITY/#configuration-checklist","title":"Configuration Checklist","text":"<pre><code># Security Headers\nSECURITY_HEADERS = {\n    \"X-Frame-Options\": \"DENY\",\n    \"X-Content-Type-Options\": \"nosniff\",\n    \"X-XSS-Protection\": \"1; mode=block\",\n    \"Strict-Transport-Security\": \"max-age=31536000; includeSubDomains\",\n    \"Content-Security-Policy\": \"default-src 'self'\",\n    \"Referrer-Policy\": \"strict-origin-when-cross-origin\"\n}\n\n# CORS Configuration\nCORS_ORIGINS = [\n    \"https://app.auraconnect.com\",\n    \"https://admin.auraconnect.com\"\n]\n\n# Session Configuration\nSESSION_COOKIE_SECURE = True\nSESSION_COOKIE_HTTPONLY = True\nSESSION_COOKIE_SAMESITE = \"Strict\"\n</code></pre>"},{"location":"SECURITY/#vulnerability-reporting","title":"Vulnerability Reporting","text":""},{"location":"SECURITY/#responsible-disclosure","title":"Responsible Disclosure","text":"<p>We take security seriously and appreciate responsible disclosure of vulnerabilities.</p> <p>Report Security Issues: - Email: security@auratechwave.com - PGP Key: Download Public Key</p> <p>Please Include: 1. Description of the vulnerability 2. Steps to reproduce 3. Potential impact 4. Suggested fix (if any)</p> <p>Response Timeline: - Initial response: Within 24 hours - Status update: Within 72 hours - Fix timeline: Based on severity</p> <p>Bug Bounty Program: - Critical: $1,000 - $5,000 - High: $500 - $1,000 - Medium: $100 - $500 - Low: $50 - $100</p>"},{"location":"SECURITY/#security-updates","title":"Security Updates","text":"<p>Subscribe to security updates: - Security mailing list: security-updates@auratechwave.com - RSS feed: https://auraconnect.com/security/feed.xml - Twitter: @AuraConnectSec</p> <p>This security documentation is regularly updated. For the latest version, visit our Security Portal.</p>"},{"location":"TESTING/","title":"Testing Guide - AuraConnect","text":"<p>Version: 1.0.0 | Last Updated: January 2025</p>"},{"location":"TESTING/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Testing Overview</li> <li>Backend Testing</li> <li>Frontend Testing</li> <li>Mobile Testing</li> <li>Integration Testing</li> <li>Performance Testing</li> <li>Security Testing</li> <li>Test Data Management</li> <li>CI/CD Testing</li> <li>Testing Best Practices</li> </ol>"},{"location":"TESTING/#testing-overview","title":"Testing Overview","text":"<p>AuraConnect follows a comprehensive testing strategy to ensure code quality, reliability, and performance across all components.</p>"},{"location":"TESTING/#testing-pyramid","title":"Testing Pyramid","text":"<pre><code>         /\\\n        /  \\    E2E Tests (10%)\n       /    \\   - Critical user flows\n      /      \\  - Payment processes\n     /--------\\ Integration Tests (30%)\n    /          \\- API endpoints\n   /            \\- Database operations\n  /--------------\\Unit Tests (60%)\n /                \\- Business logic\n/                  \\- Utilities\n</code></pre>"},{"location":"TESTING/#test-coverage-goals","title":"Test Coverage Goals","text":"<ul> <li>Overall: 80% minimum</li> <li>Critical paths: 95% minimum</li> <li>New code: 90% minimum</li> </ul>"},{"location":"TESTING/#backend-testing","title":"Backend Testing","text":""},{"location":"TESTING/#setup","title":"Setup","text":"<pre><code># Install test dependencies\ncd backend\npip install -r requirements-test.txt\n\n# Create test database\ncreatedb auraconnect_test\n\n# Set test environment\nexport ENVIRONMENT=test\nexport DATABASE_URL=postgresql://localhost/auraconnect_test\n</code></pre>"},{"location":"TESTING/#running-unit-tests","title":"Running Unit Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=modules --cov-report=html\n\n# Run specific module\npytest modules/orders/tests/\n\n# Run specific test\npytest modules/orders/tests/test_order_service.py::test_create_order\n\n# Run with verbose output\npytest -v\n\n# Run tests in parallel\npytest -n 4\n\n# Run only marked tests\npytest -m \"unit\"\npytest -m \"integration\"\npytest -m \"slow\"\n</code></pre>"},{"location":"TESTING/#writing-backend-tests","title":"Writing Backend Tests","text":""},{"location":"TESTING/#unit-test-example","title":"Unit Test Example","text":"<pre><code># modules/orders/tests/test_order_service.py\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom modules.orders.services import OrderService\nfrom modules.orders.models import Order\n\nclass TestOrderService:\n    @pytest.fixture\n    def order_service(self):\n        return OrderService()\n\n    @pytest.fixture\n    def mock_db(self):\n        with patch('modules.orders.services.get_db') as mock:\n            yield mock\n\n    def test_create_order_success(self, order_service, mock_db):\n        # Arrange\n        order_data = {\n            \"customer_id\": 1,\n            \"items\": [{\"menu_item_id\": 1, \"quantity\": 2}],\n            \"total\": 25.99\n        }\n\n        # Act\n        result = order_service.create_order(order_data)\n\n        # Assert\n        assert result.customer_id == 1\n        assert result.total == 25.99\n        assert mock_db.add.called\n        assert mock_db.commit.called\n\n    def test_create_order_invalid_customer(self, order_service):\n        # Arrange\n        order_data = {\"customer_id\": -1, \"items\": []}\n\n        # Act &amp; Assert\n        with pytest.raises(ValueError, match=\"Invalid customer\"):\n            order_service.create_order(order_data)\n</code></pre>"},{"location":"TESTING/#integration-test-example","title":"Integration Test Example","text":"<pre><code># modules/orders/tests/test_order_api.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom main import app\nfrom core.database import Base, engine\nfrom core.auth import create_access_token\n\nclass TestOrderAPI:\n    @pytest.fixture(scope=\"class\")\n    def client(self):\n        # Setup test database\n        Base.metadata.create_all(bind=engine)\n\n        with TestClient(app) as c:\n            yield c\n\n        # Cleanup\n        Base.metadata.drop_all(bind=engine)\n\n    @pytest.fixture\n    def auth_headers(self):\n        token = create_access_token({\"sub\": \"test@example.com\"})\n        return {\"Authorization\": f\"Bearer {token}\"}\n\n    def test_create_order_endpoint(self, client, auth_headers):\n        # Arrange\n        order_data = {\n            \"customer_id\": 1,\n            \"items\": [\n                {\"menu_item_id\": 1, \"quantity\": 2, \"price\": 12.99}\n            ]\n        }\n\n        # Act\n        response = client.post(\n            \"/api/v1/orders\",\n            json=order_data,\n            headers=auth_headers\n        )\n\n        # Assert\n        assert response.status_code == 201\n        data = response.json()\n        assert data[\"customer_id\"] == 1\n        assert len(data[\"items\"]) == 1\n        assert \"id\" in data\n\n    @pytest.mark.parametrize(\"invalid_data,expected_error\", [\n        ({\"customer_id\": None}, \"customer_id is required\"),\n        ({\"items\": []}, \"items cannot be empty\"),\n        ({\"items\": [{\"quantity\": -1}]}, \"quantity must be positive\")\n    ])\n    def test_create_order_validation(self, client, auth_headers, invalid_data, expected_error):\n        response = client.post(\n            \"/api/v1/orders\",\n            json=invalid_data,\n            headers=auth_headers\n        )\n\n        assert response.status_code == 422\n        assert expected_error in response.json()[\"detail\"][0][\"msg\"]\n</code></pre>"},{"location":"TESTING/#database-testing","title":"Database Testing","text":"<pre><code># conftest.py - Shared test fixtures\nimport pytest\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom core.database import Base\nfrom core.config import settings\n\n@pytest.fixture(scope=\"session\")\ndef test_engine():\n    engine = create_engine(settings.DATABASE_TEST_URL)\n    Base.metadata.create_all(bind=engine)\n    yield engine\n    Base.metadata.drop_all(bind=engine)\n\n@pytest.fixture(scope=\"function\")\ndef test_db(test_engine):\n    SessionLocal = sessionmaker(bind=test_engine)\n    session = SessionLocal()\n\n    yield session\n\n    session.rollback()\n    session.close()\n\n@pytest.fixture\ndef factory():\n    \"\"\"Factory for creating test data\"\"\"\n    from tests.factories import Factory\n    return Factory()\n</code></pre>"},{"location":"TESTING/#mocking-external-services","title":"Mocking External Services","text":"<pre><code># Test with mocked external services\nclass TestPaymentService:\n    @patch('stripe.Charge.create')\n    def test_process_payment(self, mock_stripe):\n        # Arrange\n        mock_stripe.return_value = Mock(\n            id=\"ch_test123\",\n            status=\"succeeded\"\n        )\n\n        # Act\n        result = PaymentService.process_payment(\n            amount=2500,\n            token=\"tok_test123\"\n        )\n\n        # Assert\n        assert result.charge_id == \"ch_test123\"\n        assert result.status == \"succeeded\"\n        mock_stripe.assert_called_once_with(\n            amount=2500,\n            currency=\"usd\",\n            source=\"tok_test123\"\n        )\n</code></pre>"},{"location":"TESTING/#frontend-testing","title":"Frontend Testing","text":""},{"location":"TESTING/#setup_1","title":"Setup","text":"<pre><code># Install dependencies\ncd frontend\nnpm install --save-dev @testing-library/react @testing-library/jest-dom\nnpm install --save-dev @testing-library/user-event jest-environment-jsdom\n\n# Configure Jest\n# jest.config.js\nmodule.exports = {\n  testEnvironment: 'jsdom',\n  setupFilesAfterEnv: ['&lt;rootDir&gt;/src/setupTests.js'],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  }\n};\n</code></pre>"},{"location":"TESTING/#running-frontend-tests","title":"Running Frontend Tests","text":"<pre><code># Run all tests\nnpm test\n\n# Run with coverage\nnpm run test:coverage\n\n# Run in watch mode\nnpm test -- --watch\n\n# Run specific test file\nnpm test OrderForm.test.tsx\n\n# Update snapshots\nnpm test -- -u\n</code></pre>"},{"location":"TESTING/#writing-frontend-tests","title":"Writing Frontend Tests","text":""},{"location":"TESTING/#component-test-example","title":"Component Test Example","text":"<pre><code>// components/orders/OrderForm.test.tsx\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { OrderForm } from './OrderForm';\nimport { OrderService } from '../../services/OrderService';\n\n// Mock the service\njest.mock('../../services/OrderService');\n\ndescribe('OrderForm', () =&gt; {\n  const mockOnSubmit = jest.fn();\n\n  beforeEach(() =&gt; {\n    jest.clearAllMocks();\n  });\n\n  test('renders form fields correctly', () =&gt; {\n    render(&lt;OrderForm onSubmit={mockOnSubmit} /&gt;);\n\n    expect(screen.getByLabelText('Customer')).toBeInTheDocument();\n    expect(screen.getByLabelText('Items')).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: 'Submit Order' })).toBeInTheDocument();\n  });\n\n  test('validates required fields', async () =&gt; {\n    const user = userEvent.setup();\n    render(&lt;OrderForm onSubmit={mockOnSubmit} /&gt;);\n\n    // Try to submit empty form\n    await user.click(screen.getByRole('button', { name: 'Submit Order' }));\n\n    // Check for validation errors\n    expect(screen.getByText('Customer is required')).toBeInTheDocument();\n    expect(screen.getByText('At least one item is required')).toBeInTheDocument();\n    expect(mockOnSubmit).not.toHaveBeenCalled();\n  });\n\n  test('submits form with valid data', async () =&gt; {\n    const user = userEvent.setup();\n    (OrderService.getCustomers as jest.Mock).mockResolvedValue([\n      { id: 1, name: 'John Doe' }\n    ]);\n\n    render(&lt;OrderForm onSubmit={mockOnSubmit} /&gt;);\n\n    // Fill form\n    await user.selectOptions(screen.getByLabelText('Customer'), '1');\n    await user.click(screen.getByText('Add Item'));\n    await user.type(screen.getByLabelText('Quantity'), '2');\n\n    // Submit\n    await user.click(screen.getByRole('button', { name: 'Submit Order' }));\n\n    await waitFor(() =&gt; {\n      expect(mockOnSubmit).toHaveBeenCalledWith({\n        customer_id: 1,\n        items: [{ menu_item_id: 1, quantity: 2 }]\n      });\n    });\n  });\n});\n</code></pre>"},{"location":"TESTING/#hook-test-example","title":"Hook Test Example","text":"<pre><code>// hooks/useAuth.test.tsx\nimport { renderHook, act } from '@testing-library/react';\nimport { useAuth } from './useAuth';\nimport { AuthService } from '../services/AuthService';\n\njest.mock('../services/AuthService');\n\ndescribe('useAuth', () =&gt; {\n  test('login success flow', async () =&gt; {\n    const mockUser = { id: 1, email: 'test@example.com' };\n    (AuthService.login as jest.Mock).mockResolvedValue({\n      user: mockUser,\n      token: 'test-token'\n    });\n\n    const { result } = renderHook(() =&gt; useAuth());\n\n    expect(result.current.isAuthenticated).toBe(false);\n    expect(result.current.user).toBeNull();\n\n    await act(async () =&gt; {\n      await result.current.login('test@example.com', 'password');\n    });\n\n    expect(result.current.isAuthenticated).toBe(true);\n    expect(result.current.user).toEqual(mockUser);\n  });\n\n  test('logout clears user data', () =&gt; {\n    const { result } = renderHook(() =&gt; useAuth());\n\n    act(() =&gt; {\n      result.current.logout();\n    });\n\n    expect(result.current.isAuthenticated).toBe(false);\n    expect(result.current.user).toBeNull();\n    expect(localStorage.getItem('token')).toBeNull();\n  });\n});\n</code></pre>"},{"location":"TESTING/#snapshot-testing","title":"Snapshot Testing","text":"<pre><code>// components/MenuItem.test.tsx\nimport React from 'react';\nimport { render } from '@testing-library/react';\nimport { MenuItem } from './MenuItem';\n\ndescribe('MenuItem', () =&gt; {\n  test('matches snapshot', () =&gt; {\n    const item = {\n      id: 1,\n      name: 'Burger',\n      price: 12.99,\n      description: 'Delicious burger'\n    };\n\n    const { container } = render(&lt;MenuItem item={item} /&gt;);\n    expect(container).toMatchSnapshot();\n  });\n});\n</code></pre>"},{"location":"TESTING/#mobile-testing","title":"Mobile Testing","text":""},{"location":"TESTING/#react-native-testing","title":"React Native Testing","text":"<pre><code># Setup\ncd mobile\nnpm install --save-dev @testing-library/react-native\nnpm install --save-dev jest @types/jest\n\n# Run tests\nnpm test\nnpm test -- --coverage\n</code></pre>"},{"location":"TESTING/#mobile-component-test","title":"Mobile Component Test","text":"<pre><code>// screens/OrderScreen.test.tsx\nimport React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { OrderScreen } from './OrderScreen';\nimport { NavigationContainer } from '@react-navigation/native';\n\ndescribe('OrderScreen', () =&gt; {\n  const renderWithNavigation = (component: React.ReactElement) =&gt; {\n    return render(\n      &lt;NavigationContainer&gt;\n        {component}\n      &lt;/NavigationContainer&gt;\n    );\n  };\n\n  test('displays order list', async () =&gt; {\n    const { getByText, getByTestId } = renderWithNavigation(&lt;OrderScreen /&gt;);\n\n    await waitFor(() =&gt; {\n      expect(getByText('Order #1001')).toBeTruthy();\n      expect(getByText('Order #1002')).toBeTruthy();\n    });\n  });\n\n  test('navigates to order details on press', async () =&gt; {\n    const { getByText } = renderWithNavigation(&lt;OrderScreen /&gt;);\n\n    const orderItem = await waitFor(() =&gt; getByText('Order #1001'));\n    fireEvent.press(orderItem);\n\n    // Verify navigation occurred\n    await waitFor(() =&gt; {\n      expect(getByText('Order Details')).toBeTruthy();\n    });\n  });\n});\n</code></pre>"},{"location":"TESTING/#integration-testing","title":"Integration Testing","text":""},{"location":"TESTING/#api-integration-tests","title":"API Integration Tests","text":"<pre><code># tests/integration/test_order_workflow.py\nimport pytest\nfrom datetime import datetime\n\nclass TestOrderWorkflow:\n    \"\"\"Test complete order workflow from creation to completion\"\"\"\n\n    @pytest.mark.integration\n    def test_complete_order_flow(self, client, auth_headers, test_db):\n        # 1. Create customer\n        customer_response = client.post(\n            \"/api/v1/customers\",\n            json={\"name\": \"John Doe\", \"email\": \"john@example.com\"},\n            headers=auth_headers\n        )\n        customer_id = customer_response.json()[\"id\"]\n\n        # 2. Create order\n        order_response = client.post(\n            \"/api/v1/orders\",\n            json={\n                \"customer_id\": customer_id,\n                \"items\": [{\"menu_item_id\": 1, \"quantity\": 2}]\n            },\n            headers=auth_headers\n        )\n        order_id = order_response.json()[\"id\"]\n\n        # 3. Process payment\n        payment_response = client.post(\n            f\"/api/v1/orders/{order_id}/payment\",\n            json={\n                \"amount\": 25.99,\n                \"payment_method\": \"card\",\n                \"token\": \"tok_test123\"\n            },\n            headers=auth_headers\n        )\n        assert payment_response.status_code == 200\n\n        # 4. Update order status\n        status_response = client.patch(\n            f\"/api/v1/orders/{order_id}/status\",\n            json={\"status\": \"completed\"},\n            headers=auth_headers\n        )\n        assert status_response.status_code == 200\n\n        # 5. Verify final state\n        order_response = client.get(\n            f\"/api/v1/orders/{order_id}\",\n            headers=auth_headers\n        )\n        order = order_response.json()\n        assert order[\"status\"] == \"completed\"\n        assert order[\"payment_status\"] == \"paid\"\n</code></pre>"},{"location":"TESTING/#database-integration-tests","title":"Database Integration Tests","text":"<pre><code># tests/integration/test_inventory_deduction.py\n@pytest.mark.integration\nclass TestInventoryDeduction:\n    def test_inventory_deduction_on_order(self, test_db):\n        # Setup: Create inventory items\n        inventory = InventoryItem(\n            name=\"Beef Patty\",\n            quantity=100,\n            unit=\"pieces\"\n        )\n        test_db.add(inventory)\n        test_db.commit()\n\n        # Create order with recipe\n        order = Order(\n            customer_id=1,\n            items=[\n                OrderItem(\n                    menu_item_id=1,  # Burger\n                    quantity=5\n                )\n            ]\n        )\n        test_db.add(order)\n        test_db.commit()\n\n        # Process inventory deduction\n        InventoryService.deduct_for_order(order.id)\n\n        # Verify inventory was reduced\n        test_db.refresh(inventory)\n        assert inventory.quantity == 95  # 5 burgers * 1 patty each\n</code></pre>"},{"location":"TESTING/#performance-testing","title":"Performance Testing","text":""},{"location":"TESTING/#load-testing-with-locust","title":"Load Testing with Locust","text":"<pre><code># tests/performance/locustfile.py\nfrom locust import HttpUser, task, between\n\nclass RestaurantUser(HttpUser):\n    wait_time = between(1, 3)\n\n    def on_start(self):\n        # Login\n        response = self.client.post(\"/api/v1/auth/login\", json={\n            \"email\": \"test@example.com\",\n            \"password\": \"testpass\"\n        })\n        self.token = response.json()[\"access_token\"]\n        self.headers = {\"Authorization\": f\"Bearer {self.token}\"}\n\n    @task(3)\n    def view_menu(self):\n        self.client.get(\"/api/v1/menu/items\", headers=self.headers)\n\n    @task(2)\n    def view_orders(self):\n        self.client.get(\"/api/v1/orders\", headers=self.headers)\n\n    @task(1)\n    def create_order(self):\n        self.client.post(\"/api/v1/orders\", json={\n            \"customer_id\": 1,\n            \"items\": [{\"menu_item_id\": 1, \"quantity\": 1}]\n        }, headers=self.headers)\n</code></pre>"},{"location":"TESTING/#running-performance-tests","title":"Running Performance Tests","text":"<pre><code># Install Locust\npip install locust\n\n# Run load test\nlocust -f tests/performance/locustfile.py --host=http://localhost:8000\n\n# Run with specific parameters\nlocust -f tests/performance/locustfile.py \\\n  --host=http://localhost:8000 \\\n  --users=100 \\\n  --spawn-rate=10 \\\n  --run-time=5m \\\n  --headless\n</code></pre>"},{"location":"TESTING/#database-query-performance","title":"Database Query Performance","text":"<pre><code># tests/performance/test_query_performance.py\nimport time\nimport pytest\n\nclass TestQueryPerformance:\n    @pytest.mark.performance\n    def test_order_list_performance(self, test_db):\n        # Create test data\n        for i in range(1000):\n            order = Order(customer_id=1, total=100.00)\n            test_db.add(order)\n        test_db.commit()\n\n        # Measure query time\n        start_time = time.time()\n\n        orders = test_db.query(Order)\\\n            .filter(Order.created_at &gt;= datetime.now())\\\n            .order_by(Order.created_at.desc())\\\n            .limit(50)\\\n            .all()\n\n        query_time = time.time() - start_time\n\n        # Assert performance threshold\n        assert query_time &lt; 0.1  # Should complete in under 100ms\n        assert len(orders) == 50\n</code></pre>"},{"location":"TESTING/#security-testing","title":"Security Testing","text":""},{"location":"TESTING/#sql-injection-testing","title":"SQL Injection Testing","text":"<pre><code># tests/security/test_sql_injection.py\nclass TestSQLInjection:\n    @pytest.mark.security\n    def test_sql_injection_prevention(self, client, auth_headers):\n        # Attempt SQL injection\n        malicious_input = \"1'; DROP TABLE orders; --\"\n\n        response = client.get(\n            f\"/api/v1/orders?customer_id={malicious_input}\",\n            headers=auth_headers\n        )\n\n        # Should handle safely\n        assert response.status_code in [200, 422]  # OK or validation error\n\n        # Verify tables still exist\n        response = client.get(\"/api/v1/orders\", headers=auth_headers)\n        assert response.status_code == 200\n</code></pre>"},{"location":"TESTING/#authentication-testing","title":"Authentication Testing","text":"<pre><code># tests/security/test_authentication.py\nclass TestAuthentication:\n    def test_expired_token_rejected(self, client):\n        # Create expired token\n        expired_token = create_access_token(\n            data={\"sub\": \"test@example.com\"},\n            expires_delta=timedelta(minutes=-1)\n        )\n\n        response = client.get(\n            \"/api/v1/orders\",\n            headers={\"Authorization\": f\"Bearer {expired_token}\"}\n        )\n\n        assert response.status_code == 401\n        assert \"Token expired\" in response.json()[\"detail\"]\n\n    def test_invalid_token_rejected(self, client):\n        response = client.get(\n            \"/api/v1/orders\",\n            headers={\"Authorization\": \"Bearer invalid-token\"}\n        )\n\n        assert response.status_code == 401\n</code></pre>"},{"location":"TESTING/#test-data-management","title":"Test Data Management","text":""},{"location":"TESTING/#test-factories","title":"Test Factories","text":"<pre><code># tests/factories.py\nimport factory\nfrom factory.alchemy import SQLAlchemyModelFactory\nfrom modules.orders.models import Order, OrderItem\n\nclass OrderFactory(SQLAlchemyModelFactory):\n    class Meta:\n        model = Order\n        sqlalchemy_session_persistence = \"commit\"\n\n    customer_id = factory.Sequence(lambda n: n)\n    status = \"pending\"\n    total = factory.Faker('pydecimal', left_digits=3, right_digits=2, positive=True)\n\n    @factory.post_generation\n    def items(self, create, extracted, **kwargs):\n        if not create:\n            return\n\n        if extracted:\n            for item in extracted:\n                self.items.append(item)\n\nclass OrderItemFactory(SQLAlchemyModelFactory):\n    class Meta:\n        model = OrderItem\n\n    menu_item_id = factory.Sequence(lambda n: n)\n    quantity = factory.Faker('random_int', min=1, max=5)\n    price = factory.Faker('pydecimal', left_digits=2, right_digits=2, positive=True)\n</code></pre>"},{"location":"TESTING/#seed-data-scripts","title":"Seed Data Scripts","text":"<pre><code># scripts/seed_test_data.py\nimport click\nfrom tests.factories import OrderFactory, CustomerFactory\n\n@click.command()\n@click.option('--orders', default=10, help='Number of orders to create')\n@click.option('--customers', default=5, help='Number of customers to create')\ndef seed_test_data(orders, customers):\n    \"\"\"Seed test database with sample data\"\"\"\n\n    # Create customers\n    customer_list = []\n    for _ in range(customers):\n        customer = CustomerFactory()\n        customer_list.append(customer)\n\n    # Create orders\n    for _ in range(orders):\n        customer = random.choice(customer_list)\n        OrderFactory(customer_id=customer.id)\n\n    click.echo(f\"Created {customers} customers and {orders} orders\")\n\nif __name__ == '__main__':\n    seed_test_data()\n</code></pre>"},{"location":"TESTING/#cicd-testing","title":"CI/CD Testing","text":""},{"location":"TESTING/#github-actions-configuration","title":"GitHub Actions Configuration","text":"<pre><code># .github/workflows/test.yml\nname: Test Suite\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  backend-tests:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:14\n        env:\n          POSTGRES_PASSWORD: postgres\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n      redis:\n        image: redis:6\n        options: &gt;-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n\n    - name: Install dependencies\n      run: |\n        cd backend\n        pip install -r requirements.txt\n        pip install -r requirements-test.txt\n\n    - name: Run migrations\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost/auraconnect_test\n      run: |\n        cd backend\n        alembic upgrade head\n\n    - name: Run tests with coverage\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost/auraconnect_test\n        REDIS_URL: redis://localhost:6379/0\n      run: |\n        cd backend\n        pytest --cov=modules --cov-report=xml --cov-report=html\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./backend/coverage.xml\n\n  frontend-tests:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n        cache: 'npm'\n        cache-dependency-path: frontend/package-lock.json\n\n    - name: Install dependencies\n      run: |\n        cd frontend\n        npm ci\n\n    - name: Run tests\n      run: |\n        cd frontend\n        npm test -- --coverage --watchAll=false\n\n    - name: Run linting\n      run: |\n        cd frontend\n        npm run lint\n</code></pre>"},{"location":"TESTING/#testing-best-practices","title":"Testing Best Practices","text":""},{"location":"TESTING/#1-test-organization","title":"1. Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/              # Fast, isolated tests\n\u251c\u2500\u2500 integration/       # Multi-component tests\n\u251c\u2500\u2500 e2e/              # End-to-end scenarios\n\u251c\u2500\u2500 performance/      # Load and stress tests\n\u251c\u2500\u2500 security/         # Security-focused tests\n\u251c\u2500\u2500 fixtures/         # Shared test data\n\u251c\u2500\u2500 factories/        # Test data factories\n\u2514\u2500\u2500 conftest.py       # Shared pytest configuration\n</code></pre>"},{"location":"TESTING/#2-test-naming-conventions","title":"2. Test Naming Conventions","text":"<pre><code># Use descriptive test names\ndef test_order_creation_with_valid_data_succeeds():\n    pass\n\ndef test_order_creation_with_invalid_customer_raises_error():\n    pass\n\ndef test_order_total_calculation_includes_tax_and_tips():\n    pass\n</code></pre>"},{"location":"TESTING/#3-test-independence","title":"3. Test Independence","text":"<pre><code># Bad - Tests depend on each other\nclass TestOrder:\n    order_id = None\n\n    def test_create_order(self):\n        self.order_id = create_order()\n\n    def test_update_order(self):\n        update_order(self.order_id)  # Fails if first test fails\n\n# Good - Independent tests\nclass TestOrder:\n    def test_create_order(self):\n        order_id = create_order()\n        assert order_id is not None\n\n    def test_update_order(self):\n        order_id = create_order()  # Setup own data\n        result = update_order(order_id)\n        assert result.status == \"updated\"\n</code></pre>"},{"location":"TESTING/#4-mock-external-dependencies","title":"4. Mock External Dependencies","text":"<pre><code># Always mock external services in unit tests\n@patch('requests.post')\ndef test_send_notification(mock_post):\n    mock_post.return_value.status_code = 200\n\n    result = NotificationService.send_sms(\"+1234567890\", \"Test message\")\n\n    assert result == True\n    mock_post.assert_called_once()\n</code></pre>"},{"location":"TESTING/#5-use-test-markers","title":"5. Use Test Markers","text":"<pre><code># Mark tests for easy filtering\n@pytest.mark.slow\n@pytest.mark.integration\ndef test_full_payroll_processing():\n    # Long-running test\n    pass\n\n@pytest.mark.unit\n@pytest.mark.fast\ndef test_calculate_tax():\n    # Quick unit test\n    pass\n\n# Run only fast tests: pytest -m \"fast\"\n# Skip slow tests: pytest -m \"not slow\"\n</code></pre>"},{"location":"TESTING/#6-continuous-testing","title":"6. Continuous Testing","text":"<pre><code># Watch mode for development\npytest-watch\n\n# Pre-commit hooks\n# .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: pytest-check\n        name: pytest-check\n        entry: pytest\n        language: system\n        pass_filenames: false\n        always_run: true\n</code></pre> <p>For more testing resources, visit our Developer Portal.</p>"},{"location":"api/","title":"AuraConnect API Reference","text":""},{"location":"api/#overview","title":"Overview","text":"<p>The AuraConnect API is a RESTful API that provides programmatic access to all restaurant management features. Built with FastAPI, it offers automatic documentation, type validation, and high performance.</p>"},{"location":"api/#base-url","title":"Base URL","text":"<pre><code>Production: https://api.auraconnect.com\nStaging: https://api-staging.auraconnect.com\nLocal Development: http://localhost:8000\n</code></pre>"},{"location":"api/#api-documentation","title":"API Documentation","text":"<ul> <li>Interactive Docs (Swagger UI): <code>{base_url}/docs</code></li> <li>Alternative Docs (ReDoc): <code>{base_url}/redoc</code></li> <li>OpenAPI Schema: <code>{base_url}/openapi.json</code></li> </ul>"},{"location":"api/#authentication","title":"Authentication","text":"<p>AuraConnect uses JWT (JSON Web Tokens) for authentication.</p>"},{"location":"api/#obtaining-tokens","title":"Obtaining Tokens","text":"<pre><code>POST /api/v1/auth/login\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"your-password\"\n}\n</code></pre> <p>Response: <pre><code>{\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGc...\",\n  \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGc...\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 1800\n}\n</code></pre></p>"},{"location":"api/#using-tokens","title":"Using Tokens","text":"<p>Include the access token in the Authorization header:</p> <pre><code>Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc...\n</code></pre>"},{"location":"api/#refreshing-tokens","title":"Refreshing Tokens","text":"<pre><code>POST /api/v1/auth/refresh\nContent-Type: application/json\n\n{\n  \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGc...\"\n}\n</code></pre>"},{"location":"api/#api-versioning","title":"API Versioning","text":"<p>The API uses URL versioning. The current version is <code>v1</code>.</p> <pre><code>https://api.auraconnect.com/api/v1/...\n</code></pre>"},{"location":"api/#request-format","title":"Request Format","text":""},{"location":"api/#headers","title":"Headers","text":"Header Required Description <code>Authorization</code> Yes Bearer token for authentication <code>Content-Type</code> Yes* <code>application/json</code> for POST/PUT requests <code>X-Tenant-ID</code> Sometimes Required for multi-tenant operations <code>Accept-Language</code> No Preferred language (e.g., <code>en-US</code>)"},{"location":"api/#request-body","title":"Request Body","text":"<p>All POST and PUT requests should send JSON:</p> <pre><code>{\n  \"field1\": \"value1\",\n  \"field2\": \"value2\"\n}\n</code></pre>"},{"location":"api/#response-format","title":"Response Format","text":""},{"location":"api/#success-response","title":"Success Response","text":"<pre><code>{\n  \"data\": {\n    \"id\": 123,\n    \"field1\": \"value1\",\n    \"field2\": \"value2\"\n  },\n  \"meta\": {\n    \"request_id\": \"req_abc123\",\n    \"timestamp\": \"2024-01-15T10:30:00Z\"\n  }\n}\n</code></pre>"},{"location":"api/#paginated-response","title":"Paginated Response","text":"<pre><code>{\n  \"data\": [...],\n  \"meta\": {\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_pages\": 5,\n    \"total_count\": 98,\n    \"has_next\": true,\n    \"has_previous\": false\n  }\n}\n</code></pre>"},{"location":"api/#error-response","title":"Error Response","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid request data\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"message\": \"Invalid email format\"\n      }\n    ],\n    \"request_id\": \"req_xyz789\",\n    \"timestamp\": \"2024-01-15T10:30:00Z\"\n  }\n}\n</code></pre>"},{"location":"api/#common-parameters","title":"Common Parameters","text":""},{"location":"api/#pagination","title":"Pagination","text":"Parameter Type Default Description <code>page</code> integer 1 Page number <code>page_size</code> integer 20 Items per page (max 100)"},{"location":"api/#filtering","title":"Filtering","text":"Parameter Type Description <code>search</code> string Full-text search <code>status</code> string Filter by status <code>created_from</code> datetime Start date filter <code>created_to</code> datetime End date filter"},{"location":"api/#sorting","title":"Sorting","text":"Parameter Type Default Description <code>sort_by</code> string created_at Field to sort by <code>sort_order</code> string desc Sort direction (asc/desc)"},{"location":"api/#core-resources","title":"Core Resources","text":""},{"location":"api/#authentication-authorization","title":"Authentication &amp; Authorization","text":"Resource Endpoint Description Auth <code>/api/v1/auth</code> Authentication endpoints Users <code>/api/v1/users</code> User management Roles <code>/api/v1/roles</code> Role-based access control"},{"location":"api/#restaurant-management","title":"Restaurant Management","text":"Resource Endpoint Description Restaurants <code>/api/v1/restaurants</code> Restaurant profiles Locations <code>/api/v1/locations</code> Location management Settings <code>/api/v1/settings</code> Configuration settings"},{"location":"api/#operations","title":"Operations","text":"Resource Endpoint Description Orders <code>/api/v1/orders</code> Order management Menu <code>/api/v1/menu</code> Menu items and categories Inventory <code>/api/v1/inventory</code> Stock management Tables <code>/api/v1/tables</code> Table management"},{"location":"api/#staff-hr","title":"Staff &amp; HR","text":"Resource Endpoint Description Staff <code>/api/v1/staff</code> Employee management Schedules <code>/api/v1/schedules</code> Shift scheduling Time Tracking <code>/api/v1/time</code> Clock in/out Payroll <code>/api/v1/payroll</code> Payroll processing"},{"location":"api/#customer-management","title":"Customer Management","text":"Resource Endpoint Description Customers <code>/api/v1/customers</code> Customer profiles Loyalty <code>/api/v1/loyalty</code> Rewards program Feedback <code>/api/v1/feedback</code> Reviews and ratings Promotions <code>/api/v1/promotions</code> Marketing campaigns"},{"location":"api/#analytics-reporting","title":"Analytics &amp; Reporting","text":"Resource Endpoint Description Analytics <code>/api/v1/analytics</code> Business analytics Reports <code>/api/v1/reports</code> Generated reports Insights <code>/api/v1/insights</code> AI-powered insights"},{"location":"api/#integrations","title":"Integrations","text":"Resource Endpoint Description POS Sync <code>/api/v1/pos</code> POS integrations POS Analytics <code>/api/v1/pos/analytics</code> POS analytics Payments <code>/api/v1/payments</code> Payment processing Webhooks <code>/api/v1/webhooks</code> Event webhooks"},{"location":"api/#status-codes","title":"Status Codes","text":"Code Status Description 200 OK Request successful 201 Created Resource created 204 No Content Request successful, no content 400 Bad Request Invalid request data 401 Unauthorized Authentication required 403 Forbidden Access denied 404 Not Found Resource not found 409 Conflict Resource conflict 422 Unprocessable Entity Validation error 429 Too Many Requests Rate limit exceeded 500 Internal Server Error Server error 503 Service Unavailable Service down"},{"location":"api/#error-codes","title":"Error Codes","text":"Code Description <code>UNAUTHORIZED</code> Invalid or missing authentication <code>FORBIDDEN</code> Insufficient permissions <code>NOT_FOUND</code> Resource not found <code>VALIDATION_ERROR</code> Request validation failed <code>DUPLICATE_ENTRY</code> Resource already exists <code>INVALID_STATE</code> Invalid state transition <code>RATE_LIMITED</code> Too many requests <code>INTERNAL_ERROR</code> Internal server error"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":""},{"location":"api/#default-limits","title":"Default Limits","text":"Tier Requests/Hour Burst Description Free 1,000 100/min Free tier Basic 10,000 500/min Small restaurants Pro 50,000 1000/min Medium chains Enterprise Unlimited Custom Large chains"},{"location":"api/#rate-limit-headers","title":"Rate Limit Headers","text":"<pre><code>X-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1642248000\nX-RateLimit-Retry-After: 3600\n</code></pre>"},{"location":"api/#webhooks","title":"Webhooks","text":"<p>Webhooks allow you to receive real-time notifications:</p>"},{"location":"api/#available-events","title":"Available Events","text":"<ul> <li><code>order.created</code></li> <li><code>order.status_changed</code></li> <li><code>payment.completed</code></li> <li><code>inventory.low_stock</code></li> <li><code>staff.clocked_in</code></li> <li><code>customer.created</code></li> </ul>"},{"location":"api/#webhook-payload","title":"Webhook Payload","text":"<pre><code>{\n  \"event\": \"order.created\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"data\": {\n    \"id\": 123,\n    \"order_number\": \"ORD-2024-0001\",\n    \"total_amount\": \"45.50\"\n  },\n  \"signature\": \"sha256=abc123...\"\n}\n</code></pre>"},{"location":"api/#sdks-libraries","title":"SDKs &amp; Libraries","text":""},{"location":"api/#official-sdks","title":"Official SDKs","text":"<ul> <li>Python: <code>pip install auraconnect</code></li> <li>JavaScript/TypeScript: <code>npm install @auraconnect/sdk</code></li> <li>PHP: <code>composer require auraconnect/sdk</code></li> <li>Ruby: <code>gem install auraconnect</code></li> </ul>"},{"location":"api/#example-usage","title":"Example Usage","text":""},{"location":"api/#python","title":"Python","text":"<pre><code>from auraconnect import Client\n\nclient = Client(api_key=\"your_api_key\")\n\n# Create an order\norder = client.orders.create(\n    customer_id=123,\n    items=[\n        {\"menu_item_id\": 10, \"quantity\": 2}\n    ]\n)\n\nprint(f\"Order created: {order.order_number}\")\n</code></pre>"},{"location":"api/#javascript","title":"JavaScript","text":"<pre><code>import { AuraConnect } from '@auraconnect/sdk';\n\nconst client = new AuraConnect({ apiKey: 'your_api_key' });\n\n// Create an order\nconst order = await client.orders.create({\n  customerId: 123,\n  items: [\n    { menuItemId: 10, quantity: 2 }\n  ]\n});\n\nconsole.log(`Order created: ${order.orderNumber}`);\n</code></pre>"},{"location":"api/#testing","title":"Testing","text":""},{"location":"api/#test-environment","title":"Test Environment","text":"<pre><code>Base URL: https://api-sandbox.auraconnect.com\nTest API Key: test_key_...\n</code></pre>"},{"location":"api/#test-data","title":"Test Data","text":"<p>Test credit cards: - Success: <code>4242 4242 4242 4242</code> - Decline: <code>4000 0000 0000 0002</code> - Insufficient funds: <code>4000 0000 0000 9995</code></p>"},{"location":"api/#api-changelog","title":"API Changelog","text":""},{"location":"api/#version-120-2024-01-15","title":"Version 1.2.0 (2024-01-15)","text":"<ul> <li>Added webhook support</li> <li>Improved error messages</li> <li>Added batch operations</li> </ul>"},{"location":"api/#version-110-2023-12-01","title":"Version 1.1.0 (2023-12-01)","text":"<ul> <li>Added analytics endpoints</li> <li>Enhanced filtering options</li> <li>Performance improvements</li> </ul>"},{"location":"api/#version-100-2023-10-01","title":"Version 1.0.0 (2023-10-01)","text":"<ul> <li>Initial public release</li> </ul>"},{"location":"api/#best-practices","title":"Best Practices","text":""},{"location":"api/#1-use-pagination","title":"1. Use Pagination","text":"<p>Always paginate list requests to avoid timeouts:</p> <pre><code>page = 1\nwhile True:\n    response = client.orders.list(page=page, page_size=50)\n    process_orders(response.data)\n\n    if not response.has_next:\n        break\n    page += 1\n</code></pre>"},{"location":"api/#2-handle-errors-gracefully","title":"2. Handle Errors Gracefully","text":"<pre><code>try:\n    order = client.orders.create(...)\nexcept ValidationError as e:\n    print(f\"Validation failed: {e.details}\")\nexcept RateLimitError as e:\n    print(f\"Rate limited. Retry after {e.retry_after} seconds\")\nexcept ApiError as e:\n    print(f\"API error: {e.message}\")\n</code></pre>"},{"location":"api/#3-use-idempotency-keys","title":"3. Use Idempotency Keys","text":"<p>For critical operations, use idempotency keys:</p> <pre><code>X-Idempotency-Key: unique-key-123\n</code></pre>"},{"location":"api/#4-implement-exponential-backoff","title":"4. Implement Exponential Backoff","text":"<pre><code>import time\nimport random\n\ndef retry_with_backoff(func, max_retries=3):\n    for i in range(max_retries):\n        try:\n            return func()\n        except Exception as e:\n            if i == max_retries - 1:\n                raise\n\n            wait_time = (2 ** i) + random.uniform(0, 1)\n            time.sleep(wait_time)\n</code></pre>"},{"location":"api/#support","title":"Support","text":"<ul> <li>API Status: https://status.auraconnect.com</li> <li>Developer Forum: https://developers.auraconnect.com/forum</li> <li>Email: api-support@auraconnect.com</li> <li>Discord: https://discord.gg/auraconnect-dev</li> </ul> <p>For detailed endpoint documentation, see the individual resource pages.</p>"},{"location":"api/pos_analytics_endpoints/","title":"POS Analytics API Documentation","text":""},{"location":"api/pos_analytics_endpoints/#overview","title":"Overview","text":"<p>The POS Analytics API provides comprehensive analytics and reporting for Point of Sale operations in the admin dashboard. It offers real-time insights into POS provider performance, terminal health, transaction metrics, and operational issues.</p>"},{"location":"api/pos_analytics_endpoints/#base-url","title":"Base URL","text":"<pre><code>/api/analytics/pos\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#authentication-permissions","title":"Authentication &amp; Permissions","text":"<p>All endpoints require authentication. Include the authentication token in the Authorization header:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#required-permissions-by-endpoint","title":"Required Permissions by Endpoint","text":"Endpoint Required Permission Description <code>POST /analytics/pos/dashboard</code> <code>analytics.view</code> View dashboard data <code>POST /analytics/pos/provider/{id}/details</code> <code>analytics.view</code> View provider details <code>POST /analytics/pos/terminal/{id}/details</code> <code>analytics.view</code> View terminal details <code>POST /analytics/pos/compare</code> <code>analytics.view</code> Compare providers <code>GET /analytics/pos/alerts/active</code> <code>analytics.view</code> View active alerts <code>POST /analytics/pos/alerts/{id}/acknowledge</code> <code>analytics.manage</code> Acknowledge alerts <code>POST /analytics/pos/alerts/{id}/resolve</code> <code>analytics.manage</code> Resolve alerts <code>GET /analytics/pos/alerts/history</code> <code>analytics.view</code> View alert history <code>GET /analytics/pos/health/terminals</code> <code>analytics.view</code> View terminal health <code>GET /analytics/pos/trends/transactions</code> <code>analytics.view</code> View transaction trends <code>GET /analytics/pos/trends/performance</code> <code>analytics.view</code> View performance trends <code>POST /analytics/pos/export</code> <code>analytics.export</code> Export analytics data <code>POST /analytics/pos/refresh</code> <code>analytics.manage</code> Refresh analytics data"},{"location":"api/pos_analytics_endpoints/#rate-limiting","title":"Rate Limiting","text":"<p>The following rate limits apply to POS analytics endpoints:</p> Endpoint Pattern Rate Limit Window <code>/analytics/pos/dashboard</code> 60 requests per minute <code>/analytics/pos/*/details</code> 120 requests per minute <code>/analytics/pos/alerts/*</code> 60 requests per minute <code>/analytics/pos/trends/*</code> 120 requests per minute <code>/analytics/pos/export</code> 10 requests per minute <code>/analytics/pos/refresh</code> 5 requests per minute <p>When rate limit is exceeded, the API returns HTTP 429 with headers: - <code>X-RateLimit-Limit</code>: Maximum requests allowed - <code>X-RateLimit-Remaining</code>: Requests remaining - <code>X-RateLimit-Reset</code>: Unix timestamp when limit resets</p>"},{"location":"api/pos_analytics_endpoints/#endpoints","title":"Endpoints","text":""},{"location":"api/pos_analytics_endpoints/#1-pos-analytics-dashboard","title":"1. POS Analytics Dashboard","text":"<p>Get comprehensive POS analytics dashboard data.</p> <p>Endpoint: <code>POST /analytics/pos/dashboard</code></p> <p>Request Body:</p> <pre><code>{\n  \"time_range\": \"last_24_hours\",  // Options: last_hour, last_24_hours, last_7_days, last_30_days, custom\n  \"start_date\": \"2025-01-01T00:00:00Z\",  // Required if time_range is \"custom\"\n  \"end_date\": \"2025-01-30T23:59:59Z\",    // Required if time_range is \"custom\"\n  \"provider_ids\": [1, 2],  // Optional: Filter by specific providers\n  \"terminal_ids\": [\"POS-001\", \"POS-002\"],  // Optional: Filter by terminals\n  \"include_offline\": true  // Default: true\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"total_providers\": 3,\n  \"active_providers\": 3,\n  \"total_terminals\": 15,\n  \"online_terminals\": 13,\n  \"total_transactions\": 1250,\n  \"successful_transactions\": 1200,\n  \"transaction_success_rate\": 96.0,\n  \"total_transaction_value\": \"125000.00\",\n  \"average_transaction_value\": \"100.00\",\n  \"overall_uptime\": 99.5,\n  \"average_sync_time_ms\": 250.5,\n  \"average_webhook_time_ms\": 150.3,\n  \"providers\": [\n    {\n      \"provider_id\": 1,\n      \"provider_name\": \"Square POS\",\n      \"provider_code\": \"square\",\n      \"is_active\": true,\n      \"total_terminals\": 5,\n      \"active_terminals\": 4,\n      \"offline_terminals\": 1,\n      \"total_transactions\": 500,\n      \"successful_transactions\": 485,\n      \"failed_transactions\": 15,\n      \"transaction_success_rate\": 97.0,\n      \"total_transaction_value\": \"50000.00\",\n      \"total_syncs\": 480,\n      \"sync_success_rate\": 95.8,\n      \"average_sync_time_ms\": 245.0,\n      \"total_webhooks\": 520,\n      \"webhook_success_rate\": 98.5,\n      \"overall_health_status\": \"healthy\",\n      \"uptime_percentage\": 99.8,\n      \"active_alerts\": 0\n    }\n  ],\n  \"healthy_terminals\": 10,\n  \"degraded_terminals\": 2,\n  \"critical_terminals\": 1,\n  \"offline_terminals\": 2,\n  \"transaction_trends\": [\n    {\n      \"timestamp\": \"2025-01-30T14:00:00Z\",\n      \"transaction_count\": 45,\n      \"transaction_value\": \"4500.00\",\n      \"success_rate\": 95.6,\n      \"average_value\": \"100.00\"\n    }\n  ],\n  \"active_alerts\": [\n    {\n      \"alert_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n      \"alert_type\": \"terminal_offline\",\n      \"severity\": \"warning\",\n      \"provider_id\": 1,\n      \"provider_name\": \"Square POS\",\n      \"terminal_id\": \"POS-005\",\n      \"title\": \"Terminal Offline\",\n      \"description\": \"Terminal POS-005 has been offline for 30 minutes\",\n      \"is_active\": true,\n      \"acknowledged\": false,\n      \"created_at\": \"2025-01-30T13:30:00Z\"\n    }\n  ],\n  \"generated_at\": \"2025-01-30T15:00:00Z\",\n  \"time_range\": \"2025-01-29T15:00:00Z to 2025-01-30T15:00:00Z\"\n}\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#2-provider-details","title":"2. Provider Details","text":"<p>Get detailed analytics for a specific POS provider.</p> <p>Endpoint: <code>POST /analytics/pos/provider/{provider_id}/details</code></p> <p>Request Body:</p> <pre><code>{\n  \"provider_id\": 1,\n  \"time_range\": \"last_24_hours\",\n  \"include_terminals\": true,\n  \"include_errors\": true\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"provider\": {\n    // Provider summary (same as dashboard)\n  },\n  \"sync_metrics\": {\n    \"total_syncs\": 480,\n    \"successful_syncs\": 460,\n    \"failed_syncs\": 20,\n    \"pending_syncs\": 5,\n    \"success_rate\": 95.8,\n    \"average_sync_time_ms\": 245.0,\n    \"sync_status_breakdown\": {\n      \"synced\": 460,\n      \"failed\": 20,\n      \"pending\": 5\n    },\n    \"recent_failures\": [\n      {\n        \"order_id\": 1234,\n        \"error\": \"Network timeout\",\n        \"timestamp\": \"2025-01-30T14:45:00Z\"\n      }\n    ]\n  },\n  \"webhook_metrics\": {\n    \"total_webhooks\": 520,\n    \"successful_webhooks\": 512,\n    \"failed_webhooks\": 8,\n    \"pending_webhooks\": 0,\n    \"success_rate\": 98.5,\n    \"average_processing_time_ms\": 150.0,\n    \"event_type_breakdown\": {\n      \"payment.updated\": 300,\n      \"payment.created\": 220\n    }\n  },\n  \"error_analysis\": {\n    \"total_errors\": 28,\n    \"error_rate\": 2.2,\n    \"error_types\": [\n      {\"type\": \"network_timeout\", \"count\": 15, \"percentage\": 53.6},\n      {\"type\": \"validation_error\", \"count\": 8, \"percentage\": 28.6},\n      {\"type\": \"authentication_failed\", \"count\": 5, \"percentage\": 17.8}\n    ],\n    \"trending_errors\": [],\n    \"affected_terminals\": [\n      {\"terminal_id\": \"POS-003\", \"error_count\": 12},\n      {\"terminal_id\": \"POS-005\", \"error_count\": 10}\n    ]\n  },\n  \"performance_metrics\": {\n    \"response_time_p50\": 200.0,\n    \"response_time_p95\": 450.0,\n    \"response_time_p99\": 800.0,\n    \"average_response_time\": 225.0,\n    \"transactions_per_minute\": 20.8,\n    \"syncs_per_minute\": 20.0,\n    \"webhooks_per_minute\": 21.7,\n    \"peak_load_percentage\": 65.0,\n    \"capacity_utilization\": 45.0\n  },\n  \"terminals\": [\n    // List of terminal summaries\n  ],\n  \"hourly_trends\": [],\n  \"daily_trends\": [],\n  \"recent_transactions\": [],\n  \"recent_errors\": [],\n  \"generated_at\": \"2025-01-30T15:00:00Z\",\n  \"time_range\": \"last_24_hours\"\n}\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#3-terminal-details","title":"3. Terminal Details","text":"<p>Get detailed analytics for a specific POS terminal.</p> <p>Endpoint: <code>POST /analytics/pos/terminal/{terminal_id}/details</code></p> <p>Request Body:</p> <pre><code>{\n  \"terminal_id\": \"POS-001\",\n  \"time_range\": \"last_24_hours\"\n}\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#4-compare-providers","title":"4. Compare Providers","text":"<p>Compare analytics metrics across multiple POS providers.</p> <p>Endpoint: <code>POST /analytics/pos/compare</code></p> <p>Request Body:</p> <pre><code>{\n  \"provider_ids\": [1, 2, 3],  // Min: 2, Max: 5\n  \"time_range\": \"last_7_days\",\n  \"metrics\": [\"transactions\", \"success_rate\", \"sync_performance\", \"uptime\"]\n}\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#5-active-alerts","title":"5. Active Alerts","text":"<p>Get active POS analytics alerts with pagination support.</p> <p>Endpoint: <code>GET /analytics/pos/alerts/active</code></p> <p>Query Parameters: - <code>severity</code> - Filter by severity (info, warning, critical) - <code>provider_id</code> - Filter by provider - <code>terminal_id</code> - Filter by terminal - <code>limit</code> - Maximum alerts to return (default: 50, max: 200) - <code>offset</code> - Pagination offset (default: 0)</p> <p>Response:</p> <pre><code>{\n  \"alerts\": [\n    {\n      \"alert_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n      \"alert_type\": \"high_error_rate\",\n      \"severity\": \"warning\",\n      \"provider_id\": 1,\n      \"provider_name\": \"Square POS\",\n      \"terminal_id\": \"POS-002\",\n      \"title\": \"High Error Rate Detected\",\n      \"description\": \"Terminal POS-002 has error rate above threshold\",\n      \"metric_value\": 15.5,\n      \"threshold_value\": 10.0,\n      \"acknowledged\": false,\n      \"created_at\": \"2025-01-30T14:00:00Z\"\n    }\n  ],\n  \"total_count\": 3,\n  \"limit\": 50,\n  \"offset\": 0,\n  \"has_more\": false,\n  \"filters\": {\n    \"severity\": \"warning\",\n    \"provider_id\": 1,\n    \"terminal_id\": null\n  }\n}\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#6-acknowledge-alert","title":"6. Acknowledge Alert","text":"<p>Acknowledge a POS analytics alert.</p> <p>Endpoint: <code>POST /analytics/pos/alerts/{alert_id}/acknowledge</code></p> <p>Query Parameters: - <code>notes</code> - Optional acknowledgment notes</p> <p>Response:</p> <pre><code>{\n  \"success\": true,\n  \"message\": \"Alert acknowledged successfully\",\n  \"alert_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#7-terminal-health-summary","title":"7. Terminal Health Summary","text":"<p>Get summary of terminal health status.</p> <p>Endpoint: <code>GET /analytics/pos/health/terminals</code></p> <p>Query Parameters: - <code>provider_id</code> - Filter by provider - <code>health_status</code> - Filter by health status (healthy, degraded, critical, offline)</p> <p>Response:</p> <pre><code>{\n  \"summary\": {\n    \"Square POS\": {\n      \"total\": 5,\n      \"healthy\": 3,\n      \"degraded\": 1,\n      \"critical\": 0,\n      \"offline\": 1\n    },\n    \"Stripe Terminal\": {\n      \"total\": 8,\n      \"healthy\": 7,\n      \"degraded\": 0,\n      \"critical\": 0,\n      \"offline\": 1\n    }\n  },\n  \"total_terminals\": 13,\n  \"filters\": {\n    \"provider_id\": null,\n    \"health_status\": null\n  }\n}\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#8-transaction-trends","title":"8. Transaction Trends","text":"<p>Get transaction trend data for charts.</p> <p>Endpoint: <code>GET /analytics/pos/trends/transactions</code></p> <p>Query Parameters: - <code>time_range</code> - Time range (default: last_7_days) - <code>provider_id</code> - Filter by provider - <code>terminal_id</code> - Filter by terminal - <code>granularity</code> - Data granularity (hourly, daily, weekly)</p> <p>Response:</p> <pre><code>{\n  \"trends\": [\n    {\n      \"timestamp\": \"2025-01-30T14:00:00Z\",\n      \"transaction_count\": 45,\n      \"transaction_value\": 4500.0,\n      \"success_rate\": 95.6,\n      \"average_value\": 100.0\n    }\n  ],\n  \"time_range\": \"last_7_days\",\n  \"granularity\": \"hourly\",\n  \"data_points\": 168\n}\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#9-export-analytics","title":"9. Export Analytics","text":"<p>Export POS analytics data to file.</p> <p>Endpoint: <code>POST /analytics/pos/export</code></p> <p>Request Body:</p> <pre><code>{\n  \"report_type\": \"summary\",  // Options: summary, detailed, transactions, errors\n  \"format\": \"csv\",  // Options: csv, xlsx, pdf\n  \"time_range\": \"last_7_days\",\n  \"provider_ids\": [1, 2],  // Optional\n  \"terminal_ids\": [\"POS-001\"],  // Optional\n  \"include_charts\": false  // For PDF exports only\n}\n</code></pre> <p>Response: File download</p>"},{"location":"api/pos_analytics_endpoints/#10-refresh-analytics-data","title":"10. Refresh Analytics Data","text":"<p>Manually trigger refresh of POS analytics data.</p> <p>Endpoint: <code>POST /analytics/pos/refresh</code></p> <p>Query Parameters: - <code>provider_id</code> - Specific provider to refresh (optional)</p> <p>Response:</p> <pre><code>{\n  \"success\": true,\n  \"message\": \"Analytics refresh triggered\",\n  \"task_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"provider_id\": 1\n}\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#status-codes","title":"Status Codes","text":"Status Code Description 200 Success 202 Accepted (for async operations) 400 Bad Request 401 Unauthorized 403 Forbidden - Insufficient permissions 404 Not Found 500 Internal Server Error"},{"location":"api/pos_analytics_endpoints/#error-responses","title":"Error Responses","text":"<p>All error responses follow this format:</p> <pre><code>{\n  \"detail\": \"Error message describing what went wrong\"\n}\n</code></pre>"},{"location":"api/pos_analytics_endpoints/#time-ranges","title":"Time Ranges","text":"<p>The API supports the following predefined time ranges: - <code>last_hour</code> - Last 60 minutes - <code>last_24_hours</code> - Last 24 hours - <code>last_7_days</code> - Last 7 days - <code>last_30_days</code> - Last 30 days - <code>custom</code> - Custom date range (requires start_date and end_date)</p>"},{"location":"api/pos_analytics_endpoints/#health-status-values","title":"Health Status Values","text":"<p>Terminal and provider health statuses: - <code>healthy</code> - Operating normally - <code>degraded</code> - Performance issues detected - <code>critical</code> - Serious issues requiring attention - <code>offline</code> - Not responding</p>"},{"location":"api/pos_analytics_endpoints/#alert-severity-levels","title":"Alert Severity Levels","text":"<ul> <li><code>info</code> - Informational alerts</li> <li><code>warning</code> - Warning conditions</li> <li><code>critical</code> - Critical issues requiring immediate attention</li> </ul>"},{"location":"api/pos_analytics_endpoints/#best-practices","title":"Best Practices","text":"<ol> <li>Caching: Dashboard data is cached for performance. Use the refresh endpoint sparingly.</li> <li>Time Ranges: Use appropriate time ranges to avoid overwhelming the system with data.</li> <li>Filtering: Apply filters to reduce data volume and improve response times.</li> <li>Polling: For real-time updates, poll the dashboard endpoint at reasonable intervals (recommended: 30-60 seconds).</li> <li>Alert Management: Acknowledge alerts promptly to maintain a clean alert queue.</li> </ol>"},{"location":"api/pos_analytics_endpoints/#integration-example","title":"Integration Example","text":"<pre><code>import requests\nfrom datetime import datetime, timedelta\n\nclass POSAnalyticsClient:\n    def __init__(self, base_url, auth_token):\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {auth_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def get_dashboard(self, time_range=\"last_24_hours\"):\n        \"\"\"Get POS analytics dashboard\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/analytics/pos/dashboard\",\n            json={\"time_range\": time_range},\n            headers=self.headers\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def get_provider_details(self, provider_id):\n        \"\"\"Get detailed provider analytics\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/analytics/pos/provider/{provider_id}/details\",\n            json={\n                \"provider_id\": provider_id,\n                \"time_range\": \"last_24_hours\",\n                \"include_terminals\": True\n            },\n            headers=self.headers\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def acknowledge_alert(self, alert_id, notes=None):\n        \"\"\"Acknowledge an alert\"\"\"\n        params = {\"notes\": notes} if notes else {}\n        response = requests.post(\n            f\"{self.base_url}/analytics/pos/alerts/{alert_id}/acknowledge\",\n            params=params,\n            headers=self.headers\n        )\n        response.raise_for_status()\n        return response.json()\n\n# Usage\nclient = POSAnalyticsClient(\"https://api.auraconnect.ai/api\", \"your-auth-token\")\n\n# Get dashboard\ndashboard = client.get_dashboard()\nprint(f\"Total transactions: {dashboard['total_transactions']}\")\nprint(f\"Success rate: {dashboard['transaction_success_rate']}%\")\n\n# Check alerts\nif dashboard['active_alerts']:\n    for alert in dashboard['active_alerts']:\n        print(f\"Alert: {alert['title']} - {alert['severity']}\")\n\n        # Acknowledge critical alerts\n        if alert['severity'] == 'critical':\n            client.acknowledge_alert(alert['alert_id'], \"Investigating\")\n</code></pre>"},{"location":"api/pos_sync_endpoints/","title":"POS Sync API Documentation","text":""},{"location":"api/pos_sync_endpoints/#overview","title":"Overview","text":"<p>The POS Sync API provides endpoints for Point of Sale terminals to manually trigger order synchronization with the cloud system. This allows POS terminals to control when orders are synced, useful for handling network issues or batch processing.</p>"},{"location":"api/pos_sync_endpoints/#base-url","title":"Base URL","text":"<pre><code>/api/pos\n</code></pre>"},{"location":"api/pos_sync_endpoints/#authentication","title":"Authentication","text":"<p>All endpoints require authentication. Include the authentication token in the Authorization header:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre>"},{"location":"api/pos_sync_endpoints/#endpoints","title":"Endpoints","text":""},{"location":"api/pos_sync_endpoints/#1-trigger-manual-sync","title":"1. Trigger Manual Sync","text":"<p>Initiates synchronization of orders from the POS terminal to the cloud.</p> <p>Endpoint: <code>POST /pos/sync</code></p> <p>Request Body:</p> <pre><code>{\n  \"terminal_id\": \"POS-001\",  // Optional, defaults to configured terminal ID\n  \"order_ids\": [123, 124, 125],  // Optional, specific orders to sync\n  \"sync_all_pending\": true,  // Default: true, sync all pending if no order_ids\n  \"include_recent\": false  // Default: false, include recently synced orders (last 24h)\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"initiated\",  // initiated, completed, or failed\n  \"terminal_id\": \"POS-001\",\n  \"sync_batch_id\": \"manual_20250731_143022\",  // Optional batch ID\n  \"orders_queued\": 15,\n  \"orders_synced\": 0,  // Always 0 for async processing\n  \"orders_failed\": 0,  // Always 0 for async processing\n  \"message\": \"Sync initiated for 15 pending orders\",\n  \"timestamp\": \"2025-07-31T14:30:22.123Z\",\n  \"details\": {\n    \"sync_type\": \"scheduled_batch\",\n    \"include_recent\": false\n  }\n}\n</code></pre> <p>Example: Sync Specific Orders</p> <pre><code>curl -X POST https://api.auraconnect.ai/api/pos/sync \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"terminal_id\": \"POS-001\",\n    \"order_ids\": [1001, 1002, 1003]\n  }'\n</code></pre> <p>Example: Sync All Pending Orders</p> <pre><code>curl -X POST https://api.auraconnect.ai/api/pos/sync \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"terminal_id\": \"POS-001\",\n    \"sync_all_pending\": true\n  }'\n</code></pre>"},{"location":"api/pos_sync_endpoints/#2-get-sync-status","title":"2. Get Sync Status","text":"<p>Retrieves the current synchronization status for the POS terminal.</p> <p>Endpoint: <code>GET /pos/sync/status</code></p> <p>Query Parameters:</p> <ul> <li><code>terminal_id</code> (optional): Specific terminal ID, defaults to configured terminal</li> </ul> <p>Response:</p> <pre><code>{\n  \"sync_status_counts\": {\n    \"pending\": 12,\n    \"in_progress\": 3,\n    \"synced\": 145,\n    \"failed\": 2,\n    \"retry\": 1,\n    \"conflict\": 0\n  },\n  \"unsynced_orders\": 15,\n  \"pending_conflicts\": 0,\n  \"last_batch\": {\n    \"batch_id\": \"auto_20250731_140000\",\n    \"started_at\": \"2025-07-31T14:00:00Z\",\n    \"completed_at\": \"2025-07-31T14:02:15Z\",\n    \"total_orders\": 25,\n    \"successful_syncs\": 23,\n    \"failed_syncs\": 2\n  },\n  \"scheduler\": {\n    \"running\": true,\n    \"next_run\": \"2025-07-31T14:10:00Z\"\n  },\n  \"configuration\": {\n    \"sync_enabled\": true,\n    \"sync_interval_minutes\": 10,\n    \"terminal_id\": \"POS-001\",\n    \"cloud_endpoint\": \"https://api.auraconnect.ai/sync\"\n  }\n}\n</code></pre> <p>Example:</p> <pre><code>curl -X GET https://api.auraconnect.ai/api/pos/sync/status \\\n  -H \"Authorization: Bearer &lt;token&gt;\"\n</code></pre>"},{"location":"api/pos_sync_endpoints/#status-codes","title":"Status Codes","text":"Status Code Description 200 Success (GET requests) 202 Accepted - Sync initiated in background 400 Bad Request - Invalid input parameters 401 Unauthorized - Invalid or missing authentication 404 Not Found - Requested orders not found 422 Validation Error - Invalid request data format 503 Service Unavailable - Sync scheduler not available 500 Internal Server Error"},{"location":"api/pos_sync_endpoints/#sync-status-values","title":"Sync Status Values","text":"Status Description <code>pending</code> Order is queued for synchronization <code>in_progress</code> Synchronization is currently running <code>synced</code> Order successfully synchronized <code>failed</code> Synchronization failed after all retries <code>retry</code> Failed but will be retried <code>conflict</code> Conflict detected, requires resolution"},{"location":"api/pos_sync_endpoints/#error-responses","title":"Error Responses","text":"<p>All error responses follow this format:</p> <pre><code>{\n  \"detail\": \"Error message describing what went wrong\"\n}\n</code></pre>"},{"location":"api/pos_sync_endpoints/#example-error-responses","title":"Example Error Responses","text":"<p>400 Bad Request - Empty order_ids: <pre><code>{\n  \"detail\": \"order_ids cannot be empty when provided\"\n}\n</code></pre></p> <p>404 Not Found - Invalid order IDs: <pre><code>{\n  \"detail\": \"No valid orders found for IDs: [9999, 10000]\"\n}\n</code></pre></p> <p>422 Validation Error - Invalid data type: <pre><code>{\n  \"detail\": [\n    {\n      \"loc\": [\"body\", \"order_ids\"],\n      \"msg\": \"value is not a valid list\",\n      \"type\": \"type_error.list\"\n    }\n  ]\n}\n</code></pre></p> <p>503 Service Unavailable - Scheduler offline: <pre><code>{\n  \"detail\": \"Sync scheduler is unavailable\"\n}\n</code></pre></p>"},{"location":"api/pos_sync_endpoints/#usage-scenarios","title":"Usage Scenarios","text":""},{"location":"api/pos_sync_endpoints/#1-network-recovery","title":"1. Network Recovery","text":"<p>After network connectivity is restored, trigger a sync of all pending orders:</p> <pre><code>POST /pos/sync\n{\n  \"sync_all_pending\": true\n}\n</code></pre>"},{"location":"api/pos_sync_endpoints/#2-specific-order-sync","title":"2. Specific Order Sync","text":"<p>Sync specific orders that failed previously:</p> <pre><code>POST /pos/sync\n{\n  \"order_ids\": [1001, 1002, 1003]\n}\n</code></pre>"},{"location":"api/pos_sync_endpoints/#3-daily-reconciliation","title":"3. Daily Reconciliation","text":"<p>Include recently synced orders to ensure all data is up-to-date:</p> <pre><code>POST /pos/sync\n{\n  \"sync_all_pending\": true,\n  \"include_recent\": true\n}\n</code></pre>"},{"location":"api/pos_sync_endpoints/#4-check-sync-health","title":"4. Check Sync Health","text":"<p>Regularly check sync status to monitor for issues:</p> <pre><code>GET /pos/sync/status\n</code></pre>"},{"location":"api/pos_sync_endpoints/#best-practices","title":"Best Practices","text":"<ol> <li>Regular Status Checks: Poll <code>/pos/sync/status</code> periodically to monitor sync health</li> <li>Batch Processing: Use specific order IDs for targeted syncing of problematic orders</li> <li>Error Handling: Check the <code>status</code> field in responses and handle failures appropriately</li> <li>Rate Limiting: The sync endpoints are rate-limited to 1 request per minute per terminal. Implement exponential backoff for retries</li> <li>Monitoring: Track failed syncs and conflicts for manual intervention</li> </ol>"},{"location":"api/pos_sync_endpoints/#rate-limiting","title":"Rate Limiting","text":"<p>The POS sync endpoints enforce the following rate limits: - POST /pos/sync: 1 request per minute per terminal ID - GET /pos/sync/status: 60 requests per minute (standard API rate limit)</p> <p>When rate limit is exceeded, you'll receive a 429 response: <pre><code>{\n  \"detail\": \"Rate limit exceeded. Please wait before retrying.\"\n}\n</code></pre></p> <p>Implement exponential backoff in your client: <pre><code>import time\n\ndef sync_with_retry(client, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            response = client.trigger_sync()\n            if response.status_code == 429:\n                wait_time = 2 ** attempt * 60  # 1min, 2min, 4min\n                time.sleep(wait_time)\n                continue\n            return response\n        except Exception as e:\n            if attempt == max_retries - 1:\n                raise\n            time.sleep(2 ** attempt)\n</code></pre></p>"},{"location":"api/pos_sync_endpoints/#integration-example","title":"Integration Example","text":"<pre><code>import requests\nimport time\n\nclass POSSyncClient:\n    def __init__(self, base_url, auth_token):\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {auth_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def trigger_sync(self, order_ids=None, sync_all=True):\n        \"\"\"Trigger manual sync\"\"\"\n        payload = {\n            \"terminal_id\": \"POS-001\",\n            \"sync_all_pending\": sync_all\n        }\n\n        if order_ids:\n            payload[\"order_ids\"] = order_ids\n            payload[\"sync_all_pending\"] = False\n\n        response = requests.post(\n            f\"{self.base_url}/pos/sync\",\n            json=payload,\n            headers=self.headers\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def get_sync_status(self):\n        \"\"\"Get current sync status\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/pos/sync/status\",\n            headers=self.headers\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def wait_for_sync_completion(self, timeout=300):\n        \"\"\"Wait for all pending syncs to complete\"\"\"\n        start_time = time.time()\n\n        while time.time() - start_time &lt; timeout:\n            status = self.get_sync_status()\n            pending = status[\"sync_status_counts\"][\"pending\"]\n            in_progress = status[\"sync_status_counts\"][\"in_progress\"]\n\n            if pending == 0 and in_progress == 0:\n                return True\n\n            time.sleep(5)  # Check every 5 seconds\n\n        return False\n\n# Usage\nclient = POSSyncClient(\"https://api.auraconnect.ai/api\", \"your-auth-token\")\n\n# Trigger sync\nresult = client.trigger_sync()\nprint(f\"Sync initiated: {result['orders_queued']} orders queued\")\n\n# Wait for completion\nif client.wait_for_sync_completion():\n    print(\"All orders synced successfully\")\nelse:\n    print(\"Sync timeout - check status for details\")\n</code></pre>"},{"location":"architecture/","title":"AuraConnect Architecture Overview","text":""},{"location":"architecture/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Overview</li> <li>Architecture Principles</li> <li>High-Level Architecture</li> <li>Microservices Architecture</li> <li>Data Architecture</li> <li>Security Architecture</li> <li>Integration Architecture</li> <li>Deployment Architecture</li> <li>Technology Stack</li> </ol>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>AuraConnect is built on a modern microservices architecture that ensures scalability, maintainability, and reliability. The system is designed to handle the complex requirements of restaurant management while providing flexibility for future growth.</p>"},{"location":"architecture/#key-architectural-components","title":"Key Architectural Components","text":"<ul> <li>Frontend Applications: Multiple client applications for different user types</li> <li>API Gateway: Central entry point with load balancing and rate limiting</li> <li>Microservices: Domain-driven services handling specific business functions</li> <li>Data Layer: PostgreSQL with multi-tenant support and data partitioning</li> <li>Infrastructure Services: Redis, Celery, S3 for caching, queuing, and storage</li> </ul>"},{"location":"architecture/#architecture-principles","title":"Architecture Principles","text":""},{"location":"architecture/#1-domain-driven-design-ddd","title":"1. Domain-Driven Design (DDD)","text":"<p>Each microservice is organized around a specific business domain, ensuring clear boundaries and responsibilities.</p>"},{"location":"architecture/#2-api-first-design","title":"2. API-First Design","text":"<p>All services expose well-documented RESTful APIs, enabling easy integration and extensibility.</p>"},{"location":"architecture/#3-event-driven-architecture","title":"3. Event-Driven Architecture","text":"<p>Services communicate through events for loose coupling and scalability.</p>"},{"location":"architecture/#4-security-by-design","title":"4. Security by Design","text":"<p>Security is built into every layer, from API authentication to data encryption.</p>"},{"location":"architecture/#5-cloud-native","title":"5. Cloud-Native","text":"<p>Designed for containerization and orchestration in cloud environments.</p>"},{"location":"architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        WEB[Web Application]\n        MOBILE[Mobile Apps]\n        POS[POS Terminals]\n        KITCHEN[Kitchen Display]\n    end\n\n    subgraph \"API Gateway Layer\"\n        NGINX[Nginx Load Balancer]\n        AUTH_MW[Auth Middleware]\n        RATE[Rate Limiter]\n    end\n\n    subgraph \"Application Layer\"\n        subgraph \"Core Services\"\n            AUTH_SVC[Auth Service]\n            ORDER_SVC[Order Service]\n            MENU_SVC[Menu Service]\n            INV_SVC[Inventory Service]\n        end\n\n        subgraph \"Management Services\"\n            STAFF_SVC[Staff Service]\n            PAYROLL_SVC[Payroll Service]\n            TAX_SVC[Tax Service]\n        end\n\n        subgraph \"Customer Services\"\n            CUST_SVC[Customer Service]\n            FEED_SVC[Feedback Service]\n            LOYAL_SVC[Loyalty Service]\n            PROMO_SVC[Promotion Service]\n        end\n\n        subgraph \"Intelligence Services\"\n            ANALYTICS[Analytics Service]\n            AI_REC[AI Recommendations]\n        end\n    end\n\n    subgraph \"Infrastructure Layer\"\n        REDIS[(Redis Cache)]\n        CELERY[Celery Queue]\n        S3[S3 Storage]\n    end\n\n    subgraph \"Data Layer\"\n        PG[(PostgreSQL)]\n        PG_REP[(PG Replica)]\n    end\n\n    WEB --&gt; NGINX\n    MOBILE --&gt; NGINX\n    POS --&gt; NGINX\n    KITCHEN --&gt; NGINX\n\n    NGINX --&gt; AUTH_MW\n    AUTH_MW --&gt; RATE\n    RATE --&gt; AUTH_SVC\n    RATE --&gt; ORDER_SVC\n    RATE --&gt; MENU_SVC\n    RATE --&gt; INV_SVC\n    RATE --&gt; STAFF_SVC\n    RATE --&gt; PAYROLL_SVC\n    RATE --&gt; TAX_SVC\n    RATE --&gt; CUST_SVC\n    RATE --&gt; FEED_SVC\n    RATE --&gt; LOYAL_SVC\n    RATE --&gt; PROMO_SVC\n    RATE --&gt; ANALYTICS\n    RATE --&gt; AI_REC\n\n    AUTH_SVC --&gt; REDIS\n    ORDER_SVC --&gt; REDIS\n    ORDER_SVC --&gt; CELERY\n    PAYROLL_SVC --&gt; CELERY\n    ANALYTICS --&gt; S3\n\n    AUTH_SVC --&gt; PG\n    ORDER_SVC --&gt; PG\n    MENU_SVC --&gt; PG\n    INV_SVC --&gt; PG\n    STAFF_SVC --&gt; PG\n    PAYROLL_SVC --&gt; PG\n    TAX_SVC --&gt; PG\n    CUST_SVC --&gt; PG\n    FEED_SVC --&gt; PG\n    LOYAL_SVC --&gt; PG\n    PROMO_SVC --&gt; PG\n    ANALYTICS --&gt; PG_REP\n    AI_REC --&gt; PG_REP</code></pre>"},{"location":"architecture/#microservices-architecture","title":"Microservices Architecture","text":""},{"location":"architecture/#service-communication-patterns","title":"Service Communication Patterns","text":""},{"location":"architecture/#synchronous-communication","title":"Synchronous Communication","text":"<ul> <li>REST APIs: Primary communication method</li> <li>GraphQL: Future implementation for flexible queries</li> <li>gRPC: For internal service-to-service communication</li> </ul>"},{"location":"architecture/#asynchronous-communication","title":"Asynchronous Communication","text":"<ul> <li>Event Bus: Redis Pub/Sub for real-time events</li> <li>Message Queue: Celery for background tasks</li> <li>Webhooks: For external integrations</li> </ul>"},{"location":"architecture/#service-registry-and-discovery","title":"Service Registry and Discovery","text":"<pre><code>services:\n  auth-service:\n    host: auth.internal\n    port: 8001\n    health: /health\n\n  order-service:\n    host: orders.internal\n    port: 8002\n    health: /health\n\n  payroll-service:\n    host: payroll.internal\n    port: 8003\n    health: /health\n</code></pre>"},{"location":"architecture/#api-gateway-pattern","title":"API Gateway Pattern","text":"<p>The API Gateway (Nginx) provides: - Routing: Routes requests to appropriate services - Authentication: Validates JWT tokens - Rate Limiting: Prevents API abuse - Load Balancing: Distributes load across service instances - SSL Termination: Handles HTTPS certificates</p>"},{"location":"architecture/#data-architecture","title":"Data Architecture","text":""},{"location":"architecture/#multi-tenant-architecture","title":"Multi-Tenant Architecture","text":"<pre><code>-- Row-level security for tenant isolation\nCREATE POLICY tenant_isolation ON all_tables\n    FOR ALL\n    USING (tenant_id = current_setting('app.current_tenant')::int);\n</code></pre>"},{"location":"architecture/#database-schema-design","title":"Database Schema Design","text":"<pre><code>erDiagram\n    Restaurant ||--o{ Location : has\n    Location ||--o{ Staff : employs\n    Location ||--o{ Menu : offers\n    Location ||--o{ Order : receives\n\n    Staff ||--o{ Schedule : has\n    Staff ||--o{ Payroll : receives\n    Staff ||--o{ TimeEntry : logs\n\n    Menu ||--o{ MenuItem : contains\n    MenuItem ||--o{ OrderItem : ordered_as\n\n    Order ||--o{ OrderItem : contains\n    Order ||--o{ Payment : has\n    Order }o--|| Customer : placed_by\n\n    Customer ||--o{ LoyaltyPoints : earns\n    Customer ||--o{ Feedback : provides</code></pre>"},{"location":"architecture/#data-partitioning-strategy","title":"Data Partitioning Strategy","text":"<ul> <li>Time-based partitioning: Orders, payments, and logs</li> <li>List partitioning: By location for multi-location restaurants</li> <li>Hash partitioning: Customer data for even distribution</li> </ul>"},{"location":"architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Gateway\n    participant AuthService\n    participant Service\n\n    Client-&gt;&gt;Gateway: Request with credentials\n    Gateway-&gt;&gt;AuthService: Validate credentials\n    AuthService--&gt;&gt;Gateway: JWT Token\n    Gateway--&gt;&gt;Client: Token response\n\n    Client-&gt;&gt;Gateway: Request with JWT\n    Gateway-&gt;&gt;Gateway: Validate JWT\n    Gateway-&gt;&gt;Service: Forward request with user context\n    Service--&gt;&gt;Gateway: Response\n    Gateway--&gt;&gt;Client: Response</code></pre>"},{"location":"architecture/#security-layers","title":"Security Layers","text":"<ol> <li>Network Security</li> <li>SSL/TLS encryption</li> <li>VPC isolation</li> <li> <p>Security groups</p> </li> <li> <p>Application Security</p> </li> <li>JWT authentication</li> <li>Role-based access control (RBAC)</li> <li>Input validation</li> <li> <p>SQL injection prevention</p> </li> <li> <p>Data Security</p> </li> <li>Encryption at rest</li> <li>Encryption in transit</li> <li>PII data masking</li> <li>Audit logging</li> </ol>"},{"location":"architecture/#integration-architecture","title":"Integration Architecture","text":""},{"location":"architecture/#pos-integration","title":"POS Integration","text":"<pre><code>graph LR\n    subgraph \"POS Systems\"\n        SQUARE[Square POS]\n        CLOVER[Clover POS]\n        TOAST[Toast POS]\n    end\n\n    subgraph \"Integration Layer\"\n        ADAPTER[POS Adapter]\n        QUEUE[Message Queue]\n        SYNC[Sync Engine]\n    end\n\n    subgraph \"AuraConnect\"\n        API[API Layer]\n        DB[(Database)]\n    end\n\n    SQUARE --&gt; ADAPTER\n    CLOVER --&gt; ADAPTER\n    TOAST --&gt; ADAPTER\n\n    ADAPTER --&gt; QUEUE\n    QUEUE --&gt; SYNC\n    SYNC --&gt; API\n    API --&gt; DB</code></pre>"},{"location":"architecture/#external-service-integration","title":"External Service Integration","text":"<ul> <li>Payment Processing: Stripe, PayPal, Square</li> <li>SMS/Email: Twilio, SendGrid</li> <li>Analytics: Google Analytics, Mixpanel</li> <li>Accounting: QuickBooks, Xero</li> </ul>"},{"location":"architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"architecture/#container-architecture","title":"Container Architecture","text":"<pre><code>version: '3.8'\n\nservices:\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    depends_on:\n      - auth-service\n      - order-service\n\n  auth-service:\n    build: ./services/auth\n    environment:\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=${REDIS_URL}\n    deploy:\n      replicas: 2\n\n  order-service:\n    build: ./services/orders\n    environment:\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=${REDIS_URL}\n    deploy:\n      replicas: 3\n\n  postgres:\n    image: postgres:14-alpine\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  redis:\n    image: redis:7-alpine\n    command: redis-server --appendonly yes\n</code></pre>"},{"location":"architecture/#kubernetes-architecture","title":"Kubernetes Architecture","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: order-service\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: order-service\n  template:\n    metadata:\n      labels:\n        app: order-service\n    spec:\n      containers:\n      - name: order-service\n        image: auraconnect/order-service:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: url\n</code></pre>"},{"location":"architecture/#scaling-strategy","title":"Scaling Strategy","text":""},{"location":"architecture/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Stateless Services: Easy to scale horizontally</li> <li>Load Balancing: Distribute traffic across instances</li> <li>Auto-scaling: Based on CPU/memory metrics</li> </ul>"},{"location":"architecture/#vertical-scaling","title":"Vertical Scaling","text":"<ul> <li>Database: Scale up for better performance</li> <li>Cache: Increase Redis memory</li> <li>Workers: More powerful machines for background jobs</li> </ul>"},{"location":"architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"architecture/#backend-stack","title":"Backend Stack","text":"Technology Purpose Version Python Primary language 3.11+ FastAPI Web framework 0.104+ PostgreSQL Primary database 14+ Redis Cache &amp; message broker 7+ Celery Task queue 5.3+ SQLAlchemy ORM 2.0+ Alembic Database migrations 1.12+ Pydantic Data validation 2.4+"},{"location":"architecture/#frontend-stack","title":"Frontend Stack","text":"Technology Purpose Version React UI framework 18+ TypeScript Type safety 5+ Redux Toolkit State management 1.9+ Material-UI Component library 5+ Axios HTTP client 1.5+ React Query Data fetching 4+"},{"location":"architecture/#infrastructure-stack","title":"Infrastructure Stack","text":"Technology Purpose Docker Containerization Kubernetes Container orchestration Nginx API gateway &amp; load balancer Prometheus Monitoring Grafana Metrics visualization ELK Stack Logging GitHub Actions CI/CD"},{"location":"architecture/#architecture-decision-records-adrs","title":"Architecture Decision Records (ADRs)","text":""},{"location":"architecture/#adr-001-microservices-architecture","title":"ADR-001: Microservices Architecture","text":"<p>Decision: Use microservices instead of monolithic architecture Rationale: Better scalability, independent deployments, technology flexibility</p>"},{"location":"architecture/#adr-002-postgresql-as-primary-database","title":"ADR-002: PostgreSQL as Primary Database","text":"<p>Decision: Use PostgreSQL for all services Rationale: ACID compliance, JSON support, excellent performance, proven reliability</p>"},{"location":"architecture/#adr-003-jwt-for-authentication","title":"ADR-003: JWT for Authentication","text":"<p>Decision: Use JWT tokens with refresh token pattern Rationale: Stateless, scalable, industry standard</p>"},{"location":"architecture/#adr-004-redis-for-caching","title":"ADR-004: Redis for Caching","text":"<p>Decision: Use Redis for caching and pub/sub Rationale: High performance, versatility, wide adoption</p>"},{"location":"architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>API Response Caching: Redis with TTL</li> <li>Database Query Caching: Query result caching</li> <li>Static Asset Caching: CDN for frontend assets</li> </ul>"},{"location":"architecture/#database-optimization","title":"Database Optimization","text":"<ul> <li>Indexes: Strategic indexing for common queries</li> <li>Connection Pooling: Optimal connection management</li> <li>Query Optimization: EXPLAIN ANALYZE for slow queries</li> </ul>"},{"location":"architecture/#api-performance","title":"API Performance","text":"<ul> <li>Pagination: Limit response sizes</li> <li>Field Selection: GraphQL-style field selection</li> <li>Compression: Gzip response compression</li> </ul>"},{"location":"architecture/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"architecture/#metrics-collection","title":"Metrics Collection","text":"<pre><code>metrics:\n  - name: api_request_duration\n    type: histogram\n    labels: [method, endpoint, status]\n\n  - name: database_query_duration\n    type: histogram\n    labels: [query_type, table]\n\n  - name: cache_hit_rate\n    type: gauge\n    labels: [cache_type]\n</code></pre>"},{"location":"architecture/#logging-strategy","title":"Logging Strategy","text":"<ul> <li>Structured Logging: JSON format for easy parsing</li> <li>Correlation IDs: Track requests across services</li> <li>Log Levels: DEBUG, INFO, WARNING, ERROR, CRITICAL</li> </ul>"},{"location":"architecture/#health-checks","title":"Health Checks","text":"<pre><code>@app.get(\"/health\")\nasync def health_check():\n    return {\n        \"status\": \"healthy\",\n        \"database\": check_database(),\n        \"redis\": check_redis(),\n        \"version\": __version__\n    }\n</code></pre>"},{"location":"architecture/#future-architecture-enhancements","title":"Future Architecture Enhancements","text":""},{"location":"architecture/#short-term-6-months","title":"Short-term (6 months)","text":"<ul> <li>GraphQL API implementation</li> <li>Service mesh (Istio) for better service communication</li> <li>Enhanced monitoring with distributed tracing</li> </ul>"},{"location":"architecture/#long-term-1-2-years","title":"Long-term (1-2 years)","text":"<ul> <li>Event sourcing for critical operations</li> <li>CQRS pattern for read/write separation</li> <li>Machine learning pipeline for advanced analytics</li> </ul>"},{"location":"architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>Deployment Guide</li> <li>API Documentation</li> <li>Developer Guide</li> <li>Module Architecture</li> </ul>"},{"location":"deployment/","title":"AuraConnect Deployment Guide","text":""},{"location":"deployment/#overview","title":"Overview","text":"<p>This guide covers deploying AuraConnect to production environments. We support multiple deployment options from single-server setups to highly available Kubernetes clusters.</p>"},{"location":"deployment/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Deployment Options</li> <li>Prerequisites</li> <li>Docker Deployment</li> <li>Kubernetes Deployment</li> <li>Cloud Platform Deployments</li> <li>Database Setup</li> <li>SSL/TLS Configuration</li> <li>Environment Configuration</li> <li>Monitoring &amp; Logging</li> <li>Backup &amp; Recovery</li> <li>Scaling Strategies</li> <li>Troubleshooting</li> </ol>"},{"location":"deployment/#deployment-options","title":"Deployment Options","text":""},{"location":"deployment/#option-1-single-server-small-restaurants","title":"Option 1: Single Server (Small Restaurants)","text":"<ul> <li>Best for: 1-3 locations, &lt; 100 daily orders</li> <li>Resources: 4 CPU, 8GB RAM, 100GB storage</li> <li>Cost: ~$50-100/month</li> </ul>"},{"location":"deployment/#option-2-multi-server-medium-chains","title":"Option 2: Multi-Server (Medium Chains)","text":"<ul> <li>Best for: 4-20 locations, &lt; 1000 daily orders</li> <li>Resources: 2-3 servers, load balancer</li> <li>Cost: ~$300-500/month</li> </ul>"},{"location":"deployment/#option-3-kubernetes-cluster-large-chains","title":"Option 3: Kubernetes Cluster (Large Chains)","text":"<ul> <li>Best for: 20+ locations, high availability</li> <li>Resources: 3+ nodes, auto-scaling</li> <li>Cost: ~$1000+/month</li> </ul>"},{"location":"deployment/#prerequisites","title":"Prerequisites","text":""},{"location":"deployment/#system-requirements","title":"System Requirements","text":"<pre><code>Minimum Production Requirements:\n  CPU: 4 cores\n  RAM: 8 GB\n  Storage: 100 GB SSD\n  Network: 100 Mbps\n  OS: Ubuntu 20.04+ or RHEL 8+\n\nRecommended Production Requirements:\n  CPU: 8 cores\n  RAM: 16 GB\n  Storage: 500 GB SSD\n  Network: 1 Gbps\n  Database: Dedicated PostgreSQL server\n</code></pre>"},{"location":"deployment/#required-software","title":"Required Software","text":"<ul> <li>Docker 20.10+</li> <li>Docker Compose 2.0+ (for Docker deployment)</li> <li>Kubernetes 1.24+ (for K8s deployment)</li> <li>Nginx 1.20+</li> <li>PostgreSQL 14+</li> <li>Redis 6+</li> </ul>"},{"location":"deployment/#docker-deployment","title":"Docker Deployment","text":""},{"location":"deployment/#1-server-preparation","title":"1. Server Preparation","text":"<pre><code># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Docker\ncurl -fsSL https://get.docker.com | sh\nsudo usermod -aG docker $USER\n\n# Install Docker Compose\nsudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n</code></pre>"},{"location":"deployment/#2-clone-repository","title":"2. Clone Repository","text":"<pre><code>git clone https://github.com/AuraTechWave/auraconnectai.git\ncd auraconnectai\n</code></pre>"},{"location":"deployment/#3-configure-environment","title":"3. Configure Environment","text":"<pre><code># Copy production environment files\ncp .env.production .env\ncp backend/.env.production backend/.env\ncp frontend/.env.production frontend/.env\n\n# Edit configuration\nvim .env\n</code></pre> <p>Key environment variables:</p> <pre><code># Application\nENVIRONMENT=production\nDEBUG=False\nSECRET_KEY=&lt;generate-strong-secret&gt;\n\n# Database\nDATABASE_URL=postgresql://aura:password@postgres:5432/auraconnect\nDATABASE_POOL_SIZE=50\n\n# Redis\nREDIS_URL=redis://redis:6379/0\n\n# Domain\nDOMAIN=restaurant.example.com\nAPI_URL=https://api.restaurant.example.com\n\n# Email\nEMAIL_HOST=smtp.sendgrid.net\nEMAIL_PORT=587\nEMAIL_USER=apikey\nEMAIL_PASSWORD=&lt;sendgrid-api-key&gt;\n</code></pre>"},{"location":"deployment/#4-build-and-deploy","title":"4. Build and Deploy","text":"<pre><code># Build images\ndocker-compose -f docker-compose.yml -f docker-compose.prod.yml build\n\n# Start services\ndocker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d\n\n# Run migrations\ndocker-compose exec backend alembic upgrade head\n\n# Create superuser\ndocker-compose exec backend python scripts/create_superuser.py\n</code></pre>"},{"location":"deployment/#5-setup-nginx-reverse-proxy","title":"5. Setup Nginx Reverse Proxy","text":"<pre><code># /etc/nginx/sites-available/auraconnect\nserver {\n    listen 80;\n    server_name restaurant.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name restaurant.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/restaurant.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/restaurant.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name api.restaurant.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/api.restaurant.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/api.restaurant.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://localhost:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"deployment/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"deployment/#1-prepare-kubernetes-cluster","title":"1. Prepare Kubernetes Cluster","text":"<pre><code># For AWS EKS\neksctl create cluster --name auraconnect --region us-east-1 --nodes 3\n\n# For Google GKE\ngcloud container clusters create auraconnect --num-nodes=3 --zone=us-central1-a\n\n# For local testing with minikube\nminikube start --nodes 3 --cpus 4 --memory 8192\n</code></pre>"},{"location":"deployment/#2-install-required-tools","title":"2. Install Required Tools","text":"<pre><code># Install Helm\ncurl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n\n# Add repositories\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\n</code></pre>"},{"location":"deployment/#3-deploy-infrastructure-components","title":"3. Deploy Infrastructure Components","text":"<pre><code># Create namespace\nkubectl create namespace auraconnect\n\n# Install PostgreSQL\nhelm install postgres bitnami/postgresql \\\n  --namespace auraconnect \\\n  --set auth.postgresPassword=secretpassword \\\n  --set auth.database=auraconnect \\\n  --set persistence.size=100Gi\n\n# Install Redis\nhelm install redis bitnami/redis \\\n  --namespace auraconnect \\\n  --set auth.enabled=false \\\n  --set master.persistence.size=10Gi\n\n# Install Nginx Ingress\nhelm install nginx-ingress ingress-nginx/ingress-nginx \\\n  --namespace auraconnect\n</code></pre>"},{"location":"deployment/#4-deploy-application","title":"4. Deploy Application","text":"<pre><code># Apply configurations\nkubectl apply -f k8s/namespace.yaml\nkubectl apply -f k8s/configmap.yaml\nkubectl apply -f k8s/secrets.yaml\n\n# Deploy services\nkubectl apply -f k8s/backend-deployment.yaml\nkubectl apply -f k8s/frontend-deployment.yaml\nkubectl apply -f k8s/celery-deployment.yaml\n\n# Apply ingress\nkubectl apply -f k8s/ingress.yaml\n</code></pre> <p>Example deployment file:</p> <pre><code># k8s/backend-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend\n  namespace: auraconnect\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n      - name: backend\n        image: auraconnect/backend:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: url\n        - name: REDIS_URL\n          value: \"redis://redis-master:6379\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: backend\n  namespace: auraconnect\nspec:\n  selector:\n    app: backend\n  ports:\n  - port: 8000\n    targetPort: 8000\n  type: ClusterIP\n</code></pre>"},{"location":"deployment/#cloud-platform-deployments","title":"Cloud Platform Deployments","text":""},{"location":"deployment/#aws-deployment","title":"AWS Deployment","text":"<pre><code># Using AWS Copilot\ncopilot app init auraconnect\ncopilot env init --name production\ncopilot svc deploy --name backend --env production\ncopilot svc deploy --name frontend --env production\n</code></pre>"},{"location":"deployment/#google-cloud-platform","title":"Google Cloud Platform","text":"<pre><code># Using Cloud Run\ngcloud run deploy backend \\\n  --image gcr.io/project-id/auraconnect-backend \\\n  --platform managed \\\n  --region us-central1 \\\n  --allow-unauthenticated\n\ngcloud run deploy frontend \\\n  --image gcr.io/project-id/auraconnect-frontend \\\n  --platform managed \\\n  --region us-central1 \\\n  --allow-unauthenticated\n</code></pre>"},{"location":"deployment/#azure-deployment","title":"Azure Deployment","text":"<pre><code># Using Azure Container Instances\naz container create \\\n  --resource-group auraconnect-rg \\\n  --name backend \\\n  --image auraconnect/backend:latest \\\n  --dns-name-label auraconnect-api \\\n  --ports 8000 \\\n  --environment-variables DATABASE_URL=$DATABASE_URL\n</code></pre>"},{"location":"deployment/#database-setup","title":"Database Setup","text":""},{"location":"deployment/#postgresql-configuration","title":"PostgreSQL Configuration","text":"<pre><code>-- Performance tuning\nALTER SYSTEM SET shared_buffers = '4GB';\nALTER SYSTEM SET effective_cache_size = '12GB';\nALTER SYSTEM SET maintenance_work_mem = '1GB';\nALTER SYSTEM SET checkpoint_completion_target = 0.9;\nALTER SYSTEM SET wal_buffers = '16MB';\nALTER SYSTEM SET default_statistics_target = 100;\nALTER SYSTEM SET random_page_cost = 1.1;\nALTER SYSTEM SET effective_io_concurrency = 200;\nALTER SYSTEM SET work_mem = '10MB';\nALTER SYSTEM SET min_wal_size = '1GB';\nALTER SYSTEM SET max_wal_size = '4GB';\n\n-- Create database and user\nCREATE DATABASE auraconnect;\nCREATE USER aurauser WITH ENCRYPTED PASSWORD 'strongpassword';\nGRANT ALL PRIVILEGES ON DATABASE auraconnect TO aurauser;\n\n-- Enable extensions\n\\c auraconnect\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\";\nCREATE EXTENSION IF NOT EXISTS \"btree_gin\";\n</code></pre>"},{"location":"deployment/#database-migrations","title":"Database Migrations","text":"<pre><code># Run migrations\ndocker-compose exec backend alembic upgrade head\n\n# Create backup before migrations\npg_dump -h localhost -U aurauser -d auraconnect &gt; backup_$(date +%Y%m%d_%H%M%S).sql\n</code></pre>"},{"location":"deployment/#ssltls-configuration","title":"SSL/TLS Configuration","text":""},{"location":"deployment/#lets-encrypt-with-certbot","title":"Let's Encrypt with Certbot","text":"<pre><code># Install Certbot\nsudo apt install certbot python3-certbot-nginx\n\n# Obtain certificates\nsudo certbot --nginx -d restaurant.example.com -d api.restaurant.example.com\n\n# Auto-renewal\nsudo certbot renew --dry-run\n</code></pre>"},{"location":"deployment/#ssl-configuration-for-nginx","title":"SSL Configuration for Nginx","text":"<pre><code># Strong SSL configuration\nssl_protocols TLSv1.2 TLSv1.3;\nssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;\nssl_prefer_server_ciphers off;\nssl_session_timeout 1d;\nssl_session_cache shared:SSL:10m;\nssl_session_tickets off;\nssl_stapling on;\nssl_stapling_verify on;\nadd_header Strict-Transport-Security \"max-age=63072000\" always;\n</code></pre>"},{"location":"deployment/#environment-configuration","title":"Environment Configuration","text":""},{"location":"deployment/#production-environment-variables","title":"Production Environment Variables","text":"<pre><code># .env.production\n# Application\nENVIRONMENT=production\nDEBUG=False\nSECRET_KEY=&lt;use-strong-random-key&gt;\nALLOWED_HOSTS=restaurant.example.com,api.restaurant.example.com\n\n# Database\nDATABASE_URL=postgresql://aurauser:password@db.example.com:5432/auraconnect\nDATABASE_POOL_SIZE=50\nDATABASE_MAX_OVERFLOW=10\nDATABASE_POOL_TIMEOUT=30\n\n# Redis\nREDIS_URL=redis://redis.example.com:6379/0\nREDIS_MAX_CONNECTIONS=100\n\n# Security\nJWT_SECRET_KEY=&lt;use-different-strong-key&gt;\nJWT_ALGORITHM=HS256\nJWT_ACCESS_TOKEN_EXPIRE_MINUTES=30\nJWT_REFRESH_TOKEN_EXPIRE_DAYS=7\n\n# Email\nEMAIL_BACKEND=smtp\nEMAIL_HOST=smtp.sendgrid.net\nEMAIL_PORT=587\nEMAIL_HOST_USER=apikey\nEMAIL_HOST_PASSWORD=&lt;sendgrid-api-key&gt;\nDEFAULT_FROM_EMAIL=noreply@restaurant.example.com\n\n# Storage\nAWS_ACCESS_KEY_ID=&lt;aws-access-key&gt;\nAWS_SECRET_ACCESS_KEY=&lt;aws-secret-key&gt;\nAWS_S3_BUCKET_NAME=auraconnect-assets\nAWS_S3_REGION=us-east-1\n\n# Monitoring\nSENTRY_DSN=https://xxx@sentry.io/yyy\nDATADOG_API_KEY=&lt;datadog-api-key&gt;\n\n# Feature Flags\nENABLE_ANALYTICS=true\nENABLE_AI_RECOMMENDATIONS=true\nENABLE_MULTI_LANGUAGE=true\n</code></pre>"},{"location":"deployment/#monitoring-logging","title":"Monitoring &amp; Logging","text":""},{"location":"deployment/#prometheus-setup","title":"Prometheus Setup","text":"<pre><code># docker-compose.monitoring.yml\nservices:\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    ports:\n      - \"9090:9090\"\n\n  grafana:\n    image: grafana/grafana\n    volumes:\n      - grafana_data:/var/lib/grafana\n    ports:\n      - \"3001:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n\n  node-exporter:\n    image: prom/node-exporter\n    ports:\n      - \"9100:9100\"\n</code></pre>"},{"location":"deployment/#logging-with-elk-stack","title":"Logging with ELK Stack","text":"<pre><code># docker-compose.logging.yml\nservices:\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0\n    environment:\n      - discovery.type=single-node\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    volumes:\n      - elasticsearch_data:/usr/share/elasticsearch/data\n\n  logstash:\n    image: docker.elastic.co/logstash/logstash:8.5.0\n    volumes:\n      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf\n\n  kibana:\n    image: docker.elastic.co/kibana/kibana:8.5.0\n    ports:\n      - \"5601:5601\"\n</code></pre>"},{"location":"deployment/#application-metrics","title":"Application Metrics","text":"<pre><code># Prometheus metrics\nfrom prometheus_client import Counter, Histogram, Gauge\n\n# Define metrics\norder_counter = Counter('orders_total', 'Total orders', ['status'])\nresponse_time = Histogram('response_time_seconds', 'Response time')\nactive_users = Gauge('active_users', 'Active users')\n\n# Use in application\n@app.post(\"/orders\")\nasync def create_order():\n    with response_time.time():\n        # Process order\n        order_counter.labels(status='created').inc()\n</code></pre>"},{"location":"deployment/#backup-recovery","title":"Backup &amp; Recovery","text":""},{"location":"deployment/#automated-backups","title":"Automated Backups","text":"<pre><code>#!/bin/bash\n# backup.sh\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/backups\"\n\n# Database backup\npg_dump -h $DB_HOST -U $DB_USER -d $DB_NAME | gzip &gt; $BACKUP_DIR/db_$DATE.sql.gz\n\n# Upload to S3\naws s3 cp $BACKUP_DIR/db_$DATE.sql.gz s3://auraconnect-backups/db/\n\n# Redis backup\nredis-cli --rdb $BACKUP_DIR/redis_$DATE.rdb\naws s3 cp $BACKUP_DIR/redis_$DATE.rdb s3://auraconnect-backups/redis/\n\n# Clean old backups\nfind $BACKUP_DIR -name \"*.gz\" -mtime +7 -delete\n</code></pre>"},{"location":"deployment/#restore-process","title":"Restore Process","text":"<pre><code># Restore database\ngunzip -c backup.sql.gz | psql -h localhost -U aurauser -d auraconnect\n\n# Restore Redis\nredis-cli --pipe &lt; redis_backup.rdb\n</code></pre>"},{"location":"deployment/#scaling-strategies","title":"Scaling Strategies","text":""},{"location":"deployment/#horizontal-scaling","title":"Horizontal Scaling","text":"<pre><code># Kubernetes HPA\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: backend-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: backend\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre>"},{"location":"deployment/#database-scaling","title":"Database Scaling","text":"<pre><code>-- Read replicas\nCREATE PUBLICATION auraconnect_pub FOR ALL TABLES;\n\n-- On replica\nCREATE SUBSCRIPTION auraconnect_sub\n  CONNECTION 'host=master.db.example.com dbname=auraconnect user=replicator'\n  PUBLICATION auraconnect_pub;\n</code></pre>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/#common-issues","title":"Common Issues","text":""},{"location":"deployment/#1-database-connection-issues","title":"1. Database Connection Issues","text":"<pre><code># Check connectivity\npsql -h db.example.com -U aurauser -d auraconnect -c \"SELECT 1\"\n\n# Check connection pool\ndocker-compose exec backend python -c \"from app.database import engine; print(engine.pool.status())\"\n</code></pre>"},{"location":"deployment/#2-memory-issues","title":"2. Memory Issues","text":"<pre><code># Check memory usage\ndocker stats\n\n# Increase memory limits\ndocker update --memory=\"2g\" --memory-swap=\"3g\" container_name\n</code></pre>"},{"location":"deployment/#3-performance-issues","title":"3. Performance Issues","text":"<pre><code># Enable slow query logging\nALTER SYSTEM SET log_min_duration_statement = 1000;\n\n# Check slow queries\ntail -f /var/log/postgresql/postgresql-*.log | grep \"duration:\"\n</code></pre>"},{"location":"deployment/#health-checks","title":"Health Checks","text":"<pre><code># Health check endpoint\n@app.get(\"/health\")\nasync def health_check():\n    checks = {\n        \"database\": await check_database(),\n        \"redis\": await check_redis(),\n        \"storage\": await check_storage(),\n    }\n\n    status = \"healthy\" if all(checks.values()) else \"unhealthy\"\n    status_code = 200 if status == \"healthy\" else 503\n\n    return JSONResponse(\n        content={\"status\": status, \"checks\": checks},\n        status_code=status_code\n    )\n</code></pre>"},{"location":"deployment/#security-checklist","title":"Security Checklist","text":"<ul> <li> SSL/TLS certificates installed and auto-renewing</li> <li> Firewall rules configured (only required ports open)</li> <li> Database access restricted to application servers</li> <li> Environment variables secured (not in version control)</li> <li> Regular security updates applied</li> <li> Backup encryption enabled</li> <li> Monitoring and alerting configured</li> <li> DDoS protection enabled (CloudFlare/AWS Shield)</li> <li> WAF rules configured</li> <li> Secrets rotated regularly</li> </ul>"},{"location":"deployment/#performance-checklist","title":"Performance Checklist","text":"<ul> <li> Database indexes optimized</li> <li> Redis caching properly configured</li> <li> CDN enabled for static assets</li> <li> Gzip compression enabled</li> <li> Connection pooling configured</li> <li> Query optimization completed</li> <li> Load testing performed</li> <li> Auto-scaling configured</li> <li> Resource limits set appropriately</li> <li> Monitoring dashboards created</li> </ul>"},{"location":"deployment/#support","title":"Support","text":"<p>For deployment assistance: - Documentation: https://docs.auraconnect.com/deployment - Support Email: support@auratechwave.com - Emergency Hotline: +1-555-AURA-911</p> <p>Last Updated: January 2025</p>"},{"location":"deployment/SECRET_MANAGEMENT/","title":"Secret Management Guide for AuraConnect","text":"<p>This guide explains how to properly manage secrets and credentials in AuraConnect deployments.</p>"},{"location":"deployment/SECRET_MANAGEMENT/#overview","title":"Overview","text":"<p>AuraConnect uses a fail-safe approach to secret management that prevents hardcoded credentials from reaching production. All sensitive configuration values must be provided through environment variables.</p>"},{"location":"deployment/SECRET_MANAGEMENT/#required-secrets","title":"Required Secrets","text":""},{"location":"deployment/SECRET_MANAGEMENT/#critical-secrets-required-for-all-environments","title":"Critical Secrets (Required for all environments)","text":"<ol> <li>JWT_SECRET_KEY</li> <li>Used for signing JWT tokens</li> <li>Must be a strong, random string (minimum 32 characters)</li> <li> <p>Example generation: <code>openssl rand -hex 32</code></p> </li> <li> <p>DATABASE_URL</p> </li> <li>PostgreSQL connection string</li> <li>Format: <code>postgresql://username:password@host:port/database</code></li> <li>Example: <code>postgresql://aura_user:secure_password@db.example.com:5432/auraconnect</code></li> </ol>"},{"location":"deployment/SECRET_MANAGEMENT/#production-only-required-secrets","title":"Production-Only Required Secrets","text":"<ol> <li>SESSION_SECRET</li> <li>Used for session encryption</li> <li>Must be different from JWT_SECRET_KEY</li> <li> <p>Example generation: <code>openssl rand -hex 32</code></p> </li> <li> <p>REDIS_URL</p> </li> <li>Redis connection string for caching and session storage</li> <li>Format: <code>redis://[:password]@host:port/db</code></li> <li>Example: <code>redis://:redis_password@redis.example.com:6379/0</code></li> </ol>"},{"location":"deployment/SECRET_MANAGEMENT/#optional-secrets-recommended-for-production","title":"Optional Secrets (Recommended for production)","text":"<ol> <li>TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN</li> <li>Required for SMS notifications</li> <li> <p>Obtain from Twilio dashboard</p> </li> <li> <p>SMTP_USERNAME and SMTP_PASSWORD</p> </li> <li>Required for email notifications</li> <li>Use app-specific passwords where available</li> </ol>"},{"location":"deployment/SECRET_MANAGEMENT/#environment-setup","title":"Environment Setup","text":""},{"location":"deployment/SECRET_MANAGEMENT/#development-environment","title":"Development Environment","text":"<p>Create a <code>.env</code> file in the backend directory:</p> <pre><code># Development .env file\nENVIRONMENT=development\nJWT_SECRET_KEY=dev-jwt-secret-change-for-production\nDATABASE_URL=postgresql://dev_user:dev_password@localhost:5432/auraconnect_dev\nREDIS_URL=redis://localhost:6379\n</code></pre>"},{"location":"deployment/SECRET_MANAGEMENT/#production-environment","title":"Production Environment","text":"<p>NEVER commit production secrets to version control!</p>"},{"location":"deployment/SECRET_MANAGEMENT/#using-environment-variables","title":"Using Environment Variables","text":"<pre><code>export ENVIRONMENT=production\nexport JWT_SECRET_KEY=$(openssl rand -hex 32)\nexport SESSION_SECRET=$(openssl rand -hex 32)\nexport DATABASE_URL=\"postgresql://prod_user:prod_password@db.example.com:5432/auraconnect\"\nexport REDIS_URL=\"redis://:redis_password@redis.example.com:6379/0\"\n</code></pre>"},{"location":"deployment/SECRET_MANAGEMENT/#using-systemd-ubuntudebian","title":"Using systemd (Ubuntu/Debian)","text":"<p>Create <code>/etc/systemd/system/auraconnect.service.d/override.conf</code>:</p> <pre><code>[Service]\nEnvironment=\"ENVIRONMENT=production\"\nEnvironment=\"JWT_SECRET_KEY=your-secure-jwt-secret\"\nEnvironment=\"SESSION_SECRET=your-secure-session-secret\"\nEnvironment=\"DATABASE_URL=postgresql://...\"\nEnvironment=\"REDIS_URL=redis://...\"\n</code></pre>"},{"location":"deployment/SECRET_MANAGEMENT/#using-docker","title":"Using Docker","text":"<pre><code># docker-compose.yml\nservices:\n  backend:\n    image: auraconnect/backend\n    environment:\n      - ENVIRONMENT=production\n      - JWT_SECRET_KEY=${JWT_SECRET_KEY}\n      - SESSION_SECRET=${SESSION_SECRET}\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=${REDIS_URL}\n</code></pre> <pre><code># .env file (for docker-compose, NOT committed)\nJWT_SECRET_KEY=your-secure-jwt-secret\nSESSION_SECRET=your-secure-session-secret\nDATABASE_URL=postgresql://...\nREDIS_URL=redis://...\n</code></pre>"},{"location":"deployment/SECRET_MANAGEMENT/#secret-management-solutions","title":"Secret Management Solutions","text":""},{"location":"deployment/SECRET_MANAGEMENT/#aws-secrets-manager","title":"AWS Secrets Manager","text":"<pre><code># Example: Fetch secrets from AWS Secrets Manager\nimport boto3\nimport json\n\ndef get_secret(secret_name):\n    client = boto3.client('secretsmanager')\n    response = client.get_secret_value(SecretId=secret_name)\n    return json.loads(response['SecretString'])\n\n# Set environment variables from AWS Secrets\nsecrets = get_secret('auraconnect/production')\nos.environ['JWT_SECRET_KEY'] = secrets['jwt_secret_key']\nos.environ['DATABASE_URL'] = secrets['database_url']\n</code></pre>"},{"location":"deployment/SECRET_MANAGEMENT/#hashicorp-vault","title":"HashiCorp Vault","text":"<pre><code># Store secrets in Vault\nvault kv put secret/auraconnect/production \\\n  jwt_secret_key=\"...\" \\\n  database_url=\"...\" \\\n  redis_url=\"...\"\n\n# Retrieve and export\nexport JWT_SECRET_KEY=$(vault kv get -field=jwt_secret_key secret/auraconnect/production)\n</code></pre>"},{"location":"deployment/SECRET_MANAGEMENT/#kubernetes-secrets","title":"Kubernetes Secrets","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: auraconnect-secrets\ntype: Opaque\ndata:\n  jwt-secret-key: &lt;base64-encoded-secret&gt;\n  database-url: &lt;base64-encoded-url&gt;\n  redis-url: &lt;base64-encoded-url&gt;\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: auraconnect-backend\nspec:\n  template:\n    spec:\n      containers:\n      - name: backend\n        envFrom:\n        - secretRef:\n            name: auraconnect-secrets\n</code></pre>"},{"location":"deployment/SECRET_MANAGEMENT/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never commit secrets to version control</li> <li>Use <code>.gitignore</code> to exclude <code>.env</code> files</li> <li> <p>Scan commits for accidentally included secrets</p> </li> <li> <p>Use strong, unique secrets</p> </li> <li>Minimum 32 characters for keys</li> <li> <p>Use cryptographically secure random generators</p> </li> <li> <p>Rotate secrets regularly</p> </li> <li>Implement secret rotation for production</li> <li> <p>Update secrets without downtime using rolling deployments</p> </li> <li> <p>Limit secret access</p> </li> <li>Use principle of least privilege</li> <li> <p>Separate secrets by environment</p> </li> <li> <p>Monitor secret usage</p> </li> <li>Log authentication failures</li> <li>Alert on suspicious access patterns</li> </ol>"},{"location":"deployment/SECRET_MANAGEMENT/#validation","title":"Validation","text":"<p>The application performs automatic secret validation at startup:</p> <ol> <li>Development Mode: Warns about missing secrets but continues</li> <li>Production Mode: Fails fast if required secrets are missing</li> </ol>"},{"location":"deployment/SECRET_MANAGEMENT/#manual-validation","title":"Manual Validation","text":"<pre><code># Check if all required secrets are set\npython -c \"from backend.core.secrets import validate_all_secrets; validate_all_secrets()\"\n</code></pre>"},{"location":"deployment/SECRET_MANAGEMENT/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/SECRET_MANAGEMENT/#critical-security-error-required-secret-jwt_secret_key-is-not-set","title":"\"CRITICAL SECURITY ERROR: Required secret 'JWT_SECRET_KEY' is not set\"","text":"<p>Solution: Ensure the JWT_SECRET_KEY environment variable is set before starting the application.</p>"},{"location":"deployment/SECRET_MANAGEMENT/#secret-contains-dangerous-default-value","title":"\"Secret contains dangerous default value\"","text":"<p>Solution: The application detected a development default in production. Generate a new secure secret.</p>"},{"location":"deployment/SECRET_MANAGEMENT/#application-wont-start-in-production","title":"Application won't start in production","text":"<p>Check: 1. All required environment variables are set 2. No development defaults are used 3. Database and Redis connections are valid</p>"},{"location":"deployment/SECRET_MANAGEMENT/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"deployment/SECRET_MANAGEMENT/#github-actions","title":"GitHub Actions","text":"<pre><code>- name: Deploy to Production\n  env:\n    JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}\n    DATABASE_URL: ${{ secrets.DATABASE_URL }}\n    REDIS_URL: ${{ secrets.REDIS_URL }}\n    SESSION_SECRET: ${{ secrets.SESSION_SECRET }}\n  run: |\n    # Deploy script\n</code></pre>"},{"location":"deployment/SECRET_MANAGEMENT/#gitlab-ci","title":"GitLab CI","text":"<pre><code>deploy:\n  stage: deploy\n  variables:\n    JWT_SECRET_KEY: $JWT_SECRET_KEY\n    DATABASE_URL: $DATABASE_URL\n  script:\n    - # Deploy commands\n</code></pre>"},{"location":"deployment/SECRET_MANAGEMENT/#conclusion","title":"Conclusion","text":"<p>Proper secret management is critical for production security. Always:</p> <ul> <li>Use environment variables for secrets</li> <li>Never hardcode credentials</li> <li>Validate secrets at startup</li> <li>Use secret management tools in production</li> <li>Monitor and rotate secrets regularly</li> </ul> <p>For questions or issues, contact the security team.</p>"},{"location":"dev/","title":"Development Guide","text":"<p>This guide provides comprehensive information for developers working on the AuraConnect platform.</p>"},{"location":"dev/#development-environment-setup","title":"\ud83d\udee0\ufe0f Development Environment Setup","text":""},{"location":"dev/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>PostgreSQL 14 or higher</li> <li>Redis 7+ (optional, for caching and job tracking)</li> <li>Docker and Docker Compose</li> <li>Git</li> </ul>"},{"location":"dev/#local-development-setup","title":"Local Development Setup","text":""},{"location":"dev/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/AuraTechWave/auraconnectai.git\ncd auraconnectai\n</code></pre>"},{"location":"dev/#2-backend-setup","title":"2. Backend Setup","text":"<pre><code>cd backend\n\n# Create virtual environment\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\npip install -r requirements-dev.txt\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your local configuration\n\n# Run database migrations\nalembic upgrade head\n\n# Start the development server\nuvicorn main:app --reload --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"dev/#3-using-docker-recommended","title":"3. Using Docker (Recommended)","text":"<pre><code># From project root\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f backend\n\n# Run tests\ndocker-compose exec backend pytest\n</code></pre>"},{"location":"dev/#architecture-documentation","title":"\ud83c\udfd7\ufe0f Architecture Documentation","text":""},{"location":"dev/#module-architectures","title":"Module Architectures","text":"<ul> <li>Order Management</li> <li>Staff Management</li> <li>Payroll &amp; Tax</li> <li>POS Integration</li> <li>Menu &amp; Inventory</li> <li>Analytics &amp; Reporting</li> <li>Customer Loyalty</li> <li>AI Customization</li> <li>Offline Sync</li> <li>Regulatory Compliance</li> <li>White Labeling</li> </ul>"},{"location":"dev/#system-overview","title":"System Overview","text":"<ul> <li>Global Architecture Overview</li> </ul>"},{"location":"dev/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"dev/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=modules --cov-report=html\n\n# Run specific test file\npytest backend/tests/test_payroll_engine_simple.py\n\n# Run tests in parallel\npytest -n auto\n\n# Run only unit tests\npytest -m unit\n\n# Run only integration tests\npytest -m integration\n</code></pre>"},{"location":"dev/#test-structure","title":"Test Structure","text":"<pre><code>backend/tests/\n\u251c\u2500\u2500 unit/           # Isolated unit tests\n\u251c\u2500\u2500 integration/    # API and database tests\n\u251c\u2500\u2500 e2e/           # End-to-end tests\n\u2514\u2500\u2500 fixtures/      # Shared test data\n</code></pre>"},{"location":"dev/#writing-tests","title":"Writing Tests","text":"<ul> <li>Use pytest fixtures for reusable test data</li> <li>Mock external dependencies</li> <li>Test both success and failure cases</li> <li>Maintain test coverage above 90%</li> </ul>"},{"location":"dev/#code-standards","title":"\ud83d\udcdd Code Standards","text":""},{"location":"dev/#python-style-guide","title":"Python Style Guide","text":"<ul> <li>Follow PEP 8</li> <li>Use type hints for all functions</li> <li>Maximum line length: 88 characters (Black default)</li> <li>Use descriptive variable names</li> </ul>"},{"location":"dev/#code-formatting","title":"Code Formatting","text":"<pre><code># Format code with Black\nblack backend/\n\n# Sort imports\nisort backend/\n\n# Check code style\nflake8 backend/\n\n# Type checking\nmypy backend/\n</code></pre>"},{"location":"dev/#git-commit-messages","title":"Git Commit Messages","text":"<p>Follow conventional commits: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>style</code>: Code style changes - <code>refactor</code>: Code refactoring - <code>test</code>: Test additions/changes - <code>chore</code>: Build process or auxiliary tool changes</p> <p>Example: <pre><code>feat(payroll): Add overtime calculation for holidays\n\n- Implement 1.5x rate for holiday work\n- Add configuration for holiday dates\n- Update tests for holiday scenarios\n</code></pre></p>"},{"location":"dev/#development-tools","title":"\ud83d\udd27 Development Tools","text":""},{"location":"dev/#vs-code-extensions","title":"VS Code Extensions","text":"<ul> <li>Python</li> <li>Pylance</li> <li>Black Formatter</li> <li>GitLens</li> <li>Docker</li> <li>Thunder Client (API testing)</li> </ul>"},{"location":"dev/#useful-commands","title":"Useful Commands","text":"<pre><code># Database migrations\nalembic revision --autogenerate -m \"Description\"\nalembic upgrade head\nalembic downgrade -1\n\n# Docker commands\ndocker-compose up -d\ndocker-compose down\ndocker-compose logs -f [service]\ndocker-compose exec backend bash\n\n# Database access\ndocker-compose exec postgres psql -U postgres auraconnect\n</code></pre>"},{"location":"dev/#cicd-pipeline","title":"\ud83d\ude80 CI/CD Pipeline","text":"<p>See CI/CD Setup for detailed information about: - GitHub Actions workflows - Automated testing - Docker image building - Deployment strategies</p>"},{"location":"dev/#debugging","title":"\ud83d\udd0d Debugging","text":""},{"location":"dev/#local-debugging","title":"Local Debugging","text":"<ol> <li>Use VS Code's Python debugger</li> <li>Set breakpoints in code</li> <li>Use logging instead of print statements</li> <li>Check Docker logs for container issues</li> </ol>"},{"location":"dev/#common-issues","title":"Common Issues","text":"<ul> <li>Import errors: Check PYTHONPATH and virtual environment</li> <li>Database connection: Verify DATABASE_URL in .env</li> <li>Migration errors: Check for model changes</li> <li>Test failures: Ensure test database is clean</li> </ul>"},{"location":"dev/#performance-optimization","title":"\ud83d\udcca Performance Optimization","text":""},{"location":"dev/#database-queries","title":"Database Queries","text":"<ul> <li>Use SQL aggregation for bulk operations</li> <li>Add appropriate indexes</li> <li>Use query optimization tools</li> <li>Monitor slow queries</li> </ul>"},{"location":"dev/#api-performance","title":"API Performance","text":"<ul> <li>Implement caching where appropriate</li> <li>Use pagination for list endpoints</li> <li>Optimize serialization</li> <li>Profile endpoint performance</li> </ul>"},{"location":"dev/#security-considerations","title":"\ud83d\udd10 Security Considerations","text":""},{"location":"dev/#development-security","title":"Development Security","text":"<ul> <li>Never commit secrets to Git</li> <li>Use environment variables</li> <li>Rotate development credentials regularly</li> <li>Test with non-production data</li> </ul>"},{"location":"dev/#code-security","title":"Code Security","text":"<ul> <li>Validate all inputs</li> <li>Use parameterized queries</li> <li>Implement proper authentication</li> <li>Follow OWASP guidelines</li> </ul>"},{"location":"dev/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"dev/#internal-documentation","title":"Internal Documentation","text":"<ul> <li>System Architecture</li> <li>API Documentation</li> <li>Production Deployment (see backend source code)</li> </ul>"},{"location":"dev/#external-resources","title":"External Resources","text":"<ul> <li>FastAPI Documentation</li> <li>SQLAlchemy Documentation</li> <li>Pydantic Documentation</li> <li>PostgreSQL Documentation</li> </ul>    Happy coding! \ud83d\ude80"},{"location":"dev/CI_CD_SETUP/","title":"CI/CD Pipeline Setup","text":""},{"location":"dev/CI_CD_SETUP/#overview","title":"Overview","text":"<p>AuraConnect uses GitHub Actions for continuous integration and deployment. The pipeline runs comprehensive tests for backend (Python), frontend (React), and documentation (MkDocs).</p>"},{"location":"dev/CI_CD_SETUP/#workflow-file","title":"Workflow File","text":"<p>Location: <code>.github/workflows/main.yml</code></p>"},{"location":"dev/CI_CD_SETUP/#pipeline-jobs","title":"Pipeline Jobs","text":""},{"location":"dev/CI_CD_SETUP/#1-backend-tests-linting-backend-tests","title":"1. Backend Tests &amp; Linting (<code>backend-tests</code>)","text":"<p>Environment: - Ubuntu Latest - Python 3.11 - PostgreSQL 14 service</p> <p>Steps: 1. Setup: Checkout code, setup Python with pip caching 2. Dependencies: Install <code>requirements.txt</code> + <code>requirements-dev.txt</code> 3. Linting:     - <code>flake8</code> with syntax error detection (E9,F63,F7,F82)    - Non-blocking warnings for complexity/line length 4. Import Testing: Verify all critical module imports work 5. Test Execution: Run pytest on <code>modules/payroll/tests/</code></p> <p>Key Environment Variables: - <code>PYTHONPATH</code>: Set to backend directory for proper imports - <code>DATABASE_URL</code>: PostgreSQL connection for integration tests</p>"},{"location":"dev/CI_CD_SETUP/#2-frontend-tests-build-frontend-tests","title":"2. Frontend Tests &amp; Build (<code>frontend-tests</code>)","text":"<p>Environment: - Ubuntu Latest - Node.js 18</p> <p>Steps: 1. Setup: Checkout code, setup Node.js with npm caching 2. Dependencies: <code>npm ci</code> for consistent installs 3. Testing: <code>npm test</code> with coverage reporting 4. Build: <code>npm run build</code> to verify production builds</p>"},{"location":"dev/CI_CD_SETUP/#3-documentation-build-docs-build","title":"3. Documentation Build (<code>docs-build</code>)","text":"<p>Environment: - Ubuntu Latest - Python 3.11</p> <p>Steps: 1. Setup: Checkout code, setup Python 2. Dependencies: Install MkDocs + Material theme 3. Build: <code>mkdocs build --strict</code> (fails on warnings)</p>"},{"location":"dev/CI_CD_SETUP/#4-deployment-deploy","title":"4. Deployment (<code>deploy</code>)","text":"<p>Conditions: - Only runs on <code>main</code> branch pushes - Requires all other jobs to pass - Currently just shows success notification</p>"},{"location":"dev/CI_CD_SETUP/#key-fixes-applied","title":"Key Fixes Applied","text":""},{"location":"dev/CI_CD_SETUP/#previous-issues","title":"Previous Issues","text":"<ul> <li>Multiple conflicting workflows running simultaneously</li> <li>Wrong package managers (yarn vs npm confusion)</li> <li>Missing test execution - only linted, never ran tests</li> <li>Import path issues causing ModuleNotFoundError</li> <li>No database setup for integration tests</li> </ul>"},{"location":"dev/CI_CD_SETUP/#solutions-implemented","title":"Solutions Implemented","text":"<ul> <li>Single comprehensive workflow replacing 3+ conflicting ones</li> <li>Proper Python path configuration with <code>PYTHONPATH</code> </li> <li>Database service setup for PostgreSQL-dependent tests</li> <li>Correct package manager usage (npm for frontend)</li> <li>Enhanced dependencies including pytest-mock, black, isort</li> </ul>"},{"location":"dev/CI_CD_SETUP/#local-development","title":"Local Development","text":""},{"location":"dev/CI_CD_SETUP/#backend-testing","title":"Backend Testing","text":"<pre><code>cd backend\nexport PYTHONPATH=\"${PWD}:$PYTHONPATH\"\npip install -r requirements.txt -r requirements-dev.txt\npytest modules/payroll/tests/ -v\n</code></pre>"},{"location":"dev/CI_CD_SETUP/#frontend-testing","title":"Frontend Testing","text":"<pre><code>cd frontend\nnpm ci\nnpm test\nnpm run build\n</code></pre>"},{"location":"dev/CI_CD_SETUP/#documentation","title":"Documentation","text":"<pre><code>pip install mkdocs mkdocs-material\nmkdocs build --strict\nmkdocs serve  # for local preview\n</code></pre>"},{"location":"dev/CI_CD_SETUP/#troubleshooting","title":"Troubleshooting","text":""},{"location":"dev/CI_CD_SETUP/#common-issues","title":"Common Issues","text":"<p>1. Import Errors - Ensure <code>PYTHONPATH</code> includes backend directory - Use absolute imports: <code>from modules.payroll.* import *</code> - Check <code>__init__.py</code> files exist in all packages</p> <p>2. Database Connection Issues - Verify PostgreSQL service is running - Check <code>DATABASE_URL</code> environment variable - Ensure test database permissions are correct</p> <p>3. Frontend Build Failures - Clear npm cache: <code>npm cache clean --force</code> - Delete <code>node_modules</code> and run <code>npm ci</code> - Check Node.js version compatibility</p> <p>4. Linting Failures - Run <code>flake8 .</code> locally to see issues - Use <code>black .</code> for automatic formatting - Check line length limits (88 characters)</p>"},{"location":"dev/CI_CD_SETUP/#pipeline-debugging","title":"Pipeline Debugging","text":"<pre><code># Test imports locally\ncd backend\npython -c \"\nfrom modules.payroll.services.payroll_tax_engine import PayrollTaxEngine\nprint('\u2705 Imports working')\n\"\n\n# Test basic CI functionality\npython test_basic_ci.py\n\n# Run specific test files\npytest modules/payroll/tests/test_payroll_tax_engine.py -v\n</code></pre>"},{"location":"dev/CI_CD_SETUP/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Code Coverage Reports: Upload to CodeCov or similar</li> <li>Security Scanning: Add Bandit, Safety checks</li> <li>Performance Testing: Load testing for APIs</li> <li>Deployment Automation: Actual deployment to staging/prod</li> <li>Notification System: Slack/Discord integration for build status</li> </ul>"},{"location":"dev/CI_CD_SETUP/#monitoring","title":"Monitoring","text":"<p>The pipeline provides clear success/failure indicators: - \u2705 Green checkmarks: All tests passed - \u274c Red X marks: Build failures with detailed logs - \ud83d\udfe1 Yellow warnings: Non-blocking issues</p> <p>Check the Actions tab in GitHub for detailed logs and timing information.</p>"},{"location":"dev/payroll_tax_developer_guide/","title":"Payroll &amp; Tax Module Developer Guide","text":""},{"location":"dev/payroll_tax_developer_guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Architecture</li> <li>Getting Started</li> <li>Core Concepts</li> <li>API Reference</li> <li>Implementation Guide</li> <li>Testing</li> <li>Troubleshooting</li> <li>Best Practices</li> </ol>"},{"location":"dev/payroll_tax_developer_guide/#overview","title":"Overview","text":"<p>The AuraConnect AI Payroll &amp; Tax module provides comprehensive wage calculation, tax processing, and compliance management for restaurant businesses. This guide covers everything developers need to know to work with and extend the payroll system.</p>"},{"location":"dev/payroll_tax_developer_guide/#key-features","title":"Key Features","text":"<ul> <li>Multi-jurisdiction tax calculations</li> <li>Overtime and shift differential handling</li> <li>Tip reporting and allocation</li> <li>Batch payroll processing</li> <li>Real-time compliance validation</li> <li>Comprehensive audit trails</li> </ul>"},{"location":"dev/payroll_tax_developer_guide/#architecture","title":"Architecture","text":""},{"location":"dev/payroll_tax_developer_guide/#system-components","title":"System Components","text":"<pre><code>graph TB\n    subgraph \"Frontend Layer\"\n        FE[Web Interface]\n    end\n\n    subgraph \"API Gateway\"\n        GW[Gateway Router]\n    end\n\n    subgraph \"Service Layer\"\n        S1[Payroll Engine]\n        S2[Tax Engine]\n        S3[Configuration Service]\n    end\n\n    subgraph \"Data Layer\"\n        D1[(PostgreSQL)]\n        D2[(Redis)]\n        D3[S3 Storage]\n    end\n\n    FE --&gt; GW\n    GW --&gt; S1\n    GW --&gt; S2\n    GW --&gt; S3\n\n    S1 --&gt; D1\n    S1 --&gt; D2\n    S2 --&gt; D1\n    S2 --&gt; D2\n    S3 --&gt; D1\n    S3 --&gt; D3\n\n    classDef frontend fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef gateway fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef service fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    classDef data fill:#e8f5e9,stroke:#388e3c,stroke-width:2px\n\n    class FE frontend\n    class GW gateway\n    class S1,S2,S3 service\n    class D1,D2,D3 data</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#module-structure","title":"Module Structure","text":"<pre><code>graph TD\n    A[backend/] --&gt; B[modules/]\n    B --&gt; C[payroll/]\n    B --&gt; D[staff/]\n\n    C --&gt; E[models/&lt;br/&gt;Database models]\n    C --&gt; F[schemas/&lt;br/&gt;Pydantic schemas]\n    C --&gt; G[services/&lt;br/&gt;Business logic]\n    C --&gt; H[enums/&lt;br/&gt;Enumerations]\n    C --&gt; I[tests/&lt;br/&gt;Unit tests]\n\n    D --&gt; J[services/]\n    D --&gt; K[routes/]\n\n    J --&gt; L[enhanced_payroll_engine.py]\n    J --&gt; M[enhanced_payroll_service.py]\n    J --&gt; N[payslip_service.py]\n\n    K --&gt; O[enhanced_payroll_routes.py]\n\n    classDef folder fill:#e8f5e9,stroke:#388e3c,stroke-width:2px\n    classDef file fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n\n    class A,B,C,D,E,F,G,H,I,J,K folder\n    class L,M,N,O file</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#getting-started","title":"Getting Started","text":""},{"location":"dev/payroll_tax_developer_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>PostgreSQL 13+</li> <li>Redis 6+</li> <li>Node.js 16+ (for frontend)</li> </ul>"},{"location":"dev/payroll_tax_developer_guide/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository <pre><code>git clone https://github.com/auraconnect/auraconnectai.git\ncd auraconnectai\n</code></pre></p> </li> <li> <p>Set up the backend <pre><code>cd backend\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Configure environment <pre><code>cp .env.example .env\n# Edit .env with your configuration\n</code></pre></p> </li> <li> <p>Run database migrations <pre><code>alembic upgrade head\n</code></pre></p> </li> <li> <p>Start the development server <pre><code>uvicorn app.main:app --reload\n</code></pre></p> </li> </ol>"},{"location":"dev/payroll_tax_developer_guide/#core-concepts","title":"Core Concepts","text":""},{"location":"dev/payroll_tax_developer_guide/#1-payroll-calculation-flow","title":"1. Payroll Calculation Flow","text":"<p>The payroll calculation follows a specific sequence:</p> <pre><code># Example calculation flow\nasync def calculate_payroll(staff_id: int, period: PayPeriod):\n    # 1. Gather time data\n    hours = await get_worked_hours(staff_id, period)\n\n    # 2. Calculate gross pay\n    gross_pay = calculate_gross_pay(hours, staff.hourly_rate)\n\n    # 3. Apply tax calculations\n    taxes = await tax_engine.calculate_taxes(gross_pay, staff.tax_profile)\n\n    # 4. Process deductions\n    deductions = calculate_deductions(gross_pay, staff.benefits)\n\n    # 5. Calculate net pay\n    net_pay = gross_pay - taxes.total - deductions.total\n\n    return PayrollResult(\n        gross_pay=gross_pay,\n        taxes=taxes,\n        deductions=deductions,\n        net_pay=net_pay\n    )\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#2-tax-engine","title":"2. Tax Engine","text":"<p>The tax engine handles multi-jurisdiction calculations:</p> <pre><code>class PayrollTaxEngine:\n    async def calculate_taxes(\n        self,\n        gross_pay: Decimal,\n        tax_profile: TaxProfile\n    ) -&gt; TaxCalculation:\n        # Federal taxes\n        federal = self.calculate_federal_tax(gross_pay, tax_profile)\n\n        # State taxes\n        state = self.calculate_state_tax(\n            gross_pay, \n            tax_profile.state,\n            tax_profile.allowances\n        )\n\n        # Local taxes\n        local = self.calculate_local_tax(\n            gross_pay,\n            tax_profile.locality\n        )\n\n        # FICA taxes\n        fica = self.calculate_fica(gross_pay)\n\n        return TaxCalculation(\n            federal=federal,\n            state=state,\n            local=local,\n            fica=fica\n        )\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#3-configuration-management","title":"3. Configuration Management","text":"<p>Company-specific settings are managed through the configuration service:</p> <pre><code># Example configuration\n{\n    \"company_id\": 1,\n    \"pay_periods\": {\n        \"frequency\": \"biweekly\",\n        \"start_day\": \"monday\"\n    },\n    \"overtime_rules\": {\n        \"daily_threshold\": 8,\n        \"weekly_threshold\": 40,\n        \"multiplier\": 1.5\n    },\n    \"deductions\": [\n        {\n            \"name\": \"Health Insurance\",\n            \"type\": \"pre_tax\",\n            \"amount\": 150.00\n        }\n    ]\n}\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#api-reference","title":"API Reference","text":""},{"location":"dev/payroll_tax_developer_guide/#authentication","title":"Authentication","text":"<p>All API endpoints require JWT authentication:</p> <pre><code># Get token\ncurl -X POST http://localhost:8000/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"admin\", \"password\": \"secret\"}'\n\n# Use token in requests\ncurl -X GET http://localhost:8000/api/v1/payrolls/1 \\\n  -H \"Authorization: Bearer &lt;token&gt;\"\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#core-endpoints","title":"Core Endpoints","text":""},{"location":"dev/payroll_tax_developer_guide/#run-payroll","title":"Run Payroll","text":"<pre><code>POST /api/v1/payrolls/run\nContent-Type: application/json\nAuthorization: Bearer &lt;token&gt;\n\n{\n  \"staff_ids\": [1, 2, 3],\n  \"pay_period_start\": \"2024-01-15\",\n  \"pay_period_end\": \"2024-01-29\",\n  \"tenant_id\": 1\n}\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#get-payroll-history","title":"Get Payroll History","text":"<pre><code>GET /api/v1/payrolls/{staff_id}?limit=10&amp;tenant_id=1\nAuthorization: Bearer &lt;token&gt;\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#get-payroll-detail","title":"Get Payroll Detail","text":"<pre><code>GET /api/v1/payrolls/{payroll_id}/detail\nAuthorization: Bearer &lt;token&gt;\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#export-payroll-data","title":"Export Payroll Data","text":"<pre><code>POST /api/v1/payrolls/export\nContent-Type: application/json\nAuthorization: Bearer &lt;token&gt;\n\n{\n  \"format\": \"csv\",\n  \"pay_period_start\": \"2024-01-01\",\n  \"pay_period_end\": \"2024-01-31\",\n  \"include_details\": true\n}\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#implementation-guide","title":"Implementation Guide","text":""},{"location":"dev/payroll_tax_developer_guide/#adding-a-new-tax-jurisdiction","title":"Adding a New Tax Jurisdiction","text":"<ol> <li> <p>Create tax rule model <pre><code># models/tax_rules.py\nclass CaliforniaTaxRule(TaxRule):\n    state_code = \"CA\"\n    brackets = [\n        {\"min\": 0, \"max\": 10000, \"rate\": 0.01},\n        {\"min\": 10000, \"max\": 25000, \"rate\": 0.02},\n        # ... more brackets\n    ]\n</code></pre></p> </li> <li> <p>Implement calculator <pre><code># services/tax_calculators.py\nclass CaliforniaTaxCalculator(StateTaxCalculator):\n    def calculate(self, gross_pay: Decimal) -&gt; Decimal:\n        # Implementation\n        pass\n</code></pre></p> </li> <li> <p>Register with engine <pre><code># services/payroll_tax_engine.py\nTAX_CALCULATORS[\"CA\"] = CaliforniaTaxCalculator()\n</code></pre></p> </li> </ol>"},{"location":"dev/payroll_tax_developer_guide/#adding-custom-deductions","title":"Adding Custom Deductions","text":"<ol> <li> <p>Define deduction type <pre><code>class DeductionType(Enum):\n    PRE_TAX = \"pre_tax\"\n    POST_TAX = \"post_tax\"\n    GARNISHMENT = \"garnishment\"\n</code></pre></p> </li> <li> <p>Create deduction handler <pre><code>class CustomDeductionHandler:\n    def calculate(\n        self, \n        gross_pay: Decimal, \n        employee: Employee\n    ) -&gt; Decimal:\n        # Custom logic\n        pass\n</code></pre></p> </li> </ol>"},{"location":"dev/payroll_tax_developer_guide/#implementing-payroll-policies","title":"Implementing Payroll Policies","text":"<pre><code># Example: Overtime policy\nclass OvertimePolicy:\n    def __init__(self, daily_threshold=8, weekly_threshold=40):\n        self.daily_threshold = daily_threshold\n        self.weekly_threshold = weekly_threshold\n\n    def calculate_overtime(self, hours_worked: Dict) -&gt; Decimal:\n        overtime_hours = Decimal(0)\n\n        # Daily overtime\n        for day, hours in hours_worked.items():\n            if hours &gt; self.daily_threshold:\n                overtime_hours += hours - self.daily_threshold\n\n        # Weekly overtime\n        total_hours = sum(hours_worked.values())\n        if total_hours &gt; self.weekly_threshold:\n            weekly_ot = total_hours - self.weekly_threshold\n            overtime_hours = max(overtime_hours, weekly_ot)\n\n        return overtime_hours\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#testing","title":"Testing","text":""},{"location":"dev/payroll_tax_developer_guide/#unit-tests","title":"Unit Tests","text":"<pre><code># tests/test_payroll_engine.py\nimport pytest\nfrom decimal import Decimal\nfrom modules.staff.services.enhanced_payroll_engine import EnhancedPayrollEngine\n\nclass TestPayrollEngine:\n    @pytest.fixture\n    def engine(self, db_session):\n        return EnhancedPayrollEngine(db_session)\n\n    async def test_calculate_gross_pay(self, engine):\n        result = await engine.calculate_gross_pay(\n            regular_hours=40,\n            overtime_hours=5,\n            hourly_rate=Decimal(\"15.00\")\n        )\n\n        assert result.regular_pay == Decimal(\"600.00\")\n        assert result.overtime_pay == Decimal(\"112.50\")\n        assert result.gross_pay == Decimal(\"712.50\")\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#integration-tests","title":"Integration Tests","text":"<pre><code># tests/test_payroll_api.py\nasync def test_run_payroll_endpoint(client, auth_headers):\n    response = await client.post(\n        \"/api/v1/payrolls/run\",\n        json={\n            \"staff_ids\": [1],\n            \"pay_period_start\": \"2024-01-15\",\n            \"pay_period_end\": \"2024-01-29\"\n        },\n        headers=auth_headers\n    )\n\n    assert response.status_code == 202\n    assert \"job_id\" in response.json()\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#performance-tests","title":"Performance Tests","text":"<pre><code># tests/test_payroll_performance.py\nimport asyncio\nimport time\n\nasync def test_batch_processing_performance(engine):\n    staff_ids = list(range(1, 1001))  # 1000 employees\n\n    start_time = time.time()\n\n    tasks = [\n        engine.process_payroll(staff_id)\n        for staff_id in staff_ids\n    ]\n\n    results = await asyncio.gather(*tasks)\n\n    elapsed = time.time() - start_time\n\n    assert elapsed &lt; 60  # Should process 1000 in under 60 seconds\n    assert all(r.success for r in results)\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"dev/payroll_tax_developer_guide/#common-issues","title":"Common Issues","text":""},{"location":"dev/payroll_tax_developer_guide/#1-tax-calculation-errors","title":"1. Tax Calculation Errors","text":"<pre><code># Check tax rule configuration\nGET /api/v1/payrolls/rules?jurisdiction=CA\n\n# Verify tax tables are up to date\npython manage.py update_tax_tables\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#2-performance-issues","title":"2. Performance Issues","text":"<pre><code># Enable query logging\nSQLALCHEMY_ECHO=true\n\n# Check slow queries\nSELECT * FROM pg_stat_statements \nWHERE mean_exec_time &gt; 100 \nORDER BY mean_exec_time DESC;\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#3-batch-processing-failures","title":"3. Batch Processing Failures","text":"<pre><code># Check job status\nGET /api/v1/payrolls/run/{job_id}/status\n\n# Review error logs\ntail -f logs/payroll_errors.log\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed logging:</p> <pre><code># .env\nLOG_LEVEL=DEBUG\nPAYROLL_DEBUG=true\n\n# In code\nimport logging\nlogging.getLogger(\"payroll\").setLevel(logging.DEBUG)\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#best-practices","title":"Best Practices","text":""},{"location":"dev/payroll_tax_developer_guide/#1-error-handling","title":"1. Error Handling","text":"<p>Always use specific exception types:</p> <pre><code>class PayrollException(Exception):\n    \"\"\"Base exception for payroll errors\"\"\"\n    pass\n\nclass InsufficientHoursException(PayrollException):\n    \"\"\"Raised when employee has no hours for period\"\"\"\n    pass\n\nclass TaxCalculationException(PayrollException):\n    \"\"\"Raised when tax calculation fails\"\"\"\n    pass\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#2-data-validation","title":"2. Data Validation","text":"<p>Use Pydantic for request/response validation:</p> <pre><code>class PayrollRunRequest(BaseModel):\n    staff_ids: Optional[List[int]] = None\n    pay_period_start: date\n    pay_period_end: date\n\n    @validator('pay_period_end')\n    def validate_period(cls, v, values):\n        if v &lt;= values.get('pay_period_start'):\n            raise ValueError('End date must be after start date')\n        return v\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#3-audit-logging","title":"3. Audit Logging","text":"<p>Log all payroll operations:</p> <pre><code>@audit_log(\"payroll.processed\")\nasync def process_payroll(self, staff_id: int):\n    # Processing logic\n    pass\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#4-money-handling","title":"4. Money Handling","text":"<p>Always use Decimal for monetary values:</p> <pre><code>from decimal import Decimal, ROUND_HALF_UP\n\ndef round_money(amount: Decimal) -&gt; Decimal:\n    return amount.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)\n</code></pre>"},{"location":"dev/payroll_tax_developer_guide/#5-testing-strategy","title":"5. Testing Strategy","text":"<ul> <li>Unit test all calculation logic</li> <li>Integration test API endpoints</li> <li>End-to-end test complete workflows</li> <li>Performance test batch operations</li> <li>Security test authorization</li> </ul>"},{"location":"dev/payroll_tax_developer_guide/#security-considerations","title":"Security Considerations","text":""},{"location":"dev/payroll_tax_developer_guide/#data-protection","title":"Data Protection","text":"<ul> <li>Encrypt PII at rest</li> <li>Use TLS for all communications</li> <li>Implement field-level encryption for SSNs</li> <li>Regular security audits</li> </ul>"},{"location":"dev/payroll_tax_developer_guide/#access-control","title":"Access Control","text":"<ul> <li>Role-based permissions</li> <li>Tenant isolation</li> <li>Audit all access</li> <li>Session management</li> </ul>"},{"location":"dev/payroll_tax_developer_guide/#compliance","title":"Compliance","text":"<ul> <li>GDPR/CCPA compliance</li> <li>SOC 2 certification readiness</li> <li>PCI DSS for payment data</li> <li>State-specific requirements</li> </ul>"},{"location":"dev/payroll_tax_developer_guide/#support","title":"Support","text":"<p>For additional help: - Internal Wiki: https://wiki.auraconnect.ai/payroll - Slack: #payroll-dev - Email: payroll-team@auraconnect.ai</p>"},{"location":"dev/payroll_tax_developer_guide/#related-documentation","title":"Related Documentation","text":""},{"location":"dev/payroll_tax_developer_guide/#architecture_1","title":"Architecture","text":"<ul> <li>Payroll Integration Architecture - System integration overview</li> <li>Payroll Module Architecture - Core module architecture</li> <li>Tax Calculation Flow - Tax processing workflow</li> </ul>"},{"location":"dev/payroll_tax_developer_guide/#deployment-operations","title":"Deployment &amp; Operations","text":"<ul> <li>Production Readiness Checklist - Pre-deployment requirements</li> <li>Production Deployment Guide (see backend source code) - Deployment procedures</li> <li>API Phase 4 Documentation (see backend source code) - API specifications</li> </ul>"},{"location":"dev/payroll_tax_developer_guide/#frontend-integration","title":"Frontend Integration","text":"<ul> <li>PayrollIntegration Component (see frontend source code) - Main UI component</li> <li>usePayrollAPI Hook (see frontend source code) - API integration hook</li> <li>Payroll Types (see frontend source code) - TypeScript type definitions</li> </ul>"},{"location":"dev/architecture/ai_customization_suite/","title":"AuraConnect \u2013 AI Customization Suite","text":""},{"location":"dev/architecture/ai_customization_suite/#1-overview-goals","title":"1. \ud83e\udd16 Overview &amp; Goals","text":"<p>The AI Customization Suite empowers restaurants to automate, personalize, and optimize experiences using AI across operations, customer engagement, and insights.</p> <p>Goals:</p> <ul> <li>Enable dynamic menu recommendations and pricing</li> <li>Automate customer replies, reviews, and FAQs</li> <li>Provide analytics summaries and action suggestions</li> <li>Support custom AI model integrations for enterprise clients</li> </ul>"},{"location":"dev/architecture/ai_customization_suite/#2-key-ai-capabilities","title":"2. \ud83c\udfaf Key AI Capabilities","text":"<ul> <li>Menu suggestion engine based on trends, stock, and demand</li> <li>Smart response engine (chat/FAQ/autoreplies)</li> <li>AI-generated insights on sales, wastage, and performance</li> <li>Custom prompts and workflows (e.g., chef-assist, shift-assist)</li> </ul>"},{"location":"dev/architecture/ai_customization_suite/#3-architecture-overview","title":"3. \ud83e\uddf1 Architecture Overview","text":"<p>Core Services:</p> <ul> <li><code>AICore</code> \u2013 Hosts model logic and integrates APIs</li> <li><code>PromptEngine</code> \u2013 Template-based prompt manager</li> <li><code>RecommendationService</code> \u2013 Menu &amp; pricing suggestions</li> <li><code>InsightGenerator</code> \u2013 Generates summaries, tips</li> <li><code>ChatAgent</code> \u2013 Handles customer interaction flows</li> </ul> <pre><code>[User/Staff Input] \u2500\u25b6 [AICore] \u2500\u25b6 [PromptEngine / Model API]\n                             \u2502\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u25bc                          \u25bc\n    [RecommendationService]      [InsightGenerator]\n               \u2502                          \u25bc\n               \u25bc                    [Dashboard UI / Logs]\n        [Dynamic Menu API]           [Summary Cards]\n</code></pre>"},{"location":"dev/architecture/ai_customization_suite/#4-ai-workflow-scenarios","title":"4. \ud83d\udd01 AI Workflow Scenarios","text":""},{"location":"dev/architecture/ai_customization_suite/#menu-optimization","title":"Menu Optimization:","text":"<ol> <li>Inventory + sales data analyzed</li> <li>Suggest low-waste, high-margin items</li> <li>Dynamic pricing based on demand or time</li> </ol>"},{"location":"dev/architecture/ai_customization_suite/#customer-chatbot-flow","title":"Customer Chatbot Flow:","text":"<ol> <li>Customer asks a question</li> <li>ChatAgent uses PromptEngine</li> <li>AI-generated response returned</li> </ol>"},{"location":"dev/architecture/ai_customization_suite/#performance-summary","title":"Performance Summary:","text":"<ol> <li>Manager opens report section</li> <li>InsightGenerator fetches and condenses KPIs</li> <li>\u201cSmart Tips\u201d displayed (e.g. \"Reduce onion wastage by 15%\")</li> </ol>"},{"location":"dev/architecture/ai_customization_suite/#5-api-endpoints","title":"5. \ud83d\udce1 API Endpoints","text":""},{"location":"dev/architecture/ai_customization_suite/#ai-services","title":"AI Services","text":"<ul> <li><code>POST /ai/menu/suggest</code></li> <li><code>POST /ai/chat/respond</code></li> <li><code>GET /ai/insights/performance</code></li> <li><code>POST /ai/custom/prompt</code></li> </ul>"},{"location":"dev/architecture/ai_customization_suite/#6-prompt-model-storage","title":"6. \ud83d\uddc3\ufe0f Prompt &amp; Model Storage","text":""},{"location":"dev/architecture/ai_customization_suite/#table-ai_prompts","title":"Table: <code>ai_prompts</code>","text":"<p>| id | name | context | template | last_used |</p>"},{"location":"dev/architecture/ai_customization_suite/#table-ai_logs","title":"Table: <code>ai_logs</code>","text":"<p>| id | user_id | input | output | timestamp |</p>"},{"location":"dev/architecture/ai_customization_suite/#7-code-stub","title":"7. \ud83d\udee0\ufe0f Code Stub","text":"<pre><code>// ai.chat.service.ts\napp.post(\"/ai/chat/respond\", async (req, res) =&gt; {\n  const { message } = req.body;\n  const prompt = await buildPrompt(\"customer_reply\", message);\n  const reply = await openai.complete(prompt);\n  res.json({ reply });\n});\n</code></pre>"},{"location":"dev/architecture/ai_customization_suite/#8-developer-notes","title":"8. \ud83d\udcd8 Developer Notes","text":"<ul> <li>Use OpenAI/Gemini API for LLM tasks; support local LLMs optionally</li> <li>Prompts should be version-controlled for traceability</li> <li>Rate limit AI usage per tenant if needed</li> <li>Allow custom prompts per restaurant or role</li> </ul>"},{"location":"dev/architecture/ai_customization_suite/#summary","title":"\u2705 Summary","text":"<p>The AI Customization Suite turns data and interactions into intelligent suggestions, automation, and customer satisfaction boosts. It adds a smart, extensible layer to every module in AuraConnect.</p> <p>\u27a1\ufe0f Optional module finale complete! Final module: Regulatory &amp; Compliance Add-on</p>"},{"location":"dev/architecture/analytics_reporting_architecture/","title":"AuraConnect \u2013 Analytics &amp; Reporting Module","text":""},{"location":"dev/architecture/analytics_reporting_architecture/#1-overview-goals","title":"1. \ud83d\udcca Overview &amp; Goals","text":"<p>This module provides restaurant owners and managers with powerful insights into sales, operations, customer behavior, and team performance. It transforms raw data into actionable dashboards and exportable reports.</p> <p>Goals:</p> <ul> <li>Centralize KPIs from all core modules</li> <li>Enable filtering, drill-downs, and trend analysis</li> <li>Export reports (PDF, Excel)</li> <li>Visualize real-time metrics and historical trends</li> </ul>"},{"location":"dev/architecture/analytics_reporting_architecture/#2-core-features","title":"2. \ud83d\udccb Core Features","text":"<ul> <li>Daily/weekly/monthly dashboards</li> <li>Sales &amp; revenue breakdowns</li> <li>Staff performance analytics</li> <li>Inventory wastage and cost reporting</li> <li>Loyalty &amp; customer behavior tracking</li> </ul>"},{"location":"dev/architecture/analytics_reporting_architecture/#3-architecture-overview","title":"3. \ud83e\uddf1 Architecture Overview","text":"<p>Core Services:</p> <ul> <li><code>AnalyticsService</code> \u2013 Data queries and aggregations</li> <li><code>ReportingService</code> \u2013 Exporting reports, scheduled delivery</li> <li><code>DashboardEngine</code> \u2013 Frontend data visualizations</li> <li><code>DataWarehouse</code> \u2013 Optimized tables for querying</li> <li><code>AuthService</code> \u2013 Scoped access to sensitive reports</li> </ul> <pre><code>[Dashboard UI] \u2500\u25b6 [AnalyticsService] \u2500\u25b6 [DataWarehouse]\n                             \u2502\n                             \u25bc\n                   [ReportingService] \u2500\u25b6 [PDF/CSV Engine]\n</code></pre>"},{"location":"dev/architecture/analytics_reporting_architecture/#4-workflow-flowcharts","title":"4. \ud83d\udd04 Workflow Flowcharts","text":""},{"location":"dev/architecture/analytics_reporting_architecture/#sales-dashboard-flow","title":"Sales Dashboard Flow:","text":"<ol> <li>User opens dashboard</li> <li>Filters (date range, category) sent to API</li> <li>AnalyticsService queries warehouse</li> <li>Charts populate with result set</li> </ol>"},{"location":"dev/architecture/analytics_reporting_architecture/#report-export-flow","title":"Report Export Flow:","text":"<ol> <li>User clicks export/report schedule</li> <li>Report config saved (filters, format)</li> <li>Scheduled job generates and emails export</li> </ol>"},{"location":"dev/architecture/analytics_reporting_architecture/#5-api-endpoints","title":"5. \ud83d\udce1 API Endpoints","text":""},{"location":"dev/architecture/analytics_reporting_architecture/#dashboards","title":"Dashboards","text":"<ul> <li><code>GET /analytics/sales</code></li> <li><code>GET /analytics/inventory</code></li> <li><code>GET /analytics/staff-performance</code></li> </ul>"},{"location":"dev/architecture/analytics_reporting_architecture/#reports","title":"Reports","text":"<ul> <li><code>POST /report/export</code> \u2013 on-demand PDF/CSV</li> <li><code>POST /report/schedule</code> \u2013 weekly/monthly</li> <li><code>GET /report/history</code> \u2013 logs and downloads</li> </ul>"},{"location":"dev/architecture/analytics_reporting_architecture/#6-data-schema-warehouse-schema-design","title":"6. \ud83d\uddc3\ufe0f Data Schema (Warehouse Schema Design)","text":"<p>Tables are denormalized for fast querying:</p>"},{"location":"dev/architecture/analytics_reporting_architecture/#table-sales_agg","title":"Table: <code>sales_agg</code>","text":"<p>| date | total_sales | avg_ticket | payment_types (jsonb) |</p>"},{"location":"dev/architecture/analytics_reporting_architecture/#table-staff_metrics","title":"Table: <code>staff_metrics</code>","text":"<p>| date | staff_id | hours | orders_handled | tips |</p>"},{"location":"dev/architecture/analytics_reporting_architecture/#table-inventory_agg","title":"Table: <code>inventory_agg</code>","text":"<p>| date | item_id | used_qty | waste | cost |</p>"},{"location":"dev/architecture/analytics_reporting_architecture/#7-code-stub","title":"7. \ud83d\udee0\ufe0f Code Stub","text":"<pre><code>// analytics.service.ts\napp.get(\"/analytics/sales\", authenticate, async (req, res) =&gt; {\n  const { from, to } = req.query;\n  const data = await db.query(\"SELECT * FROM sales_agg WHERE date BETWEEN $1 AND $2\", [from, to]);\n  res.json(data);\n});\n</code></pre>"},{"location":"dev/architecture/analytics_reporting_architecture/#8-developer-notes","title":"8. \ud83d\udcd8 Developer Notes","text":"<ul> <li>Use materialized views or pre-computed tables for performance</li> <li>PDF/CSV exports should support branded templates</li> <li>Include access control to restrict financial data visibility</li> <li>Enable embeddable widgets (e.g. Net Sales Today)</li> </ul>"},{"location":"dev/architecture/analytics_reporting_architecture/#summary","title":"\u2705 Summary","text":"<p>Analytics &amp; Reporting is the brain of AuraConnect, turning raw operations into intelligence. This module enables strategic decision-making, performance tracking, and actionable insights across the platform.</p> <p>\u27a1\ufe0f Next up: Taxing &amp; Payroll System</p>"},{"location":"dev/architecture/customer_loyalty_architecture/","title":"AuraConnect \u2013 Customer &amp; Loyalty Module","text":""},{"location":"dev/architecture/customer_loyalty_architecture/#1-overview-goals","title":"1. \ud83c\udfaf Overview &amp; Goals","text":"<p>This module manages customer data, engagement, and loyalty programs. It enables personalized experiences, reward incentives, and customer retention strategies through tiered memberships, referrals, and purchase behavior tracking.</p> <p>Goals:</p> <ul> <li>Centralize customer profiles and history</li> <li>Reward recurring visits and high-value spenders</li> <li>Enable referrals, coupons, and point systems</li> <li>Segment customers for marketing campaigns</li> </ul>"},{"location":"dev/architecture/customer_loyalty_architecture/#2-core-features","title":"2. \ud83d\udc64 Core Features","text":"<ul> <li>Customer profiles (name, contact, preferences)</li> <li>Points-based loyalty system</li> <li>Tiered membership levels (e.g., Bronze, Silver, Gold)</li> <li>Referral tracking and incentives</li> <li>Coupon/offer generation and validation</li> </ul>"},{"location":"dev/architecture/customer_loyalty_architecture/#3-architecture-overview","title":"3. \ud83e\uddf1 Architecture Overview","text":"<p>Core Services:</p> <ul> <li><code>CustomerService</code> \u2013 Handles profiles, preferences</li> <li><code>LoyaltyEngine</code> \u2013 Points, tiers, reward redemption</li> <li><code>ReferralService</code> \u2013 Invites and crediting</li> <li><code>MarketingService</code> \u2013 Segmentation and campaigns</li> <li><code>CouponEngine</code> \u2013 One-time codes, limits, expiry</li> </ul> <pre><code>[Frontend / POS / App] \u2500\u25b6 [CustomerService] \u2500\u25b6 [CustomerDB]\n                               \u2502       \u2502\n                               \u25bc       \u25bc\n                     [LoyaltyEngine]  [ReferralService]\n                               \u2502       \u2502\n                               \u25bc       \u25bc\n                    [CouponEngine]  [MarketingService]\n</code></pre>"},{"location":"dev/architecture/customer_loyalty_architecture/#4-workflow-flowcharts","title":"4. \ud83d\udd04 Workflow Flowcharts","text":""},{"location":"dev/architecture/customer_loyalty_architecture/#loyalty-points-workflow","title":"Loyalty Points Workflow:","text":"<ol> <li>Customer makes a purchase</li> <li>Points are calculated and stored</li> <li>Points contribute to tier level</li> <li>Redemption possible for eligible offers</li> </ol>"},{"location":"dev/architecture/customer_loyalty_architecture/#referral-flow","title":"Referral Flow:","text":"<ol> <li>Customer shares referral code</li> <li>Friend registers &amp; makes first purchase</li> <li>Both users are rewarded (points or coupon)</li> </ol>"},{"location":"dev/architecture/customer_loyalty_architecture/#5-api-endpoints","title":"5. \ud83d\udce1 API Endpoints","text":""},{"location":"dev/architecture/customer_loyalty_architecture/#customers","title":"Customers","text":"<ul> <li><code>POST /customers</code> \u2013 new profile</li> <li><code>GET /customers/:id</code> \u2013 fetch profile</li> <li><code>PUT /customers/:id</code> \u2013 update info</li> </ul>"},{"location":"dev/architecture/customer_loyalty_architecture/#loyalty","title":"Loyalty","text":"<ul> <li><code>GET /loyalty/:id</code> \u2013 view points &amp; tier</li> <li><code>POST /loyalty/redeem</code> \u2013 use points</li> </ul>"},{"location":"dev/architecture/customer_loyalty_architecture/#referrals","title":"Referrals","text":"<ul> <li><code>POST /referral</code> \u2013 generate code</li> <li><code>POST /referral/claim</code> \u2013 apply referral</li> </ul>"},{"location":"dev/architecture/customer_loyalty_architecture/#coupons","title":"Coupons","text":"<ul> <li><code>POST /coupon</code> \u2013 create coupon</li> <li><code>POST /coupon/redeem</code> \u2013 use coupon</li> </ul>"},{"location":"dev/architecture/customer_loyalty_architecture/#6-database-schema","title":"6. \ud83d\uddc3\ufe0f Database Schema","text":""},{"location":"dev/architecture/customer_loyalty_architecture/#table-customers","title":"Table: <code>customers</code>","text":"<p>| id | name | email | phone | preferences (jsonb) |</p>"},{"location":"dev/architecture/customer_loyalty_architecture/#table-loyalty","title":"Table: <code>loyalty</code>","text":"<p>| id | customer_id | points | tier | last_updated |</p>"},{"location":"dev/architecture/customer_loyalty_architecture/#table-referrals","title":"Table: <code>referrals</code>","text":"<p>| id | code | inviter_id | invitee_id | redeemed |</p>"},{"location":"dev/architecture/customer_loyalty_architecture/#table-coupons","title":"Table: <code>coupons</code>","text":"<p>| id | code | discount | expires_at | usage_limit | is_active |</p>"},{"location":"dev/architecture/customer_loyalty_architecture/#7-initial-code-stub","title":"7. \ud83d\udee0\ufe0f Initial Code Stub","text":"<pre><code>// loyalty.service.ts\napp.post(\"/loyalty/redeem\", authenticate, async (req, res) =&gt; {\n  const { customerId, points } = req.body;\n  const success = await loyaltyEngine.redeem(customerId, points);\n  res.status(success ? 200 : 400).json({ success });\n});\n</code></pre>"},{"location":"dev/architecture/customer_loyalty_architecture/#8-developer-notes","title":"8. \ud83d\udcd8 Developer Notes","text":"<ul> <li>Use <code>jsonb</code> for storing flexible customer preferences</li> <li>Tier logic should be configurable (admin panel rules)</li> <li>Referral tracking must prevent abuse (limit redeems, cooldowns)</li> <li>Coupons should support various types: % off, \\$ off, free item</li> </ul>"},{"location":"dev/architecture/customer_loyalty_architecture/#summary","title":"\u2705 Summary","text":"<p>This module powers guest engagement and lifetime value through well-designed loyalty mechanics and reward strategies. It directly connects to marketing tools and customer satisfaction loops.</p> <p>\u27a1\ufe0f Next up: Analytics &amp; Reporting</p>"},{"location":"dev/architecture/global_architecture_overview/","title":"AuraConnect \u2013 Global Architecture Overview","text":""},{"location":"dev/architecture/global_architecture_overview/#purpose","title":"\ud83c\udf10 Purpose","text":"<p>This document presents a high-level view of AuraConnect\u2019s complete architecture. It ties together all core and optional modules in a cohesive ecosystem that supports multi-tenant restaurant operations with agentic AI, mobile support, and regulatory compliance.</p>"},{"location":"dev/architecture/global_architecture_overview/#global-system-diagram","title":"\ud83d\udcca Global System Diagram","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        WEB[Web Dashboard]\n        MOBILE[Mobile App]\n        POS_UI[POS Terminal]\n    end\n\n    subgraph \"API Gateway\"\n        NGINX[Load Balancer]\n        AUTH[Auth Service]\n        RATE[Rate Limiter]\n    end\n\n    subgraph \"Core Services\"\n        STAFF[Staff Management]\n        MENU[Menu &amp; Inventory]\n        ORDER[Order Management]\n        CUST[Customer &amp; Loyalty]\n        ANALYTICS[Analytics]\n        TAX[Tax &amp; Payroll]\n    end\n\n    subgraph \"Integration Layer\"\n        POS_INT[POS Integration]\n        WHITE[White Label]\n        OFFLINE[Offline Sync]\n        AI[AI Suite]\n        COMP[Compliance]\n    end\n\n    subgraph \"Data Layer\"\n        PG[(PostgreSQL)]\n        REDIS[(Redis)]\n        S3[Object Storage]\n    end\n\n    WEB --&gt; NGINX\n    MOBILE --&gt; NGINX\n    POS_UI --&gt; NGINX\n\n    NGINX --&gt; AUTH\n    AUTH --&gt; RATE\n    RATE --&gt; STAFF\n    RATE --&gt; MENU\n    RATE --&gt; ORDER\n    RATE --&gt; CUST\n    RATE --&gt; ANALYTICS\n    RATE --&gt; TAX\n\n    ORDER --&gt; POS_INT\n    MOBILE --&gt; OFFLINE\n    ANALYTICS --&gt; AI\n    TAX --&gt; COMP\n\n    STAFF --&gt; PG\n    MENU --&gt; PG\n    ORDER --&gt; PG\n    CUST --&gt; PG\n\n    ORDER --&gt; REDIS\n    ANALYTICS --&gt; REDIS\n\n    MENU --&gt; S3\n    CUST --&gt; S3</code></pre>"},{"location":"dev/architecture/global_architecture_overview/#key-platform-layers","title":"\ud83e\udde9 Key Platform Layers","text":""},{"location":"dev/architecture/global_architecture_overview/#1-client-interfaces","title":"1. Client Interfaces","text":"<ul> <li>Web Dashboard (React)</li> <li>Mobile App (React Native with Offline Sync)</li> <li>POS Terminal UI (for integrated POS)</li> </ul>"},{"location":"dev/architecture/global_architecture_overview/#2-core-application-layer","title":"2. Core Application Layer","text":"Module Description Staff Management Roles, shifts, access control Menu &amp; Inventory Menu CRUD, inventory tracking, modifiers Order Management Front-of-house + back-of-house coordination Customer &amp; Loyalty CRM, loyalty points, feedback engine Analytics &amp; Reporting KPIs, dashboards, smart insights Taxing &amp; Payroll Compliance, payslips, tax filing"},{"location":"dev/architecture/global_architecture_overview/#3-optional-integration-layer","title":"3. Optional Integration Layer","text":"Module Functionality POS Integration Vendor APIs for order, payment sync White-Labeling Support Custom domain + themes per tenant Offline Sync for Mobile Local DB &amp; queuing with auto-sync AI Customization Suite Recommendations, smart replies, insights Regulatory &amp; Compliance GDPR, audit logs, labor/tax compliance"},{"location":"dev/architecture/global_architecture_overview/#4-shared-services","title":"4. Shared Services","text":"<ul> <li>AuthService: JWT, RBAC</li> <li>NotificationService: Email/SMS/push</li> <li>Scheduler: CRON/real-time event triggers</li> <li>FileService: Images, documents, receipts</li> <li>AuditLogger: Immutable tracking across modules</li> </ul>"},{"location":"dev/architecture/global_architecture_overview/#data-layer","title":"\ud83d\uddc3\ufe0f Data Layer","text":"<ul> <li>PostgreSQL (Supabase or hosted)</li> <li>Redis (optional for queue/cache)</li> <li>Local mobile SQLite for offline</li> <li>Object Storage (S3/Supabase for assets)</li> </ul>"},{"location":"dev/architecture/global_architecture_overview/#devops-deployment","title":"\ud83d\udd04 DevOps &amp; Deployment","text":"<ul> <li>Hosted via Docker or Railway/Render</li> <li>Netlify for wiki/docs site</li> <li>GitHub Actions for CI/CD</li> <li>Versioned APIs with OpenAPI + Postman workspace</li> </ul>"},{"location":"dev/architecture/global_architecture_overview/#ai-layer","title":"\ud83e\udd16 AI Layer","text":"<ul> <li>OpenAI / Gemini integrations via <code>AICore</code></li> <li>Prompt-based workflows stored per tenant</li> <li>Custom-trained embeddings (future optional)</li> </ul>"},{"location":"dev/architecture/global_architecture_overview/#summary","title":"\u2705 Summary","text":"<p>AuraConnect\u2019s architecture is modular, multi-tenant, and developer-ready. It scales from single-location setups to franchise networks and supports both real-time and offline-first operations.</p> <p>Refer to each module\u2019s dedicated documentation in the wiki for detailed implementation.</p>"},{"location":"dev/architecture/menu_inventory_architecture/","title":"AuraConnect \u2013 Menu &amp; Inventory System","text":""},{"location":"dev/architecture/menu_inventory_architecture/#1-overview-goals","title":"1. \ud83c\udf7d\ufe0f Overview &amp; Goals","text":"<p>This module manages the restaurant\u2019s menu offerings and kitchen inventory. It allows for real-time menu updates, stock-level tracking, ingredient-level costing, and inventory alerting.</p> <p>Goals:</p> <ul> <li>Centralized menu and modifier management</li> <li>Sync menu with POS and ordering platforms</li> <li>Real-time inventory tracking with usage logs</li> <li>Auto restock suggestions and vendor integration</li> </ul>"},{"location":"dev/architecture/menu_inventory_architecture/#2-features","title":"2. \ud83d\udccb Features","text":"<ul> <li>CRUD for menus, categories, and items</li> <li>Menu modifiers (e.g., spice level, add-ons)</li> <li>Ingredient-based recipe linkage</li> <li>Inventory depletion per sale</li> <li>Restock alerts and reorder logs</li> </ul>"},{"location":"dev/architecture/menu_inventory_architecture/#3-architecture-overview","title":"3. \ud83e\uddf1 Architecture Overview","text":"<p>Core Services:</p> <ul> <li><code>MenuService</code> \u2013 Menu &amp; modifier APIs</li> <li><code>InventoryService</code> \u2013 Stock, vendors, tracking</li> <li><code>SyncService</code> \u2013 POS/ordering platform sync</li> <li><code>NotificationService</code> \u2013 Restock alerts</li> <li><code>DB</code> \u2013 PostgreSQL or Supabase</li> </ul> <pre><code>[Frontend] \u2500\u2500\u25b6 [MenuService] \u2500\u2500\u25b6 [MenuDB]\n                     \u2502\n                     \u25bc\n              [InventoryService] \u2500\u2500\u25b6 [InventoryDB]\n                     \u2502                    \u2502\n                     \u25bc                    \u25bc\n              [NotificationService]  [SyncService]\n</code></pre>"},{"location":"dev/architecture/menu_inventory_architecture/#4-workflow-flowcharts","title":"4. \ud83d\udd01 Workflow Flowcharts","text":""},{"location":"dev/architecture/menu_inventory_architecture/#inventory-usage-flow","title":"Inventory Usage Flow:","text":"<ol> <li>Customer places an order</li> <li>System maps order to ingredients</li> <li>InventoryService deducts quantities</li> <li>If below threshold \u2192 Notification triggers</li> </ol>"},{"location":"dev/architecture/menu_inventory_architecture/#menu-update-flow","title":"Menu Update Flow:","text":"<ol> <li>Admin updates item or pricing</li> <li>Change stored in MenuDB</li> <li>SyncService pushes to connected platforms</li> </ol>"},{"location":"dev/architecture/menu_inventory_architecture/#5-api-endpoints-rest","title":"5. \ud83d\udce1 API Endpoints (REST)","text":""},{"location":"dev/architecture/menu_inventory_architecture/#menu-management","title":"Menu Management","text":"<ul> <li><code>GET /menu</code> \u2013 all items</li> <li><code>POST /menu</code> \u2013 create item</li> <li><code>PUT /menu/:id</code> \u2013 update item</li> <li><code>DELETE /menu/:id</code></li> </ul>"},{"location":"dev/architecture/menu_inventory_architecture/#modifiers","title":"Modifiers","text":"<ul> <li><code>GET /modifiers</code></li> <li><code>POST /modifiers</code></li> </ul>"},{"location":"dev/architecture/menu_inventory_architecture/#inventory","title":"Inventory","text":"<ul> <li><code>GET /stock</code></li> <li><code>POST /stock</code></li> <li><code>PUT /stock/:id</code></li> <li><code>GET /vendors</code></li> <li><code>POST /vendors</code></li> </ul>"},{"location":"dev/architecture/menu_inventory_architecture/#6-database-schema-postgresql","title":"6. \ud83d\uddc3\ufe0f Database Schema (PostgreSQL)","text":""},{"location":"dev/architecture/menu_inventory_architecture/#table-menu_items","title":"Table: <code>menu_items</code>","text":"<p>| id | name | price | category | ingredients (jsonb) |</p>"},{"location":"dev/architecture/menu_inventory_architecture/#table-inventory","title":"Table: <code>inventory</code>","text":"<p>| id | item_name | quantity | unit | threshold |</p>"},{"location":"dev/architecture/menu_inventory_architecture/#table-modifiers","title":"Table: <code>modifiers</code>","text":"<p>| id | name | type | values (jsonb) |</p>"},{"location":"dev/architecture/menu_inventory_architecture/#table-vendors","title":"Table: <code>vendors</code>","text":"<p>| id | name | contact | items_supplied (jsonb) |</p>"},{"location":"dev/architecture/menu_inventory_architecture/#7-initial-code-stub","title":"7. \ud83d\udee0\ufe0f Initial Code Stub","text":"<pre><code>// inventory.service.ts\napp.post(\"/stock\", authenticate, authorize(\"manager\"), async (req, res) =&gt; {\n  const item = await db.insert(\"inventory\", req.body);\n  res.status(201).json(item);\n});\n</code></pre>"},{"location":"dev/architecture/menu_inventory_architecture/#8-developer-notes","title":"8. \ud83d\udcd8 Developer Notes","text":"<ul> <li>Modifiers should be stored in a normalized form for flexible combinations</li> <li>Use <code>jsonb</code> for dynamic ingredient lists</li> <li><code>SyncService</code> may use webhooks or polling depending on 3rd-party integrations</li> <li>Alerts can integrate with email, SMS, or Slack</li> </ul>"},{"location":"dev/architecture/menu_inventory_architecture/#summary","title":"\u2705 Summary","text":"<p>This module is the backbone for both operations and experience \u2014 linking customer-facing menus with kitchen and vendor logistics. It\u2019s key to enabling real-time POS sync, accurate costing, and automated supply management.</p> <p>\u27a1\ufe0f Next up: Order Management (FOH + BOH)</p>"},{"location":"dev/architecture/offline_sync_architecture/","title":"AuraConnect \u2013 Offline Sync for Mobile","text":""},{"location":"dev/architecture/offline_sync_architecture/#1-overview-goals","title":"1. \ud83c\udf10 Overview &amp; Goals","text":"<p>This module ensures AuraConnect mobile clients (React Native) can operate without internet connectivity and sync automatically once back online. It enables order taking, staff access, and limited reporting even when offline.</p> <p>Goals:</p> <ul> <li>Cache essential data locally</li> <li>Enable offline-first order creation and shift tracking</li> <li>Sync queued changes on reconnection</li> <li>Handle conflicts, retries, and partial sync gracefully</li> </ul>"},{"location":"dev/architecture/offline_sync_architecture/#2-offline-features-supported","title":"2. \ud83d\udd0b Offline Features Supported","text":"<ul> <li>Order creation and updates (queue-based)</li> <li>Local staff login (with limited access tokens)</li> <li>Local shift logs and clock-ins</li> <li>Menu and price caching</li> <li>Partial reporting (based on local store)</li> </ul>"},{"location":"dev/architecture/offline_sync_architecture/#3-architecture-overview","title":"3. \ud83e\uddf1 Architecture Overview","text":"<p>Mobile Components:</p> <ul> <li><code>SyncManager</code> \u2013 Queues offline mutations</li> <li><code>LocalDB</code> \u2013 Secure on-device SQLite/AsyncStorage store</li> <li><code>ConnectionMonitor</code> \u2013 Detects connectivity</li> <li><code>ConflictResolver</code> \u2013 Handles dual-source data issues</li> </ul> <p>Backend Components:</p> <ul> <li><code>SyncAPI</code> \u2013 Accepts batched or delayed updates</li> <li><code>DeltaTracker</code> \u2013 Version control for records</li> </ul> <pre><code>[Mobile App] \u2500\u25b6 [SyncManager] \u2500\u25b6 [LocalDB] \u2190\u2192 [UI]\n                        \u2502\n                        \u25bc\n             [ConnectionMonitor] \u2192 [SyncAPI] (when online)\n                                      \u25bc\n                             [DeltaTracker + DB]\n</code></pre>"},{"location":"dev/architecture/offline_sync_architecture/#4-sync-lifecycle","title":"4. \ud83d\udd04 Sync Lifecycle","text":""},{"location":"dev/architecture/offline_sync_architecture/#offline-order-flow","title":"Offline Order Flow:","text":"<ol> <li>User creates an order</li> <li>SyncManager saves to LocalDB &amp; queue</li> <li>UI updates optimistically</li> <li>When online, queued orders sent to SyncAPI</li> <li>Server applies and returns confirmation or conflict</li> </ol>"},{"location":"dev/architecture/offline_sync_architecture/#shift-log-flow","title":"Shift Log Flow:","text":"<ol> <li>Staff checks in (offline)</li> <li>Entry stored locally</li> <li>On reconnection, batched updates pushed</li> </ol>"},{"location":"dev/architecture/offline_sync_architecture/#5-api-endpoints","title":"5. \ud83d\udce1 API Endpoints","text":""},{"location":"dev/architecture/offline_sync_architecture/#sync","title":"Sync","text":"<ul> <li><code>POST /sync/orders</code> \u2013 batch order sync</li> <li><code>POST /sync/shifts</code> \u2013 batch shift updates</li> <li><code>POST /sync/menu</code> \u2013 push cached delta (admin only)</li> </ul>"},{"location":"dev/architecture/offline_sync_architecture/#conflict-resolution","title":"Conflict Resolution","text":"<ul> <li><code>POST /sync/conflict/resolve</code> \u2013 manual or rule-based resolution</li> </ul>"},{"location":"dev/architecture/offline_sync_architecture/#6-local-server-schema","title":"6. \ud83d\uddc3\ufe0f Local &amp; Server Schema","text":""},{"location":"dev/architecture/offline_sync_architecture/#local-store-mobile","title":"Local Store (Mobile)","text":"<ul> <li><code>orders_offline</code></li> <li><code>staff_logs_offline</code></li> <li><code>menu_cache</code></li> </ul>"},{"location":"dev/architecture/offline_sync_architecture/#server-tables-same-as-main-modules","title":"Server Tables (same as main modules)","text":"<ul> <li>Accept offline deltas with <code>source: mobile_offline</code></li> </ul>"},{"location":"dev/architecture/offline_sync_architecture/#7-mobile-code-stub","title":"7. \ud83d\udee0\ufe0f Mobile Code Stub","text":"<pre><code>// syncManager.ts (React Native)\nconst queue = [];\nfunction saveOffline(order) {\n  queue.push(order);\n  AsyncStorage.setItem(\"offlineQueue\", JSON.stringify(queue));\n}\n\nfunction trySync() {\n  if (isOnline()) {\n    const queued = JSON.parse(AsyncStorage.getItem(\"offlineQueue\"));\n    sendToSyncAPI(queued);\n  }\n}\n</code></pre>"},{"location":"dev/architecture/offline_sync_architecture/#8-developer-notes","title":"8. \ud83d\udcd8 Developer Notes","text":"<ul> <li>Use React Native libraries like <code>NetInfo</code>, <code>AsyncStorage</code>, <code>SQLite</code></li> <li>Conflict resolution rules must be clear (e.g., last-write-wins vs manual merge)</li> <li>Ensure secure storage of sensitive data (e.g., tokens, order info)</li> <li>Retry mechanism with exponential backoff recommended</li> </ul>"},{"location":"dev/architecture/offline_sync_architecture/#summary","title":"\u2705 Summary","text":"<p>Offline Sync enables AuraConnect to function in unreliable network environments \u2014 critical for field operations, delivery zones, and rural venues. A robust sync system ensures a resilient user experience.</p> <p>\u27a1\ufe0f Final optional module coming up: AI Customization Suite</p>"},{"location":"dev/architecture/order_management_architecture/","title":"AuraConnect \u2013 Order Management (FOH + BOH)","text":""},{"location":"dev/architecture/order_management_architecture/#1-overview-goals","title":"1. \ud83e\uddfe Overview &amp; Goals","text":"<p>This module facilitates seamless order flow from Front of House (FOH) to Back of House (BOH). It ensures real-time updates, status tracking, and task routing between customers, servers, kitchen staff, and delivery.</p> <p>Goals:</p> <ul> <li>Enable order capture across dine-in, takeout, delivery</li> <li>Sync FOH terminals with kitchen displays</li> <li>Track order lifecycle: pending \u2192 in kitchen \u2192 ready \u2192 served</li> <li>Route tasks based on roles and stations (e.g. grill, fry, bar)</li> </ul>"},{"location":"dev/architecture/order_management_architecture/#2-features","title":"2. \ud83d\udccb Features","text":"<ul> <li>Multi-source order intake (POS, kiosk, QR, mobile)</li> <li>Status pipeline with timestamps</li> <li>Item routing to respective kitchen stations</li> <li>Real-time updates for FOH staff</li> <li>Delayed prep alerts and reminders</li> </ul>"},{"location":"dev/architecture/order_management_architecture/#3-architecture-overview","title":"3. \ud83e\uddf1 Architecture Overview","text":"<p>Core Services:</p> <ul> <li><code>OrderService</code> \u2013 Captures and tracks orders</li> <li><code>RoutingEngine</code> \u2013 Distributes order items to stations</li> <li><code>KitchenDisplayService</code> \u2013 Push updates to BOH UI</li> <li><code>NotificationService</code> \u2013 Delays, readiness pings</li> <li><code>AuditLogger</code> \u2013 For compliance &amp; replay</li> </ul> <pre><code>[Customer UI / POS] \u2500\u2500\u25b6 [OrderService] \u2500\u2500\u25b6 [OrderDB]\n                                \u2502\n                                \u25bc\n                      [RoutingEngine] \u2500\u2500\u25b6 [KitchenDisplayService]\n                                \u2502                 \u25b2\n                                \u25bc                 \u2502\n                     [NotificationService]  [BOH Staff Interface]\n</code></pre>"},{"location":"dev/architecture/order_management_architecture/#4-workflow-flowcharts","title":"4. \ud83d\udd04 Workflow Flowcharts","text":""},{"location":"dev/architecture/order_management_architecture/#order-lifecycle","title":"Order Lifecycle:","text":"<ol> <li>Order received (QR/app/POS)</li> <li>Items parsed and assigned to stations</li> <li>BOH sees item queue on their KDS (Kitchen Display System)</li> <li>Staff marks item as \u201cIn Progress\u201d \u2192 \u201cReady\u201d</li> <li>FOH notified \u2192 Delivered \u2192 Marked complete</li> </ol>"},{"location":"dev/architecture/order_management_architecture/#5-api-endpoints-rest","title":"5. \ud83d\udce1 API Endpoints (REST)","text":""},{"location":"dev/architecture/order_management_architecture/#order-apis","title":"Order APIs","text":"<ul> <li><code>POST /orders</code> \u2013 create order</li> <li><code>GET /orders</code> \u2013 list all</li> <li><code>GET /orders/:id</code> \u2013 fetch order</li> <li><code>PUT /orders/:id/status</code> \u2013 update status</li> </ul>"},{"location":"dev/architecture/order_management_architecture/#routing-status","title":"Routing &amp; Status","text":"<ul> <li><code>POST /route</code> \u2013 reroute item to station</li> <li><code>GET /stations/:id/queue</code> \u2013 current kitchen queue</li> </ul>"},{"location":"dev/architecture/order_management_architecture/#6-database-schema-postgresql","title":"6. \ud83d\uddc3\ufe0f Database Schema (PostgreSQL)","text":""},{"location":"dev/architecture/order_management_architecture/#table-orders","title":"Table: <code>orders</code>","text":"<p>| id | table_no | customer_id | status | created_at |</p>"},{"location":"dev/architecture/order_management_architecture/#table-order_items","title":"Table: <code>order_items</code>","text":"<p>| id | order_id | item_name | station | status | started_at | completed_at |</p>"},{"location":"dev/architecture/order_management_architecture/#table-stations","title":"Table: <code>stations</code>","text":"<p>| id | name | staff_id |</p>"},{"location":"dev/architecture/order_management_architecture/#7-code-stub","title":"7. \ud83d\udee0\ufe0f Code Stub","text":"<pre><code>// order.service.ts\napp.post(\"/orders\", authenticate, async (req, res) =&gt; {\n  const order = await db.insert(\"orders\", req.body);\n  routeItemsToStations(order);\n  res.status(201).json(order);\n});\n</code></pre>"},{"location":"dev/architecture/order_management_architecture/#8-developer-notes","title":"8. \ud83d\udcd8 Developer Notes","text":"<ul> <li>WebSockets recommended for real-time updates to BOH and FOH</li> <li>RoutingEngine logic must support custom rules (e.g. vegetarian-only stations)</li> <li>Audit logs help with tracing issues and delays</li> <li>Design for performance under kitchen load (use Redis queues or batching)</li> </ul>"},{"location":"dev/architecture/order_management_architecture/#summary","title":"\u2705 Summary","text":"<p>This module connects the guest-facing experience with BOH execution. A high-performing order management system is critical to fast service, reduced errors, and streamlined kitchen operations.</p> <p>\u27a1\ufe0f Next up: Customer &amp; Loyalty Module</p>"},{"location":"dev/architecture/payroll_integration/","title":"Payroll Integration Architecture","text":""},{"location":"dev/architecture/payroll_integration/#overview","title":"Overview","text":"<p>This document describes the integration architecture between the payroll/tax modules and the AuraConnect AI platform. The payroll system provides comprehensive wage calculation, tax processing, and compliance management capabilities integrated seamlessly with the staff management UI.</p>"},{"location":"dev/architecture/payroll_integration/#system-architecture","title":"System Architecture","text":""},{"location":"dev/architecture/payroll_integration/#core-components","title":"Core Components","text":"<pre><code>graph TB\n    subgraph \"Frontend Layer\"\n        UI[Staff Management UI]\n        PD[Payroll Dashboard]\n        PR[Payroll Reports]\n    end\n\n    subgraph \"API Layer\"\n        API[FastAPI Gateway]\n        AUTH[Auth Middleware]\n        RL[Rate Limiter]\n    end\n\n    subgraph \"Service Layer\"\n        EPS[Enhanced Payroll Service]\n        PTE[Payroll Tax Engine]\n        PCS[Payroll Config Service]\n    end\n\n    subgraph \"Data Layer\"\n        DB[(PostgreSQL)]\n        CACHE[(Redis Cache)]\n    end\n\n    UI --&gt; API\n    PD --&gt; API\n    PR --&gt; API\n    API --&gt; AUTH\n    AUTH --&gt; RL\n    RL --&gt; EPS\n    RL --&gt; PTE\n    RL --&gt; PCS\n    EPS --&gt; DB\n    PTE --&gt; DB\n    PCS --&gt; DB\n    PTE --&gt; CACHE</code></pre>"},{"location":"dev/architecture/payroll_integration/#integration-points","title":"Integration Points","text":""},{"location":"dev/architecture/payroll_integration/#1-staff-management-ui-integration","title":"1. Staff Management UI Integration","text":"<p>The payroll system integrates with the existing staff management UI through:</p> <ul> <li>Payroll Dashboard Component: Embedded within the staff profile view</li> <li>Batch Processing Interface: Accessible from the staff listing page</li> <li>Real-time Status Updates: WebSocket integration for processing status</li> </ul>"},{"location":"dev/architecture/payroll_integration/#ui-components","title":"UI Components","text":"<pre><code>// Example integration in Staff Profile\ninterface StaffPayrollProps {\n  staffId: number;\n  tenantId?: number;\n}\n\nconst StaffPayrollSection: React.FC&lt;StaffPayrollProps&gt; = ({ staffId, tenantId }) =&gt; {\n  // Payroll history display\n  // Quick actions (run payroll, view payslips)\n  // Tax information summary\n};\n</code></pre>"},{"location":"dev/architecture/payroll_integration/#2-api-integration","title":"2. API Integration","text":"<p>The payroll module exposes RESTful endpoints integrated with the main API gateway:</p>"},{"location":"dev/architecture/payroll_integration/#key-endpoints","title":"Key Endpoints","text":"<ul> <li><code>POST /api/v1/payrolls/run</code> - Execute payroll processing</li> <li><code>GET /api/v1/payrolls/{staff_id}</code> - Retrieve payroll history</li> <li><code>GET /api/v1/payrolls/{staff_id}/detail</code> - Get detailed breakdown</li> <li><code>GET /api/v1/payrolls/rules</code> - Tax rules and policies</li> <li><code>POST /api/v1/payrolls/export</code> - Export payroll data</li> </ul>"},{"location":"dev/architecture/payroll_integration/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant UI\n    participant API\n    participant Auth\n    participant Payroll\n\n    UI-&gt;&gt;API: POST /auth/login\n    API-&gt;&gt;Auth: Validate credentials\n    Auth--&gt;&gt;API: JWT token\n    API--&gt;&gt;UI: Return token\n    UI-&gt;&gt;API: GET /payrolls/{id} (with token)\n    API-&gt;&gt;Auth: Validate token &amp; permissions\n    Auth--&gt;&gt;API: User context\n    API-&gt;&gt;Payroll: Process request\n    Payroll--&gt;&gt;API: Payroll data\n    API--&gt;&gt;UI: Return data</code></pre>"},{"location":"dev/architecture/payroll_integration/#3-database-integration","title":"3. Database Integration","text":"<p>The payroll module extends the existing database schema with:</p>"},{"location":"dev/architecture/payroll_integration/#core-tables","title":"Core Tables","text":"<ul> <li><code>payrolls</code> - Main payroll records</li> <li><code>payroll_items</code> - Line items (wages, deductions, taxes)</li> <li><code>tax_rules</code> - Tax configuration by jurisdiction</li> <li><code>payroll_config</code> - Company-specific settings</li> <li><code>employee_payments</code> - Payment processing records</li> </ul>"},{"location":"dev/architecture/payroll_integration/#relationships","title":"Relationships","text":"<pre><code>-- Example relationship structure\nStaff (1) --&gt; (n) Payroll\nPayroll (1) --&gt; (n) PayrollItem\nTaxRule (n) &lt;--&gt; (n) Payroll\nEmployeePayment (1) --&gt; (1) Payroll\n</code></pre>"},{"location":"dev/architecture/payroll_integration/#data-flow","title":"Data Flow","text":""},{"location":"dev/architecture/payroll_integration/#payroll-processing-flow","title":"Payroll Processing Flow","text":"<pre><code>graph LR\n    A[UI Request] --&gt; B[API Gateway]\n    B --&gt; C{Auth Check}\n    C --&gt;|Valid| D[Payroll Service]\n    C --&gt;|Invalid| E[401 Error]\n    D --&gt; F[Calculate Wages]\n    F --&gt; G[Apply Tax Rules]\n    G --&gt; H[Generate Payslip]\n    H --&gt; I[Store Results]\n    I --&gt; J[Return Response]\n    J --&gt; B\n    B --&gt; A</code></pre>"},{"location":"dev/architecture/payroll_integration/#tax-calculation-flow","title":"Tax Calculation Flow","text":"<ol> <li>Input Collection: Gather employee data, hours, rates</li> <li>Gross Calculation: Base pay + overtime + bonuses</li> <li>Tax Determination: Apply federal, state, local rules</li> <li>Deduction Processing: Pre-tax and post-tax deductions</li> <li>Net Calculation: Final take-home amount</li> <li>Compliance Check: Validate against regulations</li> </ol>"},{"location":"dev/architecture/payroll_integration/#security-considerations","title":"Security Considerations","text":""},{"location":"dev/architecture/payroll_integration/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>JWT-based authentication with role-based access control</li> <li>Tenant isolation for multi-tenant deployments</li> <li>Audit logging for all payroll operations</li> </ul>"},{"location":"dev/architecture/payroll_integration/#data-protection","title":"Data Protection","text":"<ul> <li>Encryption at rest for sensitive payroll data</li> <li>TLS 1.3 for data in transit</li> <li>PII masking in logs and exports</li> <li>Regular security audits</li> </ul>"},{"location":"dev/architecture/payroll_integration/#performance-optimization","title":"Performance Optimization","text":""},{"location":"dev/architecture/payroll_integration/#caching-strategy","title":"Caching Strategy","text":"<pre><code># Redis caching for tax rules\n@cache_result(ttl=3600)\ndef get_tax_rules(jurisdiction: str, date: datetime) -&gt; List[TaxRule]:\n    # Cached tax rule retrieval\n    pass\n</code></pre>"},{"location":"dev/architecture/payroll_integration/#batch-processing","title":"Batch Processing","text":"<ul> <li>Asynchronous processing for large payroll runs</li> <li>Job queue management with Celery/Redis</li> <li>Progress tracking and resumable operations</li> </ul>"},{"location":"dev/architecture/payroll_integration/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"dev/architecture/payroll_integration/#key-metrics","title":"Key Metrics","text":"<ul> <li>Payroll processing time</li> <li>Tax calculation accuracy</li> <li>API response times</li> <li>Error rates by operation</li> </ul>"},{"location":"dev/architecture/payroll_integration/#logging","title":"Logging","text":"<pre><code># Structured logging example\nlogger.info(\"payroll.processed\", extra={\n    \"staff_id\": staff_id,\n    \"pay_period\": pay_period,\n    \"gross_pay\": gross_pay,\n    \"net_pay\": net_pay,\n    \"processing_time\": elapsed_time\n})\n</code></pre>"},{"location":"dev/architecture/payroll_integration/#error-handling","title":"Error Handling","text":""},{"location":"dev/architecture/payroll_integration/#common-error-scenarios","title":"Common Error Scenarios","text":"<ol> <li>Missing Configuration: Clear error messages for missing tax rules</li> <li>Calculation Errors: Detailed breakdown of calculation failures</li> <li>Integration Failures: Graceful degradation and retry logic</li> <li>Validation Errors: Comprehensive input validation</li> </ol>"},{"location":"dev/architecture/payroll_integration/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"PAYROLL_CALCULATION_ERROR\",\n    \"message\": \"Failed to calculate payroll for staff member\",\n    \"details\": {\n      \"staff_id\": 123,\n      \"reason\": \"Missing tax configuration for state: CA\",\n      \"suggestion\": \"Please configure California tax rules\"\n    }\n  }\n}\n</code></pre>"},{"location":"dev/architecture/payroll_integration/#testing-strategy","title":"Testing Strategy","text":""},{"location":"dev/architecture/payroll_integration/#unit-tests","title":"Unit Tests","text":"<ul> <li>Service layer logic validation</li> <li>Tax calculation accuracy</li> <li>Edge case handling</li> </ul>"},{"location":"dev/architecture/payroll_integration/#integration-tests","title":"Integration Tests","text":"<ul> <li>API endpoint testing</li> <li>Database transaction integrity</li> <li>UI component integration</li> </ul>"},{"location":"dev/architecture/payroll_integration/#end-to-end-tests","title":"End-to-End Tests","text":"<ul> <li>Complete payroll workflow</li> <li>Multi-tenant scenarios</li> <li>Performance benchmarks</li> </ul>"},{"location":"dev/architecture/payroll_integration/#deployment-considerations","title":"Deployment Considerations","text":""},{"location":"dev/architecture/payroll_integration/#environment-configuration","title":"Environment Configuration","text":"<pre><code># Example environment variables\nPAYROLL_SERVICE_URL: \"http://payroll-service:8000\"\nTAX_SERVICE_ENABLED: \"true\"\nPAYROLL_BATCH_SIZE: \"100\"\nPAYROLL_CACHE_TTL: \"3600\"\n</code></pre>"},{"location":"dev/architecture/payroll_integration/#migration-strategy","title":"Migration Strategy","text":"<ol> <li>Deploy database migrations</li> <li>Update API gateway configuration</li> <li>Deploy payroll service instances</li> <li>Enable UI features progressively</li> <li>Monitor and validate</li> </ol>"},{"location":"dev/architecture/payroll_integration/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>Real-time Processing: WebSocket updates for live status</li> <li>Advanced Analytics: Payroll trends and forecasting</li> <li>Mobile Integration: Native mobile app support</li> <li>Third-party Integrations: QuickBooks, ADP, etc.</li> <li>AI-powered Insights: Anomaly detection and optimization</li> </ol>"},{"location":"dev/architecture/payroll_integration/#references","title":"References","text":""},{"location":"dev/architecture/payroll_integration/#documentation","title":"Documentation","text":"<ul> <li>Payroll Tax Developer Guide - Complete developer documentation</li> <li>Payroll Module Architecture - Core architecture overview</li> <li>Tax Engine Architecture - Tax calculation system</li> <li>Production Readiness Checklist - Go-live requirements</li> <li>API Phase 4 Documentation (see backend source code) - API implementation details</li> </ul>"},{"location":"dev/architecture/payroll_integration/#code-references","title":"Code References","text":"<ul> <li>Enhanced Payroll Service (see backend source code) - Main service implementation</li> <li>Payroll Tax Engine (see backend source code) - Tax calculation engine</li> <li>Enhanced Payroll Routes (see backend source code) - API endpoints</li> <li>PayrollIntegration Component (see frontend source code) - React UI component</li> <li>usePayrollAPI Hook (see frontend source code) - Frontend API integration</li> </ul>"},{"location":"dev/architecture/payroll_integration/#related-architecture-documents","title":"Related Architecture Documents","text":"<ul> <li>Global Architecture Overview</li> <li>Analytics &amp; Reporting Architecture</li> <li>Production Deployment Guide (see backend source code)</li> </ul>"},{"location":"dev/architecture/payroll_tax_architecture/","title":"Payroll Tax Architecture - AUR-275 Phase 1 (Enhanced)","text":""},{"location":"dev/architecture/payroll_tax_architecture/#overview","title":"Overview","text":"<p>This document outlines the enhanced architecture for AUR-275 Phase 1, which implements a production-ready payroll module with robust tax rule management, flexible payroll policies, detailed employee payment tracking, and comprehensive audit trails. This phase establishes a scalable foundation for enterprise-grade payroll tax processing in the AuraConnect system.</p>"},{"location":"dev/architecture/payroll_tax_architecture/#key-improvements","title":"Key Improvements","text":"<ul> <li>Type Safety: Implemented proper enums for all status fields and categorical data</li> <li>Data Consistency: Standardized precision for all monetary values (Numeric(12,2)) and rates (Numeric(5,4))</li> <li>Performance Optimization: Added composite indexes and unique constraints for fast lookups</li> <li>Audit Capabilities: Tax rule application tracking for complete calculation transparency</li> <li>Future-proofing: Multi-currency and multi-tenant support built-in</li> <li>Production Readiness: Comprehensive constraints, indexes, and relationships</li> </ul>"},{"location":"dev/architecture/payroll_tax_architecture/#architecture-components","title":"Architecture Components","text":""},{"location":"dev/architecture/payroll_tax_architecture/#1-taxrule-model-payroll_tax_rules","title":"1. TaxRule Model (<code>payroll_tax_rules</code>)","text":"<p>The <code>TaxRule</code> model provides granular control over tax calculations for payroll processing:</p> <p>Key Features: - Enum-based Tax Types: Type-safe support for federal, state, local, social security, medicare, unemployment, disability, and workers compensation taxes - Precise Rate Management: Standardized Numeric(5,4) precision for tax rates with 4 decimal place accuracy - Enhanced Income Thresholds: Numeric(12,2) precision for minimum and maximum taxable amounts supporting large payrolls - Split Contributions: Separate employee and employer portions with precise calculation support - Time-based Rules: Effective and expiry dates for tax rule lifecycle management - Multi-jurisdiction Support: Location-based rules with tenant isolation - Currency Support: Built-in multi-currency capability for international operations - Audit Trail: Complete tracking of when and how tax rules are applied</p> <p>Enhanced Schema: <pre><code>payroll_tax_rules (\n    id, rule_name, location, tax_type [ENUM], rate_percent [5,4],\n    max_taxable_amount [12,2], min_taxable_amount [12,2],\n    employee_portion [5,4], employer_portion [5,4],\n    currency [3 chars], tenant_id,\n    effective_date, expiry_date, is_active,\n    created_at, updated_at\n)\n</code></pre></p>"},{"location":"dev/architecture/payroll_tax_architecture/#2-payrollpolicy-model-payroll_policies","title":"2. PayrollPolicy Model (<code>payroll_policies</code>)","text":"<p>The <code>PayrollPolicy</code> model defines comprehensive payroll calculation rules per location:</p> <p>Enhanced Features: - Enum-based Pay Frequency: Type-safe weekly, biweekly, semimonthly, monthly scheduling - Precise Overtime Rules: Numeric(6,2) hour thresholds and Numeric(5,4) multipliers for accuracy - Enhanced Double-time Support: Flexible double-time calculations with precise rate control - Compliance Break Management: Configurable meal and rest break thresholds - Holiday Processing: Precise holiday pay multipliers with decimal accuracy - Minimum Wage Enforcement: Location-specific requirements with currency support - Multi-tenant Support: Tenant isolation for enterprise deployments - Performance Optimized: Composite indexes for fast policy lookups</p> <p>Enhanced Schema: <pre><code>payroll_policies (\n    id, policy_name, location, pay_frequency [ENUM],\n    overtime_threshold_hours [6,2], overtime_multiplier [5,4],\n    double_time_threshold_hours [6,2], double_time_multiplier [5,4],\n    pay_period_start_day, minimum_wage [8,2],\n    meal_break_threshold_hours [6,2], rest_break_threshold_hours [6,2],\n    holiday_pay_multiplier [5,4], currency [3 chars], tenant_id,\n    description, is_active, created_at, updated_at\n)\n\n-- Composite Indexes:\n-- ix_payroll_policies_location_active (location, is_active)\n-- ix_payroll_policies_tenant_location (tenant_id, location)\n</code></pre></p>"},{"location":"dev/architecture/payroll_tax_architecture/#3-employeepayment-model-employee_payments","title":"3. EmployeePayment Model (<code>employee_payments</code>)","text":"<p>The <code>EmployeePayment</code> model tracks individual payroll calculations and payment records:</p> <p>Enhanced Features: - Precise Hour Tracking: Numeric(6,2) precision for regular, overtime, double-time, and holiday hours - High-precision Rates: Numeric(10,4) precision for all pay rates ensuring accurate calculations - Comprehensive Tax Tracking: Numeric(12,2) precision for all tax calculations supporting large payrolls - Flexible Deduction System: Standardized precision for all deduction types - Enum-based Status Management: Type-safe payment status with clear state transitions - Complete Audit Trail: Processing timestamps, user tracking, and calculation transparency - Duplicate Prevention: Unique constraints prevent duplicate payment periods - Performance Optimized: Composite indexes for fast staff and period lookups - Multi-currency Ready: Built-in currency support for international operations</p> <p>Enhanced Schema: <pre><code>employee_payments (\n    id, staff_id, payroll_policy_id,\n    pay_period_start, pay_period_end, pay_date,\n    regular_hours [6,2], overtime_hours [6,2], double_time_hours [6,2], holiday_hours [6,2],\n    regular_rate [10,4], overtime_rate [10,4], double_time_rate [10,4], holiday_rate [10,4],\n    regular_pay [12,2], overtime_pay [12,2], double_time_pay [12,2], holiday_pay [12,2],\n    bonus_pay [12,2], commission_pay [12,2], gross_pay [12,2],\n    federal_tax [12,2], state_tax [12,2], local_tax [12,2],\n    social_security_tax [12,2], medicare_tax [12,2],\n    insurance_deduction [12,2], retirement_deduction [12,2], other_deductions [12,2],\n    total_deductions [12,2], net_pay [12,2],\n    currency [3 chars], tenant_id,\n    payment_status [ENUM], payment_method [ENUM], notes,\n    processed_by, processed_at, created_at, updated_at\n)\n\n-- Unique Constraint:\n-- uq_employee_payment_period (staff_id, pay_period_start, pay_period_end)\n\n-- Composite Indexes:\n-- ix_employee_payments_staff_period (staff_id, pay_period_start, pay_period_end)\n-- ix_employee_payments_pay_date (pay_date)\n-- ix_employee_payments_status (payment_status)\n-- ix_employee_payments_tenant_staff (tenant_id, staff_id)\n</code></pre></p>"},{"location":"dev/architecture/payroll_tax_architecture/#4-employeepaymenttaxapplication-model-employee_payment_tax_applications","title":"4. EmployeePaymentTaxApplication Model (<code>employee_payment_tax_applications</code>)","text":"<p>The audit table that tracks which tax rules were applied to each payment:</p> <p>Features: - Complete Tax Audit Trail: Records every tax rule application with calculation details - Calculation Transparency: Stores taxable amount, calculated tax, and effective rate - Method Tracking: Records the calculation method used for reproducibility - Unique Constraint: Prevents duplicate tax rule applications per payment - Performance Optimized: Indexes for fast audit queries and reporting</p> <p>Schema: <pre><code>employee_payment_tax_applications (\n    id, employee_payment_id, tax_rule_id,\n    taxable_amount [12,2], calculated_tax [12,2], effective_rate [5,4],\n    calculation_date, calculation_method, notes,\n    created_at, updated_at\n)\n\n-- Unique Constraint:\n-- uq_payment_tax_rule (employee_payment_id, tax_rule_id)\n\n-- Indexes:\n-- ix_tax_applications_payment_id (employee_payment_id)\n-- ix_tax_applications_tax_rule_id (tax_rule_id)\n-- ix_tax_applications_calculation_date (calculation_date)\n</code></pre></p>"},{"location":"dev/architecture/payroll_tax_architecture/#data-relationships","title":"Data Relationships","text":"<pre><code>PayrollPolicy (1) --&gt; (Many) EmployeePayment\n    |\n    |-- Defines calculation rules for payments\n    |-- Controls overtime, breaks, and wage policies\n    |-- Enforces location-specific compliance\n\nTaxRule (Many) --&gt; (Many) EmployeePayment [via EmployeePaymentTaxApplication]\n    |\n    |-- Complete audit trail of tax calculations\n    |-- Multiple tax rules applied per payment\n    |-- Location and time-based rule selection\n    |-- Calculation method tracking\n\nEmployeePayment (1) --&gt; (Many) EmployeePaymentTaxApplication\n    |\n    |-- Detailed breakdown of each tax calculation\n    |-- Audit trail for compliance and verification\n    |-- Historical record of tax rule applications\n</code></pre>"},{"location":"dev/architecture/payroll_tax_architecture/#integration-points","title":"Integration Points","text":""},{"location":"dev/architecture/payroll_tax_architecture/#with-existing-staff-module","title":"With Existing Staff Module","text":"<ul> <li><code>EmployeePayment.staff_id</code> references existing staff members</li> <li>Integrates with current <code>staff_members</code> table</li> <li>Maintains compatibility with existing payroll workflows</li> </ul>"},{"location":"dev/architecture/payroll_tax_architecture/#with-tax-module","title":"With Tax Module","text":"<ul> <li>Complements existing <code>tax_rules</code> table for order-based taxes</li> <li>New <code>payroll_tax_rules</code> table specifically for payroll calculations</li> <li>Separate tax contexts for different business processes</li> </ul>"},{"location":"dev/architecture/payroll_tax_architecture/#with-time-tracking","title":"With Time Tracking","text":"<ul> <li><code>EmployeePayment</code> stores calculated hours from time tracking systems</li> <li>Ready for integration with shift and attendance modules</li> <li>Supports multiple hour types and rate calculations</li> </ul>"},{"location":"dev/architecture/payroll_tax_architecture/#implementation-benefits","title":"Implementation Benefits","text":""},{"location":"dev/architecture/payroll_tax_architecture/#phase-1-enhanced-advantages","title":"Phase 1 Enhanced Advantages","text":"<ol> <li>Production-Ready Design: Enterprise-grade constraints, indexes, and data types</li> <li>Type Safety: Enum-based fields eliminate data inconsistencies and improve reliability</li> <li>Performance Optimized: Composite indexes ensure fast queries even with large datasets</li> <li>Compliance Ready: Built-in support for complex multi-jurisdiction tax requirements</li> <li>Complete Audit Trail: Tax application tracking provides full calculation transparency</li> <li>Data Integrity: Unique constraints prevent duplicate payments and tax applications</li> <li>Multi-tenant Support: Built-in tenant isolation for enterprise deployments</li> <li>Currency Flexibility: Ready for international payroll processing</li> <li>Precise Calculations: Standardized precision prevents rounding errors in payroll</li> <li>Scalable Architecture: Designed to handle high-volume payroll processing</li> </ol>"},{"location":"dev/architecture/payroll_tax_architecture/#future-extensibility","title":"Future Extensibility","text":"<ul> <li>Government API Integration: Audit trail supports compliance reporting requirements</li> <li>Advanced Payroll Features: Framework supports complex compensation structures</li> <li>Custom Deductions: Extensible system for specialized payroll items</li> <li>Automated Processing: Schema designed for workflow automation</li> <li>Analytics Ready: Optimized for payroll reporting and analytics</li> <li>Integration Friendly: Clean relationships support external system integration</li> </ul>"},{"location":"dev/architecture/payroll_tax_architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"dev/architecture/payroll_tax_architecture/#data-protection","title":"Data Protection","text":"<ul> <li>Complete Audit Trail: Every tax calculation is tracked with timestamps and user information</li> <li>Immutable Records: Tax applications provide permanent record of calculations</li> <li>Access Control Ready: Tenant isolation supports role-based access control</li> <li>Time-based Security: Effective/expiry dates control rule applicability</li> </ul>"},{"location":"dev/architecture/payroll_tax_architecture/#data-integrity","title":"Data Integrity","text":"<ul> <li>Duplicate Prevention: Unique constraints eliminate duplicate payments</li> <li>Referential Integrity: Foreign key constraints ensure data consistency</li> <li>Type Safety: Enums prevent invalid status and category values</li> <li>Precision Control: Standardized numeric types prevent calculation errors</li> </ul>"},{"location":"dev/architecture/payroll_tax_architecture/#compliance-support","title":"Compliance Support","text":"<ul> <li>Regulatory Audit: Tax application tracking supports compliance reporting</li> <li>Historical Preservation: Complete record of rule changes and applications</li> <li>Multi-jurisdiction: Location-based rules support complex compliance requirements</li> <li>Currency Tracking: International compliance through currency standardization</li> </ul>"},{"location":"dev/architecture/payroll_tax_architecture/#migration-strategy","title":"Migration Strategy","text":"<p>The enhanced Alembic migration <code>20250725_0730_0008_create_enhanced_payroll_tax_tables.py</code> creates:</p>"},{"location":"dev/architecture/payroll_tax_architecture/#database-objects-created","title":"Database Objects Created:","text":"<ol> <li>Enum Types: PaymentStatus, PayFrequency, TaxType, PaymentMethod for type safety</li> <li>Core Tables: All four payroll tables with enhanced schema design</li> <li>Performance Indexes: Composite indexes for optimal query performance</li> <li>Data Integrity: Unique constraints preventing duplicate data</li> <li>Relationships: Foreign key constraints ensuring referential integrity</li> </ol>"},{"location":"dev/architecture/payroll_tax_architecture/#key-migration-features","title":"Key Migration Features:","text":"<ul> <li>Enum Support: Creates PostgreSQL enum types for categorical data</li> <li>Precision Standards: Consistent numeric precision across all monetary fields</li> <li>Index Strategy: Optimized for common query patterns and reporting needs</li> <li>Constraint Implementation: Prevents data corruption and duplicate entries</li> <li>Rollback Support: Complete downgrade path for safe deployment</li> </ul>"},{"location":"dev/architecture/payroll_tax_architecture/#performance-optimizations","title":"Performance Optimizations:","text":"<ul> <li>Composite Indexes: Multi-column indexes for complex queries</li> <li>Strategic Indexing: Covers common filter and join patterns</li> <li>Unique Constraints: Database-level duplicate prevention</li> <li>Foreign Keys: Ensures data consistency across relationships</li> </ul>"},{"location":"dev/architecture/payroll_tax_architecture/#production-readiness","title":"Production Readiness","text":"<p>This enhanced Phase 1 implementation provides: - Enterprise-grade data integrity with comprehensive constraints - High-performance querying through strategic indexing - Complete audit capabilities for regulatory compliance - Type-safe operations reducing runtime errors - Scalable architecture supporting growth to large payrolls - Multi-tenant isolation for enterprise deployments - International support through currency standardization</p> <p>The architecture maintains full compatibility with existing AuraConnect systems while establishing a robust foundation for advanced payroll tax processing.</p>"},{"location":"dev/architecture/pos_integration_architecture/","title":"AuraConnect \u2013 POS Integration Module","text":""},{"location":"dev/architecture/pos_integration_architecture/#1-overview-goals","title":"1. \ud83d\udd0c Overview &amp; Goals","text":"<p>This module enables AuraConnect to integrate seamlessly with external POS systems (hardware and software), synchronizing menu items, orders, payments, and receipts across platforms.</p> <p>Goals:</p> <ul> <li>Push menu, modifiers, and pricing to POS terminals</li> <li>Pull sales/orders from POS into Analytics &amp; Reports</li> <li>Sync payments and print receipts</li> <li>Enable bidirectional real-time updates (if supported)</li> </ul>"},{"location":"dev/architecture/pos_integration_architecture/#2-key-integration-targets","title":"2. \ud83d\udd04 Key Integration Targets","text":"<ul> <li>Square POS</li> <li>Toast POS</li> <li>Clover</li> <li>Vend</li> <li>Custom vendor-specific APIs (via middleware adapters)</li> </ul>"},{"location":"dev/architecture/pos_integration_architecture/#3-architecture-overview","title":"3. \ud83e\uddf1 Architecture Overview","text":"<p>Core Services:</p> <ul> <li><code>POSBridgeService</code> \u2013 Handles all outbound/inbound sync</li> <li><code>AdapterLayer</code> \u2013 Vendor-specific implementations</li> <li><code>SyncScheduler</code> \u2013 Interval-based and event-driven triggers</li> <li><code>AuditLogger</code> \u2013 Logs sync attempts and failures</li> </ul> <pre><code>[Aura Backend] \u25c0\u25b6 [POSBridgeService] \u25c0\u25b6 [AdapterLayer (Square/Toast/...)]\n                        \u2502                      \u25b2\n                        \u25bc                      \u2502\n               [Order Sync / Menu Sync]   [POS APIs / SDKs]\n</code></pre>"},{"location":"dev/architecture/pos_integration_architecture/#4-sync-workflows","title":"4. \ud83d\udd01 Sync Workflows","text":""},{"location":"dev/architecture/pos_integration_architecture/#menu-push-flow","title":"Menu Push Flow:","text":"<ol> <li>Menu update occurs in AuraConnect</li> <li>Sync trigger initiated</li> <li>Adapter formats payload to vendor schema</li> <li>POST request sent to POS API \u2192 Success or Error logged</li> </ol>"},{"location":"dev/architecture/pos_integration_architecture/#order-pull-flow","title":"Order Pull Flow:","text":"<ol> <li>SyncScheduler initiates fetch (polling or webhook)</li> <li>Orders retrieved from POS system</li> <li>Converted into Aura schema and stored</li> <li>Forwarded to Analytics module</li> </ol>"},{"location":"dev/architecture/pos_integration_architecture/#5-api-endpoints","title":"5. \ud83d\udce1 API Endpoints","text":""},{"location":"dev/architecture/pos_integration_architecture/#integration-management","title":"Integration Management","text":"<ul> <li><code>POST /integrations/pos/connect</code> \u2013 add/store credentials</li> <li><code>GET /integrations/pos/status</code> \u2013 test sync</li> <li><code>POST /integrations/pos/sync/menu</code></li> <li><code>POST /integrations/pos/sync/orders</code></li> </ul>"},{"location":"dev/architecture/pos_integration_architecture/#6-database-schema","title":"6. \ud83d\uddc3\ufe0f Database Schema","text":""},{"location":"dev/architecture/pos_integration_architecture/#table-pos_integrations","title":"Table: <code>pos_integrations</code>","text":"<p>| id | vendor | credentials (jsonb) | connected_on |</p>"},{"location":"dev/architecture/pos_integration_architecture/#table-pos_sync_logs","title":"Table: <code>pos_sync_logs</code>","text":"<p>| id | type | status | message | synced_at |</p>"},{"location":"dev/architecture/pos_integration_architecture/#7-code-stub","title":"7. \ud83d\udee0\ufe0f Code Stub","text":"<pre><code>// posbridge.service.ts\napp.post(\"/integrations/pos/sync/menu\", authenticate, authorize(\"admin\"), async (req, res) =&gt; {\n  const success = await posBridge.syncMenuToVendor(\"square\");\n  res.status(success ? 200 : 500).json({ success });\n});\n</code></pre>"},{"location":"dev/architecture/pos_integration_architecture/#8-developer-notes","title":"8. \ud83d\udcd8 Developer Notes","text":"<ul> <li>Use queue system for retries (e.g. failed pushes to vendor APIs)</li> <li>AdapterLayer should abstract out differences in payloads and endpoints</li> <li>Always log sync outcomes for debugging and compliance</li> <li>Credentials must be encrypted at rest</li> </ul>"},{"location":"dev/architecture/pos_integration_architecture/#summary","title":"\u2705 Summary","text":"<p>POS Integration is the key to cross-platform operability. This module provides extensibility and control over how AuraConnect communicates with real-world POS systems, ensuring data consistency and centralized reporting.</p> <p>\u27a1\ufe0f Next up: White-Labeling Support</p>"},{"location":"dev/architecture/rbac_system_architecture/","title":"Role-Based Access Control (RBAC) System Architecture","text":""},{"location":"dev/architecture/rbac_system_architecture/#overview","title":"Overview","text":"<p>The AuraConnect AI RBAC system provides comprehensive, fine-grained access control for all system operations. It implements a flexible role and permission-based security model that supports multi-tenancy, hierarchical roles, and session-based permission caching.</p>"},{"location":"dev/architecture/rbac_system_architecture/#system-design","title":"System Design","text":""},{"location":"dev/architecture/rbac_system_architecture/#core-components","title":"Core Components","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      RBAC System                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502    Users    \u2502  \u2502    Roles    \u2502  \u2502    Permissions      \u2502  \u2502\n\u2502  \u2502             \u2502  \u2502             \u2502  \u2502                     \u2502  \u2502\n\u2502  \u2502 - ID        \u2502  \u2502 - ID        \u2502  \u2502 - ID                \u2502  \u2502\n\u2502  \u2502 - Username  \u2502  \u2502 - Name      \u2502  \u2502 - Key               \u2502  \u2502\n\u2502  \u2502 - Email     \u2502  \u2502 - Display   \u2502  \u2502 - Resource:Action   \u2502  \u2502\n\u2502  \u2502 - Tenants   \u2502  \u2502 - Parent    \u2502  \u2502 - Description       \u2502  \u2502\n\u2502  \u2502 - Status    \u2502  \u2502 - Tenants   \u2502  \u2502 - Tenants           \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502         \u2502                \u2502                      \u2502           \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2502                          \u2502                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502              Association Tables                         \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502\n\u2502  \u2502  \u2502  User-Roles     \u2502    \u2502    Role-Permissions         \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502  - User ID      \u2502    \u2502    - Role ID                \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502  - Role ID      \u2502    \u2502    - Permission ID          \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502  - Tenant ID    \u2502    \u2502    - Granted At             \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502  - Expires At   \u2502    \u2502    - Granted By             \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502  - Granted By   \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                    \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502              Enhanced Features                          \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502\n\u2502  \u2502  \u2502 Direct Perms    \u2502    \u2502    RBAC Sessions            \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 - User ID       \u2502    \u2502    - Session ID             \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 - Permission    \u2502    \u2502    - User ID                \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 - Grant/Deny    \u2502    \u2502    - Active Tenant          \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 - Tenant/Rsrc   \u2502    \u2502    - Cached Permissions     \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 - Expires At    \u2502    \u2502    - Cache Expires          \u2502 \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#permission-model","title":"Permission Model","text":"<p>The system uses a Resource:Action permission model:</p> <pre><code>Permission Key: &lt;resource&gt;:&lt;action&gt;\nExamples:\n- staff:read         # View staff information\n- staff:write        # Create/update staff records\n- payroll:approve    # Approve payroll runs\n- order:manage_kitchen # Kitchen operations access\n- system:audit       # Access audit logs\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#role-hierarchy","title":"Role Hierarchy","text":"<p>Roles support hierarchical inheritance:</p> <pre><code>super_admin\n\u251c\u2500\u2500 admin\n\u2502   \u251c\u2500\u2500 manager\n\u2502   \u2502   \u251c\u2500\u2500 staff_manager\n\u2502   \u2502   \u2514\u2500\u2500 kitchen_manager\n\u2502   \u2514\u2500\u2500 payroll_manager\n\u2502       \u2514\u2500\u2500 payroll_clerk\n\u2514\u2500\u2500 viewer\n    \u2514\u2500\u2500 server\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#database-schema","title":"Database Schema","text":""},{"location":"dev/architecture/rbac_system_architecture/#core-tables","title":"Core Tables","text":""},{"location":"dev/architecture/rbac_system_architecture/#rbac_users","title":"rbac_users","text":"<pre><code>CREATE TABLE rbac_users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    hashed_password VARCHAR(255) NOT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    is_email_verified BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    last_login TIMESTAMP,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    phone VARCHAR(20),\n    default_tenant_id INTEGER,\n    accessible_tenant_ids JSONB DEFAULT '[]',\n    failed_login_attempts INTEGER DEFAULT 0,\n    locked_until TIMESTAMP,\n    password_changed_at TIMESTAMP DEFAULT NOW()\n);\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#rbac_roles","title":"rbac_roles","text":"<pre><code>CREATE TABLE rbac_roles (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) UNIQUE NOT NULL,\n    display_name VARCHAR(100) NOT NULL,\n    description TEXT,\n    parent_role_id INTEGER REFERENCES rbac_roles(id),\n    is_active BOOLEAN DEFAULT TRUE,\n    is_system_role BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    tenant_ids JSONB DEFAULT '[]'\n);\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#rbac_permissions","title":"rbac_permissions","text":"<pre><code>CREATE TABLE rbac_permissions (\n    id SERIAL PRIMARY KEY,\n    key VARCHAR(100) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT,\n    resource VARCHAR(50) NOT NULL,\n    action VARCHAR(50) NOT NULL,\n    is_active BOOLEAN DEFAULT TRUE,\n    is_system_permission BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT NOW(),\n    tenant_ids JSONB DEFAULT '[]'\n);\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#association-tables","title":"Association Tables","text":""},{"location":"dev/architecture/rbac_system_architecture/#user_roles","title":"user_roles","text":"<pre><code>CREATE TABLE user_roles (\n    user_id INTEGER REFERENCES rbac_users(id),\n    role_id INTEGER REFERENCES rbac_roles(id),\n    tenant_id INTEGER,\n    granted_at TIMESTAMP DEFAULT NOW(),\n    granted_by INTEGER REFERENCES rbac_users(id),\n    expires_at TIMESTAMP,\n    is_active BOOLEAN DEFAULT TRUE,\n    PRIMARY KEY (user_id, role_id)\n);\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#role_permissions","title":"role_permissions","text":"<pre><code>CREATE TABLE role_permissions (\n    role_id INTEGER REFERENCES rbac_roles(id),\n    permission_id INTEGER REFERENCES rbac_permissions(id),\n    granted_at TIMESTAMP DEFAULT NOW(),\n    granted_by INTEGER REFERENCES rbac_users(id),\n    PRIMARY KEY (role_id, permission_id)\n);\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#api-endpoints","title":"API Endpoints","text":""},{"location":"dev/architecture/rbac_system_architecture/#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"dev/architecture/rbac_system_architecture/#enhanced-login","title":"Enhanced Login","text":"<pre><code>POST /auth/login/rbac?tenant_id=1\nContent-Type: application/x-www-form-urlencoded\n\nusername=admin&amp;password=secret\n</code></pre> <p>Response: <pre><code>{\n  \"access_token\": \"eyJ...\",\n  \"refresh_token\": \"eyJ...\",\n  \"token_type\": \"bearer\",\n  \"access_expires_in\": 1800,\n  \"refresh_expires_in\": 604800,\n  \"session_id\": \"session_123\",\n  \"user_info\": {\n    \"id\": 1,\n    \"username\": \"admin\",\n    \"roles\": [\"admin\"],\n    \"rbac_session_id\": \"rbac_session_456\",\n    \"active_tenant_id\": 1,\n    \"cached_permissions\": {\"1\": [\"staff:read\", \"payroll:write\"]}\n  }\n}\n</code></pre></p>"},{"location":"dev/architecture/rbac_system_architecture/#user-info-with-rbac","title":"User Info with RBAC","text":"<pre><code>GET /auth/me/rbac?tenant_id=1\nAuthorization: Bearer eyJ...\n</code></pre> <p>Response: <pre><code>{\n  \"id\": 1,\n  \"username\": \"admin\",\n  \"email\": \"admin@example.com\",\n  \"first_name\": \"Admin\",\n  \"last_name\": \"User\",\n  \"is_active\": true,\n  \"is_email_verified\": true,\n  \"created_at\": \"2025-01-01T00:00:00Z\",\n  \"last_login\": \"2025-01-01T12:00:00Z\",\n  \"accessible_tenant_ids\": [1, 2, 3],\n  \"default_tenant_id\": 1,\n  \"roles\": [\"admin\", \"manager\"],\n  \"permissions\": [\"staff:read\", \"staff:write\", \"payroll:approve\", \"order:read\"]\n}\n</code></pre></p>"},{"location":"dev/architecture/rbac_system_architecture/#permission-check","title":"Permission Check","text":"<pre><code>POST /auth/check-permission\nAuthorization: Bearer eyJ...\nContent-Type: application/json\n\n{\n  \"permission_key\": \"payroll:approve\",\n  \"tenant_id\": 1,\n  \"resource_id\": \"payroll_123\"\n}\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#rbac-management-endpoints","title":"RBAC Management Endpoints","text":""},{"location":"dev/architecture/rbac_system_architecture/#user-management","title":"User Management","text":"<pre><code>GET /rbac/users                    # List users\nPOST /rbac/users                   # Create user\nGET /rbac/users/{id}               # Get user\nGET /rbac/users/{id}/permissions   # Get user permissions\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#role-management","title":"Role Management","text":"<pre><code>GET /rbac/roles                    # List roles\nPOST /rbac/roles                   # Create role\nGET /rbac/roles/{id}               # Get role\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#permission-management","title":"Permission Management","text":"<pre><code>GET /rbac/permissions              # List permissions\nGET /rbac/permissions/{id}         # Get permission\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#assignment-operations","title":"Assignment Operations","text":"<pre><code>POST /rbac/assign-role             # Assign role to user\nPOST /rbac/remove-role             # Remove role from user\nPOST /rbac/assign-permission       # Assign permission to role\nPOST /rbac/remove-permission       # Remove permission from role\nPOST /rbac/grant-direct-permission # Grant direct permission to user\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#backend-implementation","title":"Backend Implementation","text":""},{"location":"dev/architecture/rbac_system_architecture/#service-layer","title":"Service Layer","text":"<p>The <code>RBACService</code> class provides high-level operations:</p> <pre><code>from backend.core.rbac_service import RBACService\n\n# Initialize service\nrbac_service = RBACService(db_session)\n\n# User operations\nuser = rbac_service.create_user(\"username\", \"email\", \"password\")\nauthenticated = rbac_service.authenticate_user(\"username\", \"password\")\n\n# Role operations\nrole = rbac_service.create_role(\"role_name\", \"Display Name\")\nrbac_service.assign_role_to_user(user_id, role_id, tenant_id)\n\n# Permission operations\npermission = rbac_service.create_permission(\"resource:action\", \"Name\")\nrbac_service.assign_permission_to_role(role_id, permission_id)\n\n# Permission checking\nhas_permission = rbac_service.check_user_permission(\n    user_id, \"staff:read\", tenant_id=1\n)\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#fastapi-dependencies","title":"FastAPI Dependencies","text":"<p>Use RBAC dependencies for endpoint protection:</p> <pre><code>from backend.core.rbac_auth import (\n    require_permission, require_role, require_admin,\n    RBACDependency\n)\n\n# Single permission\n@app.get(\"/api/staff\")\nasync def get_staff(user: RBACUser = Depends(require_permission(\"staff:read\"))):\n    pass\n\n# Multiple permissions (any)\n@app.post(\"/api/payroll/run\")\nasync def run_payroll(\n    user: RBACUser = Depends(require_permissions([\"payroll:write\", \"payroll:approve\"], require_all=False))\n):\n    pass\n\n# Role-based\n@app.get(\"/api/admin/settings\")\nasync def admin_settings(user: RBACUser = Depends(require_admin())):\n    pass\n\n# Custom dependency\nadvanced_dependency = RBACDependency(\n    required_permissions=[\"order:write\"],\n    required_roles=[\"manager\"],\n    tenant_aware=True,\n    allow_admin_override=True\n)\n\n@app.post(\"/api/orders\")\nasync def create_order(user: RBACUser = Depends(advanced_dependency)):\n    pass\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#frontend-implementation","title":"Frontend Implementation","text":""},{"location":"dev/architecture/rbac_system_architecture/#react-context-and-hooks","title":"React Context and Hooks","text":"<pre><code>import { RBACProvider, useRBAC } from './hooks/useRBAC';\n\n// App setup\nfunction App() {\n  return (\n    &lt;RBACProvider&gt;\n      &lt;Router&gt;\n        &lt;Routes&gt;\n          &lt;Route path=\"/login\" element={&lt;LoginForm /&gt;} /&gt;\n          &lt;Route path=\"/dashboard\" element={&lt;Dashboard /&gt;} /&gt;\n        &lt;/Routes&gt;\n      &lt;/Router&gt;\n    &lt;/RBACProvider&gt;\n  );\n}\n\n// Component usage\nfunction Dashboard() {\n  const { user, hasPermission, hasRole, login, logout } = useRBAC();\n\n  const canViewPayroll = hasPermission('payroll:read');\n  const isManager = hasRole('manager');\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Welcome, {user?.username}&lt;/h1&gt;\n      {canViewPayroll &amp;&amp; &lt;PayrollSection /&gt;}\n      {isManager &amp;&amp; &lt;ManagementTools /&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#guard-components","title":"Guard Components","text":"<pre><code>import { PermissionGuard, RoleGuard, PayrollGuard } from './components/rbac/RBACGuard';\n\nfunction ProtectedContent() {\n  return (\n    &lt;div&gt;\n      &lt;PermissionGuard permission=\"staff:read\"&gt;\n        &lt;StaffList /&gt;\n      &lt;/PermissionGuard&gt;\n\n      &lt;RoleGuard roles={[\"admin\", \"manager\"]}&gt;\n        &lt;AdminPanel /&gt;\n      &lt;/RoleGuard&gt;\n\n      &lt;PayrollGuard action=\"approve\"&gt;\n        &lt;PayrollApprovalButton /&gt;\n      &lt;/PayrollGuard&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#convenience-hooks","title":"Convenience Hooks","text":"<pre><code>import { usePermission, useRole, useIsAdmin } from './hooks/useRBAC';\n\nfunction ComponentWithPermissions() {\n  const canEdit = usePermission('staff:write');\n  const isAdmin = useIsAdmin();\n  const hasManagerRole = useRole('manager');\n\n  return (\n    &lt;div&gt;\n      {canEdit &amp;&amp; &lt;EditButton /&gt;}\n      {isAdmin &amp;&amp; &lt;AdminControls /&gt;}\n      {hasManagerRole &amp;&amp; &lt;ManagerDashboard /&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#multi-tenancy-support","title":"Multi-Tenancy Support","text":""},{"location":"dev/architecture/rbac_system_architecture/#tenant-scoped-permissions","title":"Tenant-Scoped Permissions","text":"<pre><code># Backend: Check permission for specific tenant\nhas_permission = rbac_service.check_user_permission(\n    user_id=1,\n    permission_key=\"staff:read\",\n    tenant_id=2  # Specific tenant\n)\n\n# Grant tenant-specific permission\nrbac_service.grant_direct_permission(\n    user_id=1,\n    permission_key=\"payroll:approve\",\n    tenant_id=2,  # Only for tenant 2\n    expires_at=datetime.utcnow() + timedelta(days=30)\n)\n</code></pre> <pre><code>// Frontend: Tenant context\nconst { switchTenant, activeTenantId } = useRBAC();\n\n// Switch active tenant\nawait switchTenant(2);\n\n// Check permission for specific tenant\nconst canApprove = hasPermission('payroll:approve', 2);\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#security-features","title":"Security Features","text":""},{"location":"dev/architecture/rbac_system_architecture/#account-lockout","title":"Account Lockout","text":"<ul> <li>Automatic lockout after 5 failed login attempts</li> <li>30-minute lockout duration</li> <li>Reset on successful login</li> </ul>"},{"location":"dev/architecture/rbac_system_architecture/#session-management","title":"Session Management","text":"<ul> <li>Redis-based session storage</li> <li>Permission caching for performance</li> <li>Session expiration and cleanup</li> <li>Multi-device session tracking</li> </ul>"},{"location":"dev/architecture/rbac_system_architecture/#token-security","title":"Token Security","text":"<ul> <li>JWT with unique token IDs (JTI)</li> <li>Token blacklisting on logout</li> <li>Refresh token rotation</li> <li>Session-aware token validation</li> </ul>"},{"location":"dev/architecture/rbac_system_architecture/#audit-trail","title":"Audit Trail","text":"<ul> <li>All role/permission changes logged</li> <li>User authentication events tracked</li> <li>Administrative actions recorded</li> </ul>"},{"location":"dev/architecture/rbac_system_architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"dev/architecture/rbac_system_architecture/#permission-caching","title":"Permission Caching","text":"<pre><code># Session-based permission caching\nsession = rbac_service.create_rbac_session(\n    session_id=\"session_123\",\n    user_id=1,\n    active_tenant_id=1,\n    # Permissions cached automatically\n)\n\n# Cache refresh\nrbac_service.refresh_session_cache(\"session_123\")\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#database-optimizations","title":"Database Optimizations","text":"<ul> <li>Indexed permission keys and user IDs</li> <li>Efficient join queries for role inheritance</li> <li>Bulk permission checking operations</li> <li>Connection pooling and query optimization</li> </ul>"},{"location":"dev/architecture/rbac_system_architecture/#frontend-optimizations","title":"Frontend Optimizations","text":"<ul> <li>React context for global state</li> <li>Memoized permission checks</li> <li>Lazy loading of permission data</li> <li>Local storage for session persistence</li> </ul>"},{"location":"dev/architecture/rbac_system_architecture/#migration-and-setup","title":"Migration and Setup","text":""},{"location":"dev/architecture/rbac_system_architecture/#database-migration","title":"Database Migration","text":"<pre><code># Run RBAC migration\nalembic upgrade 20250727_1600_0012\n\n# Setup default roles and permissions\npython -c \"\nfrom backend.core.rbac_service import RBACService\nfrom backend.core.database import get_db\nrbac_service = RBACService(next(get_db()))\nrbac_service.setup_default_roles_and_permissions()\n\"\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#environment-configuration","title":"Environment Configuration","text":"<pre><code># JWT Settings\nJWT_SECRET_KEY=your-secret-key-here\nJWT_ACCESS_TOKEN_EXPIRE_MINUTES=30\nJWT_REFRESH_TOKEN_EXPIRE_DAYS=7\n\n# Database\nDATABASE_URL=postgresql://user:password@localhost/auraconnect\n\n# Redis (for sessions)\nREDIS_URL=redis://localhost:6379/0\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#best-practices","title":"Best Practices","text":""},{"location":"dev/architecture/rbac_system_architecture/#permission-design","title":"Permission Design","text":"<ol> <li>Use specific, granular permissions</li> <li>Follow <code>resource:action</code> naming convention</li> <li>Avoid overly broad permissions</li> <li>Consider permission inheritance</li> </ol>"},{"location":"dev/architecture/rbac_system_architecture/#role-design","title":"Role Design","text":"<ol> <li>Create role hierarchies that reflect business structure</li> <li>Assign minimum necessary permissions</li> <li>Use descriptive role names</li> <li>Document role purposes and responsibilities</li> </ol>"},{"location":"dev/architecture/rbac_system_architecture/#security","title":"Security","text":"<ol> <li>Always validate permissions server-side</li> <li>Use tenant-aware permission checking</li> <li>Implement proper session management</li> <li>Regular permission audits and cleanup</li> </ol>"},{"location":"dev/architecture/rbac_system_architecture/#performance","title":"Performance","text":"<ol> <li>Cache permissions at session level</li> <li>Use bulk operations for role assignments</li> <li>Monitor database query performance</li> <li>Implement pagination for large datasets</li> </ol>"},{"location":"dev/architecture/rbac_system_architecture/#testing","title":"Testing","text":""},{"location":"dev/architecture/rbac_system_architecture/#backend-tests","title":"Backend Tests","text":"<pre><code># Run RBAC tests\npytest backend/tests/test_rbac_system.py -v\n\n# Test specific functionality\npytest backend/tests/test_rbac_system.py::TestRBACPermissionChecking -v\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#frontend-tests","title":"Frontend Tests","text":"<pre><code># Run RBAC hook tests\nnpm test frontend/hooks/__tests__/useRBAC.test.tsx\n\n# Run guard component tests\nnpm test frontend/components/rbac/\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#troubleshooting","title":"Troubleshooting","text":""},{"location":"dev/architecture/rbac_system_architecture/#common-issues","title":"Common Issues","text":"<ol> <li>Permission Denied Errors</li> <li>Verify user has required role/permission</li> <li>Check tenant context</li> <li> <p>Confirm role-permission assignments</p> </li> <li> <p>Session Issues</p> </li> <li>Check Redis connectivity</li> <li>Verify session expiration</li> <li> <p>Clear browser storage if needed</p> </li> <li> <p>Performance Issues</p> </li> <li>Monitor permission cache hit rates</li> <li>Check database query performance</li> <li>Review role inheritance depth</li> </ol>"},{"location":"dev/architecture/rbac_system_architecture/#debug-tools","title":"Debug Tools","text":"<pre><code># Check user permissions\nuser_permissions = rbac_service.get_user_permissions(user_id, tenant_id)\nprint(f\"User permissions: {user_permissions}\")\n\n# Check role assignments\nuser_roles = rbac_service.get_user_roles(user_id, tenant_id)\nprint(f\"User roles: {[role.name for role in user_roles]}\")\n</code></pre> <pre><code>// Frontend debugging\nconst { user, hasPermission } = useRBAC();\nconsole.log('Current user:', user);\nconsole.log('Has staff:read:', hasPermission('staff:read'));\n</code></pre>"},{"location":"dev/architecture/rbac_system_architecture/#conclusion","title":"Conclusion","text":"<p>The AuraConnect AI RBAC system provides a comprehensive, secure, and scalable solution for access control. It supports complex organizational structures while maintaining performance and usability. The system is designed to grow with your organization's needs while providing the security and audit capabilities required for enterprise applications.</p>"},{"location":"dev/architecture/regulatory_compliance_architecture/","title":"AuraConnect \u2013 Regulatory &amp; Compliance Add-on","text":""},{"location":"dev/architecture/regulatory_compliance_architecture/#1-overview-goals","title":"1. \ud83c\udfdb\ufe0f Overview &amp; Goals","text":"<p>This module helps restaurants adhere to local, regional, and international compliance standards in food safety, labor laws, digital data regulations (like GDPR), taxation, and audit trails.</p> <p>Goals: - Provide regulatory templates per country/state - Enable automated logging of sensitive actions - Ensure auditability of tax, staff, and order data - Support food safety and health code tracking - Offer exportable compliance reports</p>"},{"location":"dev/architecture/regulatory_compliance_architecture/#2-key-compliance-areas","title":"2. \u2705 Key Compliance Areas","text":"<ul> <li>Taxation: GST, VAT, TIN, electronic invoicing</li> <li>Labor: Working hours, overtime, age restrictions</li> <li>Data Privacy: GDPR, CCPA, user data management</li> <li>Food Safety: Expiry tracking, allergen tagging</li> <li>Audit Trails: Immutable logs of sensitive actions</li> </ul>"},{"location":"dev/architecture/regulatory_compliance_architecture/#3-architecture-overview","title":"3. \ud83e\uddf1 Architecture Overview","text":"<p>Core Services: - <code>ComplianceEngine</code> \u2013 Orchestrates validation &amp; policies - <code>AuditLogger</code> \u2013 Immutable record keeper - <code>PolicyStore</code> \u2013 Configurable rules per region - <code>ExportService</code> \u2013 CSV/PDF log export - <code>NotificationService</code> \u2013 Reminders for non-compliance</p> <pre><code>[Aura Modules] \u2500\u25b6 [ComplianceEngine] \u2500\u25b6 [PolicyStore]\n                           \u2502                   \u2502\n                           \u25bc                   \u25bc\n                  [AuditLogger]        [NotificationService]\n                           \u2502\n                           \u25bc\n                   [ExportService \u2192 Reports]\n</code></pre>"},{"location":"dev/architecture/regulatory_compliance_architecture/#4-workflow-examples","title":"4. \ud83d\udd04 Workflow Examples","text":""},{"location":"dev/architecture/regulatory_compliance_architecture/#audit-logging-flow","title":"Audit Logging Flow:","text":"<ol> <li>A manager modifies a tax rule</li> <li>ComplianceEngine logs the action</li> <li>AuditLogger stores immutable log with metadata</li> </ol>"},{"location":"dev/architecture/regulatory_compliance_architecture/#policy-alert-flow","title":"Policy Alert Flow:","text":"<ol> <li>Shift exceeds legal max duration</li> <li>NotificationService alerts admin</li> </ol>"},{"location":"dev/architecture/regulatory_compliance_architecture/#data-request-flow","title":"Data Request Flow:","text":"<ol> <li>Customer requests data deletion (GDPR)</li> <li>System queues and completes anonymization</li> </ol>"},{"location":"dev/architecture/regulatory_compliance_architecture/#5-api-endpoints","title":"5. \ud83d\udce1 API Endpoints","text":""},{"location":"dev/architecture/regulatory_compliance_architecture/#policy-management","title":"Policy Management","text":"<ul> <li><code>GET /compliance/policies/:region</code></li> <li><code>POST /compliance/policies</code> \u2013 add custom rule</li> </ul>"},{"location":"dev/architecture/regulatory_compliance_architecture/#audit-logs","title":"Audit Logs","text":"<ul> <li><code>GET /compliance/auditlogs</code> \u2013 query by user/module/date</li> </ul>"},{"location":"dev/architecture/regulatory_compliance_architecture/#regulatory-exports","title":"Regulatory Exports","text":"<ul> <li><code>GET /compliance/export/audit</code></li> <li><code>GET /compliance/export/tax</code></li> <li><code>GET /compliance/export/labor</code></li> </ul>"},{"location":"dev/architecture/regulatory_compliance_architecture/#6-database-schema","title":"6. \ud83d\uddc3\ufe0f Database Schema","text":""},{"location":"dev/architecture/regulatory_compliance_architecture/#table-audit_logs","title":"Table: <code>audit_logs</code>","text":"<p>| id | action | module | user_id | meta (jsonb) | timestamp |</p>"},{"location":"dev/architecture/regulatory_compliance_architecture/#table-compliance_policies","title":"Table: <code>compliance_policies</code>","text":"<p>| id | region | type | rule_json | created_at |</p>"},{"location":"dev/architecture/regulatory_compliance_architecture/#7-code-stub","title":"7. \ud83d\udee0\ufe0f Code Stub","text":"<pre><code>// auditLogger.ts\nfunction logAudit(action, module, userId, meta) {\n  db.insert(\"audit_logs\", { action, module, user_id: userId, meta, timestamp: new Date() });\n}\n</code></pre>"},{"location":"dev/architecture/regulatory_compliance_architecture/#8-developer-notes","title":"8. \ud83d\udcd8 Developer Notes","text":"<ul> <li>Use append-only design for <code>audit_logs</code></li> <li>Support versioned policies for future-proofing</li> <li>Include legal text downloads for tax/HR compliance</li> <li>Consider external auditor role with read-only access</li> </ul>"},{"location":"dev/architecture/regulatory_compliance_architecture/#summary","title":"\u2705 Summary","text":"<p>This add-on ensures AuraConnect deployments can meet regulatory standards and pass audits confidently. It promotes responsible data use, staff safety, and tax/legal transparency.</p> <p>\u2714\ufe0f All modules completed! AuraConnect is now fully architected.</p>"},{"location":"dev/architecture/staff_management_architecture/","title":"AuraConnect \u2013 Staff Management Module","text":""},{"location":"dev/architecture/staff_management_architecture/#1-overview-goals","title":"1. \ud83c\udfaf Overview &amp; Goals","text":"<p>The Staff Management Module allows restaurants to efficiently onboard, manage, and monitor employees such as managers, chefs, servers, and delivery staff. It handles roles, shifts, permissions, profiles, and access control.</p> <p>Goals:</p> <ul> <li>Onboard staff with custom roles</li> <li>Role-based access to AuraConnect modules</li> <li>Manage shift schedules and leaves</li> <li>Track performance and attendance</li> <li>Ensure compliance and audit readiness</li> </ul>"},{"location":"dev/architecture/staff_management_architecture/#2-staff-roles-permissions","title":"2. \ud83d\udc65 Staff Roles &amp; Permissions","text":""},{"location":"dev/architecture/staff_management_architecture/#supported-roles-configurable","title":"Supported Roles (Configurable):","text":"<ul> <li>Admin \u2013 Full access</li> <li>Manager \u2013 Ops &amp; team supervision</li> <li>Chef / Kitchen Staff \u2013 Kitchen-only interface</li> <li>Server / FOH Staff \u2013 Orders, customer service</li> <li>Delivery Staff \u2013 Delivery schedule, order status</li> </ul>"},{"location":"dev/architecture/staff_management_architecture/#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC):","text":"<ul> <li>Defined in the DB and enforced in middleware</li> <li>Access tokens embed role-based scopes</li> </ul>"},{"location":"dev/architecture/staff_management_architecture/#3-architecture-diagram","title":"3. \ud83e\uddf1 Architecture Diagram","text":"<p>Core Components:</p> <ul> <li><code>StaffService</code> (REST API layer)</li> <li><code>AuthService</code> (with token &amp; permission engine)</li> <li><code>UserDB</code> (PostgreSQL or Supabase)</li> <li><code>Scheduler</code> (manages shift tables)</li> <li><code>NotificationService</code> (reminders, alerts)</li> </ul> <pre><code>[Frontend] \u2500\u2500\u25b6 [StaffService API] \u2500\u2500\u25b6 [UserDB]\n                     \u2502                     \u2502\n                     \u25bc                     \u25bc\n             [AuthService]          [Scheduler]\n                     \u2502\n              [NotificationService]\n</code></pre>"},{"location":"dev/architecture/staff_management_architecture/#4-workflow-flowcharts","title":"4. \ud83d\udd01 Workflow Flowcharts","text":""},{"location":"dev/architecture/staff_management_architecture/#onboarding-flow","title":"Onboarding Flow:","text":"<ol> <li>Admin creates staff profile</li> <li>Assigns role + shift schedule</li> <li>System sends welcome email + app link</li> <li>Staff logs in and updates profile</li> </ol>"},{"location":"dev/architecture/staff_management_architecture/#shift-scheduling-flow","title":"Shift Scheduling Flow:","text":"<ol> <li>Manager creates weekly shift plan</li> <li>Scheduler validates overlaps</li> <li>Staff confirms availability</li> <li>Finalized schedule notifies staff</li> </ol>"},{"location":"dev/architecture/staff_management_architecture/#5-api-endpoints-rest","title":"5. \ud83d\udce1 API Endpoints (REST)","text":""},{"location":"dev/architecture/staff_management_architecture/#authentication","title":"Authentication","text":"<ul> <li><code>POST /auth/login</code></li> <li><code>POST /auth/register</code></li> <li><code>POST /auth/logout</code></li> </ul>"},{"location":"dev/architecture/staff_management_architecture/#staff-management","title":"Staff Management","text":"<ul> <li><code>GET /staff</code> \u2013 list all staff</li> <li><code>GET /staff/:id</code> \u2013 view profile</li> <li><code>POST /staff</code> \u2013 add staff</li> <li><code>PUT /staff/:id</code> \u2013 update profile</li> <li><code>DELETE /staff/:id</code> \u2013 remove staff</li> </ul>"},{"location":"dev/architecture/staff_management_architecture/#shift-roles","title":"Shift &amp; Roles","text":"<ul> <li><code>GET /shifts</code> \u2013 view schedule</li> <li><code>POST /shifts</code> \u2013 create shifts</li> <li><code>POST /roles</code> \u2013 create custom roles</li> <li><code>GET /roles</code> \u2013 list all roles</li> </ul>"},{"location":"dev/architecture/staff_management_architecture/#6-database-schema-postgresql","title":"6. \ud83d\uddc3\ufe0f Database Schema (PostgreSQL)","text":""},{"location":"dev/architecture/staff_management_architecture/#table-users","title":"Table: <code>users</code>","text":"id name email role is_active created_at"},{"location":"dev/architecture/staff_management_architecture/#table-roles","title":"Table: <code>roles</code>","text":"<p>| id | name | permissions (jsonb) |</p>"},{"location":"dev/architecture/staff_management_architecture/#table-shifts","title":"Table: <code>shifts</code>","text":"<p>| id | user_id | start_time | end_time | status |</p>"},{"location":"dev/architecture/staff_management_architecture/#7-initial-code-stub-optional","title":"7. \ud83d\udee0\ufe0f Initial Code Stub (Optional)","text":"<pre><code>// staff.service.ts (Node + Express)\napp.post(\"/staff\", authenticate, authorize(\"admin\"), async (req, res) =&gt; {\n  const staff = await db.insert(\"users\", req.body);\n  sendWelcomeEmail(staff.email);\n  res.status(201).json(staff);\n});\n</code></pre>"},{"location":"dev/architecture/staff_management_architecture/#8-developer-notes","title":"8. \ud83d\udcd8 Developer Notes","text":"<ul> <li>Middleware should enforce role-based access control (RBAC)</li> <li>Use JWT for session tokens with embedded scopes</li> <li>Scheduler should auto-adjust for public holidays (extendable logic)</li> <li>Notifications can be handled via Firebase or a queue system</li> </ul>"},{"location":"dev/architecture/staff_management_architecture/#summary","title":"\u2705 Summary","text":"<p>This module empowers restaurant operators to scale and secure their workforce operations with RBAC, shift management, and reliable onboarding. It\u2019s critical for supporting access control across all other modules.</p> <p>\u27a1\ufe0f Next up: Menu &amp; Inventory System (will be structured in a new focused chat)</p>"},{"location":"dev/architecture/taxing_payroll_architecture/","title":"AuraConnect \u2013 Taxing &amp; Payroll System","text":""},{"location":"dev/architecture/taxing_payroll_architecture/#1-overview-goals","title":"1. \ud83d\udcbc Overview &amp; Goals","text":"<p>This module automates tax calculations and staff payroll based on configured rules, logged work hours, role-based rates, and region-specific compliance. It integrates with government APIs, accounting tools, and banks/payroll providers.</p> <p>Goals:</p> <ul> <li>Automate tax calculation on orders and salaries</li> <li>Track logged hours and overtime</li> <li>Generate payslips and tax forms</li> <li>Support multi-location tax zones and laws</li> </ul>"},{"location":"dev/architecture/taxing_payroll_architecture/#2-core-features","title":"2. \ud83d\udccb Core Features","text":"<ul> <li>Tax rule configuration by location and category</li> <li>Real-time tax applied at checkout (order-level)</li> <li>Hour tracking and pay-grade management</li> <li>Payroll calculation engine with tax deduction</li> <li>Payslip generation and report export (PDF)</li> <li>Integration hooks for government API filing</li> </ul>"},{"location":"dev/architecture/taxing_payroll_architecture/#3-architecture-overview","title":"3. \ud83e\uddf1 Architecture Overview","text":"<p>Core Services:</p> <ul> <li><code>TaxEngine</code> \u2013 Order tax rules, region-based logic</li> <li><code>PayrollEngine</code> \u2013 Calculates net pay, bonuses, taxes</li> <li><code>TimeTracker</code> \u2013 Work hours, shifts, overtime</li> <li><code>PayslipService</code> \u2013 Generates PDF payslips and records</li> <li><code>ComplianceGateway</code> \u2013 Hooks to tax/GST/EPF APIs</li> </ul> <pre><code>[OrderService / StaffService] \u2500\u25b6 [TaxEngine / TimeTracker]\n                 \u2502                          \u2502\n                 \u25bc                          \u25bc\n          [PayrollEngine]         [ComplianceGateway]\n                 \u2502                          \u2502\n                 \u25bc                          \u25bc\n         [PayslipService]              [Export/Reports]\n</code></pre>"},{"location":"dev/architecture/taxing_payroll_architecture/#4-workflow-flowcharts","title":"4. \ud83d\udd04 Workflow Flowcharts","text":""},{"location":"dev/architecture/taxing_payroll_architecture/#payroll-cycle-flow","title":"Payroll Cycle Flow:","text":"<ol> <li>Staff logs work hours (TimeTracker)</li> <li>PayrollEngine pulls hours + pay-grade + tax rules</li> <li>Net salary calculated with deductions</li> <li>PayslipService generates slip + report</li> <li>Optionally sends to bank/payroll API</li> </ol>"},{"location":"dev/architecture/taxing_payroll_architecture/#tax-calculation-flow","title":"Tax Calculation Flow:","text":"<ol> <li>Customer places order</li> <li>Location-based rules fetched</li> <li>TaxEngine applies percentages to subtotal</li> <li>Totals sent back to OrderService</li> </ol>"},{"location":"dev/architecture/taxing_payroll_architecture/#5-api-endpoints","title":"5. \ud83d\udce1 API Endpoints","text":""},{"location":"dev/architecture/taxing_payroll_architecture/#tax","title":"Tax","text":"<ul> <li><code>GET /tax/rules/:location</code></li> <li><code>POST /tax/apply</code> \u2013 returns computed tax on input</li> </ul>"},{"location":"dev/architecture/taxing_payroll_architecture/#payroll","title":"Payroll","text":"<ul> <li><code>GET /payroll/:staffId</code></li> <li><code>POST /payroll/run</code> \u2013 generate payroll for period</li> <li><code>GET /payroll/history/:staffId</code></li> </ul>"},{"location":"dev/architecture/taxing_payroll_architecture/#time-tracking","title":"Time Tracking","text":"<ul> <li><code>POST /timelog/start</code></li> <li><code>POST /timelog/stop</code></li> <li><code>GET /timelog/:staffId</code></li> </ul>"},{"location":"dev/architecture/taxing_payroll_architecture/#6-database-schema","title":"6. \ud83d\uddc3\ufe0f Database Schema","text":""},{"location":"dev/architecture/taxing_payroll_architecture/#table-tax_rules","title":"Table: <code>tax_rules</code>","text":"<p>| id | location | category | rate_percent |</p>"},{"location":"dev/architecture/taxing_payroll_architecture/#table-time_logs","title":"Table: <code>time_logs</code>","text":"<p>| id | staff_id | shift_id | start_time | end_time |</p>"},{"location":"dev/architecture/taxing_payroll_architecture/#table-payroll","title":"Table: <code>payroll</code>","text":"<p>| id | staff_id | gross | deductions | net | period |</p>"},{"location":"dev/architecture/taxing_payroll_architecture/#table-payslips","title":"Table: <code>payslips</code>","text":"<p>| id | payroll_id | pdf_url | issued_at |</p>"},{"location":"dev/architecture/taxing_payroll_architecture/#7-code-stub","title":"7. \ud83d\udee0\ufe0f Code Stub","text":"<pre><code>// payroll.service.ts\napp.post(\"/payroll/run\", authenticate, authorize(\"admin\"), async (req, res) =&gt; {\n  const results = await payrollEngine.generateForPeriod(req.body);\n  res.status(200).json(results);\n});\n</code></pre>"},{"location":"dev/architecture/taxing_payroll_architecture/#8-developer-notes","title":"8. \ud83d\udcd8 Developer Notes","text":"<ul> <li>Tax rules can be dynamic or geo-based (e.g. state GST, VAT)</li> <li>Make <code>TimeTracker</code> extensible for biometrics or manual logs</li> <li>Payroll reports should support month-end exports (Excel/PDF)</li> <li>Ensure data security and audit trails for compliance</li> </ul>"},{"location":"dev/architecture/taxing_payroll_architecture/#summary","title":"\u2705 Summary","text":"<p>This module handles the financial and legal backbone of restaurant operations \u2014 ensuring accurate pay and compliant taxation. It\u2019s tightly linked with order flow and staff activity.</p> <p>\u27a1\ufe0f Core modules complete! Next: POS Integration (Optional module 1)</p>"},{"location":"dev/architecture/white_labeling_architecture/","title":"AuraConnect \u2013 White-Labeling Support Module","text":""},{"location":"dev/architecture/white_labeling_architecture/#1-overview-goals","title":"1. \ud83e\udde9 Overview &amp; Goals","text":"<p>This module enables platform branding to be customized per client (restaurant group, franchise, or white-label partner). It supports themes, logos, color schemes, domains, and even branded mobile apps.</p> <p>Goals:</p> <ul> <li>Allow each tenant to brand the UI with their logo and color scheme</li> <li>Enable custom domains and white-label subdomains</li> <li>Support theming overrides for web &amp; mobile clients</li> <li>Simplify branding configuration via admin dashboard</li> </ul>"},{"location":"dev/architecture/white_labeling_architecture/#2-branding-elements","title":"2. \ud83d\uddbc\ufe0f Branding Elements","text":"<ul> <li>Logo &amp; Favicon</li> <li>Color Palette (primary, secondary, background)</li> <li>Font family</li> <li>Domain (custom or subdomain)</li> <li>Footer/contact details</li> </ul>"},{"location":"dev/architecture/white_labeling_architecture/#3-architecture-overview","title":"3. \ud83e\uddf1 Architecture Overview","text":"<p>Core Services:</p> <ul> <li><code>BrandingService</code> \u2013 Stores and applies tenant branding config</li> <li><code>ThemeEngine</code> \u2013 Compiles and renders tenant-specific styles</li> <li><code>DomainRouter</code> \u2013 Maps incoming requests to tenant</li> <li><code>MobilePackager</code> \u2013 For branded mobile builds (optional CI toolchain)</li> </ul> <pre><code>[User Request] \u2500\u25b6 [DomainRouter] \u2500\u25b6 [Tenant ID]\n                        \u2502\n                        \u25bc\n               [BrandingService] \u2500\u25b6 [ThemeEngine / UI Layer]\n</code></pre>"},{"location":"dev/architecture/white_labeling_architecture/#4-flowcharts","title":"4. \ud83d\udd04 Flowcharts","text":""},{"location":"dev/architecture/white_labeling_architecture/#ui-branding-load-flow","title":"UI Branding Load Flow:","text":"<ol> <li>User opens <code>mybrand.auraconnect.ai</code></li> <li>DomainRouter maps to tenant ID</li> <li>BrandingService fetches config</li> <li>ThemeEngine renders theme tokens</li> <li>UI applies theme dynamically</li> </ol>"},{"location":"dev/architecture/white_labeling_architecture/#admin-branding-setup-flow","title":"Admin Branding Setup Flow:","text":"<ol> <li>Admin opens Branding Settings</li> <li>Uploads logo, selects colors/fonts</li> <li>Clicks preview and confirms</li> <li>Config is saved and rendered immediately</li> </ol>"},{"location":"dev/architecture/white_labeling_architecture/#5-api-endpoints","title":"5. \ud83d\udce1 API Endpoints","text":""},{"location":"dev/architecture/white_labeling_architecture/#branding-config","title":"Branding Config","text":"<ul> <li><code>GET /branding/:tenantId</code> \u2013 fetch branding</li> <li><code>POST /branding</code> \u2013 update config</li> </ul>"},{"location":"dev/architecture/white_labeling_architecture/#domain-mapping","title":"Domain Mapping","text":"<ul> <li><code>POST /branding/domain</code> \u2013 link domain</li> <li><code>GET /branding/domain/:tenantId</code></li> </ul>"},{"location":"dev/architecture/white_labeling_architecture/#6-database-schema","title":"6. \ud83d\uddc3\ufe0f Database Schema","text":""},{"location":"dev/architecture/white_labeling_architecture/#table-branding_configs","title":"Table: <code>branding_configs</code>","text":"<p>| id | tenant_id | logo_url | primary_color | font | updated_at |</p>"},{"location":"dev/architecture/white_labeling_architecture/#table-custom_domains","title":"Table: <code>custom_domains</code>","text":"<p>| id | tenant_id | domain | verified | created_at |</p>"},{"location":"dev/architecture/white_labeling_architecture/#7-code-stub","title":"7. \ud83d\udee0\ufe0f Code Stub","text":"<pre><code>// branding.service.ts\napp.get(\"/branding/:tenantId\", async (req, res) =&gt; {\n  const config = await db.query(\"SELECT * FROM branding_configs WHERE tenant_id = $1\", [req.params.tenantId]);\n  res.json(config);\n});\n</code></pre>"},{"location":"dev/architecture/white_labeling_architecture/#8-developer-notes","title":"8. \ud83d\udcd8 Developer Notes","text":"<ul> <li>Consider caching themes in CDN for performance</li> <li>Support fallbacks (e.g., default logo if none provided)</li> <li>Ensure safe rendering of styles to avoid injection</li> <li>Mobile packaging can be CI/CD-based with env config injection</li> </ul>"},{"location":"dev/architecture/white_labeling_architecture/#summary","title":"\u2705 Summary","text":"<p>White-labeling makes AuraConnect adaptable to franchises and partners. This module adds a vital layer of customization, making each tenant\u2019s experience feel fully branded.</p> <p>\u27a1\ufe0f Next up: Offline Sync for Mobile</p>"},{"location":"feature_docs/","title":"Feature Docs","text":"<p>This section contains detailed documentation and architecture for each major module.</p>"},{"location":"feature_docs/ai_agents/","title":"AI Agent Core","text":""},{"location":"feature_docs/ai_agents/#summary","title":"Summary","text":"<p>Central agent engine for all modules using LangChain or CrewAI architecture.</p>"},{"location":"feature_docs/ai_agents/#key-features","title":"Key Features","text":"<ul> <li>Context-aware prompt generation</li> <li>Multi-agent orchestration</li> <li>LLM-to-action pipelines</li> </ul>"},{"location":"feature_docs/ai_agents/#developer-notes","title":"Developer Notes","text":"<ul> <li>Base: <code>ai_agents/agent_core.py</code></li> <li>Tooling: <code>tools.py</code>, <code>prompt_factory.py</code></li> </ul>"},{"location":"feature_docs/ai_agents/architecture/","title":"Ai Agents Module Architecture","text":""},{"location":"feature_docs/ai_agents/architecture/#overview","title":"Overview","text":"<p>Central logic for agentic automation across the platform.</p>"},{"location":"feature_docs/ai_agents/architecture/#system-flow","title":"System Flow","text":"<ul> <li>Agent initialized based on context (e.g., reservation, payroll)</li> <li>Inputs gathered from DB + user</li> <li>Prompt generated dynamically</li> <li>LLM response interpreted</li> <li>Action triggered (DB update, notification, suggestion)</li> </ul>"},{"location":"feature_docs/ai_agents/architecture/#key-components","title":"Key Components","text":"<ul> <li>Agent Core Engine</li> <li>LangChain/CrewAI Framework</li> <li>Prompt Factory</li> <li>Tool Integration</li> </ul>"},{"location":"feature_docs/ai_agents/architecture/#developer-notes","title":"Developer Notes","text":"<p>Each component should follow service-layer design with unit test coverage.</p>"},{"location":"feature_docs/ai_customization/","title":"AI Customization Module","text":""},{"location":"feature_docs/ai_customization/#summary","title":"Summary","text":"<p>Fine-tunes agents on per-restaurant data like menu items, tone, and preferences.</p>"},{"location":"feature_docs/ai_customization/#key-features","title":"Key Features","text":"<ul> <li>Prompt customization</li> <li>Agent memory per client</li> <li>Review-based recommendation tuning</li> </ul>"},{"location":"feature_docs/ai_customization/#developer-notes","title":"Developer Notes","text":"<ul> <li>Logic: <code>ai_customization/fine_tuning/</code></li> <li>Storage: <code>agent_registry.py</code></li> </ul>"},{"location":"feature_docs/ai_customization/architecture/","title":"Ai Customization Module Architecture","text":""},{"location":"feature_docs/ai_customization/architecture/#overview","title":"Overview","text":"<p>Trains agents on restaurant-specific data (menus, reviews, behavior).</p>"},{"location":"feature_docs/ai_customization/architecture/#system-flow","title":"System Flow","text":"<ul> <li>Restaurant uploads datasets</li> <li>Data preprocessed into embeddings/prompts</li> <li>Fine-tuned agents generated</li> <li>Stored and assigned to tenant</li> <li>Used in live chat/menu interactions</li> </ul>"},{"location":"feature_docs/ai_customization/architecture/#key-components","title":"Key Components","text":"<ul> <li>Dataset Importer</li> <li>Prompt Trainer</li> <li>Agent Registry</li> <li>Embed Store</li> </ul>"},{"location":"feature_docs/ai_customization/architecture/#developer-notes","title":"Developer Notes","text":"<p>Each component should follow service-layer design with unit test coverage.</p>"},{"location":"feature_docs/compliance/","title":"Compliance Module","text":""},{"location":"feature_docs/compliance/#summary","title":"Summary","text":"<p>Ensures wage/tax compliance for legal regions and generates audit logs.</p>"},{"location":"feature_docs/compliance/#key-features","title":"Key Features","text":"<ul> <li>Minimum wage rule checks</li> <li>Tax slab warnings</li> <li>Exportable audit trail</li> </ul>"},{"location":"feature_docs/compliance/#developer-notes","title":"Developer Notes","text":"<ul> <li>Compliance checks: <code>compliance_rule_engine.py</code></li> <li>Alerts: <code>alerts_dispatcher.py</code></li> </ul>"},{"location":"feature_docs/compliance/architecture/","title":"Compliance Module Architecture","text":""},{"location":"feature_docs/compliance/architecture/#overview","title":"Overview","text":"<p>Enforces tax and wage compliance rules per region.</p>"},{"location":"feature_docs/compliance/architecture/#system-flow","title":"System Flow","text":"<ul> <li>Region selected/configured</li> <li>Wage/tax rules loaded</li> <li>Each transaction checked at runtime</li> <li>Violations flagged</li> <li>Monthly compliance report generated</li> </ul>"},{"location":"feature_docs/compliance/architecture/#key-components","title":"Key Components","text":"<ul> <li>Compliance Rule Engine</li> <li>Violation Logger</li> <li>Audit Reporter</li> <li>Alerts Dispatcher</li> </ul>"},{"location":"feature_docs/compliance/architecture/#developer-notes","title":"Developer Notes","text":"<p>Each component should follow service-layer design with unit test coverage.</p>"},{"location":"feature_docs/mobile/","title":"Mobile Features Documentation","text":""},{"location":"feature_docs/mobile/#overview","title":"Overview","text":"<p>The AuraConnect mobile application provides a comprehensive restaurant management solution with offline capabilities, push notifications, and real-time synchronization.</p>"},{"location":"feature_docs/mobile/#features","title":"Features","text":""},{"location":"feature_docs/mobile/#1-push-notifications","title":"1. Push Notifications","text":"<ul> <li>Real-time order updates</li> <li>Promotional notifications</li> <li>System announcements</li> <li>Do Not Disturb scheduling</li> <li>Notification preferences</li> </ul>"},{"location":"feature_docs/mobile/#2-offline-support","title":"2. Offline Support","text":"<ul> <li>Local data caching</li> <li>Offline order management</li> <li>Background synchronization</li> <li>Conflict resolution</li> </ul>"},{"location":"feature_docs/mobile/#3-real-time-updates","title":"3. Real-time Updates","text":"<ul> <li>WebSocket connections</li> <li>Order status tracking</li> <li>Live inventory updates</li> <li>Staff notifications</li> </ul>"},{"location":"feature_docs/mobile/#architecture","title":"Architecture","text":"<pre><code>mobile/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 notifications/       # Push notification system\n\u2502   \u2502   \u251c\u2500\u2500 offline/            # Offline data management\n\u2502   \u2502   \u2514\u2500\u2500 sync/               # Data synchronization\n\u2502   \u251c\u2500\u2500 screens/\n\u2502   \u2502   \u251c\u2500\u2500 notifications/      # Notification UI\n\u2502   \u2502   \u2514\u2500\u2500 orders/             # Order management\n\u2502   \u2514\u2500\u2500 components/\n\u2502       \u2514\u2500\u2500 notifications/      # Notification components\n\u2514\u2500\u2500 docs/\n    \u2514\u2500\u2500 push-notifications.md   # Setup guide\n</code></pre>"},{"location":"feature_docs/mobile/#key-components","title":"Key Components","text":""},{"location":"feature_docs/mobile/#notificationservice","title":"NotificationService","text":"<p>Central service managing all push notification functionality including FCM token management, notification display, and preference handling.</p>"},{"location":"feature_docs/mobile/#offlinemanager","title":"OfflineManager","text":"<p>Handles offline data storage, queue management, and synchronization when connectivity is restored.</p>"},{"location":"feature_docs/mobile/#syncservice","title":"SyncService","text":"<p>Manages real-time data synchronization between mobile app and backend services.</p>"},{"location":"feature_docs/mobile/#getting-started","title":"Getting Started","text":"<ol> <li>Push Notifications Setup: See push-notifications.md</li> <li>Offline Configuration: See Offline Sync Documentation</li> <li>Testing Guide: Testing Guide (Coming Soon)</li> </ol>"},{"location":"feature_docs/mobile/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Notification history is limited to 100 items</li> <li>Encrypted storage for sensitive data</li> <li>Batch synchronization for offline data</li> <li>Exponential backoff for failed operations</li> </ul>"},{"location":"feature_docs/mobile/#security","title":"Security","text":"<ul> <li>FCM tokens are always encrypted</li> <li>Secure storage for notification preferences</li> <li>Authentication required for all API calls</li> <li>Data encryption in transit and at rest</li> </ul>"},{"location":"feature_docs/mobile/push-notifications/","title":"Push Notifications Setup Guide","text":""},{"location":"feature_docs/mobile/push-notifications/#overview","title":"Overview","text":"<p>AuraConnect uses Firebase Cloud Messaging (FCM) for push notifications on both iOS and Android platforms. The system supports order updates, promotional messages, and system announcements with advanced features like Do Not Disturb scheduling and quick actions.</p>"},{"location":"feature_docs/mobile/push-notifications/#prerequisites","title":"Prerequisites","text":"<ul> <li>React Native project setup</li> <li>Firebase project created</li> <li>Apple Developer account (for iOS)</li> <li>Google Play Console access (for Android production)</li> </ul>"},{"location":"feature_docs/mobile/push-notifications/#installation","title":"Installation","text":""},{"location":"feature_docs/mobile/push-notifications/#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code># Core dependencies\nyarn add @react-native-firebase/app @react-native-firebase/messaging\nyarn add @notifee/react-native\nyarn add react-native-push-notification\n\n# iOS specific\ncd ios &amp;&amp; pod install\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#2-firebase-configuration","title":"2. Firebase Configuration","text":""},{"location":"feature_docs/mobile/push-notifications/#android-setup","title":"Android Setup","text":"<ol> <li>Download <code>google-services.json</code> from Firebase Console</li> <li>Place it in <code>android/app/</code></li> <li>Update <code>android/build.gradle</code>:</li> </ol> <pre><code>buildscript {\n    dependencies {\n        classpath 'com.google.gms:google-services:4.3.15'\n    }\n}\n</code></pre> <ol> <li>Update <code>android/app/build.gradle</code>:</li> </ol> <pre><code>apply plugin: 'com.google.gms.google-services'\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#ios-setup","title":"iOS Setup","text":"<ol> <li>Download <code>GoogleService-Info.plist</code> from Firebase Console</li> <li>Add to iOS project via Xcode</li> <li>Update <code>AppDelegate.m</code>:</li> </ol> <pre><code>#import &lt;Firebase.h&gt;\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [FIRApp configure];\n    // ... rest of your code\n}\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#3-ios-specific-configuration","title":"3. iOS Specific Configuration","text":""},{"location":"feature_docs/mobile/push-notifications/#enable-push-notifications-capability","title":"Enable Push Notifications Capability","text":"<ol> <li>Open project in Xcode</li> <li>Select your target</li> <li>Go to \"Signing &amp; Capabilities\"</li> <li>Add \"Push Notifications\" capability</li> <li>Add \"Background Modes\" capability</li> <li>Enable \"Remote notifications\" under Background Modes</li> </ol>"},{"location":"feature_docs/mobile/push-notifications/#configure-apns","title":"Configure APNs","text":"<ol> <li>Generate APNs Authentication Key in Apple Developer Portal</li> <li>Upload to Firebase Console under Project Settings &gt; Cloud Messaging</li> <li>Enter Key ID and Team ID</li> </ol>"},{"location":"feature_docs/mobile/push-notifications/#infoplist-updates","title":"Info.plist Updates","text":"<p>Add the following to <code>Info.plist</code>:</p> <pre><code>&lt;key&gt;UIBackgroundModes&lt;/key&gt;\n&lt;array&gt;\n    &lt;string&gt;remote-notification&lt;/string&gt;\n    &lt;string&gt;fetch&lt;/string&gt;\n&lt;/array&gt;\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#4-android-specific-configuration","title":"4. Android Specific Configuration","text":""},{"location":"feature_docs/mobile/push-notifications/#notification-channels","title":"Notification Channels","text":"<p>Channels are automatically created by the app: - <code>order_updates</code>: High priority order notifications - <code>promotions</code>: Default priority promotional messages - <code>system</code>: High priority system notifications</p>"},{"location":"feature_docs/mobile/push-notifications/#androidmanifestxml-updates","title":"AndroidManifest.xml Updates","text":"<pre><code>&lt;!-- Firebase Messaging Service --&gt;\n&lt;service\n    android:name=\"com.google.firebase.messaging.FirebaseMessagingService\"\n    android:exported=\"false\"&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"com.google.firebase.MESSAGING_EVENT\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/service&gt;\n\n&lt;!-- Notification permissions --&gt;\n&lt;uses-permission android:name=\"android.permission.VIBRATE\" /&gt;\n&lt;uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" /&gt;\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#implementation","title":"Implementation","text":""},{"location":"feature_docs/mobile/push-notifications/#1-initialize-notification-service","title":"1. Initialize Notification Service","text":"<pre><code>import { NotificationService } from '@services/notifications/NotificationService';\n\n// In your app initialization\nconst notificationService = NotificationService.getInstance();\nawait notificationService.initialize();\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#2-handle-token-registration","title":"2. Handle Token Registration","text":"<pre><code>// Listen for token updates\nnotificationService.on('registerToken', async (token) =&gt; {\n    // Send token to your backend\n    await api.registerDeviceToken(token);\n});\n\n// Token refresh handling is automatic\nnotificationService.on('tokenRefresh', async (newToken) =&gt; {\n    await api.updateDeviceToken(newToken);\n});\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#3-display-custom-notifications","title":"3. Display Custom Notifications","text":"<pre><code>// Display a notification\nawait notificationService.displayNotification({\n    id: 'custom-123',\n    title: 'Order Ready',\n    body: 'Order #123 is ready for pickup',\n    data: {\n        orderId: '123',\n        type: 'order_ready'\n    }\n});\n\n// Schedule a notification\nawait notificationService.scheduleNotification(\n    notification,\n    Date.now() + 60000 // 1 minute from now\n);\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#4-handle-user-preferences","title":"4. Handle User Preferences","text":"<pre><code>// Update preferences\nawait notificationService.savePreferences({\n    orderUpdates: true,\n    promotions: false,\n    doNotDisturb: {\n        enabled: true,\n        startTime: '22:00',\n        endTime: '08:00'\n    }\n});\n\n// Get current preferences\nconst preferences = notificationService.getPreferences();\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#backend-integration","title":"Backend Integration","text":""},{"location":"feature_docs/mobile/push-notifications/#payload-structure","title":"Payload Structure","text":""},{"location":"feature_docs/mobile/push-notifications/#order-notifications","title":"Order Notifications","text":"<pre><code>{\n    \"notification\": {\n        \"title\": \"Order Update\",\n        \"body\": \"Your order #123 is being prepared\"\n    },\n    \"data\": {\n        \"type\": \"order_preparing\",\n        \"orderId\": \"123\",\n        \"orderNumber\": \"ORD-001\",\n        \"customerName\": \"John Doe\",\n        \"items\": \"2x Burger, 1x Fries\", // Optional for big text style\n        \"timestamp\": \"1234567890\"\n    },\n    \"android\": {\n        \"priority\": \"high\"\n    },\n    \"apns\": {\n        \"payload\": {\n            \"aps\": {\n                \"sound\": \"default\",\n                \"badge\": 1\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#supported-order-types","title":"Supported Order Types","text":"<ul> <li><code>order_created</code>: New order received</li> <li><code>order_accepted</code>: Order accepted by restaurant</li> <li><code>order_preparing</code>: Order being prepared</li> <li><code>order_ready</code>: Order ready for pickup/delivery</li> <li><code>order_completed</code>: Order completed</li> <li><code>order_cancelled</code>: Order cancelled</li> </ul>"},{"location":"feature_docs/mobile/push-notifications/#api-endpoints","title":"API Endpoints","text":"<pre><code>// Register device token\nPOST /api/v1/devices/register\n{\n    \"token\": \"fcm-token\",\n    \"platform\": \"ios|android\",\n    \"deviceId\": \"unique-device-id\"\n}\n\n// Send notification\nPOST /api/v1/notifications/send\n{\n    \"userId\": \"user-123\",\n    \"type\": \"order_update\",\n    \"data\": {\n        \"orderId\": \"order-123\",\n        \"status\": \"ready\"\n    }\n}\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#testing","title":"Testing","text":""},{"location":"feature_docs/mobile/push-notifications/#1-test-push-notifications","title":"1. Test Push Notifications","text":"<pre><code>// Test notification display\nconst testNotification = () =&gt; {\n    notificationService.displayNotification({\n        id: 'test-' + Date.now(),\n        title: 'Test Notification',\n        body: 'This is a test notification',\n        data: { test: true }\n    });\n};\n\n// Test with different channels\nconst testChannels = async () =&gt; {\n    // Order notification\n    await notificationService.displayNotification(\n        NotificationFactory.createOrderNotification(\n            'order_created',\n            { orderId: 'test-123' },\n            { title: 'Test Order', body: 'Test order notification' }\n        )\n    );\n\n    // Promotion notification\n    await notificationService.displayNotification(\n        NotificationFactory.createPromotionNotification(\n            'promo-test',\n            'Test Promotion',\n            '50% off test',\n            { promoCode: 'TEST50' }\n        )\n    );\n};\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#2-test-via-firebase-console","title":"2. Test via Firebase Console","text":"<ol> <li>Go to Firebase Console &gt; Cloud Messaging</li> <li>Click \"Send your first message\"</li> <li>Enter notification details</li> <li>Target your test device by FCM token</li> <li>Add custom data fields as needed</li> </ol>"},{"location":"feature_docs/mobile/push-notifications/#3-test-via-curl","title":"3. Test via cURL","text":"<pre><code>curl -X POST https://fcm.googleapis.com/fcm/send \\\n  -H \"Authorization: key=YOUR_SERVER_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"to\": \"DEVICE_FCM_TOKEN\",\n    \"notification\": {\n      \"title\": \"Test Order\",\n      \"body\": \"Order #123 is ready\"\n    },\n    \"data\": {\n      \"type\": \"order_ready\",\n      \"orderId\": \"123\"\n    }\n  }'\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#troubleshooting","title":"Troubleshooting","text":""},{"location":"feature_docs/mobile/push-notifications/#common-issues","title":"Common Issues","text":""},{"location":"feature_docs/mobile/push-notifications/#1-notifications-not-received-on-ios","title":"1. Notifications not received on iOS","text":"<ul> <li>Verify APNs configuration in Firebase</li> <li>Check device has notifications enabled</li> <li>Ensure app has proper capabilities</li> <li>Test with development APNs certificate first</li> </ul>"},{"location":"feature_docs/mobile/push-notifications/#2-notifications-not-received-on-android","title":"2. Notifications not received on Android","text":"<ul> <li>Check google-services.json is correct</li> <li>Verify Firebase project matches app</li> <li>Ensure notification channels are created</li> <li>Check device manufacturer battery optimization</li> </ul>"},{"location":"feature_docs/mobile/push-notifications/#3-token-registration-fails","title":"3. Token registration fails","text":"<ul> <li>Check network connectivity</li> <li>Verify Firebase initialization</li> <li>Look for errors in logs</li> <li>Try clearing app data and reinstalling</li> </ul>"},{"location":"feature_docs/mobile/push-notifications/#4-background-notifications-not-working","title":"4. Background notifications not working","text":"<ul> <li>iOS: Ensure content-available is set</li> <li>Android: Use high priority</li> <li>Check background fetch is enabled</li> <li>Verify background handlers are registered</li> </ul>"},{"location":"feature_docs/mobile/push-notifications/#debug-logging","title":"Debug Logging","text":"<p>Enable verbose logging:</p> <pre><code>// In development only\nif (__DEV__) {\n    messaging().setLogLevel('debug');\n}\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never log FCM tokens in production</li> <li>Always encrypt stored tokens</li> <li>Validate notification payloads</li> <li>Implement rate limiting on backend</li> <li>Use topic subscriptions for broadcasts</li> <li>Rotate server keys periodically</li> </ol>"},{"location":"feature_docs/mobile/push-notifications/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Limit notification history: Maximum 100 stored notifications</li> <li>Batch operations: Trim history in batches of 10</li> <li>Debounce token updates: Avoid frequent API calls</li> <li>Use channels wisely: Don't create too many channels</li> <li>Optimize payload size: Keep data minimal</li> </ol>"},{"location":"feature_docs/mobile/push-notifications/#advanced-features","title":"Advanced Features","text":""},{"location":"feature_docs/mobile/push-notifications/#quick-actions","title":"Quick Actions","text":"<pre><code>// Define notification with actions\nconst notification = {\n    // ... other properties\n    android: {\n        actions: [\n            {\n                title: 'Accept Order',\n                pressAction: { id: 'accept_order' }\n            },\n            {\n                title: 'Reject Order',\n                pressAction: { id: 'reject_order' }\n            }\n        ]\n    }\n};\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#rich-media-future-enhancement","title":"Rich Media (Future Enhancement)","text":"<pre><code>// Image notifications (requires additional setup)\nconst richNotification = {\n    // ... other properties\n    android: {\n        largeIcon: 'https://example.com/icon.png',\n        picture: 'https://example.com/image.png'\n    },\n    ios: {\n        attachments: [{\n            url: 'https://example.com/image.png'\n        }]\n    }\n};\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#monitoring","title":"Monitoring","text":""},{"location":"feature_docs/mobile/push-notifications/#analytics-integration","title":"Analytics Integration","text":"<pre><code>// Track notification metrics\nnotificationService.on('notificationDisplayed', (notification) =&gt; {\n    analytics.track('Notification Displayed', {\n        type: notification.data?.type,\n        notificationId: notification.id\n    });\n});\n\nnotificationService.on('notificationPress', (notification) =&gt; {\n    analytics.track('Notification Opened', {\n        type: notification.data?.type,\n        notificationId: notification.id\n    });\n});\n</code></pre>"},{"location":"feature_docs/mobile/push-notifications/#error-tracking","title":"Error Tracking","text":"<pre><code>// Centralized error handling\nNotificationErrorHandler.handleNotificationError = (error, context) =&gt; {\n    // Send to error tracking service\n    Sentry.captureException(error, {\n        tags: { feature: 'notifications', context }\n    });\n};\n</code></pre>"},{"location":"feature_docs/offline_sync/","title":"Offline Sync Module","text":""},{"location":"feature_docs/offline_sync/#summary","title":"Summary","text":"<p>Enables local order processing when offline and syncs data upon reconnection.</p>"},{"location":"feature_docs/offline_sync/#key-features","title":"Key Features","text":"<ul> <li>Local queue caching</li> <li>Automatic re-sync and conflict handling</li> <li>UI indicators for connectivity</li> </ul>"},{"location":"feature_docs/offline_sync/#developer-notes","title":"Developer Notes","text":"<ul> <li>Mobile logic: <code>mobile/src/offline/</code></li> <li>Backend sync: <code>offline_sync_service.py</code></li> </ul>"},{"location":"feature_docs/offline_sync/architecture/","title":"Offline Sync Module Architecture","text":""},{"location":"feature_docs/offline_sync/architecture/#overview","title":"Overview","text":"<p>Allows local order placement and queueing when internet is unavailable.</p>"},{"location":"feature_docs/offline_sync/architecture/#system-flow","title":"System Flow","text":"<ul> <li>Offline mode triggers</li> <li>Orders cached locally</li> <li>Background sync service watches status</li> <li>On reconnect: data pushed and conflicts resolved</li> <li>DB updated</li> </ul>"},{"location":"feature_docs/offline_sync/architecture/#key-components","title":"Key Components","text":"<ul> <li>Local Storage Handler</li> <li>Sync Watcher</li> <li>Conflict Resolver</li> <li>Recovery Agent</li> </ul>"},{"location":"feature_docs/offline_sync/architecture/#developer-notes","title":"Developer Notes","text":"<p>Each component should follow service-layer design with unit test coverage.</p>"},{"location":"feature_docs/payroll/","title":"Payroll Module","text":""},{"location":"feature_docs/payroll/#summary","title":"Summary","text":"<p>Automates staff salary calculation, shift tracking, and compliance-aware payslip generation.</p>"},{"location":"feature_docs/payroll/#key-features","title":"Key Features","text":"<ul> <li>Clock-in/out based salary engine</li> <li>Bonus and tip handling</li> <li>AI compliance checker for fair wages</li> </ul>"},{"location":"feature_docs/payroll/#developer-notes","title":"Developer Notes","text":"<ul> <li>Core logic: <code>backend/services/payroll_service.py</code></li> <li>Agent: <code>ai_agents/payroll_agent.py</code></li> <li>Models: <code>Staff</code>, <code>Shift</code>, <code>PayrollRecord</code></li> </ul>"},{"location":"feature_docs/payroll/architecture/","title":"Payroll Module Architecture","text":""},{"location":"feature_docs/payroll/architecture/#overview","title":"Overview","text":"<p>The payroll module provides comprehensive wage calculation, tax processing, and compliance management integrated with the AuraConnect AI platform. It automates salary calculation, shift tracking, bonuses, tax deductions, and payslip generation.</p>"},{"location":"feature_docs/payroll/architecture/#system-architecture-diagram","title":"System Architecture Diagram","text":"<pre><code>graph TB\n    subgraph \"External Integrations\"\n        POS[POS Systems]\n        TAX[Tax Services]\n        BANK[Banking APIs]\n    end\n\n    subgraph \"Payroll Core\"\n        PE[Enhanced Payroll Engine]\n        PTE[Payroll Tax Engine]\n        PCS[Config Service]\n        PS[Payslip Service]\n    end\n\n    subgraph \"Data Sources\"\n        STAFF[Staff Service]\n        SHIFT[Shift Tracker]\n        ATTEND[Attendance]\n    end\n\n    subgraph \"Storage\"\n        DB[(PostgreSQL)]\n        CACHE[(Redis)]\n        S3[Document Storage]\n    end\n\n    POS --&gt; SHIFT\n    SHIFT --&gt; PE\n    STAFF --&gt; PE\n    ATTEND --&gt; PE\n    PE --&gt; PTE\n    PTE --&gt; TAX\n    PE --&gt; PS\n    PS --&gt; S3\n    PE --&gt; DB\n    PTE --&gt; CACHE\n    PS --&gt; BANK</code></pre>"},{"location":"feature_docs/payroll/architecture/#system-flow","title":"System Flow","text":""},{"location":"feature_docs/payroll/architecture/#1-data-collection-phase","title":"1. Data Collection Phase","text":"<ul> <li>Shift Logging: Staff clock-in/out via POS integration or manual entry</li> <li>Attendance Tracking: Automatic absence and overtime detection</li> <li>Rate Retrieval: Current pay rates from staff configuration</li> </ul>"},{"location":"feature_docs/payroll/architecture/#2-calculation-phase","title":"2. Calculation Phase","text":"<pre><code>sequenceDiagram\n    participant UI\n    participant Engine\n    participant TaxService\n    participant Database\n\n    UI-&gt;&gt;Engine: Initiate Payroll Run\n    Engine-&gt;&gt;Database: Fetch Employee Data\n    Engine-&gt;&gt;Engine: Calculate Gross Pay\n    Engine-&gt;&gt;TaxService: Request Tax Calculations\n    TaxService-&gt;&gt;TaxService: Apply Federal Rules\n    TaxService-&gt;&gt;TaxService: Apply State Rules\n    TaxService-&gt;&gt;TaxService: Apply Local Rules\n    TaxService--&gt;&gt;Engine: Return Tax Amounts\n    Engine-&gt;&gt;Engine: Calculate Net Pay\n    Engine-&gt;&gt;Database: Store Payroll Record\n    Engine--&gt;&gt;UI: Return Results</code></pre>"},{"location":"feature_docs/payroll/architecture/#3-compliance-validation","title":"3. Compliance &amp; Validation","text":"<ul> <li>Minimum Wage Verification: Ensures compliance with local regulations</li> <li>Overtime Rules: Applies proper overtime multipliers</li> <li>Tax Compliance: Validates against current tax tables</li> <li>Audit Trail: Complete logging of all calculations</li> </ul>"},{"location":"feature_docs/payroll/architecture/#4-output-generation","title":"4. Output Generation","text":"<ul> <li>Payslip Creation: PDF generation with detailed breakdown</li> <li>Payment Processing: Integration with banking APIs</li> <li>Record Archival: Secure storage with retention policies</li> </ul>"},{"location":"feature_docs/payroll/architecture/#key-components","title":"Key Components","text":""},{"location":"feature_docs/payroll/architecture/#enhanced-payroll-engine","title":"Enhanced Payroll Engine","text":"<ul> <li>Location: <code>backend/modules/staff/services/enhanced_payroll_engine.py</code></li> <li>Responsibilities:</li> <li>Orchestrates entire payroll calculation</li> <li>Handles complex wage scenarios</li> <li>Manages batch processing</li> <li>Provides calculation transparency</li> </ul>"},{"location":"feature_docs/payroll/architecture/#payroll-tax-engine","title":"Payroll Tax Engine","text":"<ul> <li>Location: <code>backend/modules/payroll/services/payroll_tax_engine.py</code></li> <li>Responsibilities:</li> <li>Multi-jurisdiction tax calculations</li> <li>Tax table management</li> <li>Withholding calculations</li> <li>Compliance reporting</li> </ul>"},{"location":"feature_docs/payroll/architecture/#configuration-service","title":"Configuration Service","text":"<ul> <li>Location: <code>backend/modules/payroll/services/payroll_configuration_service.py</code></li> <li>Responsibilities:</li> <li>Company-specific settings</li> <li>Pay period management</li> <li>Deduction rules</li> <li>Benefit configurations</li> </ul>"},{"location":"feature_docs/payroll/architecture/#payslip-service","title":"Payslip Service","text":"<ul> <li>Location: <code>backend/modules/staff/services/payslip_service.py</code></li> <li>Responsibilities:</li> <li>PDF generation</li> <li>Email distribution</li> <li>Archive management</li> <li>Employee portal access</li> </ul>"},{"location":"feature_docs/payroll/architecture/#data-models","title":"Data Models","text":""},{"location":"feature_docs/payroll/architecture/#core-entities","title":"Core Entities","text":"<pre><code>erDiagram\n    Staff ||--o{ Payroll : has\n    Payroll ||--|{ PayrollItem : contains\n    Payroll ||--|| EmployeePayment : generates\n    TaxRule }o--|| Jurisdiction : belongs_to\n    PayrollConfig ||--|| Company : configures\n\n    Staff {\n        int id\n        string name\n        decimal hourly_rate\n        string tax_status\n    }\n\n    Payroll {\n        int id\n        int staff_id\n        date pay_period_start\n        date pay_period_end\n        decimal gross_pay\n        decimal net_pay\n    }\n\n    PayrollItem {\n        int id\n        int payroll_id\n        string type\n        string description\n        decimal amount\n    }</code></pre>"},{"location":"feature_docs/payroll/architecture/#api-integration","title":"API Integration","text":""},{"location":"feature_docs/payroll/architecture/#rest-endpoints","title":"REST Endpoints","text":"<ul> <li><code>POST /api/v1/payrolls/run</code> - Execute payroll batch</li> <li><code>GET /api/v1/payrolls/{staff_id}</code> - Retrieve history</li> <li><code>GET /api/v1/payrolls/{id}/detail</code> - Detailed breakdown</li> <li><code>POST /api/v1/payrolls/export</code> - Export data</li> <li><code>GET /api/v1/payrolls/rules</code> - Tax rules</li> </ul>"},{"location":"feature_docs/payroll/architecture/#websocket-events","title":"WebSocket Events","text":"<ul> <li><code>payroll.started</code> - Processing initiated</li> <li><code>payroll.progress</code> - Progress updates</li> <li><code>payroll.completed</code> - Processing finished</li> <li><code>payroll.error</code> - Error notifications</li> </ul>"},{"location":"feature_docs/payroll/architecture/#security-compliance","title":"Security &amp; Compliance","text":""},{"location":"feature_docs/payroll/architecture/#access-control","title":"Access Control","text":"<ul> <li>Role-based permissions (Admin, Payroll Manager, Employee)</li> <li>Tenant isolation for multi-tenant deployments</li> <li>Audit logging for all operations</li> </ul>"},{"location":"feature_docs/payroll/architecture/#data-protection","title":"Data Protection","text":"<ul> <li>Encryption at rest (AES-256)</li> <li>TLS 1.3 for transit</li> <li>PII masking in logs</li> <li>GDPR/CCPA compliance</li> </ul>"},{"location":"feature_docs/payroll/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"feature_docs/payroll/architecture/#optimization-strategies","title":"Optimization Strategies","text":"<ul> <li>Batch Processing: Handles 1000+ employees per run</li> <li>Caching: Redis for tax rules and calculations</li> <li>Async Operations: Background job processing</li> <li>Database Indexing: Optimized for common queries</li> </ul>"},{"location":"feature_docs/payroll/architecture/#scalability","title":"Scalability","text":"<ul> <li>Horizontal scaling via load balancing</li> <li>Database read replicas for reports</li> <li>Queue-based job distribution</li> <li>CDN for document delivery</li> </ul>"},{"location":"feature_docs/payroll/architecture/#developer-notes","title":"Developer Notes","text":""},{"location":"feature_docs/payroll/architecture/#best-practices","title":"Best Practices","text":"<ol> <li>Service Layer Design: All business logic in service classes</li> <li>Dependency Injection: Use FastAPI's dependency system</li> <li>Error Handling: Comprehensive exception handling</li> <li>Testing: Minimum 80% test coverage</li> <li>Documentation: OpenAPI specs for all endpoints</li> </ol>"},{"location":"feature_docs/payroll/architecture/#common-patterns","title":"Common Patterns","text":"<pre><code># Example service pattern\nclass PayrollService:\n    def __init__(self, db: Session):\n        self.db = db\n        self.engine = EnhancedPayrollEngine(db)\n\n    async def process_payroll(self, staff_id: int, period: PayPeriod):\n        # Validation\n        # Calculation\n        # Persistence\n        # Notification\n        pass\n</code></pre>"},{"location":"feature_docs/payroll/architecture/#testing-requirements","title":"Testing Requirements","text":"<ul> <li>Unit tests for all calculations</li> <li>Integration tests for API endpoints</li> <li>End-to-end tests for complete workflows</li> <li>Performance tests for batch operations</li> </ul>"},{"location":"feature_docs/payroll/architecture/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>AI-Powered Insights: Anomaly detection and forecasting</li> <li>Mobile App: Native iOS/Android applications</li> <li>Third-Party Integrations: QuickBooks, ADP, Paychex</li> <li>Advanced Analytics: Predictive modeling for labor costs</li> <li>Blockchain Integration: Immutable payroll records</li> </ol>"},{"location":"feature_docs/payroll/architecture/#related-documentation","title":"Related Documentation","text":""},{"location":"feature_docs/payroll/architecture/#development-integration","title":"Development &amp; Integration","text":"<ul> <li>Payroll Tax Developer Guide - Complete developer documentation</li> <li>Payroll Integration Architecture - System integration details</li> <li>Production Readiness Checklist - Deployment requirements</li> </ul>"},{"location":"feature_docs/payroll/architecture/#implementation-details","title":"Implementation Details","text":"<ul> <li>Tax Calculation Flow - Tax processing workflow</li> <li>API Phase 4 Documentation (see backend source code) - REST API specifications</li> <li>PayrollIntegration Component (see frontend source code) - UI implementation</li> </ul>"},{"location":"feature_docs/payroll/tax_calculation_flow/","title":"Payroll Tax Calculation Flow Documentation","text":""},{"location":"feature_docs/payroll/tax_calculation_flow/#overview","title":"Overview","text":"<p>This document describes the tax calculation flow implemented in AuraConnect's payroll system as part of Phase 2: Tax Services (AUR-276). The tax system provides comprehensive payroll tax calculations with multi-jurisdiction support and effective date handling.</p>"},{"location":"feature_docs/payroll/tax_calculation_flow/#architecture","title":"Architecture","text":""},{"location":"feature_docs/payroll/tax_calculation_flow/#core-components","title":"Core Components","text":"<ol> <li>PayrollTaxEngine (<code>backend/modules/payroll/services/payroll_tax_engine.py</code>)</li> <li>Core tax rule evaluation engine</li> <li>Handles multi-jurisdiction calculations</li> <li> <p>Manages effective/expiry date filtering</p> </li> <li> <p>PayrollTaxService (<code>backend/modules/payroll/services/payroll_tax_service.py</code>)</p> </li> <li>High-level service API for payroll integration</li> <li>Provides database persistence</li> <li> <p>Offers validation and bulk operations</p> </li> <li> <p>Data Models (<code>backend/modules/payroll/models/payroll_models.py</code>)</p> </li> <li><code>TaxRule</code>: Multi-jurisdiction tax rule definitions</li> <li><code>EmployeePayment</code>: Payroll payment records with tax fields</li> <li> <p><code>EmployeePaymentTaxApplication</code>: Detailed tax calculation audit trail</p> </li> <li> <p>Schemas (<code>backend/modules/payroll/schemas/payroll_tax_schemas.py</code>)</p> </li> <li>Pydantic models for request/response validation</li> <li>Type-safe data transfer objects</li> </ol>"},{"location":"feature_docs/payroll/tax_calculation_flow/#tax-calculation-flow","title":"Tax Calculation Flow","text":""},{"location":"feature_docs/payroll/tax_calculation_flow/#1-tax-rule-lookup","title":"1. Tax Rule Lookup","text":"<pre><code>graph TD\n    A[Tax Calculation Request] --&gt; B[Filter Tax Rules]\n    B --&gt; C{Location Match?}\n    C --&gt;|Yes| D{Effective Date?}\n    C --&gt;|No| E[No Rules Found]\n    D --&gt;|Valid| F{Expiry Date?}\n    D --&gt;|Invalid| E\n    F --&gt;|Not Expired| G[Applicable Rules]\n    F --&gt;|Expired| E\n    G --&gt; H[Apply Tax Rules]</code></pre> <p>Filtering Criteria: - Location/jurisdiction match - Effective date \u2264 pay date - Expiry date &gt; pay date (or NULL for no expiry) - Active status = true - Optional tenant filtering</p>"},{"location":"feature_docs/payroll/tax_calculation_flow/#2-tax-rule-application","title":"2. Tax Rule Application","text":"<p>For each applicable tax rule:</p> <ol> <li> <p>Calculate Taxable Amount <pre><code>taxable_amount = gross_pay\n\n# Apply minimum threshold\nif rule.min_taxable_amount and taxable_amount &lt; rule.min_taxable_amount:\n    return 0.00\n\n# Apply maximum cap\nif rule.max_taxable_amount and taxable_amount &gt; rule.max_taxable_amount:\n    taxable_amount = rule.max_taxable_amount\n</code></pre></p> </li> <li> <p>Calculate Tax Amount <pre><code>effective_rate = rule.employee_portion or rule.rate_percent\ncalculated_tax = taxable_amount * (effective_rate / 100)\n</code></pre></p> </li> <li> <p>Create Tax Application Record</p> </li> <li>Tax rule reference</li> <li>Taxable amount used</li> <li>Calculated tax amount</li> <li>Effective rate applied</li> <li>Calculation method used</li> </ol>"},{"location":"feature_docs/payroll/tax_calculation_flow/#3-tax-categorization","title":"3. Tax Categorization","text":"<p>Taxes are categorized by jurisdiction and type:</p> <ul> <li>Federal: Federal income tax, federal unemployment tax</li> <li>State: State income tax, state unemployment tax, state disability insurance</li> <li>Local: City/county taxes, local income tax</li> <li>Payroll Taxes: Social Security, Medicare, additional Medicare tax</li> </ul>"},{"location":"feature_docs/payroll/tax_calculation_flow/#4-response-generation","title":"4. Response Generation","text":"<p>The final response includes: - Gross pay amount - Total tax deductions - Net pay calculation - Detailed tax breakdown by category - Individual tax application details - Calculation timestamp</p>"},{"location":"feature_docs/payroll/tax_calculation_flow/#multi-jurisdiction-support","title":"Multi-Jurisdiction Support","text":""},{"location":"feature_docs/payroll/tax_calculation_flow/#jurisdiction-types","title":"Jurisdiction Types","text":"<ol> <li>Federal Level</li> <li>Federal income tax</li> <li>Social Security (OASDI)</li> <li>Medicare</li> <li> <p>Federal unemployment tax (FUTA)</p> </li> <li> <p>State Level</p> </li> <li>State income tax</li> <li>State unemployment insurance (SUI)</li> <li>State disability insurance (SDI)</li> <li> <p>State-specific taxes</p> </li> <li> <p>Local Level</p> </li> <li>City income tax</li> <li>County taxes</li> <li>Metropolitan district taxes</li> <li>Municipal taxes</li> </ol>"},{"location":"feature_docs/payroll/tax_calculation_flow/#tax-rule-configuration","title":"Tax Rule Configuration","text":"<p>Each tax rule supports:</p> <pre><code>CREATE TABLE payroll_tax_rules (\n    id INTEGER PRIMARY KEY,\n    rule_name VARCHAR(100) NOT NULL,\n    location VARCHAR(100) NOT NULL,           -- Jurisdiction identifier\n    tax_type ENUM('FEDERAL', 'STATE', 'LOCAL', ...) NOT NULL,\n    rate_percent NUMERIC(5,4) NOT NULL,       -- Total tax rate\n    employee_portion NUMERIC(5,4),           -- Employee's share\n    employer_portion NUMERIC(5,4),           -- Employer's share\n    max_taxable_amount NUMERIC(12,2),        -- Annual wage cap\n    min_taxable_amount NUMERIC(12,2),        -- Minimum threshold\n    effective_date DATETIME NOT NULL,         -- When rule becomes active\n    expiry_date DATETIME,                     -- When rule expires (NULL = never)\n    is_active BOOLEAN DEFAULT TRUE\n);\n</code></pre>"},{"location":"feature_docs/payroll/tax_calculation_flow/#effective-date-handling","title":"Effective Date Handling","text":""},{"location":"feature_docs/payroll/tax_calculation_flow/#rule-lifecycle","title":"Rule Lifecycle","text":"<ol> <li>Future Rules: <code>effective_date &gt; current_date</code></li> <li>Not yet applicable</li> <li> <p>Used for advance tax planning</p> </li> <li> <p>Active Rules: <code>effective_date \u2264 current_date AND (expiry_date &gt; current_date OR expiry_date IS NULL)</code></p> </li> <li>Currently applicable for calculations</li> <li> <p>Used for payroll processing</p> </li> <li> <p>Expired Rules: <code>expiry_date \u2264 current_date</code></p> </li> <li>No longer applicable for new calculations</li> <li>Maintained for historical audit purposes</li> </ol>"},{"location":"feature_docs/payroll/tax_calculation_flow/#date-based-filtering","title":"Date-Based Filtering","text":"<pre><code>def _get_applicable_tax_rules(self, location: str, pay_date: date):\n    return self.db.query(TaxRule).filter(\n        TaxRule.location == location,\n        TaxRule.is_active == True,\n        TaxRule.effective_date &lt;= pay_date,\n        (TaxRule.expiry_date.is_(None)) | (TaxRule.expiry_date &gt; pay_date)\n    ).all()\n</code></pre>"},{"location":"feature_docs/payroll/tax_calculation_flow/#api-usage-examples","title":"API Usage Examples","text":""},{"location":"feature_docs/payroll/tax_calculation_flow/#basic-tax-calculation","title":"Basic Tax Calculation","text":"<pre><code>from backend.modules.payroll.services.payroll_tax_service import PayrollTaxService\nfrom backend.modules.payroll.schemas.payroll_tax_schemas import PayrollTaxServiceRequest\n\n# Create service instance\ntax_service = PayrollTaxService(db_session)\n\n# Prepare calculation request\nrequest = PayrollTaxServiceRequest(\n    staff_id=123,\n    payroll_policy_id=456,\n    pay_period_start=date(2025, 7, 1),\n    pay_period_end=date(2025, 7, 15),\n    gross_pay=Decimal('5000.00'),\n    location=\"California\",\n    tenant_id=1\n)\n\n# Calculate taxes\nresponse = tax_service.calculate_and_save_taxes(request)\n\n# Access results\nprint(f\"Gross Pay: ${response.tax_calculation.gross_pay}\")\nprint(f\"Total Taxes: ${response.tax_calculation.total_taxes}\")\nprint(f\"Net Pay: ${response.tax_calculation.net_pay}\")\n</code></pre>"},{"location":"feature_docs/payroll/tax_calculation_flow/#update-existing-payment","title":"Update Existing Payment","text":"<pre><code># Update taxes for existing employee payment\nresponse = tax_service.update_employee_payment_taxes(\n    employee_payment_id=789\n)\n\n# Tax fields automatically updated in database\n# - federal_tax, state_tax, local_tax\n# - social_security_tax, medicare_tax\n# - total_deductions, net_pay\n</code></pre>"},{"location":"feature_docs/payroll/tax_calculation_flow/#validate-tax-setup","title":"Validate Tax Setup","text":"<pre><code>from backend.modules.payroll.schemas.payroll_tax_schemas import TaxRuleValidationRequest\n\n# Validate tax configuration\nvalidation_request = TaxRuleValidationRequest(\n    location=\"California\",\n    pay_date=date(2025, 7, 15),\n    tenant_id=1\n)\n\nvalidation_response = tax_service.validate_tax_setup(validation_request)\n\nif validation_response.missing_jurisdictions:\n    print(f\"Missing jurisdictions: {validation_response.missing_jurisdictions}\")\n\nif validation_response.potential_issues:\n    print(f\"Issues found: {validation_response.potential_issues}\")\n</code></pre>"},{"location":"feature_docs/payroll/tax_calculation_flow/#bulk-recalculation","title":"Bulk Recalculation","text":"<pre><code># Recalculate taxes for all employees in a pay period\nresult = tax_service.bulk_recalculate_taxes(\n    location=\"California\",\n    pay_period_start=date(2025, 7, 1),\n    pay_period_end=date(2025, 7, 15),\n    tenant_id=1\n)\n\nprint(f\"Updated {result['updated_count']} of {result['total_payments']} payments\")\nif result['errors']:\n    print(f\"Errors encountered: {result['error_count']}\")\n</code></pre>"},{"location":"feature_docs/payroll/tax_calculation_flow/#integration-points","title":"Integration Points","text":""},{"location":"feature_docs/payroll/tax_calculation_flow/#payroll-engine-integration","title":"Payroll Engine Integration","text":"<p>The tax service integrates with the payroll processing engine:</p> <pre><code># In payroll processing workflow\nfrom backend.modules.payroll.services.payroll_tax_service import PayrollTaxService\n\ndef process_employee_payroll(employee_payment: EmployeePayment):\n    tax_service = PayrollTaxService(db)\n\n    # Calculate taxes and update payment record\n    tax_response = tax_service.update_employee_payment_taxes(\n        employee_payment.id\n    )\n\n    # Use tax breakdown for payslip generation\n    tax_breakdown = tax_response.tax_calculation.tax_breakdown\n\n    return {\n        'gross_pay': employee_payment.gross_pay,\n        'federal_tax': tax_breakdown.federal_tax,\n        'state_tax': tax_breakdown.state_tax,\n        'net_pay': tax_response.tax_calculation.net_pay\n    }\n</code></pre>"},{"location":"feature_docs/payroll/tax_calculation_flow/#database-schema-integration","title":"Database Schema Integration","text":"<p>Tax calculations are persisted in two ways:</p> <ol> <li>Summary in EmployeePayment</li> <li>Individual tax category totals</li> <li> <p>Integrated with existing payroll fields</p> </li> <li> <p>Detailed in EmployeePaymentTaxApplication</p> </li> <li>Full audit trail per tax rule</li> <li>Calculation methodology tracking</li> <li>Historical tax rule references</li> </ol>"},{"location":"feature_docs/payroll/tax_calculation_flow/#error-handling","title":"Error Handling","text":""},{"location":"feature_docs/payroll/tax_calculation_flow/#common-error-scenarios","title":"Common Error Scenarios","text":"<ol> <li>No Tax Rules Found</li> <li>Returns zero tax calculation</li> <li> <p>Logs warning for missing configuration</p> </li> <li> <p>Invalid Tax Rule Configuration</p> </li> <li>Negative rates or amounts</li> <li>Overlapping effective dates</li> <li> <p>Missing required fields</p> </li> <li> <p>Calculation Errors</p> </li> <li>Overflow in tax calculations</li> <li>Rounding precision issues</li> <li>Database constraint violations</li> </ol>"},{"location":"feature_docs/payroll/tax_calculation_flow/#error-recovery","title":"Error Recovery","text":"<pre><code>try:\n    response = tax_service.calculate_and_save_taxes(request)\nexcept ValueError as e:\n    # Handle configuration errors\n    logger.error(f\"Tax configuration error: {e}\")\n    # Return zero tax response or raise to caller\nexcept Exception as e:\n    # Handle unexpected errors\n    logger.error(f\"Unexpected tax calculation error: {e}\")\n    # Rollback database changes\n    db.rollback()\n    raise\n</code></pre>"},{"location":"feature_docs/payroll/tax_calculation_flow/#performance-considerations","title":"Performance Considerations","text":""},{"location":"feature_docs/payroll/tax_calculation_flow/#query-optimization","title":"Query Optimization","text":"<ul> <li>Indexed fields: <code>location</code>, <code>effective_date</code>, <code>tax_type</code></li> <li>Composite indexes for common filter combinations</li> <li>Efficient date range queries</li> </ul>"},{"location":"feature_docs/payroll/tax_calculation_flow/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Tax rules cached by location and date range</li> <li>Jurisdiction summaries cached for validation</li> <li>Cache invalidation on rule updates</li> </ul>"},{"location":"feature_docs/payroll/tax_calculation_flow/#bulk-operations","title":"Bulk Operations","text":"<ul> <li>Batch processing for multiple employees</li> <li>Transaction management for consistency</li> <li>Progress tracking for long-running operations</li> </ul>"},{"location":"feature_docs/payroll/tax_calculation_flow/#testing-strategy","title":"Testing Strategy","text":""},{"location":"feature_docs/payroll/tax_calculation_flow/#unit-tests","title":"Unit Tests","text":"<ul> <li>Tax calculation accuracy with various scenarios</li> <li>Edge cases (zero pay, maximum wages, etc.)</li> <li>Date filtering logic</li> <li>Error handling paths</li> </ul>"},{"location":"feature_docs/payroll/tax_calculation_flow/#integration-tests","title":"Integration Tests","text":"<ul> <li>End-to-end payroll processing</li> <li>Database persistence validation</li> <li>Multi-jurisdiction scenarios</li> </ul>"},{"location":"feature_docs/payroll/tax_calculation_flow/#performance-tests","title":"Performance Tests","text":"<ul> <li>Bulk calculation performance</li> <li>Query optimization validation</li> <li>Memory usage under load</li> </ul>"},{"location":"feature_docs/payroll/tax_calculation_flow/#compliance-considerations","title":"Compliance Considerations","text":""},{"location":"feature_docs/payroll/tax_calculation_flow/#audit-trail","title":"Audit Trail","text":"<ul> <li>All tax calculations are logged with timestamps</li> <li>Tax rule versions preserved for historical accuracy</li> <li>Calculation methodology documented per application</li> </ul>"},{"location":"feature_docs/payroll/tax_calculation_flow/#data-retention","title":"Data Retention","text":"<ul> <li>Tax applications retained for regulatory periods</li> <li>Historical tax rules maintained indefinitely</li> <li>Audit logs protected from modification</li> </ul>"},{"location":"feature_docs/payroll/tax_calculation_flow/#accuracy-requirements","title":"Accuracy Requirements","text":"<ul> <li>Decimal precision maintained throughout calculations</li> <li>Rounding rules applied consistently</li> <li>Validation against known tax scenarios</li> </ul> <p>This documentation provides a comprehensive overview of the payroll tax calculation system implemented in AuraConnect. For specific implementation details, refer to the source code and unit tests in the respective modules.</p>"},{"location":"feature_docs/pos_integration/","title":"POS Integration Module","text":""},{"location":"feature_docs/pos_integration/#summary","title":"Summary","text":"<p>Connects external POS systems like Toast and Square with AuraConnect\u2019s backend.</p>"},{"location":"feature_docs/pos_integration/#key-features","title":"Key Features","text":"<ul> <li>Webhooks for order/payment sync</li> <li>POS adapter abstraction layer</li> <li>Order reconciliation dashboard</li> </ul>"},{"location":"feature_docs/pos_integration/#developer-notes","title":"Developer Notes","text":"<ul> <li>Adapter logic: <code>modules/pos_integration/adapters/</code></li> <li>Sync service: <code>pos_sync_service.py</code></li> </ul>"},{"location":"feature_docs/pos_integration/architecture/","title":"Pos Integration Module Architecture","text":""},{"location":"feature_docs/pos_integration/architecture/#overview","title":"Overview","text":"<p>Syncs with external POS platforms like Toast, Square for billing, payments, and inventory.</p>"},{"location":"feature_docs/pos_integration/architecture/#system-flow","title":"System Flow","text":"<ul> <li>POS order received via webhook/API</li> <li>Data normalized via adapter</li> <li>Synced with AuraConnect DB</li> <li>Status updated in dashboard</li> <li>Receipts stored</li> </ul>"},{"location":"feature_docs/pos_integration/architecture/#key-components","title":"Key Components","text":"<ul> <li>POS Adapter</li> <li>Webhook Handler</li> <li>POS Sync Service</li> <li>Receipt Manager</li> </ul>"},{"location":"feature_docs/pos_integration/architecture/#developer-notes","title":"Developer Notes","text":"<p>Each component should follow service-layer design with unit test coverage.</p>"},{"location":"feature_docs/reservation/","title":"Reservation Module","text":""},{"location":"feature_docs/reservation/#summary","title":"Summary","text":"<p>Handles real-time booking, smart table assignment, and waitlist management using AI agents.</p>"},{"location":"feature_docs/reservation/#key-features","title":"Key Features","text":"<ul> <li>AI-powered table and slot suggestions</li> <li>Waitlist queue handling</li> <li>Conflict resolution on overlapping bookings</li> </ul>"},{"location":"feature_docs/reservation/#developer-notes","title":"Developer Notes","text":"<ul> <li>API: <code>backend/api/v1/reservations.py</code></li> <li>Agent logic in: <code>ai_agents/reservation_agent.py</code></li> <li>Models: <code>Reservation</code>, <code>Table</code>, <code>TimeSlot</code></li> </ul>"},{"location":"feature_docs/reservation/architecture/","title":"Reservation Module Architecture","text":""},{"location":"feature_docs/reservation/architecture/#overview","title":"Overview","text":"<p>Manages table bookings, waitlists, and smart seat allocation using agent assistance.</p>"},{"location":"feature_docs/reservation/architecture/#system-flow","title":"System Flow","text":"<ul> <li>Customer submits reservation via app</li> <li>System checks availability in DB</li> <li>AI Agent suggests optimal slot/table</li> <li>Reservation confirmed or waitlisted</li> <li>Notification sent to customer &amp; staff</li> </ul>"},{"location":"feature_docs/reservation/architecture/#key-components","title":"Key Components","text":"<ul> <li>Reservation API</li> <li>DB Scheduler</li> <li>AI Reservation Agent</li> <li>Notifier Service</li> </ul>"},{"location":"feature_docs/reservation/architecture/#developer-notes","title":"Developer Notes","text":"<p>Each component should follow service-layer design with unit test coverage.</p>"},{"location":"feature_docs/tax/","title":"Tax Module","text":""},{"location":"feature_docs/tax/#summary","title":"Summary","text":"<p>Manages GST/VAT tax rules per region, calculates item-level tax, and generates audit reports.</p>"},{"location":"feature_docs/tax/#key-features","title":"Key Features","text":"<ul> <li>Dynamic tax rules per location/item</li> <li>AI optimization for billing structures</li> <li>Downloadable monthly tax reports</li> </ul>"},{"location":"feature_docs/tax/#developer-notes","title":"Developer Notes","text":"<ul> <li>Logic: <code>backend/services/tax_service.py</code></li> <li>Agent: <code>ai_agents/tax_agent.py</code></li> <li>Models: <code>TaxRule</code>, <code>Invoice</code>, <code>TaxRecord</code></li> </ul>"},{"location":"feature_docs/tax/architecture/","title":"Tax Module Architecture","text":""},{"location":"feature_docs/tax/architecture/#overview","title":"Overview","text":"<p>Calculates and applies GST/VAT based on region, item, and service type.</p>"},{"location":"feature_docs/tax/architecture/#system-flow","title":"System Flow","text":"<ul> <li>Order placed with taxable items</li> <li>Tax rules applied from config</li> <li>AI Agent optimizes tax efficiency</li> <li>Tax breakdown shown in invoice</li> <li>Monthly reports generated</li> </ul>"},{"location":"feature_docs/tax/architecture/#key-components","title":"Key Components","text":"<ul> <li>Tax Rule Engine</li> <li>Invoice Builder</li> <li>AI Tax Optimizer</li> <li>Report Generator</li> </ul>"},{"location":"feature_docs/tax/architecture/#developer-notes","title":"Developer Notes","text":"<p>Each component should follow service-layer design with unit test coverage.</p>"},{"location":"feature_docs/white_label/","title":"White Labeling Module","text":""},{"location":"feature_docs/white_label/#summary","title":"Summary","text":"<p>Allows branding customization per restaurant including logos, domains, themes, and headers.</p>"},{"location":"feature_docs/white_label/#key-features","title":"Key Features","text":"<ul> <li>Multi-tenant CSS theming</li> <li>Logo and favicon injection</li> <li>Custom email/SMS branding</li> </ul>"},{"location":"feature_docs/white_label/#developer-notes","title":"Developer Notes","text":"<ul> <li>Themes: <code>modules/white_label/themes/</code></li> <li>Loader: <code>branding_service.py</code></li> </ul>"},{"location":"feature_docs/white_label/architecture/","title":"White Label Module Architecture","text":""},{"location":"feature_docs/white_label/architecture/#overview","title":"Overview","text":"<p>Supports branding per restaurant (themes, logos, domains).</p>"},{"location":"feature_docs/white_label/architecture/#system-flow","title":"System Flow","text":"<ul> <li>Tenant config loaded on login</li> <li>Custom theme/assets applied</li> <li>Email/SMS headers customized</li> <li>Analytics scoped to brand</li> </ul>"},{"location":"feature_docs/white_label/architecture/#key-components","title":"Key Components","text":"<ul> <li>Theme Loader</li> <li>Tenant Config Manager</li> <li>Custom Asset Engine</li> <li>Brand Router</li> </ul>"},{"location":"feature_docs/white_label/architecture/#developer-notes","title":"Developer Notes","text":"<p>Each component should follow service-layer design with unit test coverage.</p>"},{"location":"guides/customer-web-app/","title":"Customer Web App Setup Guide","text":""},{"location":"guides/customer-web-app/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Architecture</li> <li>Prerequisites</li> <li>Installation</li> <li>Configuration</li> <li>Features</li> <li>Deployment</li> <li>Mobile Support</li> <li>API Integration</li> <li>Security</li> <li>Analytics</li> <li>Troubleshooting</li> <li>Best Practices</li> </ol>"},{"location":"guides/customer-web-app/#overview","title":"Overview","text":"<p>The AuraConnect Customer Web App provides a modern, responsive interface for customers to: - Browse menus and place orders - Make reservations - Track orders in real-time - Manage loyalty rewards - Provide feedback - Access order history</p>"},{"location":"guides/customer-web-app/#architecture","title":"Architecture","text":"<pre><code>graph TB\n    subgraph \"Customer Devices\"\n        MOBILE[Mobile Browser]\n        DESKTOP[Desktop Browser]\n        PWA[Progressive Web App]\n    end\n\n    subgraph \"Frontend Stack\"\n        REACT[React 18]\n        REDUX[Redux Toolkit]\n        MUI[Material UI]\n        WS[WebSocket Client]\n    end\n\n    subgraph \"Backend Services\"\n        API[API Gateway]\n        ORDER[Order Service]\n        MENU[Menu Service]\n        PAYMENT[Payment Service]\n        NOTIFY[Notification Service]\n    end\n\n    subgraph \"Real-time Features\"\n        PUSHER[WebSocket Server]\n        QUEUE[Message Queue]\n        CACHE[Redis Cache]\n    end\n\n    MOBILE --&gt; REACT\n    DESKTOP --&gt; REACT\n    PWA --&gt; REACT\n\n    REACT --&gt; REDUX\n    REACT --&gt; MUI\n    REACT --&gt; WS\n\n    REDUX --&gt; API\n    WS --&gt; PUSHER\n\n    API --&gt; ORDER\n    API --&gt; MENU\n    API --&gt; PAYMENT\n    API --&gt; NOTIFY\n\n    ORDER --&gt; QUEUE\n    NOTIFY --&gt; PUSHER\n    API --&gt; CACHE</code></pre>"},{"location":"guides/customer-web-app/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18+ and npm/yarn</li> <li>Git for version control</li> <li>Backend services running</li> <li>SSL certificate for production</li> </ul>"},{"location":"guides/customer-web-app/#installation","title":"Installation","text":""},{"location":"guides/customer-web-app/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/AuraTechWave/auraconnectai.git\ncd auraconnectai/frontend/customer-web\n</code></pre>"},{"location":"guides/customer-web-app/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Using npm\nnpm install\n\n# Using yarn\nyarn install\n</code></pre>"},{"location":"guides/customer-web-app/#3-environment-setup","title":"3. Environment Setup","text":"<p>Create a <code>.env.local</code> file:</p> <pre><code># API Configuration\nREACT_APP_API_URL=http://localhost:8000/api/v1\nREACT_APP_WS_URL=ws://localhost:8000/ws\n\n# Restaurant Configuration\nREACT_APP_RESTAURANT_ID=1\nREACT_APP_RESTAURANT_NAME=\"Your Restaurant\"\nREACT_APP_DEFAULT_LOCATION=1\n\n# Features\nREACT_APP_ENABLE_ONLINE_ORDERING=true\nREACT_APP_ENABLE_RESERVATIONS=true\nREACT_APP_ENABLE_LOYALTY=true\nREACT_APP_ENABLE_DELIVERY=true\n\n# Third-party Services\nREACT_APP_GOOGLE_MAPS_KEY=your_google_maps_key\nREACT_APP_STRIPE_PUBLIC_KEY=your_stripe_public_key\nREACT_APP_GA_TRACKING_ID=your_analytics_id\n\n# Push Notifications\nREACT_APP_VAPID_PUBLIC_KEY=your_vapid_public_key\n</code></pre>"},{"location":"guides/customer-web-app/#4-run-development-server","title":"4. Run Development Server","text":"<pre><code># Start development server\nnpm start\n# or\nyarn start\n\n# App will be available at http://localhost:3000\n</code></pre>"},{"location":"guides/customer-web-app/#configuration","title":"Configuration","text":""},{"location":"guides/customer-web-app/#theme-customization","title":"Theme Customization","text":"<pre><code>// src/theme/config.js\nexport const themeConfig = {\n    primary: {\n        main: '#1976d2',\n        light: '#42a5f5',\n        dark: '#1565c0',\n    },\n    secondary: {\n        main: '#dc004e',\n        light: '#e33371',\n        dark: '#9a0036',\n    },\n    typography: {\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        h1: {\n            fontSize: '2.5rem',\n            fontWeight: 600,\n        },\n    },\n    shape: {\n        borderRadius: 8,\n    },\n};\n</code></pre>"},{"location":"guides/customer-web-app/#feature-flags","title":"Feature Flags","text":"<pre><code>// src/config/features.js\nexport const features = {\n    ordering: {\n        enabled: true,\n        minimumOrder: 10.00,\n        deliveryRadius: 5, // miles\n        estimatedTime: 30, // minutes\n    },\n    reservations: {\n        enabled: true,\n        advanceDays: 30,\n        partySize: { min: 1, max: 20 },\n        timeSlots: 15, // minutes\n    },\n    loyalty: {\n        enabled: true,\n        pointsPerDollar: 1,\n        rewardThreshold: 100,\n    },\n    payments: {\n        methods: ['card', 'apple_pay', 'google_pay'],\n        saveCards: true,\n        tipping: {\n            enabled: true,\n            suggestions: [15, 18, 20, 25],\n        },\n    },\n};\n</code></pre>"},{"location":"guides/customer-web-app/#features","title":"Features","text":""},{"location":"guides/customer-web-app/#1-menu-ordering","title":"1. Menu &amp; Ordering","text":"<pre><code>// Menu browsing with filters\nconst MenuPage = () =&gt; {\n    const [filters, setFilters] = useState({\n        category: 'all',\n        dietary: [],\n        priceRange: [0, 100],\n        search: '',\n    });\n\n    return (\n        &lt;MenuContainer&gt;\n            &lt;MenuFilters onChange={setFilters} /&gt;\n            &lt;MenuGrid filters={filters} /&gt;\n            &lt;Cart /&gt;\n        &lt;/MenuContainer&gt;\n    );\n};\n</code></pre>"},{"location":"guides/customer-web-app/#2-real-time-order-tracking","title":"2. Real-time Order Tracking","text":"<pre><code>// WebSocket connection for live updates\nuseEffect(() =&gt; {\n    const ws = new WebSocket(process.env.REACT_APP_WS_URL);\n\n    ws.onmessage = (event) =&gt; {\n        const update = JSON.parse(event.data);\n        if (update.type === 'order_status') {\n            dispatch(updateOrderStatus(update));\n        }\n    };\n\n    return () =&gt; ws.close();\n}, []);\n</code></pre>"},{"location":"guides/customer-web-app/#3-push-notifications","title":"3. Push Notifications","text":"<pre><code>// Service worker registration\nif ('serviceWorker' in navigator) {\n    navigator.serviceWorker\n        .register('/service-worker.js')\n        .then(registration =&gt; {\n            console.log('SW registered:', registration);\n            subscribeToNotifications(registration);\n        });\n}\n\n// Subscribe to push notifications\nasync function subscribeToNotifications(registration) {\n    const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(\n            process.env.REACT_APP_VAPID_PUBLIC_KEY\n        ),\n    });\n\n    // Send subscription to backend\n    await api.post('/notifications/subscribe', subscription);\n}\n</code></pre>"},{"location":"guides/customer-web-app/#4-offline-support","title":"4. Offline Support","text":"<pre><code>// Progressive Web App configuration\n// public/manifest.json\n{\n    \"name\": \"AuraConnect Restaurant\",\n    \"short_name\": \"AuraConnect\",\n    \"start_url\": \"/\",\n    \"display\": \"standalone\",\n    \"theme_color\": \"#1976d2\",\n    \"background_color\": \"#ffffff\",\n    \"icons\": [\n        {\n            \"src\": \"/icon-192.png\",\n            \"sizes\": \"192x192\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"/icon-512.png\",\n            \"sizes\": \"512x512\",\n            \"type\": \"image/png\"\n        }\n    ]\n}\n</code></pre>"},{"location":"guides/customer-web-app/#deployment","title":"Deployment","text":""},{"location":"guides/customer-web-app/#1-build-for-production","title":"1. Build for Production","text":"<pre><code># Create optimized production build\nnpm run build\n# or\nyarn build\n\n# Test production build locally\nnpm run serve\n</code></pre>"},{"location":"guides/customer-web-app/#2-deploy-to-netlify","title":"2. Deploy to Netlify","text":"<pre><code># Install Netlify CLI\nnpm install -g netlify-cli\n\n# Deploy to Netlify\nnetlify deploy --prod --dir=build\n</code></pre>"},{"location":"guides/customer-web-app/#3-deploy-to-vercel","title":"3. Deploy to Vercel","text":"<pre><code># Install Vercel CLI\nnpm install -g vercel\n\n# Deploy\nvercel --prod\n</code></pre>"},{"location":"guides/customer-web-app/#4-docker-deployment","title":"4. Docker Deployment","text":"<pre><code># Dockerfile\nFROM node:18-alpine as builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM nginx:alpine\nCOPY --from=builder /app/build /usr/share/nginx/html\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>"},{"location":"guides/customer-web-app/#5-cdn-configuration","title":"5. CDN Configuration","text":"<pre><code># nginx.conf\nserver {\n    listen 80;\n    server_name customer.auraconnect.com;\n    root /usr/share/nginx/html;\n\n    # Compression\n    gzip on;\n    gzip_types text/plain text/css application/json application/javascript;\n\n    # Cache static assets\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    # SPA routing\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n}\n</code></pre>"},{"location":"guides/customer-web-app/#mobile-support","title":"Mobile Support","text":""},{"location":"guides/customer-web-app/#responsive-design","title":"Responsive Design","text":"<pre><code>/* Mobile-first approach */\n.menu-grid {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 1rem;\n}\n\n@media (min-width: 768px) {\n    .menu-grid {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media (min-width: 1024px) {\n    .menu-grid {\n        grid-template-columns: repeat(3, 1fr);\n    }\n}\n</code></pre>"},{"location":"guides/customer-web-app/#touch-gestures","title":"Touch Gestures","text":"<pre><code>// Swipe to delete cart item\nimport { useSwipeable } from 'react-swipeable';\n\nconst CartItem = ({ item, onDelete }) =&gt; {\n    const handlers = useSwipeable({\n        onSwipedLeft: () =&gt; onDelete(item.id),\n        preventDefaultTouchmoveEvent: true,\n        trackMouse: true,\n    });\n\n    return (\n        &lt;div {...handlers} className=\"cart-item\"&gt;\n            {/* Item content */}\n        &lt;/div&gt;\n    );\n};\n</code></pre>"},{"location":"guides/customer-web-app/#api-integration","title":"API Integration","text":""},{"location":"guides/customer-web-app/#api-client-setup","title":"API Client Setup","text":"<pre><code>// src/services/api.js\nimport axios from 'axios';\nimport { store } from '../store';\n\nconst api = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    timeout: 10000,\n});\n\n// Request interceptor for auth\napi.interceptors.request.use(\n    config =&gt; {\n        const token = store.getState().auth.token;\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    error =&gt; Promise.reject(error)\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n    response =&gt; response,\n    error =&gt; {\n        if (error.response?.status === 401) {\n            store.dispatch(logout());\n        }\n        return Promise.reject(error);\n    }\n);\n\nexport default api;\n</code></pre>"},{"location":"guides/customer-web-app/#state-management","title":"State Management","text":"<pre><code>// src/store/slices/menuSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\n\nexport const fetchMenu = createAsyncThunk(\n    'menu/fetch',\n    async (locationId) =&gt; {\n        const response = await api.get(`/menu/location/${locationId}`);\n        return response.data;\n    }\n);\n\nconst menuSlice = createSlice({\n    name: 'menu',\n    initialState: {\n        items: [],\n        categories: [],\n        loading: false,\n        error: null,\n    },\n    reducers: {\n        // Sync actions\n    },\n    extraReducers: (builder) =&gt; {\n        builder\n            .addCase(fetchMenu.pending, (state) =&gt; {\n                state.loading = true;\n            })\n            .addCase(fetchMenu.fulfilled, (state, action) =&gt; {\n                state.loading = false;\n                state.items = action.payload.items;\n                state.categories = action.payload.categories;\n            })\n            .addCase(fetchMenu.rejected, (state, action) =&gt; {\n                state.loading = false;\n                state.error = action.error.message;\n            });\n    },\n});\n\nexport default menuSlice.reducer;\n</code></pre>"},{"location":"guides/customer-web-app/#security","title":"Security","text":""},{"location":"guides/customer-web-app/#content-security-policy","title":"Content Security Policy","text":"<pre><code>&lt;!-- public/index.html --&gt;\n&lt;meta http-equiv=\"Content-Security-Policy\" \n      content=\"default-src 'self'; \n               script-src 'self' 'unsafe-inline' https://maps.googleapis.com; \n               style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; \n               font-src 'self' https://fonts.gstatic.com; \n               img-src 'self' data: https:; \n               connect-src 'self' wss: https://api.auraconnect.com;\"&gt;\n</code></pre>"},{"location":"guides/customer-web-app/#authentication-flow","title":"Authentication Flow","text":"<pre><code>// OAuth2 with PKCE\nconst login = async () =&gt; {\n    const codeVerifier = generateCodeVerifier();\n    const codeChallenge = await generateCodeChallenge(codeVerifier);\n\n    // Store verifier\n    sessionStorage.setItem('code_verifier', codeVerifier);\n\n    // Redirect to auth\n    window.location.href = `${AUTH_URL}?` + new URLSearchParams({\n        client_id: CLIENT_ID,\n        redirect_uri: REDIRECT_URI,\n        response_type: 'code',\n        scope: 'openid profile email',\n        code_challenge: codeChallenge,\n        code_challenge_method: 'S256',\n    });\n};\n</code></pre>"},{"location":"guides/customer-web-app/#analytics","title":"Analytics","text":""},{"location":"guides/customer-web-app/#google-analytics-4","title":"Google Analytics 4","text":"<pre><code>// src/utils/analytics.js\nimport ReactGA from 'react-ga4';\n\nexport const initGA = () =&gt; {\n    ReactGA.initialize(process.env.REACT_APP_GA_TRACKING_ID);\n};\n\nexport const logPageView = (path) =&gt; {\n    ReactGA.send({ hitType: 'pageview', page: path });\n};\n\nexport const logEvent = (category, action, label, value) =&gt; {\n    ReactGA.event({\n        category,\n        action,\n        label,\n        value,\n    });\n};\n\n// Track order completion\nexport const trackOrderComplete = (order) =&gt; {\n    ReactGA.event('purchase', {\n        transaction_id: order.id,\n        value: order.total,\n        currency: 'USD',\n        items: order.items.map(item =&gt; ({\n            item_id: item.id,\n            item_name: item.name,\n            price: item.price,\n            quantity: item.quantity,\n        })),\n    });\n};\n</code></pre>"},{"location":"guides/customer-web-app/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/customer-web-app/#common-issues","title":"Common Issues","text":"<ol> <li> <p>API Connection Failed <pre><code>// Check CORS configuration\n// Verify API URL in .env\n// Check network tab for errors\n</code></pre></p> </li> <li> <p>WebSocket Not Connecting <pre><code>// Ensure WSS for production\n// Check firewall rules\n// Verify authentication\n</code></pre></p> </li> <li> <p>Push Notifications Not Working <pre><code>// Verify HTTPS\n// Check service worker registration\n// Validate VAPID keys\n</code></pre></p> </li> <li> <p>Performance Issues <pre><code>// Implement lazy loading\n// Use React.memo for components\n// Optimize images with next-gen formats\n</code></pre></p> </li> </ol>"},{"location":"guides/customer-web-app/#best-practices","title":"Best Practices","text":""},{"location":"guides/customer-web-app/#1-performance-optimization","title":"1. Performance Optimization","text":"<pre><code>// Lazy load routes\nconst Menu = lazy(() =&gt; import('./pages/Menu'));\nconst Orders = lazy(() =&gt; import('./pages/Orders'));\n\n// Image optimization\n&lt;img \n    srcSet=\"/images/dish-320w.jpg 320w,\n            /images/dish-640w.jpg 640w,\n            /images/dish-1280w.jpg 1280w\"\n    sizes=\"(max-width: 320px) 280px,\n           (max-width: 640px) 600px,\n           1200px\"\n    src=\"/images/dish-640w.jpg\"\n    alt=\"Delicious dish\"\n    loading=\"lazy\"\n/&gt;\n</code></pre>"},{"location":"guides/customer-web-app/#2-accessibility","title":"2. Accessibility","text":"<pre><code>// ARIA labels and keyboard navigation\n&lt;button\n    aria-label=\"Add to cart\"\n    onClick={handleAddToCart}\n    onKeyDown={(e) =&gt; {\n        if (e.key === 'Enter' || e.key === ' ') {\n            handleAddToCart();\n        }\n    }}\n&gt;\n    &lt;AddIcon /&gt;\n&lt;/button&gt;\n</code></pre>"},{"location":"guides/customer-web-app/#3-error-boundaries","title":"3. Error Boundaries","text":"<pre><code>class ErrorBoundary extends Component {\n    state = { hasError: false };\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        logError(error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return &lt;ErrorFallback /&gt;;\n        }\n\n        return this.props.children;\n    }\n}\n</code></pre>"},{"location":"guides/customer-web-app/#support","title":"Support","text":"<ul> <li>Documentation: Customer App Guide</li> <li>Frontend Team: frontend-team@auraconnect.com</li> <li>Slack: #customer-web-app</li> </ul> <p>Last Updated: January 2025</p>"},{"location":"guides/developer-personas/","title":"Developer Personas &amp; Use Cases","text":"<p>This guide helps different types of developers quickly find the most relevant documentation for their needs.</p>"},{"location":"guides/developer-personas/#frontend-developer","title":"\ud83d\ude80 Frontend Developer","text":"<p>Goal: Build user interfaces that connect to AuraConnect APIs</p>"},{"location":"guides/developer-personas/#quick-links","title":"Quick Links","text":"<ul> <li>API Reference - REST endpoints documentation</li> <li>Authentication Guide - JWT token handling</li> <li>JavaScript SDK - Pre-built client library</li> <li>WebSocket Events - Real-time updates</li> </ul>"},{"location":"guides/developer-personas/#common-tasks","title":"Common Tasks","text":"<ol> <li> <p>Set up authentication <pre><code>const client = new AuraConnectClient({\n  apiKey: 'your-api-key',\n  baseUrl: 'https://api.auraconnect.com'\n});\n</code></pre></p> </li> <li> <p>Create an order <pre><code>const order = await client.orders.create({\n  items: [...],\n  customerId: 123\n});\n</code></pre></p> </li> <li> <p>Subscribe to real-time updates <pre><code>client.orders.subscribe(orderId, (event) =&gt; {\n  console.log('Order status:', event.status);\n});\n</code></pre></p> </li> </ol>"},{"location":"guides/developer-personas/#backend-developer","title":"\ud83d\udd27 Backend Developer","text":"<p>Goal: Extend AuraConnect functionality or integrate with existing systems</p>"},{"location":"guides/developer-personas/#quick-links_1","title":"Quick Links","text":"<ul> <li>Architecture Overview - System design</li> <li>Module Development - Creating new modules</li> <li>Database Schema - Data models</li> <li>Event System - Inter-module communication</li> </ul>"},{"location":"guides/developer-personas/#common-tasks_1","title":"Common Tasks","text":"<ol> <li> <p>Create a custom module <pre><code>from auraconnect.core import BaseModule\n\nclass CustomModule(BaseModule):\n    def __init__(self):\n        super().__init__(\"custom_module\")\n</code></pre></p> </li> <li> <p>Listen to system events <pre><code>@event_handler(\"order.created\")\nasync def on_order_created(order_data):\n    # Custom logic here\n    pass\n</code></pre></p> </li> </ol>"},{"location":"guides/developer-personas/#restaurant-ownermanager","title":"\ud83c\udfea Restaurant Owner/Manager","text":"<p>Goal: Deploy and configure AuraConnect for your restaurant</p>"},{"location":"guides/developer-personas/#quick-links_2","title":"Quick Links","text":"<ul> <li>Getting Started - Initial setup</li> <li>Docker Deployment - Quick deployment</li> <li>Configuration Guide - System settings</li> <li>User Guides - Day-to-day operations</li> </ul>"},{"location":"guides/developer-personas/#common-tasks_2","title":"Common Tasks","text":"<ol> <li> <p>Deploy with Docker <pre><code>docker-compose up -d\n</code></pre></p> </li> <li> <p>Configure your restaurant</p> </li> <li>Set up locations</li> <li>Import menu items</li> <li>Add staff members</li> <li>Configure tax rates</li> </ol>"},{"location":"guides/developer-personas/#integration-developer","title":"\ud83d\udd0c Integration Developer","text":"<p>Goal: Connect AuraConnect with third-party systems</p>"},{"location":"guides/developer-personas/#quick-links_3","title":"Quick Links","text":"<ul> <li>POS Integration - Square, Clover, Toast</li> <li>Webhooks - Event notifications</li> <li>API Authentication - Secure access</li> <li>Data Import/Export - Bulk operations</li> </ul>"},{"location":"guides/developer-personas/#common-tasks_3","title":"Common Tasks","text":"<ol> <li> <p>Set up webhook listener <pre><code>@app.post(\"/webhook\")\nasync def handle_webhook(request: Request):\n    event = await request.json()\n    if event[\"type\"] == \"order.created\":\n        # Process new order\n        pass\n</code></pre></p> </li> <li> <p>Sync with POS system <pre><code>from auraconnect.integrations import POSAdapter\n\nadapter = POSAdapter(\"square\", api_key=\"...\")\nawait adapter.sync_menu_items()\n</code></pre></p> </li> </ol>"},{"location":"guides/developer-personas/#devops-engineer","title":"\ud83d\udd10 DevOps Engineer","text":"<p>Goal: Deploy, monitor, and scale AuraConnect infrastructure</p>"},{"location":"guides/developer-personas/#quick-links_4","title":"Quick Links","text":"<ul> <li>Deployment Guide - Production setup</li> <li>Kubernetes Deployment - Container orchestration</li> <li>Monitoring Setup - Metrics and logging</li> <li>Scaling Guide - Performance optimization</li> </ul>"},{"location":"guides/developer-personas/#common-tasks_4","title":"Common Tasks","text":"<ol> <li> <p>Deploy to Kubernetes <pre><code>kubectl apply -f k8s/\n</code></pre></p> </li> <li> <p>Set up monitoring <pre><code># prometheus values\nserviceMonitor:\n  enabled: true\n  interval: 30s\n</code></pre></p> </li> <li> <p>Configure auto-scaling <pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nspec:\n  minReplicas: 3\n  maxReplicas: 10\n</code></pre></p> </li> </ol>"},{"location":"guides/developer-personas/#mobile-developer","title":"\ud83d\udcf1 Mobile Developer","text":"<p>Goal: Build mobile apps that integrate with AuraConnect</p>"},{"location":"guides/developer-personas/#quick-links_5","title":"Quick Links","text":"<ul> <li>API Reference - REST endpoints</li> <li>Authentication - Mobile auth flow</li> <li>Push Notifications - Mobile notifications</li> <li>Offline Sync - Handle connectivity issues</li> </ul>"},{"location":"guides/developer-personas/#common-tasks_5","title":"Common Tasks","text":"<ol> <li> <p>Implement mobile authentication <pre><code>let auth = AuraConnectAuth(\n  clientId: \"mobile-app\",\n  redirectUri: \"auraconnect://callback\"\n)\n</code></pre></p> </li> <li> <p>Handle offline orders <pre><code>val order = Order(items = listOf(...))\norderQueue.add(order)\nsyncManager.syncWhenOnline()\n</code></pre></p> </li> </ol>"},{"location":"guides/developer-personas/#qa-engineer","title":"\ud83e\uddea QA Engineer","text":"<p>Goal: Test AuraConnect implementations</p>"},{"location":"guides/developer-personas/#quick-links_6","title":"Quick Links","text":"<ul> <li>API Testing Guide - Test strategies</li> <li>Test Data Setup - Sample data</li> <li>Error Reference - Error codes</li> <li>Performance Testing - Load testing</li> </ul>"},{"location":"guides/developer-personas/#common-tasks_6","title":"Common Tasks","text":"<ol> <li> <p>Set up test environment <pre><code>docker-compose -f docker-compose.test.yml up\n</code></pre></p> </li> <li> <p>Run API tests <pre><code>pytest tests/api/ -v\n</code></pre></p> </li> <li> <p>Load testing <pre><code>locust -f tests/load/orders.py --host=http://localhost:8000\n</code></pre></p> </li> </ol>"},{"location":"guides/developer-personas/#next-steps","title":"Next Steps","text":"<p>Based on your role:</p> <ol> <li>Start with Quick Start: Getting Started Guide</li> <li>Explore your area: Use the quick links above</li> <li>Join the community: Discord</li> <li>Get help: Support</li> </ol> <p>Can't find what you're looking for? Check our FAQ or contact support.</p>"},{"location":"guides/getting-started/","title":"Getting Started with AuraConnect","text":"<p>Version: 1.0.0 | Last Updated: January 2025</p> <p>Welcome to AuraConnect! This guide will help you get up and running with the platform quickly. Whether you're setting up a development environment or deploying to production, we'll walk you through each step.</p>"},{"location":"guides/getting-started/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Quick Start with Docker</li> <li>Local Development Setup</li> <li>Understanding the Architecture</li> <li>First Steps</li> <li>Common Tasks</li> <li>Troubleshooting</li> <li>Next Steps</li> </ol>"},{"location":"guides/getting-started/#prerequisites","title":"Prerequisites","text":""},{"location":"guides/getting-started/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: Linux, macOS, or Windows with WSL2</li> <li>Memory: Minimum 8GB RAM (16GB recommended)</li> <li>Storage: At least 10GB free space</li> <li>CPU: 4+ cores recommended</li> </ul>"},{"location":"guides/getting-started/#software-requirements","title":"Software Requirements","text":"<ul> <li>Docker: Version 20.10+</li> <li>Docker Compose: Version 2.0+</li> <li>Python: Version 3.11+</li> <li>Node.js: Version 18+ (for frontend)</li> <li>PostgreSQL: Version 14+ (if running locally)</li> <li>Redis: Version 6+ (if running locally)</li> <li>Git: For version control</li> </ul>"},{"location":"guides/getting-started/#quick-start-with-docker","title":"Quick Start with Docker","text":"<p>The fastest way to get started is using Docker Compose, which sets up the entire stack automatically.</p>"},{"location":"guides/getting-started/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/AuraTechWave/auraconnectai.git\ncd auraconnectai\n</code></pre>"},{"location":"guides/getting-started/#2-configure-environment","title":"2. Configure Environment","text":"<p>Create the following <code>.env</code> files:</p> <p>Root <code>.env.example</code>: <pre><code># Environment\nENVIRONMENT=development\nDEBUG=True\n\n# Docker Compose Settings\nCOMPOSE_PROJECT_NAME=auraconnect\n</code></pre></p> <p>Backend <code>.env.example</code>: <pre><code># Core Settings\nENVIRONMENT=development\nDEBUG=True\nPROJECT_NAME=AuraConnect\nVERSION=1.0.0\n\n# Security\nSECRET_KEY=your-secret-key-here-change-in-production\nJWT_SECRET_KEY=your-jwt-secret-key-change-in-production\nJWT_ALGORITHM=HS256\nJWT_ACCESS_TOKEN_EXPIRE_MINUTES=30\nJWT_REFRESH_TOKEN_EXPIRE_DAYS=7\n\n# Database\nDATABASE_URL=postgresql://postgres:postgres@localhost:5432/auraconnect\nDATABASE_POOL_SIZE=20\nDATABASE_MAX_OVERFLOW=40\n\n# Redis\nREDIS_URL=redis://localhost:6379/0\nREDIS_CACHE_TTL=3600\n\n# CORS\nCORS_ORIGINS=http://localhost:3000,http://localhost:3001\n\n# External Services (Optional)\nSTRIPE_API_KEY=sk_test_your_stripe_key\nSTRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret\nTWILIO_ACCOUNT_SID=your_twilio_sid\nTWILIO_AUTH_TOKEN=your_twilio_token\nSENDGRID_API_KEY=your_sendgrid_key\nAWS_ACCESS_KEY_ID=your_aws_key\nAWS_SECRET_ACCESS_KEY=your_aws_secret\nAWS_REGION=us-east-1\n\n# Feature Flags\nENABLE_AI_RECOMMENDATIONS=False\nENABLE_ANALYTICS=True\nENABLE_NOTIFICATIONS=True\n\n# Rate Limiting\nRATE_LIMIT_ENABLED=True\nRATE_LIMIT_PER_MINUTE=60\n</code></pre></p> <p>Frontend <code>.env.example</code>: <pre><code># API Configuration\nREACT_APP_API_URL=http://localhost:8000\nREACT_APP_API_VERSION=v1\n\n# Features\nREACT_APP_ENABLE_ANALYTICS=true\nREACT_APP_ENABLE_NOTIFICATIONS=true\n\n# Third Party Keys (public)\nREACT_APP_GOOGLE_MAPS_API_KEY=your_google_maps_key\nREACT_APP_STRIPE_PUBLISHABLE_KEY=pk_test_your_publishable_key\n</code></pre></p> <pre><code># Copy and configure environment files\ncp .env.example .env\ncp backend/.env.example backend/.env\ncp frontend/.env.example frontend/.env\n\n# Edit the files with your actual values\n# IMPORTANT: Never commit .env files to version control!\n</code></pre>"},{"location":"guides/getting-started/#3-start-all-services","title":"3. Start All Services","text":"<pre><code># Build and start all services\ndocker-compose up -d\n\n# Wait for services to be healthy\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f\n</code></pre>"},{"location":"guides/getting-started/#4-initialize-the-database","title":"4. Initialize the Database","text":"<pre><code># Run database migrations\ndocker-compose exec backend alembic upgrade head\n\n# Load demo data (optional)\ndocker-compose exec backend python scripts/seed_demo_data.py\n</code></pre>"},{"location":"guides/getting-started/#5-access-the-application","title":"5. Access the Application","text":"<ul> <li>Frontend: http://localhost:3000</li> <li>API Documentation: http://localhost:8000/docs</li> <li>Admin Portal: http://localhost:3000/admin</li> <li>PgAdmin: http://localhost:5050 (if enabled)</li> <li>Redis Commander: http://localhost:8081 (if enabled)</li> </ul>"},{"location":"guides/getting-started/#default-credentials","title":"Default Credentials","text":"<pre><code>Admin User:\n- Email: admin@auraconnect.com\n- Password: admin123\n\nDemo Restaurant:\n- Email: demo@restaurant.com\n- Password: demo123\n</code></pre>"},{"location":"guides/getting-started/#local-development-setup","title":"Local Development Setup","text":"<p>For active development, you may prefer running services locally.</p>"},{"location":"guides/getting-started/#1-backend-setup","title":"1. Backend Setup","text":"<pre><code>cd backend\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\npip install -r requirements-dev.txt\n\n# Setup pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"guides/getting-started/#2-database-setup","title":"2. Database Setup","text":"<pre><code># Start PostgreSQL and Redis\ndocker-compose up -d postgres redis\n\n# Or install locally:\n# PostgreSQL: https://www.postgresql.org/download/\n# Redis: https://redis.io/download\n\n# Create database\ncreatedb auraconnect\n\n# Run migrations\nalembic upgrade head\n\n# Seed data (optional)\npython scripts/seed_demo_data.py\n</code></pre>"},{"location":"guides/getting-started/#3-start-backend-services","title":"3. Start Backend Services","text":"<pre><code># Start main API server\nuvicorn main:app --reload --host 0.0.0.0 --port 8000\n\n# In separate terminals, start other services:\n# Orders service\ncd modules/orders &amp;&amp; uvicorn main:app --reload --port 8002\n\n# Menu service\ncd modules/menu &amp;&amp; uvicorn main:app --reload --port 8001\n\n# Start Celery worker (for background tasks)\ncelery -A tasks worker --loglevel=info\n\n# Start Celery beat (for scheduled tasks)\ncelery -A tasks beat --loglevel=info\n</code></pre>"},{"location":"guides/getting-started/#4-frontend-setup","title":"4. Frontend Setup","text":"<pre><code>cd frontend\n\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# The app will be available at http://localhost:3000\n</code></pre>"},{"location":"guides/getting-started/#understanding-the-architecture","title":"Understanding the Architecture","text":"<p>AuraConnect uses a microservices architecture:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Frontend (React)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   API Gateway (Nginx) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Backend Services    \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502 \u2502 Auth   \u2502 \u2502 Orders \u2502  \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502 \u2502 Menu   \u2502 \u2502 Staff  \u2502  \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Data &amp; Infrastructure \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502PostgreSQL\u2502 \u2502 Redis \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"guides/getting-started/#key-services","title":"Key Services","text":"<ul> <li>Auth Service: Handles authentication and authorization</li> <li>Orders Service: Manages order processing</li> <li>Menu Service: Handles menu items and pricing</li> <li>Staff Service: Employee management and scheduling</li> <li>Payroll Service: Payroll processing and tax calculations</li> </ul>"},{"location":"guides/getting-started/#first-steps","title":"First Steps","text":""},{"location":"guides/getting-started/#1-create-your-first-restaurant","title":"1. Create Your First Restaurant","text":"<pre><code># Using the API\nimport requests\n\nheaders = {\"Authorization\": \"Bearer &lt;admin_token&gt;\"}\n\nrestaurant_data = {\n    \"name\": \"My Restaurant\",\n    \"timezone\": \"America/New_York\",\n    \"currency\": \"USD\",\n    \"locations\": [\n        {\n            \"name\": \"Main Street\",\n            \"address\": \"123 Main St\",\n            \"city\": \"New York\",\n            \"state\": \"NY\",\n            \"zip_code\": \"10001\",\n            \"phone\": \"(555) 123-4567\"\n        }\n    ]\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/api/v1/restaurants\",\n    json=restaurant_data,\n    headers=headers\n)\n</code></pre>"},{"location":"guides/getting-started/#2-set-up-menu-categories","title":"2. Set Up Menu Categories","text":"<pre><code>categories = [\n    {\"name\": \"Appetizers\", \"display_order\": 1},\n    {\"name\": \"Main Courses\", \"display_order\": 2},\n    {\"name\": \"Desserts\", \"display_order\": 3},\n    {\"name\": \"Beverages\", \"display_order\": 4}\n]\n\nfor category in categories:\n    response = requests.post(\n        \"http://localhost:8001/api/v1/menu/categories\",\n        json=category,\n        headers=headers\n    )\n</code></pre>"},{"location":"guides/getting-started/#3-add-your-first-employee","title":"3. Add Your First Employee","text":"<pre><code>employee_data = {\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"email\": \"john.doe@myrestaurant.com\",\n    \"role\": \"manager\",\n    \"location_ids\": [1],\n    \"hourly_rate\": \"25.00\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8005/api/v1/staff/employees\",\n    json=employee_data,\n    headers=headers\n)\n</code></pre>"},{"location":"guides/getting-started/#common-tasks","title":"Common Tasks","text":""},{"location":"guides/getting-started/#running-tests","title":"Running Tests","text":"<pre><code># Backend tests\ncd backend\npytest tests/ -v\n\n# With coverage\npytest tests/ --cov=modules --cov-report=html\n\n# Frontend tests\ncd frontend\nnpm test\nnpm run test:coverage\n</code></pre>"},{"location":"guides/getting-started/#database-operations","title":"Database Operations","text":"<pre><code># Create a new migration\nalembic revision --autogenerate -m \"Add new table\"\n\n# Apply migrations\nalembic upgrade head\n\n# Rollback one migration\nalembic downgrade -1\n\n# Database backup\npg_dump auraconnect &gt; backup.sql\n\n# Restore database\npsql auraconnect &lt; backup.sql\n</code></pre>"},{"location":"guides/getting-started/#monitoring-logs","title":"Monitoring Logs","text":"<pre><code># All services\ndocker-compose logs -f\n\n# Specific service\ndocker-compose logs -f backend\n\n# With timestamps\ndocker-compose logs -f --timestamps\n\n# Last 100 lines\ndocker-compose logs --tail=100\n</code></pre>"},{"location":"guides/getting-started/#clearing-cache","title":"Clearing Cache","text":"<pre><code># Clear Redis cache\ndocker-compose exec redis redis-cli FLUSHALL\n\n# Or using Python\npython -c \"import redis; redis.Redis().flushall()\"\n</code></pre>"},{"location":"guides/getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/getting-started/#common-issues","title":"Common Issues","text":""},{"location":"guides/getting-started/#1-port-already-in-use","title":"1. Port Already in Use","text":"<pre><code># Find process using port\nlsof -i :8000  # macOS/Linux\nnetstat -ano | findstr :8000  # Windows\n\n# Kill process\nkill -9 &lt;PID&gt;  # macOS/Linux\ntaskkill /PID &lt;PID&gt; /F  # Windows\n</code></pre>"},{"location":"guides/getting-started/#2-database-connection-error","title":"2. Database Connection Error","text":"<pre><code># Check PostgreSQL is running\ndocker-compose ps postgres\n\n# Check connection\npsql -h localhost -U postgres -d auraconnect\n\n# Reset database\ndocker-compose down -v\ndocker-compose up -d postgres\nalembic upgrade head\n</code></pre>"},{"location":"guides/getting-started/#3-redis-connection-error","title":"3. Redis Connection Error","text":"<pre><code># Check Redis is running\ndocker-compose ps redis\n\n# Test connection\nredis-cli ping\n# Should return: PONG\n</code></pre>"},{"location":"guides/getting-started/#4-frontend-build-issues","title":"4. Frontend Build Issues","text":"<pre><code># Clear cache and reinstall\nrm -rf node_modules package-lock.json\nnpm cache clean --force\nnpm install\n</code></pre>"},{"location":"guides/getting-started/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug logging\nexport DEBUG=True\nexport LOG_LEVEL=DEBUG\n\n# Run with verbose output\nuvicorn main:app --reload --log-level debug\n</code></pre>"},{"location":"guides/getting-started/#configuration-options","title":"Configuration Options","text":""},{"location":"guides/getting-started/#environment-variables","title":"Environment Variables","text":"<pre><code># Core Settings\nENVIRONMENT=development\nDEBUG=True\nSECRET_KEY=your-secret-key\n\n# Database\nDATABASE_URL=postgresql://user:password@localhost:5432/auraconnect\nDATABASE_POOL_SIZE=20\n\n# Redis\nREDIS_URL=redis://localhost:6379/0\n\n# JWT Settings\nJWT_SECRET_KEY=your-jwt-secret\nJWT_ALGORITHM=HS256\nJWT_EXPIRATION_MINUTES=30\n\n# External Services\nSTRIPE_API_KEY=sk_test_...\nTWILIO_ACCOUNT_SID=AC...\nSENDGRID_API_KEY=SG...\n\n# Feature Flags\nENABLE_ANALYTICS=True\nENABLE_AI_RECOMMENDATIONS=False\n</code></pre>"},{"location":"guides/getting-started/#service-ports","title":"Service Ports","text":"Service Default Port Environment Variable Main API 8000 API_PORT Menu Service 8001 MENU_SERVICE_PORT Orders Service 8002 ORDERS_SERVICE_PORT Frontend 3000 FRONTEND_PORT PostgreSQL 5432 POSTGRES_PORT Redis 6379 REDIS_PORT"},{"location":"guides/getting-started/#development-tips","title":"Development Tips","text":""},{"location":"guides/getting-started/#1-use-the-api-documentation","title":"1. Use the API Documentation","text":"<p>The interactive API docs at http://localhost:8000/docs are your best friend. You can: - Explore all endpoints - Try API calls directly - View request/response schemas - Download OpenAPI spec</p>"},{"location":"guides/getting-started/#2-enable-hot-reload","title":"2. Enable Hot Reload","text":"<p>For faster development: <pre><code># Backend\nuvicorn main:app --reload\n\n# Frontend\nnpm run dev\n</code></pre></p>"},{"location":"guides/getting-started/#3-use-docker-volumes","title":"3. Use Docker Volumes","text":"<p>For persistent development data: <pre><code># docker-compose.override.yml\nservices:\n  postgres:\n    volumes:\n      - ./data/postgres:/var/lib/postgresql/data\n  redis:\n    volumes:\n      - ./data/redis:/data\n</code></pre></p>"},{"location":"guides/getting-started/#4-vs-code-extensions","title":"4. VS Code Extensions","text":"<p>Recommended extensions: - Python - Pylance - ESLint - Prettier - Docker - PostgreSQL - Thunder Client (API testing)</p>"},{"location":"guides/getting-started/#next-steps","title":"Next Steps","text":"<ol> <li>Explore the Modules</li> <li>Orders Module</li> <li>Menu Module</li> <li> <p>Staff Module</p> </li> <li> <p>Learn the Architecture</p> </li> <li>Architecture Overview</li> <li>API Reference</li> <li> <p>Database Schema</p> </li> <li> <p>Set Up Your Restaurant</p> </li> <li>Configure locations</li> <li>Import menu items</li> <li>Add staff members</li> <li> <p>Set up payment processing</p> </li> <li> <p>Deploy to Production</p> </li> <li>Deployment Guide</li> <li>Security Checklist</li> <li>Performance Tuning</li> </ol>"},{"location":"guides/getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: https://docs.auraconnect.com</li> <li>API Reference: http://localhost:8000/docs</li> <li>GitHub Issues: https://github.com/AuraTechWave/auraconnectai/issues</li> <li>Discord Community: https://discord.gg/auraconnect</li> <li>Email Support: support@auratechwave.com</li> </ul> <p>Happy coding! Welcome to the AuraConnect community! \ud83d\ude80</p>"},{"location":"guides/features/menu-versioning-architecture/","title":"Menu Versioning &amp; Audit Trail Architecture","text":""},{"location":"guides/features/menu-versioning-architecture/#overview","title":"Overview","text":"<p>The Menu Versioning system provides comprehensive version control and audit trail capabilities for restaurant menu management. This system ensures compliance, enables rollback capabilities, and provides detailed tracking of all menu changes.</p>"},{"location":"guides/features/menu-versioning-architecture/#architecture-components","title":"Architecture Components","text":""},{"location":"guides/features/menu-versioning-architecture/#1-database-layer","title":"1. Database Layer","text":""},{"location":"guides/features/menu-versioning-architecture/#core-models","title":"Core Models","text":"<pre><code># Primary versioning model\nMenuVersion\n\u251c\u2500\u2500 version_number: str          # Auto-generated version identifier\n\u251c\u2500\u2500 version_name: str           # Human-readable name\n\u251c\u2500\u2500 description: str            # Version description\n\u251c\u2500\u2500 version_type: VersionType   # manual, scheduled, rollback, etc.\n\u251c\u2500\u2500 is_active: bool            # Only one version can be active\n\u251c\u2500\u2500 is_published: bool         # Published state\n\u251c\u2500\u2500 parent_version_id: int     # Reference to parent version\n\u2514\u2500\u2500 metadata: dict             # Counts and change summaries\n\n# Snapshot models for each entity type\nMenuCategoryVersion, MenuItemVersion, ModifierGroupVersion, ModifierVersion\n\u251c\u2500\u2500 menu_version_id: int       # Reference to MenuVersion\n\u251c\u2500\u2500 original_entity_id: int    # Reference to original entity\n\u251c\u2500\u2500 entity_data: ...          # Snapshot of entity data at version time\n\u251c\u2500\u2500 change_type: ChangeType   # create, update, delete, etc.\n\u251c\u2500\u2500 change_summary: str       # Human-readable change description\n\u2514\u2500\u2500 changed_fields: list      # List of fields that changed\n\n# Comprehensive audit logging\nMenuAuditLog\n\u251c\u2500\u2500 menu_version_id: int      # Optional version reference\n\u251c\u2500\u2500 action: str              # Action performed\n\u251c\u2500\u2500 entity_type: str         # Type of entity changed\n\u251c\u2500\u2500 change_type: ChangeType  # Type of change\n\u251c\u2500\u2500 old_values: dict         # Previous values\n\u251c\u2500\u2500 new_values: dict         # New values\n\u251c\u2500\u2500 user_context: dict       # User, IP, session info\n\u251c\u2500\u2500 batch_id: uuid           # Group related changes\n\u2514\u2500\u2500 metadata: dict           # Additional context\n</code></pre>"},{"location":"guides/features/menu-versioning-architecture/#key-design-principles","title":"Key Design Principles","text":"<ol> <li>Immutable Snapshots: Each version contains complete snapshots of menu state</li> <li>Hierarchical Versioning: Versions can reference parent versions for rollback chains</li> <li>Granular Audit Trail: Every change is logged with full context</li> <li>Batch Operations: Related changes are grouped with batch IDs</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#2-service-layer","title":"2. Service Layer","text":""},{"location":"guides/features/menu-versioning-architecture/#menuversioningservice","title":"MenuVersioningService","text":"<p>The core business logic service providing:</p> <pre><code>class MenuVersioningService:\n    def create_version(request: CreateVersionRequest) -&gt; MenuVersion\n    def publish_version(version_id: int, request: PublishVersionRequest) -&gt; MenuVersion\n    def rollback_to_version(request: RollbackVersionRequest) -&gt; MenuVersion\n    def compare_versions(request: VersionComparisonRequest) -&gt; MenuVersionComparison\n    def get_versions(page: int, size: int, filters: dict) -&gt; Tuple[List[MenuVersion], int]\n    def get_audit_logs(filters: dict) -&gt; Tuple[List[MenuAuditLog], int]\n</code></pre>"},{"location":"guides/features/menu-versioning-architecture/#key-features","title":"Key Features","text":"<ul> <li>Smart Snapshotting: Only captures active/relevant entities based on configuration</li> <li>Atomic Operations: All version operations are wrapped in database transactions</li> <li>Audit Context: Automatic audit trail generation for all operations</li> <li>Caching: Version comparisons are cached for performance</li> <li>Bulk Operations: Efficient handling of large-scale changes</li> </ul>"},{"location":"guides/features/menu-versioning-architecture/#3-automation-layer","title":"3. Automation Layer","text":""},{"location":"guides/features/menu-versioning-architecture/#menuversioningtriggers","title":"MenuVersioningTriggers","text":"<p>Automated versioning system that monitors menu changes:</p> <pre><code>class MenuVersioningTriggers:\n    # Event listeners for SQLAlchemy models\n    def setup_event_listeners()\n\n    # Change detection and buffering\n    def add_change_to_buffer(change_data: dict)\n    def should_create_auto_version(change_type: str, entity_type: str) -&gt; bool\n\n    # Automatic version creation\n    def create_auto_version(db: Session, trigger_reason: str) -&gt; Optional[int]\n</code></pre>"},{"location":"guides/features/menu-versioning-architecture/#trigger-rules","title":"Trigger Rules","text":"<ol> <li>Critical Changes: Price changes, availability changes always trigger versioning</li> <li>Threshold-Based: Auto-version when change buffer reaches threshold (default: 10)</li> <li>Bulk Operations: Significant bulk operations (&gt;5 items) trigger versioning</li> <li>Time-Based: Configurable time-based auto-versioning (future enhancement)</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#4-api-layer","title":"4. API Layer","text":""},{"location":"guides/features/menu-versioning-architecture/#restful-endpoints","title":"RESTful Endpoints","text":"<pre><code>POST   /menu/versions                    # Create new version\nGET    /menu/versions                    # List versions (paginated)\nGET    /menu/versions/{id}               # Get version details\nPOST   /menu/versions/{id}/publish       # Publish version\nPOST   /menu/versions/rollback           # Rollback to version\nPOST   /menu/versions/compare            # Compare versions\nGET    /menu/versions/audit/logs         # Get audit trail\nGET    /menu/versions/stats              # Get version statistics\nPOST   /menu/versions/bulk-change        # Bulk operations\nPOST   /menu/versions/{id}/export        # Export version\nPOST   /menu/versions/import             # Import version\n</code></pre>"},{"location":"guides/features/menu-versioning-architecture/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>RBAC Integration: All endpoints protected with role-based permissions</li> <li>Granular Permissions: </li> <li><code>menu:read</code> - View versions and audit logs</li> <li><code>menu:create</code> - Create new versions</li> <li><code>menu:update</code> - Publish versions and rollback</li> <li><code>menu:delete</code> - Delete draft versions</li> <li><code>menu:manage_versions</code> - Advanced version management</li> </ul>"},{"location":"guides/features/menu-versioning-architecture/#5-frontend-layer","title":"5. Frontend Layer","text":""},{"location":"guides/features/menu-versioning-architecture/#react-components","title":"React Components","text":"<pre><code>MenuVersioning\n\u251c\u2500\u2500 VersionsList           # Paginated version management\n\u251c\u2500\u2500 VersionComparison      # Side-by-side version comparison\n\u251c\u2500\u2500 AuditTrail            # Comprehensive audit log viewer\n\u251c\u2500\u2500 VersionCreation       # Form for creating new versions\n\u251c\u2500\u2500 BulkOperations        # Bulk change interface\n\u2514\u2500\u2500 VersionStats          # Dashboard statistics\n</code></pre>"},{"location":"guides/features/menu-versioning-architecture/#key-features_1","title":"Key Features","text":"<ul> <li>Virtualized Tables: Handle large datasets efficiently</li> <li>Real-time Updates: WebSocket integration for live updates (future)</li> <li>Interactive Comparison: Visual diff between versions</li> <li>Export Capabilities: CSV, JSON, Excel export options</li> <li>Mobile Responsive: Optimized for mobile devices</li> </ul>"},{"location":"guides/features/menu-versioning-architecture/#data-flow","title":"Data Flow","text":""},{"location":"guides/features/menu-versioning-architecture/#version-creation-flow","title":"Version Creation Flow","text":"<pre><code>graph TD\n    A[User Action] --&gt; B[Create Version Request]\n    B --&gt; C[MenuVersioningService.create_version]\n    C --&gt; D[Generate Version Number]\n    D --&gt; E[Snapshot Current Menu State]\n    E --&gt; F[Create MenuVersion Record]\n    F --&gt; G[Create Entity Version Records]\n    G --&gt; H[Generate Audit Entries]\n    H --&gt; I[Commit Transaction]\n    I --&gt; J[Return Version Object]</code></pre>"},{"location":"guides/features/menu-versioning-architecture/#automated-versioning-flow","title":"Automated Versioning Flow","text":"<pre><code>graph TD\n    A[Menu Change Event] --&gt; B[MenuVersioningTriggers]\n    B --&gt; C{Critical Change?}\n    C --&gt;|Yes| D[Create Auto Version]\n    C --&gt;|No| E[Add to Buffer]\n    E --&gt; F{Buffer Threshold Met?}\n    F --&gt;|Yes| D\n    F --&gt;|No| G[Continue Monitoring]\n    D --&gt; H[Generate Version]\n    H --&gt; I[Clear Buffer]</code></pre>"},{"location":"guides/features/menu-versioning-architecture/#version-publishing-flow","title":"Version Publishing Flow","text":"<pre><code>graph TD\n    A[Publish Request] --&gt; B[Validate Version]\n    B --&gt; C[Deactivate Current Version]\n    C --&gt; D[Activate Target Version]\n    D --&gt; E[Apply Changes to Live Menu]\n    E --&gt; F[Generate Audit Trail]\n    F --&gt; G[Notify Stakeholders]</code></pre>"},{"location":"guides/features/menu-versioning-architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"guides/features/menu-versioning-architecture/#database-optimization","title":"Database Optimization","text":"<ol> <li> <p>Indexing Strategy:    <pre><code>-- Core indexes for performance\nCREATE INDEX idx_menu_versions_active ON menu_versions(is_active);\nCREATE INDEX idx_menu_versions_published ON menu_versions(is_published);\nCREATE INDEX idx_menu_audit_logs_created_at ON menu_audit_logs(created_at);\nCREATE INDEX idx_menu_audit_logs_entity ON menu_audit_logs(entity_type, entity_id);\n</code></pre></p> </li> <li> <p>Partitioning: Audit logs partitioned by date for large-scale deployments</p> </li> <li> <p>Archiving: Automated archiving of old versions and audit logs</p> </li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#caching-strategy","title":"Caching Strategy","text":"<ol> <li>Version Comparisons: Cached with TTL-based invalidation</li> <li>Statistics: Cached and updated via background jobs</li> <li>Frequently Accessed Versions: Redis caching for active versions</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#query-optimization","title":"Query Optimization","text":"<ol> <li>Eager Loading: Related data loaded efficiently</li> <li>Pagination: All list endpoints support pagination</li> <li>Filtering: Database-level filtering to reduce data transfer</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"guides/features/menu-versioning-architecture/#data-protection","title":"Data Protection","text":"<ol> <li>Audit Trail Integrity: Immutable audit logs with checksum validation</li> <li>Version Integrity: Digital signatures for version data (future enhancement)</li> <li>Access Controls: Comprehensive RBAC integration</li> <li>Data Encryption: Sensitive fields encrypted at rest</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#compliance-features","title":"Compliance Features","text":"<ol> <li>GDPR Compliance: Data retention policies and anonymization</li> <li>SOX Compliance: Complete audit trail with user attribution</li> <li>HIPAA Ready: Audit logging suitable for healthcare environments</li> <li>Industry Standards: Configurable compliance profiles</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"guides/features/menu-versioning-architecture/#metrics","title":"Metrics","text":"<ol> <li>Version Metrics:</li> <li>Versions created per day/week/month</li> <li>Average time between versions</li> <li>Rollback frequency and reasons</li> <li> <p>Version size and complexity metrics</p> </li> <li> <p>Performance Metrics:</p> </li> <li>Version creation time</li> <li>Comparison generation time</li> <li>Query response times</li> <li> <p>Cache hit rates</p> </li> <li> <p>Business Metrics:</p> </li> <li>Most frequently changed menu items</li> <li>Peak change times</li> <li>User activity patterns</li> <li>Compliance audit requests</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#alerting","title":"Alerting","text":"<ol> <li>System Alerts:</li> <li>Version creation failures</li> <li>Audit log inconsistencies</li> <li>Performance degradation</li> <li> <p>Storage threshold breaches</p> </li> <li> <p>Business Alerts:</p> </li> <li>Unusual change patterns</li> <li>Failed compliance requirements</li> <li>Unauthorized access attempts</li> <li>Critical system rollbacks</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"guides/features/menu-versioning-architecture/#production-setup","title":"Production Setup","text":"<pre><code># Database Configuration\npostgresql:\n  version: \"14+\"\n  extensions: [\"uuid-ossp\", \"btree_gin\"]\n  backup_strategy: \"continuous_archiving\"\n\n# Caching Layer\nredis:\n  version: \"7+\"\n  configuration: \"persistence_enabled\"\n\n# Application Layer\nbackend:\n  instances: 3\n  load_balancer: \"nginx\"\n  health_checks: \"enabled\"\n\n# Frontend Layer\nfrontend:\n  cdn: \"cloudflare\"\n  caching: \"aggressive\"\n  monitoring: \"real_user_monitoring\"\n</code></pre>"},{"location":"guides/features/menu-versioning-architecture/#scaling-considerations","title":"Scaling Considerations","text":"<ol> <li>Horizontal Scaling: Stateless design enables horizontal scaling</li> <li>Database Scaling: Read replicas for reporting and analytics</li> <li>Caching: Distributed caching for multi-instance deployments</li> <li>Background Processing: Queue-based processing for heavy operations</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#future-enhancements","title":"Future Enhancements","text":""},{"location":"guides/features/menu-versioning-architecture/#planned-features","title":"Planned Features","text":"<ol> <li>Real-time Collaboration: WebSocket-based real-time version updates</li> <li>Advanced Analytics: ML-powered change pattern analysis</li> <li>Integration APIs: Webhooks for external system integration</li> <li>Mobile App: Dedicated mobile app for version management</li> <li>Advanced Exports: PDF reports with visual comparisons</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#technical-improvements","title":"Technical Improvements","text":"<ol> <li>GraphQL API: Alternative API interface for complex queries</li> <li>Event Sourcing: Enhanced event-driven architecture</li> <li>Blockchain Audit: Immutable audit trail using blockchain</li> <li>AI-Powered Insights: Automated change recommendations</li> <li>Multi-tenant Architecture: Support for multiple restaurant chains</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#development-guidelines","title":"Development Guidelines","text":""},{"location":"guides/features/menu-versioning-architecture/#code-standards","title":"Code Standards","text":"<ol> <li>Type Safety: Full TypeScript coverage on frontend</li> <li>Testing: Minimum 80% code coverage</li> <li>Documentation: Comprehensive API documentation</li> <li>Error Handling: Graceful error handling and recovery</li> </ol>"},{"location":"guides/features/menu-versioning-architecture/#best-practices","title":"Best Practices","text":"<ol> <li>Version Naming: Consistent version naming conventions</li> <li>Change Descriptions: Mandatory change descriptions for versions</li> <li>Testing: All version operations must be tested</li> <li>Monitoring: All operations must be monitored and logged</li> </ol> <p>This architecture provides a robust, scalable, and compliant menu versioning system that meets enterprise requirements while maintaining ease of use and performance.</p>"},{"location":"guides/features/menu-versioning-setup/","title":"Menu Versioning System - Setup Guide","text":""},{"location":"guides/features/menu-versioning-setup/#prerequisites","title":"Prerequisites","text":""},{"location":"guides/features/menu-versioning-setup/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.9+ (3.11+ recommended)</li> <li>Node.js: 16+ (18+ recommended)</li> <li>PostgreSQL: 12+ (14+ recommended)</li> <li>Redis: 6+ (7+ recommended for persistence)</li> </ul>"},{"location":"guides/features/menu-versioning-setup/#database-extensions","title":"Database Extensions","text":"<p>Ensure the following PostgreSQL extensions are enabled:</p> <pre><code>-- Required extensions\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"btree_gin\";\n\n-- Optional but recommended for performance\nCREATE EXTENSION IF NOT EXISTS \"pg_stat_statements\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\";\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#installation-steps","title":"Installation Steps","text":""},{"location":"guides/features/menu-versioning-setup/#1-backend-setup","title":"1. Backend Setup","text":""},{"location":"guides/features/menu-versioning-setup/#environment-configuration","title":"Environment Configuration","text":"<p>Create or update your <code>.env</code> file:</p> <pre><code># Database Configuration\nDATABASE_URL=postgresql://user:password@localhost:5432/auraconnect\nDATABASE_POOL_SIZE=20\nDATABASE_POOL_OVERFLOW=30\n\n# Redis Configuration (for caching)\nREDIS_URL=redis://localhost:6379/0\nREDIS_CACHE_TTL=3600\n\n# Menu Versioning Configuration\nMENU_VERSIONING_ENABLED=true\nAUTO_VERSIONING_THRESHOLD=10\nMAX_AUDIT_LOG_RETENTION_DAYS=365\nVERSION_COMPARISON_CACHE_TTL=1800\n\n# Optional: Advanced Configuration\nMENU_VERSION_COMPRESSION=true\nENABLE_VERSION_ENCRYPTION=false\nBACKGROUND_VERSIONING=true\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#database-migration","title":"Database Migration","text":"<p>Run the database migration to create versioning tables:</p> <pre><code># From the project root directory\ncd backend\n\n# Run the migration\nalembic upgrade head\n\n# Verify tables were created\npsql $DATABASE_URL -c \"\\dt menu_*\"\n</code></pre> <p>Expected tables: - <code>menu_versions</code> - <code>menu_category_versions</code> - <code>menu_item_versions</code> - <code>modifier_group_versions</code> - <code>modifier_versions</code> - <code>menu_item_modifier_versions</code> - <code>menu_audit_logs</code> - <code>menu_version_schedules</code> - <code>menu_version_comparisons</code></p>"},{"location":"guides/features/menu-versioning-setup/#install-dependencies","title":"Install Dependencies","text":"<pre><code># Install Python dependencies\npip install -r requirements.txt\n\n# Install additional dependencies for versioning (if not already included)\npip install redis python-dateutil pytz\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#initialize-versioning-system","title":"Initialize Versioning System","text":"<p>Add the following to your application startup (already included in <code>main.py</code>):</p> <pre><code>from backend.core.menu_versioning_triggers import init_versioning_triggers\n\n# Initialize versioning triggers\ninit_versioning_triggers()\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#2-frontend-setup","title":"2. Frontend Setup","text":""},{"location":"guides/features/menu-versioning-setup/#install-dependencies_1","title":"Install Dependencies","text":"<pre><code>cd frontend\n\n# Install Node.js dependencies\nnpm install\n\n# Install additional dependencies for versioning\nnpm install react-window react-window-infinite-loader date-fns\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#environment-configuration_1","title":"Environment Configuration","text":"<p>Update your frontend <code>.env</code> file:</p> <pre><code># API Configuration\nREACT_APP_API_BASE_URL=http://localhost:8000\nREACT_APP_ENABLE_VERSIONING=true\n\n# Feature Flags\nREACT_APP_ENABLE_VERSION_COMPARISON=true\nREACT_APP_ENABLE_BULK_OPERATIONS=true\nREACT_APP_MAX_VERSIONS_PER_PAGE=20\n\n# UI Configuration\nREACT_APP_VIRTUALIZATION_THRESHOLD=100\nREACT_APP_AUTO_REFRESH_INTERVAL=30000\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#component-integration","title":"Component Integration","text":"<p>The versioning components are already integrated into the MenuDashboard. To verify:</p> <ol> <li> <p>Start the development server:    <pre><code>npm start\n</code></pre></p> </li> <li> <p>Navigate to the Menu Management section</p> </li> <li>Look for the \"Versioning\" tab</li> </ol>"},{"location":"guides/features/menu-versioning-setup/#3-verification-steps","title":"3. Verification Steps","text":""},{"location":"guides/features/menu-versioning-setup/#backend-verification","title":"Backend Verification","text":"<ol> <li> <p>API Health Check:    <pre><code>curl http://localhost:8000/menu/versions/stats\n</code></pre></p> </li> <li> <p>Create Test Version:    <pre><code>curl -X POST http://localhost:8000/menu/versions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -d '{\n    \"version_name\": \"Test Version\",\n    \"description\": \"Initial test version\",\n    \"version_type\": \"manual\"\n  }'\n</code></pre></p> </li> <li> <p>Check Audit Logs:    <pre><code>curl http://localhost:8000/menu/versions/audit/logs \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\"\n</code></pre></p> </li> </ol>"},{"location":"guides/features/menu-versioning-setup/#frontend-verification","title":"Frontend Verification","text":"<ol> <li>Access Versioning Interface:</li> <li>Go to <code>/menu</code> in your browser</li> <li>Click on the \"Versioning\" tab</li> <li> <p>Verify you can see the versioning interface</p> </li> <li> <p>Test Version Creation:</p> </li> <li>Click \"Create Version\"</li> <li>Fill out the form</li> <li> <p>Submit and verify version appears in the list</p> </li> <li> <p>Test Audit Trail:</p> </li> <li>Click on \"Audit Trail\" tab</li> <li>Verify audit entries are displayed</li> </ol>"},{"location":"guides/features/menu-versioning-setup/#database-verification","title":"Database Verification","text":"<pre><code>-- Check version tables have data\nSELECT COUNT(*) FROM menu_versions;\nSELECT COUNT(*) FROM menu_audit_logs;\n\n-- Check triggers are working\nSELECT \n  schemaname, \n  tablename, \n  schemaname||'.'||tablename as \"relation\",\n  n_tup_ins as \"inserts\",\n  n_tup_upd as \"updates\",\n  n_tup_del as \"deletes\"\nFROM pg_stat_user_tables \nWHERE tablename LIKE 'menu_%'\nORDER BY tablename;\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#configuration-options","title":"Configuration Options","text":""},{"location":"guides/features/menu-versioning-setup/#auto-versioning-configuration","title":"Auto-Versioning Configuration","text":"<p>Customize auto-versioning behavior in your application:</p> <pre><code># In your application initialization\nfrom backend.core.menu_versioning_triggers import menu_versioning_triggers\n\n# Adjust threshold for auto-versioning\nmenu_versioning_triggers.auto_version_threshold = 15\n\n# Enable/disable auto-versioning\nmenu_versioning_triggers.enabled = True\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#performance-tuning","title":"Performance Tuning","text":""},{"location":"guides/features/menu-versioning-setup/#database-optimization","title":"Database Optimization","text":"<pre><code>-- Create additional indexes for better performance\nCREATE INDEX CONCURRENTLY idx_menu_versions_created_by \nON menu_versions(created_by) WHERE deleted_at IS NULL;\n\nCREATE INDEX CONCURRENTLY idx_menu_audit_logs_batch \nON menu_audit_logs(batch_id) WHERE batch_id IS NOT NULL;\n\n-- Optimize for time-based queries\nCREATE INDEX CONCURRENTLY idx_menu_audit_logs_created_at_desc \nON menu_audit_logs(created_at DESC);\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#redis-caching","title":"Redis Caching","text":"<p>Configure Redis for optimal caching:</p> <pre><code># Redis configuration (redis.conf)\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#security-configuration","title":"Security Configuration","text":""},{"location":"guides/features/menu-versioning-setup/#rbac-permissions-setup","title":"RBAC Permissions Setup","text":"<p>Ensure proper permissions are configured:</p> <pre><code># Required permissions for versioning\nVERSIONING_PERMISSIONS = [\n    \"menu:read\",           # View versions and audit logs\n    \"menu:create\",         # Create new versions\n    \"menu:update\",         # Publish and rollback versions\n    \"menu:delete\",         # Delete draft versions\n    \"menu:manage_versions\" # Advanced version management\n]\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#audit-log-security","title":"Audit Log Security","text":"<pre><code># Configure audit log retention\nAUDIT_LOG_CONFIG = {\n    \"retention_days\": 365,\n    \"archive_after_days\": 90,\n    \"encryption_enabled\": False,  # Set to True for sensitive data\n    \"checksum_validation\": True\n}\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/features/menu-versioning-setup/#common-issues","title":"Common Issues","text":""},{"location":"guides/features/menu-versioning-setup/#1-migration-fails","title":"1. Migration Fails","text":"<p>Problem: Database migration fails with permission errors.</p> <p>Solution: <pre><code># Ensure database user has proper permissions\nGRANT CREATE ON DATABASE auraconnect TO your_user;\nGRANT USAGE ON SCHEMA public TO your_user;\nGRANT CREATE ON SCHEMA public TO your_user;\n\n# Run migration with verbose output\nalembic upgrade head --sql\n</code></pre></p>"},{"location":"guides/features/menu-versioning-setup/#2-auto-versioning-not-working","title":"2. Auto-Versioning Not Working","text":"<p>Problem: Changes to menu items don't trigger automatic versioning.</p> <p>Solutions:</p> <ol> <li> <p>Verify triggers are initialized:    <pre><code>from backend.core.menu_versioning_triggers import get_change_buffer_status\nprint(get_change_buffer_status())\n</code></pre></p> </li> <li> <p>Check if auto-versioning is enabled:    <pre><code>from backend.core.menu_versioning_triggers import menu_versioning_triggers\nprint(f\"Auto-versioning enabled: {menu_versioning_triggers.enabled}\")\n</code></pre></p> </li> <li> <p>Monitor change buffer:    <pre><code># Check application logs for versioning events\ngrep \"versioning\" logs/application.log\n</code></pre></p> </li> </ol>"},{"location":"guides/features/menu-versioning-setup/#3-frontend-components-not-loading","title":"3. Frontend Components Not Loading","text":"<p>Problem: Versioning tab shows empty or error state.</p> <p>Solutions:</p> <ol> <li> <p>Check API connectivity:    <pre><code>curl http://localhost:8000/menu/versions/stats \\\n  -H \"Authorization: Bearer YOUR_TOKEN\"\n</code></pre></p> </li> <li> <p>Verify permissions:    <pre><code>// In browser console\nconsole.log(window.localStorage.getItem('userPermissions'));\n</code></pre></p> </li> <li> <p>Check browser console for errors:    <pre><code>// Look for CORS, authentication, or API errors\n</code></pre></p> </li> </ol>"},{"location":"guides/features/menu-versioning-setup/#4-performance-issues","title":"4. Performance Issues","text":"<p>Problem: Version operations are slow.</p> <p>Solutions:</p> <ol> <li> <p>Database Performance:    <pre><code>-- Analyze query performance\nEXPLAIN ANALYZE SELECT * FROM menu_versions \nWHERE deleted_at IS NULL ORDER BY created_at DESC LIMIT 20;\n\n-- Update table statistics\nANALYZE menu_versions;\nANALYZE menu_audit_logs;\n</code></pre></p> </li> <li> <p>Cache Performance:    <pre><code># Check Redis connectivity\nredis-cli ping\n\n# Monitor cache hit rates\nredis-cli info stats | grep hit_rate\n</code></pre></p> </li> <li> <p>Application Performance:    <pre><code># Enable SQL query logging\nimport logging\nlogging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\n</code></pre></p> </li> </ol>"},{"location":"guides/features/menu-versioning-setup/#health-checks","title":"Health Checks","text":"<p>Create health check endpoints to monitor system status:</p> <pre><code>@router.get(\"/health/versioning\")\nasync def versioning_health_check(db: Session = Depends(get_db)):\n    \"\"\"Health check for versioning system\"\"\"\n\n    health_status = {\n        \"status\": \"healthy\",\n        \"timestamp\": datetime.utcnow().isoformat(),\n        \"checks\": {}\n    }\n\n    try:\n        # Check database connectivity\n        version_count = db.query(MenuVersion).count()\n        health_status[\"checks\"][\"database\"] = {\n            \"status\": \"ok\",\n            \"version_count\": version_count\n        }\n\n        # Check auto-versioning system\n        buffer_status = get_change_buffer_status()\n        health_status[\"checks\"][\"auto_versioning\"] = {\n            \"status\": \"ok\" if buffer_status[\"enabled\"] else \"disabled\",\n            \"buffer_size\": buffer_status[\"buffer_size\"]\n        }\n\n        # Check Redis connectivity (if configured)\n        try:\n            # Redis health check logic here\n            health_status[\"checks\"][\"cache\"] = {\"status\": \"ok\"}\n        except:\n            health_status[\"checks\"][\"cache\"] = {\"status\": \"unavailable\"}\n\n    except Exception as e:\n        health_status[\"status\"] = \"unhealthy\"\n        health_status[\"error\"] = str(e)\n\n    return health_status\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#maintenance","title":"Maintenance","text":""},{"location":"guides/features/menu-versioning-setup/#regular-maintenance-tasks","title":"Regular Maintenance Tasks","text":""},{"location":"guides/features/menu-versioning-setup/#1-audit-log-cleanup","title":"1. Audit Log Cleanup","text":"<p>Create a scheduled task to manage audit log retention:</p> <pre><code># scripts/cleanup_audit_logs.py\nfrom datetime import datetime, timedelta\nfrom backend.core.database import get_db\nfrom backend.core.menu_versioning_models import MenuAuditLog\n\ndef cleanup_old_audit_logs(retention_days: int = 365):\n    \"\"\"Clean up audit logs older than retention period\"\"\"\n\n    cutoff_date = datetime.utcnow() - timedelta(days=retention_days)\n\n    with get_db() as db:\n        deleted_count = db.query(MenuAuditLog).filter(\n            MenuAuditLog.created_at &lt; cutoff_date\n        ).delete()\n\n        db.commit()\n        print(f\"Cleaned up {deleted_count} old audit log entries\")\n\nif __name__ == \"__main__\":\n    cleanup_old_audit_logs()\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#2-version-cleanup","title":"2. Version Cleanup","text":"<pre><code># scripts/cleanup_old_versions.py\ndef cleanup_old_versions(keep_count: int = 100):\n    \"\"\"Keep only the most recent versions\"\"\"\n\n    with get_db() as db:\n        # Keep active version and most recent drafts\n        versions_to_delete = db.query(MenuVersion).filter(\n            MenuVersion.is_active == False,\n            MenuVersion.deleted_at == None\n        ).order_by(\n            MenuVersion.created_at.desc()\n        ).offset(keep_count).all()\n\n        for version in versions_to_delete:\n            version.deleted_at = datetime.utcnow()\n\n        db.commit()\n        print(f\"Marked {len(versions_to_delete)} old versions for deletion\")\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#3-performance-monitoring","title":"3. Performance Monitoring","text":"<p>Set up monitoring for key metrics:</p> <pre><code># Create monitoring script\n#!/bin/bash\n# scripts/monitor_versioning.sh\n\necho \"=== Menu Versioning System Status ===\"\necho \"Date: $(date)\"\necho\n\n# Database metrics\necho \"Database Metrics:\"\npsql $DATABASE_URL -c \"\nSELECT \n    'Total Versions' as metric,\n    COUNT(*) as value \nFROM menu_versions WHERE deleted_at IS NULL\nUNION ALL\nSELECT \n    'Active Versions' as metric,\n    COUNT(*) as value \nFROM menu_versions WHERE is_active = true\nUNION ALL\nSELECT \n    'Audit Log Entries (Last 24h)' as metric,\n    COUNT(*) as value \nFROM menu_audit_logs \nWHERE created_at &gt; NOW() - INTERVAL '24 hours';\n\"\n\n# Application metrics\necho\necho \"Application Metrics:\"\ncurl -s http://localhost:8000/health/versioning | python -m json.tool\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#backup-strategy","title":"Backup Strategy","text":""},{"location":"guides/features/menu-versioning-setup/#database-backup","title":"Database Backup","text":"<pre><code>#!/bin/bash\n# scripts/backup_versioning_data.sh\n\nBACKUP_DIR=\"/backups/versioning\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Backup versioning tables\npg_dump $DATABASE_URL \\\n  --table=menu_versions \\\n  --table=menu_category_versions \\\n  --table=menu_item_versions \\\n  --table=modifier_group_versions \\\n  --table=modifier_versions \\\n  --table=menu_audit_logs \\\n  --data-only \\\n  --compress=9 \\\n  &gt; $BACKUP_DIR/versioning_data_$DATE.sql.gz\n\necho \"Backup completed: $BACKUP_DIR/versioning_data_$DATE.sql.gz\"\n</code></pre>"},{"location":"guides/features/menu-versioning-setup/#support-and-documentation","title":"Support and Documentation","text":""},{"location":"guides/features/menu-versioning-setup/#additional-resources","title":"Additional Resources","text":"<ul> <li>API Documentation: Visit <code>/docs</code> endpoint when server is running</li> <li>Database Schema: Check <code>backend/alembic/versions/</code> for migration files</li> <li>Component Documentation: See JSDoc comments in React components</li> <li>Error Codes: Reference <code>backend/core/menu_versioning_service.py</code> for error handling</li> </ul>"},{"location":"guides/features/menu-versioning-setup/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the troubleshooting section above</li> <li>Review application logs for error messages</li> <li>Verify database and Redis connectivity</li> <li>Ensure all dependencies are properly installed</li> <li>Check that RBAC permissions are correctly configured</li> </ol>"},{"location":"guides/features/menu-versioning-setup/#contributing","title":"Contributing","text":"<p>When contributing to the versioning system:</p> <ol> <li>Run the test suite: <code>pytest backend/tests/test_menu_versioning_*.py</code></li> <li>Update documentation for any API changes</li> <li>Follow the existing code style and patterns</li> <li>Add appropriate error handling and logging</li> <li>Test with different user permission levels</li> </ol> <p>This setup guide should help you get the menu versioning system up and running in your environment. The system is designed to be robust and scalable, but proper configuration and maintenance are essential for optimal performance.</p>"},{"location":"guides/features/versioning-api-guide/","title":"Menu Versioning API Guide","text":""},{"location":"guides/features/versioning-api-guide/#overview","title":"Overview","text":"<p>The Menu Versioning API provides comprehensive version control and audit trail capabilities for restaurant menu management. This guide covers all available endpoints, request/response formats, and usage examples.</p>"},{"location":"guides/features/versioning-api-guide/#base-url","title":"Base URL","text":"<pre><code>https://your-domain.com/api/menu/versions\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#authentication","title":"Authentication","text":"<p>All endpoints require JWT authentication with appropriate RBAC permissions:</p> <pre><code>Authorization: Bearer &lt;your-jwt-token&gt;\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#required-permissions","title":"Required Permissions","text":"<ul> <li><code>menu:read</code> - View versions and audit logs</li> <li><code>menu:create</code> - Create new versions</li> <li><code>menu:update</code> - Publish and rollback versions</li> <li><code>menu:delete</code> - Delete draft versions</li> <li><code>menu:manage_versions</code> - Advanced version management</li> </ul>"},{"location":"guides/features/versioning-api-guide/#endpoints","title":"Endpoints","text":""},{"location":"guides/features/versioning-api-guide/#1-version-management","title":"1. Version Management","text":""},{"location":"guides/features/versioning-api-guide/#create-version","title":"Create Version","text":"<p>Creates a new menu version from the current active menu state.</p> <pre><code>POST /menu/versions\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"version_name\": \"Summer Menu 2025\",\n  \"description\": \"Updated menu with seasonal items\",\n  \"version_type\": \"manual\",\n  \"include_inactive\": false,\n  \"scheduled_publish_at\": \"2025-06-01T12:00:00Z\"\n}\n</code></pre> <p>Parameters:</p> Field Type Required Description <code>version_name</code> string No Human-readable name for the version <code>description</code> string No Detailed description of changes <code>version_type</code> enum No Type: <code>manual</code>, <code>scheduled</code>, <code>auto_save</code> (default: <code>manual</code>) <code>include_inactive</code> boolean No Include inactive items in snapshot (default: <code>false</code>) <code>scheduled_publish_at</code> datetime No Schedule automatic publishing <p>Response:</p> <pre><code>{\n  \"id\": 123,\n  \"version_number\": \"v20250728-001\",\n  \"version_name\": \"Summer Menu 2025\",\n  \"description\": \"Updated menu with seasonal items\",\n  \"version_type\": \"manual\",\n  \"is_active\": false,\n  \"is_published\": false,\n  \"published_at\": null,\n  \"scheduled_publish_at\": \"2025-06-01T12:00:00Z\",\n  \"created_by\": 1,\n  \"total_items\": 45,\n  \"total_categories\": 8,\n  \"total_modifiers\": 23,\n  \"changes_summary\": null,\n  \"parent_version_id\": null,\n  \"created_at\": \"2025-01-28T10:30:00Z\",\n  \"updated_at\": \"2025-01-28T10:30:00Z\"\n}\n</code></pre> <p>Example:</p> <pre><code>curl -X POST https://api.example.com/menu/versions \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"version_name\": \"Weekend Special Menu\",\n    \"description\": \"Added weekend brunch items\",\n    \"version_type\": \"manual\"\n  }'\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#list-versions","title":"List Versions","text":"<p>Retrieves a paginated list of menu versions.</p> <pre><code>GET /menu/versions\n</code></pre> <p>Query Parameters:</p> Parameter Type Default Description <code>page</code> integer 1 Page number <code>size</code> integer 20 Items per page (max 100) <code>version_type</code> enum all Filter by version type <p>Response:</p> <pre><code>{\n  \"items\": [\n    {\n      \"id\": 123,\n      \"version_number\": \"v20250728-001\",\n      \"version_name\": \"Summer Menu 2025\",\n      \"is_active\": true,\n      \"is_published\": true,\n      \"total_items\": 45,\n      \"created_at\": \"2025-01-28T10:30:00Z\"\n    }\n  ],\n  \"total\": 25,\n  \"page\": 1,\n  \"size\": 20,\n  \"pages\": 2\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#get-version-details","title":"Get Version Details","text":"<p>Retrieves detailed information about a specific version including all related data.</p> <pre><code>GET /menu/versions/{version_id}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": 123,\n  \"version_number\": \"v20250728-001\",\n  \"version_name\": \"Summer Menu 2025\",\n  \"description\": \"Updated menu with seasonal items\",\n  \"version_type\": \"manual\",\n  \"is_active\": true,\n  \"is_published\": true,\n  \"published_at\": \"2025-01-28T12:00:00Z\",\n  \"created_by\": 1,\n  \"total_items\": 45,\n  \"total_categories\": 8,\n  \"total_modifiers\": 23,\n  \"categories\": [\n    {\n      \"id\": 1,\n      \"original_category_id\": 10,\n      \"name\": \"Appetizers\",\n      \"description\": \"Small plates and starters\",\n      \"display_order\": 1,\n      \"is_active\": true,\n      \"change_type\": \"create\",\n      \"change_summary\": \"Added new appetizer category\"\n    }\n  ],\n  \"items\": [\n    {\n      \"id\": 1,\n      \"original_item_id\": 25,\n      \"name\": \"Caesar Salad\",\n      \"description\": \"Fresh romaine with caesar dressing\",\n      \"price\": 12.99,\n      \"category_id\": 10,\n      \"is_active\": true,\n      \"is_available\": true,\n      \"change_type\": \"update\",\n      \"change_summary\": \"Updated price from $11.99 to $12.99\",\n      \"price_history\": [\n        {\n          \"price\": 11.99,\n          \"date\": \"2025-01-20T00:00:00Z\"\n        },\n        {\n          \"price\": 12.99,\n          \"date\": \"2025-01-28T00:00:00Z\"\n        }\n      ]\n    }\n  ],\n  \"modifiers\": [],\n  \"audit_entries\": [\n    {\n      \"id\": 1,\n      \"action\": \"create_version\",\n      \"entity_type\": \"menu_version\",\n      \"change_type\": \"create\",\n      \"change_summary\": \"Created new version v20250728-001\",\n      \"user_id\": 1,\n      \"created_at\": \"2025-01-28T10:30:00Z\"\n    }\n  ],\n  \"parent_version\": null\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#publish-version","title":"Publish Version","text":"<p>Publishes a version, making it the active menu.</p> <pre><code>POST /menu/versions/{version_id}/publish\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"scheduled_at\": \"2025-06-01T12:00:00Z\",\n  \"force\": false\n}\n</code></pre> <p>Parameters:</p> Field Type Required Description <code>scheduled_at</code> datetime No Schedule publishing for future time <code>force</code> boolean No Force publish even if already published <p>Response:</p> <pre><code>{\n  \"id\": 123,\n  \"version_number\": \"v20250728-001\",\n  \"is_active\": true,\n  \"is_published\": true,\n  \"published_at\": \"2025-01-28T12:00:00Z\"\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#rollback-version","title":"Rollback Version","text":"<p>Rolls back to a previous version, creating a new version based on the target.</p> <pre><code>POST /menu/versions/rollback\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"target_version_id\": 120,\n  \"create_backup\": true,\n  \"rollback_reason\": \"Critical bug in current version\"\n}\n</code></pre> <p>Parameters:</p> Field Type Required Description <code>target_version_id</code> integer Yes ID of version to rollback to <code>create_backup</code> boolean No Create backup of current state (default: <code>true</code>) <code>rollback_reason</code> string Yes Reason for rollback (required for audit) <p>Response:</p> <pre><code>{\n  \"id\": 124,\n  \"version_number\": \"r20250728-001\",\n  \"version_name\": \"Rollback to v20250726-003\",\n  \"description\": \"Rollback to version v20250726-003. Reason: Critical bug in current version\",\n  \"version_type\": \"rollback\",\n  \"is_active\": true,\n  \"is_published\": true,\n  \"parent_version_id\": 120,\n  \"created_at\": \"2025-01-28T14:00:00Z\"\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#delete-version","title":"Delete Version","text":"<p>Soft deletes a draft version (cannot delete published or active versions).</p> <pre><code>DELETE /menu/versions/{version_id}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"message\": \"Version deleted successfully\"\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#2-version-comparison","title":"2. Version Comparison","text":""},{"location":"guides/features/versioning-api-guide/#compare-versions","title":"Compare Versions","text":"<p>Compares two versions and returns detailed differences.</p> <pre><code>POST /menu/versions/compare\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"from_version_id\": 120,\n  \"to_version_id\": 123,\n  \"include_details\": true,\n  \"entity_types\": [\"items\", \"categories\"]\n}\n</code></pre> <p>Parameters:</p> Field Type Required Description <code>from_version_id</code> integer Yes Source version for comparison <code>to_version_id</code> integer Yes Target version for comparison <code>include_details</code> boolean No Include detailed field changes (default: <code>true</code>) <code>entity_types</code> array No Limit comparison to specific entity types <p>Response:</p> <pre><code>{\n  \"from_version_id\": 120,\n  \"to_version_id\": 123,\n  \"from_version_number\": \"v20250726-003\",\n  \"to_version_number\": \"v20250728-001\",\n  \"summary\": {\n    \"created\": 5,\n    \"updated\": 12,\n    \"deleted\": 2,\n    \"price_changed\": 8\n  },\n  \"categories\": [\n    {\n      \"entity_type\": \"category\",\n      \"entity_id\": 10,\n      \"entity_name\": \"Appetizers\",\n      \"change_type\": \"update\",\n      \"field_changes\": [\n        {\n          \"field_name\": \"description\",\n          \"old_value\": \"Small plates\",\n          \"new_value\": \"Small plates and starters\",\n          \"change_type\": \"modified\"\n        }\n      ]\n    }\n  ],\n  \"items\": [\n    {\n      \"entity_type\": \"item\",\n      \"entity_id\": 25,\n      \"entity_name\": \"Caesar Salad\",\n      \"change_type\": \"update\",\n      \"field_changes\": [\n        {\n          \"field_name\": \"price\",\n          \"old_value\": 11.99,\n          \"new_value\": 12.99,\n          \"change_type\": \"modified\"\n        }\n      ]\n    }\n  ],\n  \"modifiers\": [],\n  \"generated_at\": \"2025-01-28T15:00:00Z\"\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#3-audit-trail","title":"3. Audit Trail","text":""},{"location":"guides/features/versioning-api-guide/#get-audit-logs","title":"Get Audit Logs","text":"<p>Retrieves paginated audit logs for menu changes.</p> <pre><code>GET /menu/versions/audit/logs\n</code></pre> <p>Query Parameters:</p> Parameter Type Default Description <code>version_id</code> integer null Filter by specific version <code>page</code> integer 1 Page number <code>size</code> integer 50 Items per page (max 200) <code>entity_type</code> string null Filter by entity type <code>change_type</code> string null Filter by change type <code>user_id</code> integer null Filter by user <code>start_date</code> datetime null Filter from date <code>end_date</code> datetime null Filter to date <p>Response:</p> <pre><code>{\n  \"items\": [\n    {\n      \"id\": 456,\n      \"menu_version_id\": 123,\n      \"action\": \"update_item_price\",\n      \"entity_type\": \"menu_item\",\n      \"entity_id\": 25,\n      \"entity_name\": \"Caesar Salad\",\n      \"change_type\": \"price_change\",\n      \"old_values\": {\n        \"price\": 11.99\n      },\n      \"new_values\": {\n        \"price\": 12.99\n      },\n      \"changed_fields\": [\"price\"],\n      \"change_summary\": \"Price updated from $11.99 to $12.99\",\n      \"user_id\": 1,\n      \"user_role\": \"manager\",\n      \"ip_address\": \"192.168.1.100\",\n      \"user_agent\": \"Mozilla/5.0...\",\n      \"session_id\": \"sess_123abc\",\n      \"batch_id\": \"batch_789xyz\",\n      \"tags\": [\"price_increase\", \"weekend_menu\"],\n      \"created_at\": \"2025-01-28T11:15:00Z\"\n    }\n  ],\n  \"total\": 150,\n  \"page\": 1,\n  \"size\": 50,\n  \"pages\": 3\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#4-statistics-and-analytics","title":"4. Statistics and Analytics","text":""},{"location":"guides/features/versioning-api-guide/#get-version-statistics","title":"Get Version Statistics","text":"<p>Retrieves comprehensive statistics about versions and changes.</p> <pre><code>GET /menu/versions/stats\n</code></pre> <p>Response:</p> <pre><code>{\n  \"total_versions\": 25,\n  \"active_version\": {\n    \"id\": 123,\n    \"version_number\": \"v20250728-001\",\n    \"version_name\": \"Summer Menu 2025\",\n    \"published_at\": \"2025-01-28T12:00:00Z\"\n  },\n  \"published_versions\": 18,\n  \"draft_versions\": 7,\n  \"scheduled_versions\": 2,\n  \"latest_change\": \"2025-01-28T11:15:00Z\",\n  \"total_changes_today\": 15,\n  \"most_changed_items\": [\n    {\n      \"name\": \"Caesar Salad\",\n      \"changes\": 8,\n      \"last_changed\": \"2025-01-28T11:15:00Z\"\n    },\n    {\n      \"name\": \"Margherita Pizza\",\n      \"changes\": 6,\n      \"last_changed\": \"2025-01-28T10:30:00Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#5-bulk-operations","title":"5. Bulk Operations","text":""},{"location":"guides/features/versioning-api-guide/#bulk-change","title":"Bulk Change","text":"<p>Applies bulk changes to menu entities and creates version if significant.</p> <pre><code>POST /menu/versions/bulk-change\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"entity_type\": \"item\",\n  \"entity_ids\": [25, 26, 27, 28],\n  \"changes\": {\n    \"is_available\": false\n  },\n  \"change_reason\": \"Temporarily unavailable due to supply shortage\"\n}\n</code></pre> <p>Parameters:</p> Field Type Required Description <code>entity_type</code> enum Yes Type: <code>item</code>, <code>category</code>, <code>modifier</code> <code>entity_ids</code> array Yes List of entity IDs to update <code>changes</code> object Yes Changes to apply <code>change_reason</code> string Yes Reason for bulk change <p>Response:</p> <pre><code>{\n  \"updated\": 4,\n  \"errors\": [],\n  \"version_created\": true,\n  \"version_id\": 124,\n  \"change_summary\": \"Bulk updated 4 items: set availability to false\"\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#6-export-and-import","title":"6. Export and Import","text":""},{"location":"guides/features/versioning-api-guide/#export-version","title":"Export Version","text":"<p>Exports version data in various formats.</p> <pre><code>POST /menu/versions/{version_id}/export\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"format\": \"json\",\n  \"include_audit_trail\": true,\n  \"include_inactive\": false\n}\n</code></pre> <p>Parameters:</p> Field Type Required Description <code>format</code> enum No Format: <code>json</code>, <code>csv</code>, <code>excel</code> (default: <code>json</code>) <code>include_audit_trail</code> boolean No Include audit trail data <code>include_inactive</code> boolean No Include inactive entities <p>Response:</p> <pre><code>{\n  \"version\": {\n    \"id\": 123,\n    \"version_number\": \"v20250728-001\",\n    \"categories\": [...],\n    \"items\": [...],\n    \"modifiers\": [...]\n  },\n  \"exported_at\": \"2025-01-28T16:00:00Z\",\n  \"exported_by\": \"user@example.com\",\n  \"format\": \"json\"\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#import-version","title":"Import Version","text":"<p>Imports menu data and optionally creates a new version.</p> <pre><code>POST /menu/versions/import\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"import_data\": {\n    \"categories\": [...],\n    \"items\": [...],\n    \"modifiers\": [...]\n  },\n  \"import_mode\": \"merge\",\n  \"create_version\": true,\n  \"version_name\": \"Imported Menu Data\"\n}\n</code></pre> <p>Parameters:</p> Field Type Required Description <code>import_data</code> object Yes Menu data to import <code>import_mode</code> enum No Mode: <code>merge</code>, <code>replace</code>, <code>append</code> (default: <code>merge</code>) <code>create_version</code> boolean No Create version after import (default: <code>true</code>) <code>version_name</code> string No Name for created version"},{"location":"guides/features/versioning-api-guide/#7-advanced-operations","title":"7. Advanced Operations","text":""},{"location":"guides/features/versioning-api-guide/#preview-version","title":"Preview Version","text":"<p>Previews what the menu would look like with a specific version active.</p> <pre><code>GET /menu/versions/{version_id}/preview\n</code></pre> <p>Response:</p> <pre><code>{\n  \"version_info\": {\n    \"id\": 123,\n    \"version_number\": \"v20250728-001\",\n    \"version_name\": \"Summer Menu 2025\"\n  },\n  \"categories\": 8,\n  \"items\": 45,\n  \"modifiers\": 23,\n  \"preview_generated_at\": \"2025-01-28T16:30:00Z\",\n  \"differences_from_current\": {\n    \"new_items\": 5,\n    \"updated_items\": 12,\n    \"removed_items\": 2\n  }\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#get-change-buffer-status","title":"Get Change Buffer Status","text":"<p>Gets the current status of the auto-versioning change buffer.</p> <pre><code>GET /menu/versions/buffer-status\n</code></pre> <p>Response:</p> <pre><code>{\n  \"buffer_size\": 7,\n  \"threshold\": 10,\n  \"enabled\": true,\n  \"recent_changes\": [\n    {\n      \"entity_type\": \"menu_item\",\n      \"change_type\": \"update\",\n      \"entity_id\": 25,\n      \"timestamp\": \"2025-01-28T16:25:00Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#error-responses","title":"Error Responses","text":"<p>All endpoints return consistent error responses:</p> <pre><code>{\n  \"detail\": \"Error message describing what went wrong\",\n  \"error_code\": \"VERSION_NOT_FOUND\",\n  \"timestamp\": \"2025-01-28T16:00:00Z\",\n  \"path\": \"/menu/versions/999\"\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#common-error-codes","title":"Common Error Codes","text":"Code Status Description <code>VERSION_NOT_FOUND</code> 404 Version does not exist <code>INSUFFICIENT_PERMISSIONS</code> 403 User lacks required permissions <code>VERSION_ALREADY_PUBLISHED</code> 400 Attempting to modify published version <code>INVALID_VERSION_STATE</code> 400 Version in invalid state for operation <code>COMPARISON_FAILED</code> 500 Version comparison could not be generated <code>ROLLBACK_FORBIDDEN</code> 400 Cannot rollback to specified version"},{"location":"guides/features/versioning-api-guide/#rate-limiting","title":"Rate Limiting","text":"<p>API endpoints are rate-limited to prevent abuse:</p> <ul> <li>Version Creation: 10 requests per minute per user</li> <li>Bulk Operations: 5 requests per minute per user</li> <li>General Queries: 100 requests per minute per user</li> </ul> <p>Rate limit headers are included in responses:</p> <pre><code>X-RateLimit-Limit: 100\nX-RateLimit-Remaining: 95\nX-RateLimit-Reset: 1643723400\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#webhooks","title":"Webhooks","text":"<p>Configure webhooks to receive notifications about version events:</p>"},{"location":"guides/features/versioning-api-guide/#webhook-events","title":"Webhook Events","text":"<ul> <li><code>version.created</code> - New version created</li> <li><code>version.published</code> - Version published</li> <li><code>version.rollback</code> - Version rollback performed</li> <li><code>audit.critical_change</code> - Critical change detected</li> </ul>"},{"location":"guides/features/versioning-api-guide/#webhook-payload","title":"Webhook Payload","text":"<pre><code>{\n  \"event\": \"version.published\",\n  \"timestamp\": \"2025-01-28T12:00:00Z\",\n  \"data\": {\n    \"version_id\": 123,\n    \"version_number\": \"v20250728-001\",\n    \"user_id\": 1,\n    \"changes_summary\": {\n      \"total_changes\": 15,\n      \"critical_changes\": 3\n    }\n  }\n}\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#sdk-examples","title":"SDK Examples","text":""},{"location":"guides/features/versioning-api-guide/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>import { MenuVersioningAPI } from '@auraconnect/menu-versioning';\n\nconst api = new MenuVersioningAPI({\n  baseURL: 'https://api.example.com',\n  apiKey: 'your-api-key'\n});\n\n// Create a new version\nconst version = await api.createVersion({\n  version_name: 'Summer Menu 2025',\n  description: 'Updated seasonal menu',\n  version_type: 'manual'\n});\n\n// Compare versions\nconst comparison = await api.compareVersions({\n  from_version_id: 120,\n  to_version_id: 123,\n  include_details: true\n});\n\n// Get audit logs\nconst auditLogs = await api.getAuditLogs({\n  page: 1,\n  size: 50,\n  entity_type: 'menu_item'\n});\n</code></pre>"},{"location":"guides/features/versioning-api-guide/#python","title":"Python","text":"<pre><code>from auraconnect.menu_versioning import MenuVersioningClient\n\nclient = MenuVersioningClient(\n    base_url='https://api.example.com',\n    api_key='your-api-key'\n)\n\n# Create version\nversion = client.create_version(\n    version_name='Summer Menu 2025',\n    description='Updated seasonal menu',\n    version_type='manual'\n)\n\n# Publish version\nclient.publish_version(version.id, force=False)\n\n# Get version details\ndetails = client.get_version_details(version.id)\n</code></pre> <p>This API guide provides comprehensive documentation for integrating with the Menu Versioning system. For additional support or advanced use cases, please refer to the architecture documentation or contact the development team.</p>"},{"location":"modules/","title":"AuraConnect Modules Documentation","text":""},{"location":"modules/#overview","title":"Overview","text":"<p>This directory contains comprehensive documentation for all AuraConnect modules. Each module has its own dedicated documentation covering architecture, API endpoints, database schema, and integration guides.</p>"},{"location":"modules/#module-categories","title":"Module Categories","text":""},{"location":"modules/#restaurant-operations","title":"\ud83c\udf7d\ufe0f Restaurant Operations","text":"Module Description Documentation Orders Order management, processing, and real-time tracking View Docs Menu Menu management, categories, and modifiers View Docs Table Management Table layout designer and reservation system View Docs Recipe Management Bill of materials and cost tracking View Docs Inventory Stock tracking and supplier management (Coming Soon) POS Integration Point of Sale system adapters View Docs"},{"location":"modules/#staff-financial-management","title":"\ud83d\udc65 Staff &amp; Financial Management","text":"Module Description Documentation Staff Employee management, scheduling, and biometric auth View Docs Payments Multi-gateway payments, split bills, and refunds View Docs Payroll Payroll processing and compliance View Docs Tax Tax calculations and reporting View Docs Pricing Rules Dynamic pricing and promotion engine View Docs Auth Authentication and authorization (Integrated)"},{"location":"modules/#customer-experience","title":"\ud83c\udfaf Customer Experience","text":"Module Description Documentation Customers Customer relationship management (Coming Soon) Feedback Reviews and feedback management (Coming Soon) Loyalty Rewards and loyalty programs (Coming Soon) Promotions Marketing and promotional campaigns (Coming Soon)"},{"location":"modules/#intelligence-configuration","title":"\ud83d\udcca Intelligence &amp; Configuration","text":"Module Description Documentation Analytics Business intelligence and reporting (Coming Soon) AI Recommendations Machine learning insights View Docs Settings System configuration and preferences (Integrated)"},{"location":"modules/#documentation-structure","title":"Documentation Structure","text":"<p>Each module documentation follows a consistent structure:</p> <pre><code>graph TD\n    A[module-name/] --&gt; B[README.md&lt;br/&gt;Module overview and quick start]\n    A --&gt; C[architecture.md&lt;br/&gt;Technical architecture and design patterns]\n    A --&gt; D[api-reference.md&lt;br/&gt;Complete API documentation]\n    A --&gt; E[database-schema.md&lt;br/&gt;Database tables and relationships]\n    A --&gt; F[integration-guide.md&lt;br/&gt;How to integrate with other modules]\n    A --&gt; G[examples/&lt;br/&gt;Code examples and use cases]\n    A --&gt; H[diagrams/&lt;br/&gt;Architecture and flow diagrams]\n\n    G --&gt; I[basic-usage.py]\n    G --&gt; J[advanced-usage.py]\n    G --&gt; K[integration.py]\n\n    H --&gt; L[data-flow.png]\n    H --&gt; M[component-diagram.png]\n\n    classDef folder fill:#e8f5e9,stroke:#388e3c,stroke-width:2px\n    classDef doc fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef code fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef image fill:#fce4ec,stroke:#c2185b,stroke-width:2px\n\n    class A,G,H folder\n    class B,C,D,E,F doc\n    class I,J,K code\n    class L,M image</code></pre>"},{"location":"modules/#getting-started-with-a-module","title":"Getting Started with a Module","text":"<ol> <li>Read the Overview: Start with the module's README.md for a high-level understanding</li> <li>Understand the Architecture: Review architecture.md for technical design details</li> <li>Explore the API: Check api-reference.md for endpoint documentation</li> <li>Review Examples: Look at the examples folder for practical implementations</li> <li>Check Integration Points: Read integration-guide.md to understand module dependencies</li> </ol>"},{"location":"modules/#common-patterns-across-modules","title":"Common Patterns Across Modules","text":""},{"location":"modules/#authentication","title":"Authentication","text":"<p>All modules use JWT-based authentication with the Auth module.</p>"},{"location":"modules/#database-access","title":"Database Access","text":"<ul> <li>Multi-tenant architecture with row-level security</li> <li>PostgreSQL as the primary database</li> <li>Redis for caching and real-time features</li> </ul>"},{"location":"modules/#api-design","title":"API Design","text":"<ul> <li>RESTful endpoints following OpenAPI 3.0 specification</li> <li>Consistent error handling and response formats</li> <li>Pagination support for list endpoints</li> <li>Field filtering and sorting capabilities</li> </ul>"},{"location":"modules/#event-system","title":"Event System","text":"<ul> <li>Event-driven architecture for module communication</li> <li>Redis pub/sub for real-time events</li> <li>Celery for async task processing</li> </ul>"},{"location":"modules/#module-dependencies","title":"Module Dependencies","text":"<pre><code>graph TD\n    Auth[Auth Module] --&gt; Orders[Orders Module]\n    Auth --&gt; Staff[Staff Module]\n    Auth --&gt; Customers[Customers Module]\n\n    Menu[Menu Module] --&gt; Orders\n    Inventory[Inventory Module] --&gt; Orders\n    Inventory --&gt; Menu\n\n    Orders --&gt; POS[POS Integration]\n    Orders --&gt; Analytics[Analytics Module]\n\n    Staff --&gt; Payroll[Payroll Module]\n    Payroll --&gt; Tax[Tax Module]\n\n    Customers --&gt; Loyalty[Loyalty Module]\n    Customers --&gt; Feedback[Feedback Module]\n    Customers --&gt; Promotions[Promotions Module]\n\n    Orders --&gt; Loyalty\n    Analytics --&gt; AI[AI Recommendations]\n\n    Settings[Settings Module] -.-&gt; All[All Modules]</code></pre>"},{"location":"modules/#development-guidelines","title":"Development Guidelines","text":""},{"location":"modules/#adding-a-new-module","title":"Adding a New Module","text":"<ol> <li>Create module directory structure</li> <li>Implement core service classes</li> <li>Define API endpoints</li> <li>Create database migrations</li> <li>Write comprehensive tests</li> <li>Document all components</li> </ol>"},{"location":"modules/#module-communication","title":"Module Communication","text":"<ul> <li>Direct API Calls: For synchronous operations</li> <li>Event Bus: For async notifications</li> <li>Shared Database: For tightly coupled data (avoid when possible)</li> <li>Message Queue: For background processing</li> </ul>"},{"location":"modules/#testing-modules","title":"Testing Modules","text":"<p>Each module includes: - Unit tests for business logic - Integration tests for API endpoints - Performance tests for critical paths - Mock implementations for dependencies</p>"},{"location":"modules/#contributing","title":"Contributing","text":"<p>When contributing to module documentation: 1. Follow the established structure 2. Include code examples 3. Add diagrams for complex flows 4. Keep API documentation up-to-date 5. Document breaking changes</p>"},{"location":"modules/#support","title":"Support","text":"<p>For module-specific questions: - Check the module's README first - Review the examples folder - Consult the integration guide - Contact the module maintainer (listed in each README)</p> <p>Last Updated: January 2025</p>"},{"location":"modules/menu/","title":"Menu Module","text":""},{"location":"modules/menu/#overview","title":"Overview","text":"<p>The Menu module manages all aspects of restaurant menus including items, categories, modifiers, pricing, and availability. It provides a flexible system for creating complex menu structures with support for variations, dietary information, and multi-location management.</p>"},{"location":"modules/menu/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udccb Hierarchical Menu Structure: Categories, subcategories, and items</li> <li>\ud83c\udf9b\ufe0f Dynamic Pricing: Time-based, location-based, and promotional pricing</li> <li>\ud83e\udd58 Modifier Management: Customizable options and add-ons</li> <li>\ud83c\udf7d\ufe0f Dietary Information: Allergens, nutritional data, and dietary tags</li> <li>\ud83d\udcc5 Scheduling: Menu availability by time and day</li> <li>\ud83c\udf0d Multi-location Support: Location-specific menus and pricing</li> <li>\ud83d\udcf8 Image Management: Multiple images per item with CDN support</li> <li>\ud83d\udd04 Version Control: Track menu changes and rollback capability</li> </ul>"},{"location":"modules/menu/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"External Interfaces\"\n        ADMIN[Admin Portal]\n        POS[POS Systems]\n        WEB[Customer Web]\n        MOBILE[Mobile Apps]\n    end\n\n    subgraph \"Menu Service Core\"\n        API[Menu API]\n        BUILDER[Menu Builder]\n        PRICING[Pricing Engine]\n        VALIDATOR[Menu Validator]\n    end\n\n    subgraph \"Integration Layer\"\n        INV_INT[Inventory Service]\n        IMG_INT[Image Service]\n        TRANS[Translation Service]\n    end\n\n    subgraph \"Data Layer\"\n        DB[(PostgreSQL)]\n        CACHE[(Redis Cache)]\n        CDN[CDN Storage]\n    end\n\n    ADMIN --&gt; API\n    POS --&gt; API\n    WEB --&gt; API\n    MOBILE --&gt; API\n\n    API --&gt; BUILDER\n    API --&gt; PRICING\n    API --&gt; VALIDATOR\n\n    BUILDER --&gt; INV_INT\n    BUILDER --&gt; IMG_INT\n    BUILDER --&gt; TRANS\n\n    BUILDER --&gt; DB\n    PRICING --&gt; CACHE\n    IMG_INT --&gt; CDN</code></pre>"},{"location":"modules/menu/#quick-start","title":"Quick Start","text":""},{"location":"modules/menu/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>PostgreSQL 14+</li> <li>Redis 6+</li> <li>S3-compatible storage for images</li> </ul>"},{"location":"modules/menu/#installation","title":"Installation","text":"<pre><code># Navigate to the menu module\ncd backend/modules/menu\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run migrations\nalembic upgrade head\n\n# Start the service\nuvicorn main:app --reload --port 8001\n</code></pre>"},{"location":"modules/menu/#basic-usage","title":"Basic Usage","text":"<pre><code>import requests\n\n# Create a menu category\ncategory_data = {\n    \"name\": \"Appetizers\",\n    \"description\": \"Start your meal with our delicious appetizers\",\n    \"display_order\": 1,\n    \"is_active\": True\n}\n\nresponse = requests.post(\n    \"http://localhost:8001/api/v1/menu/categories\",\n    json=category_data,\n    headers={\"Authorization\": \"Bearer &lt;token&gt;\"}\n)\n\ncategory = response.json()\n\n# Create a menu item\nitem_data = {\n    \"name\": \"Buffalo Wings\",\n    \"description\": \"Crispy chicken wings with buffalo sauce\",\n    \"category_id\": category[\"id\"],\n    \"base_price\": \"12.99\",\n    \"preparation_time_minutes\": 15,\n    \"dietary_info\": {\n        \"calories\": 450,\n        \"is_vegetarian\": False,\n        \"is_gluten_free\": True,\n        \"allergens\": [\"dairy\"]\n    }\n}\n\nitem_response = requests.post(\n    \"http://localhost:8001/api/v1/menu/items\",\n    json=item_data,\n    headers={\"Authorization\": \"Bearer &lt;token&gt;\"}\n)\n</code></pre>"},{"location":"modules/menu/#core-components","title":"Core Components","text":""},{"location":"modules/menu/#1-menu-builder","title":"1. Menu Builder","text":"<p>Constructs complete menu structures with categories, items, and modifiers.</p>"},{"location":"modules/menu/#2-pricing-engine","title":"2. Pricing Engine","text":"<p>Calculates dynamic pricing based on rules, promotions, and location.</p>"},{"location":"modules/menu/#3-availability-manager","title":"3. Availability Manager","text":"<p>Controls when items are available based on schedule and inventory.</p>"},{"location":"modules/menu/#4-modifier-system","title":"4. Modifier System","text":"<p>Manages customization options, add-ons, and variations.</p>"},{"location":"modules/menu/#api-endpoints","title":"API Endpoints","text":"<p>\ud83d\udccc See also: Menu Management in API Reference for complete API documentation.</p>"},{"location":"modules/menu/#menu-categories","title":"Menu Categories","text":"Endpoint Method Description <code>/api/v1/menu/categories</code> GET List all categories <code>/api/v1/menu/categories</code> POST Create category <code>/api/v1/menu/categories/{id}</code> GET Get category details <code>/api/v1/menu/categories/{id}</code> PUT Update category <code>/api/v1/menu/categories/{id}</code> DELETE Delete category"},{"location":"modules/menu/#menu-items","title":"Menu Items","text":"Endpoint Method Description <code>/api/v1/menu/items</code> GET List menu items <code>/api/v1/menu/items</code> POST Create menu item <code>/api/v1/menu/items/{id}</code> GET Get item details <code>/api/v1/menu/items/{id}</code> PUT Update menu item <code>/api/v1/menu/items/{id}</code> DELETE Delete menu item <code>/api/v1/menu/items/{id}/modifiers</code> GET Get item modifiers <code>/api/v1/menu/items/{id}/availability</code> PUT Update availability"},{"location":"modules/menu/#modifiers","title":"Modifiers","text":"Endpoint Method Description <code>/api/v1/menu/modifiers</code> GET List modifiers <code>/api/v1/menu/modifiers</code> POST Create modifier <code>/api/v1/menu/modifier-groups</code> POST Create modifier group <p>View Complete API Reference (Coming Soon)</p>"},{"location":"modules/menu/#menu-structure","title":"Menu Structure","text":"<pre><code>graph TD\n    MENU[Restaurant Menu]\n\n    MENU --&gt; CAT1[Appetizers]\n    MENU --&gt; CAT2[Main Courses]\n    MENU --&gt; CAT3[Desserts]\n    MENU --&gt; CAT4[Beverages]\n\n    CAT1 --&gt; ITEM1[Buffalo Wings]\n    CAT1 --&gt; ITEM2[Nachos]\n\n    ITEM1 --&gt; MOD1[Sauce Options]\n    ITEM1 --&gt; MOD2[Size Options]\n\n    MOD1 --&gt; OPT1[Mild]\n    MOD1 --&gt; OPT2[Medium]\n    MOD1 --&gt; OPT3[Hot]\n\n    MOD2 --&gt; SIZE1[6 pieces]\n    MOD2 --&gt; SIZE2[12 pieces]\n    MOD2 --&gt; SIZE3[24 pieces]</code></pre>"},{"location":"modules/menu/#database-schema","title":"Database Schema","text":""},{"location":"modules/menu/#core-tables","title":"Core Tables","text":"<ul> <li><code>menu_categories</code> - Menu categories and subcategories</li> <li><code>menu_items</code> - Individual menu items</li> <li><code>menu_item_modifiers</code> - Available modifiers for items</li> <li><code>modifier_groups</code> - Grouped modifiers (e.g., sizes, sauces)</li> <li><code>modifier_options</code> - Individual modifier choices</li> <li><code>menu_item_prices</code> - Pricing rules and history</li> <li><code>menu_schedules</code> - Availability schedules</li> <li><code>dietary_info</code> - Nutritional and dietary information</li> </ul> <p>View Complete Schema (Coming Soon)</p>"},{"location":"modules/menu/#pricing-system","title":"Pricing System","text":""},{"location":"modules/menu/#dynamic-pricing-rules","title":"Dynamic Pricing Rules","text":"<pre><code># Example pricing configuration\npricing_rules = {\n    \"base_price\": \"12.99\",\n    \"location_overrides\": {\n        \"downtown\": \"14.99\",\n        \"airport\": \"16.99\"\n    },\n    \"time_based_pricing\": [\n        {\n            \"days\": [\"saturday\", \"sunday\"],\n            \"start_time\": \"17:00\",\n            \"end_time\": \"21:00\",\n            \"price_adjustment\": 1.5  # $1.50 increase\n        }\n    ],\n    \"promotional_pricing\": {\n        \"happy_hour\": {\n            \"start_time\": \"15:00\",\n            \"end_time\": \"18:00\",\n            \"discount_percentage\": 20\n        }\n    }\n}\n</code></pre>"},{"location":"modules/menu/#modifier-system","title":"Modifier System","text":""},{"location":"modules/menu/#modifier-types","title":"Modifier Types","text":"<ol> <li>Single Select: Choose one option (e.g., cooking temperature)</li> <li>Multi Select: Choose multiple options (e.g., toppings)</li> <li>Quantity Based: Select quantity of add-ons</li> <li>Nested Modifiers: Modifiers with sub-options</li> </ol>"},{"location":"modules/menu/#example-configuration","title":"Example Configuration","text":"<pre><code>{\n  \"modifier_group\": {\n    \"name\": \"Pizza Toppings\",\n    \"type\": \"multi_select\",\n    \"min_selections\": 0,\n    \"max_selections\": 5,\n    \"options\": [\n      {\n        \"name\": \"Pepperoni\",\n        \"price\": \"1.50\",\n        \"max_quantity\": 2\n      },\n      {\n        \"name\": \"Extra Cheese\",\n        \"price\": \"2.00\",\n        \"max_quantity\": 3\n      },\n      {\n        \"name\": \"Mushrooms\",\n        \"price\": \"1.00\",\n        \"is_default\": true\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"modules/menu/#integration-points","title":"Integration Points","text":""},{"location":"modules/menu/#inventory-service","title":"Inventory Service","text":"<ul> <li>Check ingredient availability</li> <li>Update stock levels</li> <li>Track usage patterns</li> </ul>"},{"location":"modules/menu/#order-service","title":"Order Service","text":"<ul> <li>Validate menu selections</li> <li>Calculate order totals</li> <li>Apply pricing rules</li> </ul>"},{"location":"modules/menu/#analytics-service","title":"Analytics Service","text":"<ul> <li>Track popular items</li> <li>Monitor pricing effectiveness</li> <li>Analyze modifier trends</li> </ul>"},{"location":"modules/menu/#events","title":"Events","text":"<p>The Menu module publishes the following events:</p> Event Description Payload <code>menu.item.created</code> New menu item added Item details <code>menu.item.updated</code> Menu item modified Changed fields <code>menu.item.availability_changed</code> Item availability updated Item ID, availability <code>menu.price.changed</code> Price updated Item ID, old/new price <code>menu.category.reordered</code> Category order changed Category positions"},{"location":"modules/menu/#configuration","title":"Configuration","text":"<pre><code># config/menu.yaml\nmenu:\n  max_categories_depth: 3\n  max_modifiers_per_item: 10\n  image_size_limits:\n    max_width: 2048\n    max_height: 2048\n    max_file_size_mb: 5\n\ncache:\n  menu_ttl_seconds: 300\n  price_ttl_seconds: 60\n\ncdn:\n  base_url: \"https://cdn.auraconnect.com\"\n  image_formats:\n    - webp\n    - jpg\n    - png\n</code></pre>"},{"location":"modules/menu/#menu-versioning","title":"Menu Versioning","text":"<p>The menu system supports versioning for tracking changes:</p> <pre><code># Get current menu version\ncurrent_version = menu_service.get_current_version()\n\n# Create new version\nnew_version = menu_service.create_version(\n    name=\"Summer Menu 2024\",\n    description=\"Updated menu with seasonal items\"\n)\n\n# Rollback to previous version\nmenu_service.rollback_to_version(version_id=5)\n</code></pre>"},{"location":"modules/menu/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Menu data is heavily cached with 5-minute TTL</li> <li>Popular items are pre-cached during off-peak hours</li> <li>Image resizing happens asynchronously</li> <li>Database queries use materialized views for complex menus</li> </ul>"},{"location":"modules/menu/#security","title":"Security","text":"<ul> <li>Role-based permissions for menu management</li> <li>Audit logs for all menu changes</li> <li>Image upload validation and sanitization</li> <li>Price change approval workflow (optional)</li> </ul>"},{"location":"modules/menu/#testing","title":"Testing","text":"<pre><code># Run unit tests\npytest tests/unit/\n\n# Run integration tests\npytest tests/integration/\n\n# Test menu builder\npytest tests/test_menu_builder.py\n\n# Test pricing engine\npytest tests/test_pricing_engine.py\n</code></pre>"},{"location":"modules/menu/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modules/menu/#common-issues","title":"Common Issues","text":"<ol> <li>Menu Items Not Showing</li> <li>Check item availability schedule</li> <li>Verify category is active</li> <li> <p>Ensure location has item enabled</p> </li> <li> <p>Pricing Incorrect</p> </li> <li>Review pricing rules priority</li> <li>Check cache invalidation</li> <li> <p>Verify promotion dates</p> </li> <li> <p>Images Not Loading</p> </li> <li>Validate CDN configuration</li> <li>Check image processing queue</li> <li>Verify S3 permissions</li> </ol>"},{"location":"modules/menu/#best-practices","title":"Best Practices","text":"<ol> <li>Menu Organization</li> <li>Keep category depth shallow (max 3 levels)</li> <li>Use clear, descriptive names</li> <li> <p>Order items logically</p> </li> <li> <p>Pricing Strategy</p> </li> <li>Set base prices at item level</li> <li>Use location overrides sparingly</li> <li> <p>Test pricing rules thoroughly</p> </li> <li> <p>Modifier Management</p> </li> <li>Group related modifiers</li> <li>Set reasonable limits</li> <li>Provide default selections</li> </ol>"},{"location":"modules/menu/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Details (Coming Soon)</li> <li>API Reference (Coming Soon) </li> <li>Database Schema (Coming Soon)</li> <li>Integration Guide (Coming Soon)</li> <li>Menu Builder Guide (Coming Soon)</li> </ul>"},{"location":"modules/menu/#support","title":"Support","text":"<ul> <li>Module Owner: Menu Team</li> <li>Email: menu-team@auraconnect.com</li> <li>Slack: #menu-module</li> </ul> <p>Last Updated: January 2025</p>"},{"location":"modules/orders/","title":"Orders Module","text":""},{"location":"modules/orders/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Key Features</li> <li>Architecture Overview</li> <li>Quick Start</li> <li>API Endpoints</li> <li>Order States</li> <li>Order Processing</li> <li>Integration Points</li> <li>Events</li> <li>Order Tracking &amp; Notifications</li> <li>Error Handling</li> <li>Performance Optimization</li> <li>Configuration</li> <li>Testing</li> <li>Related Documentation</li> </ol>"},{"location":"modules/orders/#overview","title":"Overview","text":"<p>The Orders module is the central hub for all order-related operations in AuraConnect. It handles order creation, processing, tracking, and fulfillment across multiple channels including dine-in, takeout, delivery, and online ordering.</p>"},{"location":"modules/orders/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udce6 Multi-channel Order Management: Support for dine-in, takeout, delivery, and online orders</li> <li>\ud83c\udf0d Real-time Synchronization: Live updates across all connected devices</li> <li>\ud83c\udf73 Kitchen Integration: Direct communication with kitchen display systems</li> <li>\ud83d\udcb3 Payment Processing: Integrated payment handling with multiple providers</li> <li>\ud83d\udce8 Order Tracking: Real-time status updates with push notifications</li> <li>\ud83d\udcc8 Analytics Integration: Comprehensive order analytics and reporting</li> <li>\ud83d\udd04 POS Synchronization: Bidirectional sync with major POS systems</li> <li>\ud83d\udccb Special Instructions: Support for customer preferences and modifications</li> </ul>"},{"location":"modules/orders/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"External Interfaces\"\n        WEB[Web App]\n        MOBILE[Mobile App]\n        POS_SYS[POS Systems]\n        KITCHEN_DISP[Kitchen Display]\n    end\n\n    subgraph \"Order Service Core\"\n        API[Order API]\n        PROC[Order Processor]\n        VALIDATOR[Order Validator]\n        STATE[State Manager]\n    end\n\n    subgraph \"Integration Layer\"\n        MENU_INT[Menu Service]\n        INV_INT[Inventory Service]\n        PAY_INT[Payment Service]\n        NOTIFY[Notification Service]\n    end\n\n    subgraph \"Data Layer\"\n        DB[(PostgreSQL)]\n        CACHE[(Redis Cache)]\n        QUEUE[Task Queue]\n    end\n\n    WEB --&gt; API\n    MOBILE --&gt; API\n    POS_SYS --&gt; API\n\n    API --&gt; VALIDATOR\n    VALIDATOR --&gt; PROC\n    PROC --&gt; STATE\n\n    PROC --&gt; MENU_INT\n    PROC --&gt; INV_INT\n    PROC --&gt; PAY_INT\n    STATE --&gt; NOTIFY\n\n    STATE --&gt; DB\n    STATE --&gt; CACHE\n    PROC --&gt; QUEUE\n\n    NOTIFY --&gt; KITCHEN_DISP</code></pre>"},{"location":"modules/orders/#quick-start","title":"Quick Start","text":""},{"location":"modules/orders/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>PostgreSQL 14+</li> <li>Redis 6+</li> <li>Access to Menu and Inventory services</li> </ul>"},{"location":"modules/orders/#installation","title":"Installation","text":"<pre><code># Navigate to the orders module\ncd backend/modules/orders\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run migrations\nalembic upgrade head\n\n# Start the service\nuvicorn main:app --reload --port 8002\n</code></pre>"},{"location":"modules/orders/#basic-usage","title":"Basic Usage","text":"<pre><code>import requests\n\n# Create a new order\norder_data = {\n    \"customer_id\": 123,\n    \"location_id\": 1,\n    \"order_type\": \"dine_in\",\n    \"table_number\": \"5\",\n    \"items\": [\n        {\n            \"menu_item_id\": 10,\n            \"quantity\": 2,\n            \"modifiers\": [\"extra_cheese\", \"no_onions\"],\n            \"special_instructions\": \"Well done\"\n        }\n    ]\n}\n\nresponse = requests.post(\n    \"http://localhost:8002/api/v1/orders\",\n    json=order_data,\n    headers={\"Authorization\": \"Bearer &lt;token&gt;\"}\n)\n\norder = response.json()\nprint(f\"Order created: {order['order_number']}\")\n</code></pre>"},{"location":"modules/orders/#core-components","title":"Core Components","text":""},{"location":"modules/orders/#1-order-processor","title":"1. Order Processor","text":"<p>Handles the business logic for order creation, validation, and processing.</p>"},{"location":"modules/orders/#2-state-manager","title":"2. State Manager","text":"<p>Manages order state transitions and ensures consistency across the system.</p>"},{"location":"modules/orders/#3-integration-services","title":"3. Integration Services","text":"<p>Provides seamless integration with Menu, Inventory, and Payment services.</p>"},{"location":"modules/orders/#4-real-time-updates","title":"4. Real-time Updates","text":"<p>Uses Redis pub/sub for live order status updates.</p>"},{"location":"modules/orders/#api-endpoints","title":"API Endpoints","text":"<p>\ud83d\udccc See also: Complete Orders API Reference for detailed endpoint documentation with request/response examples.</p>"},{"location":"modules/orders/#order-management","title":"Order Management","text":"Endpoint Method Description <code>/api/v1/orders</code> GET List orders with filtering <code>/api/v1/orders</code> POST Create new order <code>/api/v1/orders/{id}</code> GET Get order details <code>/api/v1/orders/{id}</code> PUT Update order <code>/api/v1/orders/{id}/status</code> PUT Update order status <code>/api/v1/orders/{id}/cancel</code> POST Cancel order"},{"location":"modules/orders/#order-items","title":"Order Items","text":"Endpoint Method Description <code>/api/v1/orders/{id}/items</code> POST Add items to order <code>/api/v1/orders/{id}/items/{item_id}</code> PUT Update order item <code>/api/v1/orders/{id}/items/{item_id}</code> DELETE Remove order item"},{"location":"modules/orders/#kitchen-integration","title":"Kitchen Integration","text":"Endpoint Method Description <code>/api/v1/kitchen/orders</code> GET Get kitchen queue <code>/api/v1/kitchen/orders/{id}/prepare</code> POST Mark order as preparing <code>/api/v1/kitchen/orders/{id}/ready</code> POST Mark order as ready"},{"location":"modules/orders/#order-tracking","title":"Order Tracking","text":"Endpoint Method Description <code>/api/v1/orders/{id}/track</code> GET Get tracking info <code>/api/v1/orders/track/{code}</code> GET Track by code (no auth) <code>/api/v1/orders/{id}/notifications</code> GET Get notification history <code>/api/v1/orders/{id}/subscribe</code> POST Subscribe to updates <code>/api/v1/orders/{id}/eta</code> GET Get estimated time <p>View Complete API Reference</p>"},{"location":"modules/orders/#order-states","title":"Order States","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Pending: Order Created\n    Pending --&gt; Confirmed: Payment Verified\n    Pending --&gt; Cancelled: Customer Cancel\n\n    Confirmed --&gt; Preparing: Kitchen Start\n    Confirmed --&gt; Cancelled: Restaurant Cancel\n\n    Preparing --&gt; Ready: Kitchen Complete\n    Preparing --&gt; Cancelled: Issue Found\n\n    Ready --&gt; Completed: Customer Pickup\n    Ready --&gt; Completed: Delivered\n\n    Cancelled --&gt; [*]\n    Completed --&gt; [*]</code></pre>"},{"location":"modules/orders/#database-schema","title":"Database Schema","text":""},{"location":"modules/orders/#core-tables","title":"Core Tables","text":"<ul> <li><code>orders</code> - Main order information</li> <li><code>order_items</code> - Individual items in orders</li> <li><code>order_modifiers</code> - Item modifications</li> <li><code>order_status_history</code> - Status change tracking</li> <li><code>order_payments</code> - Payment information</li> </ul> <p>View Complete Schema (Coming Soon)</p>"},{"location":"modules/orders/#integration-points","title":"Integration Points","text":""},{"location":"modules/orders/#menu-service","title":"Menu Service","text":"<ul> <li>Validates menu items and pricing</li> <li>Retrieves item details and modifiers</li> <li>Checks item availability</li> </ul>"},{"location":"modules/orders/#inventory-service","title":"Inventory Service","text":"<ul> <li>Deducts inventory on order confirmation</li> <li>Checks stock availability</li> <li>Updates ingredient usage</li> </ul>"},{"location":"modules/orders/#payment-service","title":"Payment Service","text":"<ul> <li>Processes payments</li> <li>Handles refunds</li> <li>Manages payment methods</li> </ul>"},{"location":"modules/orders/#notification-service","title":"Notification Service","text":"<ul> <li>Sends order confirmations</li> <li>Updates customers on status changes</li> <li>Alerts staff of new orders</li> </ul>"},{"location":"modules/orders/#events","title":"Events","text":"<p>The Orders module publishes the following events:</p> Event Description Payload <code>order.created</code> New order created Order details <code>order.confirmed</code> Order confirmed Order ID, timestamp <code>order.preparing</code> Kitchen started order Order ID, kitchen station <code>order.ready</code> Order ready for pickup Order ID, preparation time <code>order.completed</code> Order fulfilled Order ID, completion time <code>order.cancelled</code> Order cancelled Order ID, reason <code>order.updated</code> Order details updated Order ID, changes <code>order.tracking.viewed</code> Tracking page accessed Order ID, viewer info"},{"location":"modules/orders/#order-tracking-notifications","title":"Order Tracking &amp; Notifications","text":""},{"location":"modules/orders/#real-time-tracking-features","title":"Real-time Tracking Features","text":"<ul> <li>Unique Tracking Codes: Each order gets a shareable tracking code</li> <li>Anonymous Access: Customers can track without login using the code</li> <li>Live Status Updates: WebSocket connections for real-time updates</li> <li>Location Tracking: For delivery orders with driver location</li> <li>ETA Calculation: Dynamic time estimates based on kitchen load</li> </ul>"},{"location":"modules/orders/#notification-channels","title":"Notification Channels","text":"<pre><code># Notification configuration\nnotification_config = {\n    \"channels\": {\n        \"email\": {\n            \"enabled\": True,\n            \"templates\": {\n                \"order_confirmed\": \"order-confirmed.html\",\n                \"order_ready\": \"order-ready.html\",\n                \"order_delivered\": \"order-delivered.html\"\n            }\n        },\n        \"sms\": {\n            \"enabled\": True,\n            \"provider\": \"twilio\",\n            \"from_number\": \"+1234567890\"\n        },\n        \"push\": {\n            \"enabled\": True,\n            \"providers\": [\"firebase\", \"apns\"],\n            \"priority\": \"high\"\n        },\n        \"whatsapp\": {\n            \"enabled\": True,\n            \"business_number\": \"+1234567890\"\n        }\n    }\n}\n</code></pre>"},{"location":"modules/orders/#websocket-integration","title":"WebSocket Integration","text":"<pre><code>// Customer connects to track order\nconst ws = new WebSocket(`wss://api.restaurant.com/ws/orders/${orderId}/track`);\n\nws.onmessage = (event) =&gt; {\n    const update = JSON.parse(event.data);\n    switch(update.type) {\n        case 'status_changed':\n            updateOrderStatus(update.status);\n            break;\n        case 'location_update':\n            updateDriverLocation(update.location);\n            break;\n        case 'eta_changed':\n            updateEstimatedTime(update.eta);\n            break;\n    }\n};\n</code></pre>"},{"location":"modules/orders/#tracking-page-features","title":"Tracking Page Features","text":"<pre><code># Tracking page data\ntracking_info = {\n    \"order_id\": \"ORD-123456\",\n    \"tracking_code\": \"TRK-ABC123\",\n    \"status\": \"preparing\",\n    \"status_history\": [\n        {\"status\": \"confirmed\", \"timestamp\": \"2024-01-20T10:30:00Z\"},\n        {\"status\": \"preparing\", \"timestamp\": \"2024-01-20T10:35:00Z\"}\n    ],\n    \"estimated_ready_time\": \"2024-01-20T11:00:00Z\",\n    \"items\": [\n        {\"name\": \"Margherita Pizza\", \"quantity\": 1},\n        {\"name\": \"Caesar Salad\", \"quantity\": 2}\n    ],\n    \"restaurant\": {\n        \"name\": \"Pizza Palace\",\n        \"phone\": \"(555) 123-4567\",\n        \"address\": \"123 Main St\"\n    },\n    \"delivery_info\": {\n        \"driver\": {\"name\": \"John D.\", \"phone\": \"(555) 987-6543\"},\n        \"current_location\": {\"lat\": 40.7128, \"lng\": -74.0060},\n        \"estimated_arrival\": \"2024-01-20T11:30:00Z\"\n    }\n}\n</code></pre>"},{"location":"modules/orders/#push-notification-examples","title":"Push Notification Examples","text":"<pre><code>{\n    \"order_confirmed\": {\n        \"title\": \"Order Confirmed! \ud83c\udf89\",\n        \"body\": \"Your order #12345 has been confirmed and will be ready in ~30 minutes\",\n        \"icon\": \"/icon-192.png\",\n        \"badge\": \"/badge-72.png\",\n        \"data\": {\n            \"order_id\": \"12345\",\n            \"tracking_url\": \"/track/TRK-ABC123\"\n        }\n    },\n    \"order_ready\": {\n        \"title\": \"Your order is ready! \ud83c\udf55\",\n        \"body\": \"Order #12345 is ready for pickup\",\n        \"actions\": [\n            {\"action\": \"view\", \"title\": \"View Order\"},\n            {\"action\": \"directions\", \"title\": \"Get Directions\"}\n        ]\n    }\n}\n\n## Configuration\n\n```yaml\n# config/orders.yaml\norders:\n  max_items_per_order: 50\n  order_timeout_minutes: 120\n  auto_confirm_enabled: true\n\nintegrations:\n  menu_service_url: \"http://menu-service:8001\"\n  inventory_service_url: \"http://inventory-service:8003\"\n  payment_service_url: \"http://payment-service:8004\"\n\nnotifications:\n  enabled: true\n  channels:\n    - email\n    - sms\n    - push\n</code></pre>"},{"location":"modules/orders/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Orders are cached in Redis for 30 minutes</li> <li>Database queries use proper indexing</li> <li>Bulk operations are processed asynchronously</li> <li>Real-time updates use pub/sub to minimize polling</li> </ul>"},{"location":"modules/orders/#security","title":"Security","text":"<ul> <li>All endpoints require authentication</li> <li>Role-based permissions for order operations</li> <li>PII data is encrypted at rest</li> <li>Audit logs for all order modifications</li> </ul>"},{"location":"modules/orders/#testing","title":"Testing","text":"<pre><code># Run unit tests\npytest tests/unit/\n\n# Run integration tests\npytest tests/integration/\n\n# Run with coverage\npytest --cov=orders tests/\n</code></pre>"},{"location":"modules/orders/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modules/orders/#common-issues","title":"Common Issues","text":"<ol> <li>Order Creation Fails</li> <li>Check menu item availability</li> <li>Verify customer authentication</li> <li> <p>Ensure inventory levels</p> </li> <li> <p>Status Updates Not Reflecting</p> </li> <li>Check Redis connection</li> <li>Verify WebSocket connectivity</li> <li> <p>Review event bus configuration</p> </li> <li> <p>Payment Processing Errors</p> </li> <li>Validate payment service connection</li> <li>Check payment method validity</li> <li>Review transaction logs</li> </ol>"},{"location":"modules/orders/#monitoring","title":"Monitoring","text":"<p>Key metrics to monitor:</p> <ul> <li>Order creation rate</li> <li>Average processing time</li> <li>Order fulfillment rate</li> <li>Error rates by type</li> <li>Payment success rate</li> </ul>"},{"location":"modules/orders/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Details</li> <li>API Reference</li> <li>Database Schema (Coming Soon)</li> <li>Integration Guide (Coming Soon)</li> <li>Examples (Coming Soon)</li> </ul>"},{"location":"modules/orders/#support","title":"Support","text":"<ul> <li>Module Owner: Orders Team</li> <li>Email: orders-team@auraconnect.com</li> <li>Slack: #orders-module</li> </ul> <p>Last Updated: January 2025</p>"},{"location":"modules/orders/api-reference/","title":"Orders Module API Reference","text":""},{"location":"modules/orders/api-reference/#base-url","title":"Base URL","text":"<pre><code>https://api.auraconnect.com/api/v1/orders\n</code></pre>"},{"location":"modules/orders/api-reference/#authentication","title":"Authentication","text":"<p>All endpoints require JWT authentication:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre>"},{"location":"modules/orders/api-reference/#order-management-endpoints","title":"Order Management Endpoints","text":""},{"location":"modules/orders/api-reference/#list-orders","title":"List Orders","text":"<p>Retrieve a paginated list of orders with optional filters.</p> <pre><code>GET /api/v1/orders\n</code></pre>"},{"location":"modules/orders/api-reference/#query-parameters","title":"Query Parameters","text":"Parameter Type Description Default <code>page</code> integer Page number 1 <code>page_size</code> integer Items per page (max 100) 20 <code>status</code> string Filter by order status - <code>customer_id</code> integer Filter by customer - <code>location_id</code> integer Filter by location - <code>order_type</code> string Filter by order type - <code>date_from</code> string Start date (ISO 8601) - <code>date_to</code> string End date (ISO 8601) - <code>search</code> string Search order number or customer - <code>sort_by</code> string Sort field created_at <code>sort_order</code> string Sort direction (asc/desc) desc"},{"location":"modules/orders/api-reference/#response","title":"Response","text":"<pre><code>{\n  \"data\": [\n    {\n      \"id\": 1234,\n      \"order_number\": \"ORD-2024-0001\",\n      \"customer\": {\n        \"id\": 123,\n        \"name\": \"John Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"phone\": \"(555) 123-4567\"\n      },\n      \"location_id\": 1,\n      \"order_type\": \"dine_in\",\n      \"table_number\": \"5\",\n      \"status\": \"confirmed\",\n      \"items_count\": 3,\n      \"subtotal\": \"45.50\",\n      \"tax_amount\": \"4.10\",\n      \"tip_amount\": \"6.82\",\n      \"total_amount\": \"56.42\",\n      \"created_at\": \"2024-01-15T14:30:00Z\",\n      \"updated_at\": \"2024-01-15T14:35:00Z\"\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_pages\": 5,\n    \"total_count\": 98\n  }\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#create-order","title":"Create Order","text":"<p>Create a new order.</p> <pre><code>POST /api/v1/orders\n</code></pre>"},{"location":"modules/orders/api-reference/#request-body","title":"Request Body","text":"<pre><code>{\n  \"customer_id\": 123,\n  \"location_id\": 1,\n  \"order_type\": \"dine_in\",\n  \"table_number\": \"5\",\n  \"items\": [\n    {\n      \"menu_item_id\": 10,\n      \"quantity\": 2,\n      \"modifiers\": [\n        {\n          \"id\": 101,\n          \"name\": \"Extra Cheese\",\n          \"price\": \"1.50\"\n        }\n      ],\n      \"special_instructions\": \"Well done, no onions\"\n    },\n    {\n      \"menu_item_id\": 15,\n      \"quantity\": 1,\n      \"modifiers\": []\n    }\n  ],\n  \"discount_code\": \"SUMMER20\",\n  \"notes\": \"Birthday celebration\"\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#response_1","title":"Response","text":"<pre><code>{\n  \"id\": 1235,\n  \"order_number\": \"ORD-2024-0002\",\n  \"customer\": {\n    \"id\": 123,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n  },\n  \"location_id\": 1,\n  \"order_type\": \"dine_in\",\n  \"table_number\": \"5\",\n  \"status\": \"pending\",\n  \"items\": [\n    {\n      \"id\": 5001,\n      \"menu_item\": {\n        \"id\": 10,\n        \"name\": \"Cheeseburger\",\n        \"price\": \"12.99\"\n      },\n      \"quantity\": 2,\n      \"unit_price\": \"12.99\",\n      \"modifiers\": [\n        {\n          \"id\": 101,\n          \"name\": \"Extra Cheese\",\n          \"price\": \"1.50\"\n        }\n      ],\n      \"subtotal\": \"28.98\",\n      \"special_instructions\": \"Well done, no onions\"\n    },\n    {\n      \"id\": 5002,\n      \"menu_item\": {\n        \"id\": 15,\n        \"name\": \"Caesar Salad\",\n        \"price\": \"9.99\"\n      },\n      \"quantity\": 1,\n      \"unit_price\": \"9.99\",\n      \"modifiers\": [],\n      \"subtotal\": \"9.99\"\n    }\n  ],\n  \"subtotal\": \"38.97\",\n  \"discount\": {\n    \"code\": \"SUMMER20\",\n    \"amount\": \"7.79\",\n    \"percentage\": 20\n  },\n  \"tax_amount\": \"2.80\",\n  \"total_amount\": \"33.98\",\n  \"notes\": \"Birthday celebration\",\n  \"created_at\": \"2024-01-15T15:00:00Z\",\n  \"payment_status\": \"unpaid\",\n  \"preparation_time_minutes\": 20\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#get-order-details","title":"Get Order Details","text":"<p>Retrieve detailed information about a specific order.</p> <pre><code>GET /api/v1/orders/{order_id}\n</code></pre>"},{"location":"modules/orders/api-reference/#path-parameters","title":"Path Parameters","text":"Parameter Type Description <code>order_id</code> integer Order ID"},{"location":"modules/orders/api-reference/#response_2","title":"Response","text":"<pre><code>{\n  \"id\": 1234,\n  \"order_number\": \"ORD-2024-0001\",\n  \"customer\": {\n    \"id\": 123,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"(555) 123-4567\",\n    \"loyalty_points\": 150\n  },\n  \"location\": {\n    \"id\": 1,\n    \"name\": \"Downtown Branch\",\n    \"address\": \"123 Main St\"\n  },\n  \"order_type\": \"dine_in\",\n  \"table_number\": \"5\",\n  \"status\": \"preparing\",\n  \"items\": [\n    {\n      \"id\": 5000,\n      \"menu_item\": {\n        \"id\": 10,\n        \"name\": \"Cheeseburger\",\n        \"category\": \"Burgers\",\n        \"price\": \"12.99\"\n      },\n      \"quantity\": 2,\n      \"unit_price\": \"12.99\",\n      \"modifiers\": [\n        {\n          \"id\": 101,\n          \"name\": \"Extra Cheese\",\n          \"price\": \"1.50\"\n        }\n      ],\n      \"subtotal\": \"28.98\",\n      \"special_instructions\": \"Well done\",\n      \"status\": \"preparing\"\n    }\n  ],\n  \"subtotal\": \"45.50\",\n  \"tax_breakdown\": [\n    {\n      \"name\": \"State Tax\",\n      \"rate\": 0.06,\n      \"amount\": \"2.73\"\n    },\n    {\n      \"name\": \"Local Tax\",\n      \"rate\": 0.03,\n      \"amount\": \"1.37\"\n    }\n  ],\n  \"tax_amount\": \"4.10\",\n  \"tip_amount\": \"6.82\",\n  \"total_amount\": \"56.42\",\n  \"payment\": {\n    \"status\": \"paid\",\n    \"method\": \"credit_card\",\n    \"last_four\": \"4242\",\n    \"transaction_id\": \"ch_1234567890\",\n    \"paid_at\": \"2024-01-15T14:35:00Z\"\n  },\n  \"status_history\": [\n    {\n      \"status\": \"pending\",\n      \"timestamp\": \"2024-01-15T14:30:00Z\",\n      \"user\": \"System\"\n    },\n    {\n      \"status\": \"confirmed\",\n      \"timestamp\": \"2024-01-15T14:31:00Z\",\n      \"user\": \"System\"\n    },\n    {\n      \"status\": \"preparing\",\n      \"timestamp\": \"2024-01-15T14:35:00Z\",\n      \"user\": \"Kitchen Staff\"\n    }\n  ],\n  \"preparation_time_minutes\": 20,\n  \"estimated_ready_time\": \"2024-01-15T14:55:00Z\",\n  \"created_at\": \"2024-01-15T14:30:00Z\",\n  \"updated_at\": \"2024-01-15T14:35:00Z\"\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#update-order","title":"Update Order","text":"<p>Update an existing order (only allowed in certain states).</p> <pre><code>PUT /api/v1/orders/{order_id}\n</code></pre>"},{"location":"modules/orders/api-reference/#path-parameters_1","title":"Path Parameters","text":"Parameter Type Description <code>order_id</code> integer Order ID"},{"location":"modules/orders/api-reference/#request-body_1","title":"Request Body","text":"<pre><code>{\n  \"table_number\": \"7\",\n  \"notes\": \"Customer has allergy to nuts\"\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#response_3","title":"Response","text":"<p>Returns the updated order object.</p>"},{"location":"modules/orders/api-reference/#update-order-status","title":"Update Order Status","text":"<p>Update the status of an order.</p> <pre><code>PUT /api/v1/orders/{order_id}/status\n</code></pre>"},{"location":"modules/orders/api-reference/#path-parameters_2","title":"Path Parameters","text":"Parameter Type Description <code>order_id</code> integer Order ID"},{"location":"modules/orders/api-reference/#request-body_2","title":"Request Body","text":"<pre><code>{\n  \"status\": \"preparing\",\n  \"reason\": \"Kitchen started preparation\",\n  \"estimated_ready_time\": \"2024-01-15T15:20:00Z\"\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#valid-status-transitions","title":"Valid Status Transitions","text":"<ul> <li><code>pending</code> \u2192 <code>confirmed</code>, <code>cancelled</code></li> <li><code>confirmed</code> \u2192 <code>preparing</code>, <code>cancelled</code></li> <li><code>preparing</code> \u2192 <code>ready</code>, <code>cancelled</code></li> <li><code>ready</code> \u2192 <code>completed</code></li> </ul>"},{"location":"modules/orders/api-reference/#response_4","title":"Response","text":"<pre><code>{\n  \"id\": 1234,\n  \"status\": \"preparing\",\n  \"previous_status\": \"confirmed\",\n  \"updated_by\": \"kitchen_user_1\",\n  \"updated_at\": \"2024-01-15T14:35:00Z\",\n  \"estimated_ready_time\": \"2024-01-15T15:20:00Z\"\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#cancel-order","title":"Cancel Order","text":"<p>Cancel an order.</p> <pre><code>POST /api/v1/orders/{order_id}/cancel\n</code></pre>"},{"location":"modules/orders/api-reference/#path-parameters_3","title":"Path Parameters","text":"Parameter Type Description <code>order_id</code> integer Order ID"},{"location":"modules/orders/api-reference/#request-body_3","title":"Request Body","text":"<pre><code>{\n  \"reason\": \"customer_request\",\n  \"notes\": \"Customer changed their mind\",\n  \"refund_amount\": \"33.98\"\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#cancellation-reasons","title":"Cancellation Reasons","text":"<ul> <li><code>customer_request</code> - Customer requested cancellation</li> <li><code>out_of_stock</code> - Items not available</li> <li><code>kitchen_error</code> - Kitchen unable to prepare</li> <li><code>payment_failed</code> - Payment processing failed</li> <li><code>other</code> - Other reason (requires notes)</li> </ul>"},{"location":"modules/orders/api-reference/#response_5","title":"Response","text":"<pre><code>{\n  \"id\": 1234,\n  \"status\": \"cancelled\",\n  \"cancellation\": {\n    \"reason\": \"customer_request\",\n    \"notes\": \"Customer changed their mind\",\n    \"cancelled_by\": \"staff_user_1\",\n    \"cancelled_at\": \"2024-01-15T14:40:00Z\"\n  },\n  \"refund\": {\n    \"amount\": \"33.98\",\n    \"status\": \"processing\",\n    \"transaction_id\": \"rf_1234567890\"\n  }\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#order-items-endpoints","title":"Order Items Endpoints","text":""},{"location":"modules/orders/api-reference/#add-items-to-order","title":"Add Items to Order","text":"<p>Add items to an existing order (only in pending/confirmed status).</p> <pre><code>POST /api/v1/orders/{order_id}/items\n</code></pre>"},{"location":"modules/orders/api-reference/#request-body_4","title":"Request Body","text":"<pre><code>{\n  \"items\": [\n    {\n      \"menu_item_id\": 20,\n      \"quantity\": 1,\n      \"modifiers\": [],\n      \"special_instructions\": \"No ice\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#response_6","title":"Response","text":"<pre><code>{\n  \"added_items\": [\n    {\n      \"id\": 5003,\n      \"menu_item\": {\n        \"id\": 20,\n        \"name\": \"Iced Coffee\",\n        \"price\": \"4.99\"\n      },\n      \"quantity\": 1,\n      \"unit_price\": \"4.99\",\n      \"subtotal\": \"4.99\",\n      \"special_instructions\": \"No ice\"\n    }\n  ],\n  \"order_totals\": {\n    \"subtotal\": \"43.96\",\n    \"tax_amount\": \"3.96\",\n    \"total_amount\": \"47.92\"\n  }\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#update-order-item","title":"Update Order Item","text":"<p>Update an item in an order.</p> <pre><code>PUT /api/v1/orders/{order_id}/items/{item_id}\n</code></pre>"},{"location":"modules/orders/api-reference/#request-body_5","title":"Request Body","text":"<pre><code>{\n  \"quantity\": 3,\n  \"modifiers\": [\n    {\n      \"id\": 102,\n      \"name\": \"Extra Bacon\",\n      \"price\": \"2.00\"\n    }\n  ],\n  \"special_instructions\": \"Extra crispy bacon\"\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#remove-order-item","title":"Remove Order Item","text":"<p>Remove an item from an order.</p> <pre><code>DELETE /api/v1/orders/{order_id}/items/{item_id}\n</code></pre>"},{"location":"modules/orders/api-reference/#kitchen-integration-endpoints","title":"Kitchen Integration Endpoints","text":""},{"location":"modules/orders/api-reference/#get-kitchen-queue","title":"Get Kitchen Queue","text":"<p>Retrieve orders in the kitchen queue.</p> <pre><code>GET /api/v1/kitchen/orders\n</code></pre>"},{"location":"modules/orders/api-reference/#query-parameters_1","title":"Query Parameters","text":"Parameter Type Description Default <code>location_id</code> integer Filter by location Required <code>station</code> string Filter by kitchen station - <code>status</code> array Filter by statuses [confirmed, preparing]"},{"location":"modules/orders/api-reference/#response_7","title":"Response","text":"<pre><code>{\n  \"data\": [\n    {\n      \"id\": 1234,\n      \"order_number\": \"ORD-2024-0001\",\n      \"order_type\": \"dine_in\",\n      \"table_number\": \"5\",\n      \"status\": \"confirmed\",\n      \"priority\": \"normal\",\n      \"items\": [\n        {\n          \"id\": 5000,\n          \"name\": \"Cheeseburger\",\n          \"quantity\": 2,\n          \"modifiers\": [\"Extra Cheese\"],\n          \"special_instructions\": \"Well done\",\n          \"station\": \"grill\"\n        }\n      ],\n      \"created_at\": \"2024-01-15T14:30:00Z\",\n      \"wait_time_minutes\": 5\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#start-order-preparation","title":"Start Order Preparation","text":"<p>Mark an order as being prepared.</p> <pre><code>POST /api/v1/kitchen/orders/{order_id}/prepare\n</code></pre>"},{"location":"modules/orders/api-reference/#request-body_6","title":"Request Body","text":"<pre><code>{\n  \"station\": \"grill\",\n  \"estimated_minutes\": 15,\n  \"chef_id\": 456\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#mark-order-ready","title":"Mark Order Ready","text":"<p>Mark an order as ready for pickup/serving.</p> <pre><code>POST /api/v1/kitchen/orders/{order_id}/ready\n</code></pre>"},{"location":"modules/orders/api-reference/#reporting-endpoints","title":"Reporting Endpoints","text":""},{"location":"modules/orders/api-reference/#order-summary-report","title":"Order Summary Report","text":"<p>Get order summary statistics.</p> <pre><code>GET /api/v1/orders/reports/summary\n</code></pre>"},{"location":"modules/orders/api-reference/#query-parameters_2","title":"Query Parameters","text":"Parameter Type Description Required <code>date_from</code> string Start date Yes <code>date_to</code> string End date Yes <code>location_id</code> integer Filter by location No <code>group_by</code> string Grouping (day/week/month) No"},{"location":"modules/orders/api-reference/#response_8","title":"Response","text":"<pre><code>{\n  \"summary\": {\n    \"total_orders\": 156,\n    \"total_revenue\": \"8945.67\",\n    \"average_order_value\": \"57.34\",\n    \"orders_by_type\": {\n      \"dine_in\": 89,\n      \"takeout\": 45,\n      \"delivery\": 22\n    },\n    \"orders_by_status\": {\n      \"completed\": 145,\n      \"cancelled\": 11\n    }\n  },\n  \"daily_breakdown\": [\n    {\n      \"date\": \"2024-01-15\",\n      \"orders\": 45,\n      \"revenue\": \"2567.89\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#webhooks","title":"Webhooks","text":""},{"location":"modules/orders/api-reference/#order-status-changed","title":"Order Status Changed","text":"<p>Triggered when an order status changes.</p> <pre><code>{\n  \"event\": \"order.status_changed\",\n  \"timestamp\": \"2024-01-15T14:35:00Z\",\n  \"data\": {\n    \"order_id\": 1234,\n    \"order_number\": \"ORD-2024-0001\",\n    \"previous_status\": \"confirmed\",\n    \"new_status\": \"preparing\",\n    \"location_id\": 1\n  }\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#order-created","title":"Order Created","text":"<p>Triggered when a new order is created.</p> <pre><code>{\n  \"event\": \"order.created\",\n  \"timestamp\": \"2024-01-15T14:30:00Z\",\n  \"data\": {\n    \"order_id\": 1234,\n    \"order_number\": \"ORD-2024-0001\",\n    \"customer_id\": 123,\n    \"location_id\": 1,\n    \"total_amount\": \"56.42\"\n  }\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#error-responses","title":"Error Responses","text":""},{"location":"modules/orders/api-reference/#error-format","title":"Error Format","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid request data\",\n    \"details\": [\n      {\n        \"field\": \"items[0].quantity\",\n        \"message\": \"Quantity must be greater than 0\"\n      }\n    ],\n    \"request_id\": \"req_1234567890\"\n  }\n}\n</code></pre>"},{"location":"modules/orders/api-reference/#common-error-codes","title":"Common Error Codes","text":"Code HTTP Status Description <code>UNAUTHORIZED</code> 401 Invalid or missing authentication <code>FORBIDDEN</code> 403 Insufficient permissions <code>NOT_FOUND</code> 404 Order not found <code>VALIDATION_ERROR</code> 400 Invalid request data <code>INVALID_STATE</code> 409 Invalid state transition <code>MENU_ITEM_UNAVAILABLE</code> 400 Menu item not available <code>INSUFFICIENT_INVENTORY</code> 400 Not enough inventory <code>PAYMENT_FAILED</code> 402 Payment processing failed <code>RATE_LIMITED</code> 429 Too many requests <code>INTERNAL_ERROR</code> 500 Internal server error"},{"location":"modules/orders/api-reference/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Default limit: 1000 requests per hour per API key</li> <li>Burst limit: 100 requests per minute</li> <li>Headers returned:</li> <li><code>X-RateLimit-Limit</code>: Request limit</li> <li><code>X-RateLimit-Remaining</code>: Remaining requests</li> <li><code>X-RateLimit-Reset</code>: Reset timestamp</li> </ul>"},{"location":"modules/orders/api-reference/#sdk-examples","title":"SDK Examples","text":""},{"location":"modules/orders/api-reference/#python","title":"Python","text":"<pre><code>from auraconnect import OrdersClient\n\nclient = OrdersClient(api_key=\"your_api_key\")\n\n# Create order\norder = client.orders.create(\n    customer_id=123,\n    location_id=1,\n    order_type=\"dine_in\",\n    items=[\n        {\n            \"menu_item_id\": 10,\n            \"quantity\": 2,\n            \"modifiers\": [{\"id\": 101}]\n        }\n    ]\n)\n\n# Update status\nclient.orders.update_status(\n    order_id=order.id,\n    status=\"preparing\"\n)\n</code></pre>"},{"location":"modules/orders/api-reference/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>import { OrdersClient } from '@auraconnect/sdk';\n\nconst client = new OrdersClient({ apiKey: 'your_api_key' });\n\n// Create order\nconst order = await client.orders.create({\n  customerId: 123,\n  locationId: 1,\n  orderType: 'dine_in',\n  items: [\n    {\n      menuItemId: 10,\n      quantity: 2,\n      modifiers: [{ id: 101 }]\n    }\n  ]\n});\n\n// Listen for updates\nclient.orders.onStatusChange(order.id, (status) =&gt; {\n  console.log(`Order ${order.orderNumber} is now ${status}`);\n});\n</code></pre> <p>Last Updated: January 2025</p>"},{"location":"modules/orders/architecture/","title":"Orders Module Architecture","text":""},{"location":"modules/orders/architecture/#overview","title":"Overview","text":"<p>The Orders module follows a domain-driven design (DDD) approach with clear separation between the API layer, business logic, and data persistence. It's designed for high throughput, real-time updates, and seamless integration with other AuraConnect modules.</p>"},{"location":"modules/orders/architecture/#architecture-principles","title":"Architecture Principles","text":"<ol> <li>Event-Driven: All state changes trigger events for real-time updates</li> <li>Idempotent Operations: Safe retry mechanisms for critical operations</li> <li>Eventual Consistency: Asynchronous updates for non-critical paths</li> <li>Fault Tolerance: Graceful degradation when dependencies are unavailable</li> <li>Scalability: Horizontal scaling support through stateless design</li> </ol>"},{"location":"modules/orders/architecture/#system-components","title":"System Components","text":""},{"location":"modules/orders/architecture/#1-api-layer","title":"1. API Layer","text":"<pre><code>graph LR\n    subgraph \"API Gateway\"\n        NGINX[Nginx]\n        AUTH[Auth Middleware]\n        RATE[Rate Limiter]\n    end\n\n    subgraph \"Order API\"\n        ROUTES[FastAPI Routes]\n        VALID[Request Validator]\n        SERIAL[Serializers]\n    end\n\n    subgraph \"Business Logic\"\n        SVC[Order Service]\n        PROC[Order Processor]\n        STATE[State Machine]\n    end\n\n    NGINX --&gt; AUTH\n    AUTH --&gt; RATE\n    RATE --&gt; ROUTES\n    ROUTES --&gt; VALID\n    VALID --&gt; SERIAL\n    SERIAL --&gt; SVC\n    SVC --&gt; PROC\n    PROC --&gt; STATE</code></pre>"},{"location":"modules/orders/architecture/#2-core-services","title":"2. Core Services","text":""},{"location":"modules/orders/architecture/#order-service","title":"Order Service","text":"<pre><code>class OrderService:\n    def __init__(self, \n                 order_repo: OrderRepository,\n                 menu_client: MenuServiceClient,\n                 inventory_client: InventoryServiceClient,\n                 payment_client: PaymentServiceClient):\n        self.order_repo = order_repo\n        self.menu_client = menu_client\n        self.inventory_client = inventory_client\n        self.payment_client = payment_client\n\n    async def create_order(self, order_data: OrderCreate) -&gt; Order:\n        # Validate menu items\n        # Check inventory\n        # Calculate pricing\n        # Create order\n        # Publish event\n        pass\n</code></pre>"},{"location":"modules/orders/architecture/#state-management","title":"State Management","text":"<pre><code>class OrderStateMachine:\n    TRANSITIONS = {\n        OrderStatus.PENDING: [OrderStatus.CONFIRMED, OrderStatus.CANCELLED],\n        OrderStatus.CONFIRMED: [OrderStatus.PREPARING, OrderStatus.CANCELLED],\n        OrderStatus.PREPARING: [OrderStatus.READY, OrderStatus.CANCELLED],\n        OrderStatus.READY: [OrderStatus.COMPLETED],\n        OrderStatus.COMPLETED: [],\n        OrderStatus.CANCELLED: []\n    }\n\n    def transition(self, order: Order, new_status: OrderStatus) -&gt; Order:\n        if new_status not in self.TRANSITIONS[order.status]:\n            raise InvalidStateTransition()\n\n        order.status = new_status\n        order.status_history.append(StatusChange(\n            from_status=order.status,\n            to_status=new_status,\n            timestamp=datetime.utcnow()\n        ))\n\n        return order\n</code></pre>"},{"location":"modules/orders/architecture/#3-data-layer","title":"3. Data Layer","text":""},{"location":"modules/orders/architecture/#repository-pattern","title":"Repository Pattern","text":"<pre><code>class OrderRepository:\n    def __init__(self, db: Database, cache: Redis):\n        self.db = db\n        self.cache = cache\n\n    async def create(self, order: Order) -&gt; Order:\n        # Save to database\n        # Update cache\n        # Return created order\n        pass\n\n    async def get_by_id(self, order_id: int) -&gt; Optional[Order]:\n        # Check cache first\n        # Fallback to database\n        # Update cache if found\n        pass\n</code></pre>"},{"location":"modules/orders/architecture/#database-schema","title":"Database Schema","text":"<pre><code>-- Orders table\nCREATE TABLE orders (\n    id SERIAL PRIMARY KEY,\n    tenant_id INTEGER NOT NULL,\n    order_number VARCHAR(50) UNIQUE NOT NULL,\n    customer_id INTEGER,\n    location_id INTEGER NOT NULL,\n    order_type VARCHAR(20) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    subtotal DECIMAL(10,2) NOT NULL,\n    tax_amount DECIMAL(10,2) NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),\n    FOREIGN KEY (tenant_id) REFERENCES tenants(id),\n    FOREIGN KEY (customer_id) REFERENCES customers(id),\n    FOREIGN KEY (location_id) REFERENCES locations(id)\n);\n\n-- Indexes for performance\nCREATE INDEX idx_orders_tenant_status ON orders(tenant_id, status);\nCREATE INDEX idx_orders_created_at ON orders(created_at DESC);\nCREATE INDEX idx_orders_customer ON orders(customer_id);\n</code></pre>"},{"location":"modules/orders/architecture/#4-event-system","title":"4. Event System","text":"<pre><code>graph TD\n    subgraph \"Order Events\"\n        CREATE[order.created]\n        UPDATE[order.updated]\n        STATUS[order.status_changed]\n    end\n\n    subgraph \"Event Bus\"\n        REDIS[Redis Pub/Sub]\n        CELERY[Celery Tasks]\n    end\n\n    subgraph \"Subscribers\"\n        KITCHEN[Kitchen Service]\n        INVENTORY[Inventory Service]\n        ANALYTICS[Analytics Service]\n        NOTIFY[Notification Service]\n    end\n\n    CREATE --&gt; REDIS\n    UPDATE --&gt; REDIS\n    STATUS --&gt; REDIS\n\n    REDIS --&gt; KITCHEN\n    REDIS --&gt; INVENTORY\n    REDIS --&gt; ANALYTICS\n    REDIS --&gt; NOTIFY\n\n    STATUS --&gt; CELERY\n    CELERY --&gt; INVENTORY</code></pre>"},{"location":"modules/orders/architecture/#event-publishing","title":"Event Publishing","text":"<pre><code>class OrderEventPublisher:\n    def __init__(self, redis_client: Redis):\n        self.redis = redis_client\n\n    async def publish_order_created(self, order: Order):\n        event = {\n            \"event_type\": \"order.created\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"data\": {\n                \"order_id\": order.id,\n                \"order_number\": order.order_number,\n                \"customer_id\": order.customer_id,\n                \"total_amount\": str(order.total_amount),\n                \"items\": [item.dict() for item in order.items]\n            }\n        }\n\n        await self.redis.publish(\n            f\"orders:{order.tenant_id}\",\n            json.dumps(event)\n        )\n</code></pre>"},{"location":"modules/orders/architecture/#5-integration-architecture","title":"5. Integration Architecture","text":"<pre><code>graph TB\n    subgraph \"Orders Module\"\n        ORDER_API[Order API]\n        ORDER_SVC[Order Service]\n        ORDER_DB[(Order DB)]\n    end\n\n    subgraph \"External Services\"\n        MENU[Menu Service]\n        INV[Inventory Service]\n        PAY[Payment Service]\n        CUST[Customer Service]\n    end\n\n    subgraph \"Integration Layer\"\n        CLIENT[Service Clients]\n        CIRCUIT[Circuit Breaker]\n        RETRY[Retry Logic]\n    end\n\n    ORDER_SVC --&gt; CLIENT\n    CLIENT --&gt; CIRCUIT\n    CIRCUIT --&gt; RETRY\n\n    RETRY --&gt; MENU\n    RETRY --&gt; INV\n    RETRY --&gt; PAY\n    RETRY --&gt; CUST</code></pre>"},{"location":"modules/orders/architecture/#service-client-example","title":"Service Client Example","text":"<pre><code>class MenuServiceClient:\n    def __init__(self, base_url: str, timeout: int = 5):\n        self.base_url = base_url\n        self.timeout = timeout\n        self.circuit_breaker = CircuitBreaker(\n            failure_threshold=5,\n            recovery_timeout=30\n        )\n\n    @retry(max_attempts=3, backoff=exponential_backoff)\n    async def validate_items(self, items: List[OrderItem]) -&gt; ValidationResult:\n        if not self.circuit_breaker.is_closed():\n            raise ServiceUnavailable(\"Menu service is unavailable\")\n\n        try:\n            response = await httpx.post(\n                f\"{self.base_url}/validate\",\n                json={\"items\": [item.dict() for item in items]},\n                timeout=self.timeout\n            )\n            response.raise_for_status()\n            return ValidationResult(**response.json())\n        except Exception as e:\n            self.circuit_breaker.record_failure()\n            raise\n</code></pre>"},{"location":"modules/orders/architecture/#6-caching-strategy","title":"6. Caching Strategy","text":"<pre><code>graph LR\n    subgraph \"Cache Layers\"\n        L1[Application Cache]\n        L2[Redis Cache]\n        L3[Database]\n    end\n\n    subgraph \"Cache Patterns\"\n        ASIDE[Cache Aside]\n        THROUGH[Write Through]\n        BEHIND[Write Behind]\n    end\n\n    REQUEST[API Request] --&gt; L1\n    L1 --&gt;|Miss| L2\n    L2 --&gt;|Miss| L3\n\n    L3 --&gt;|Data| L2\n    L2 --&gt;|Data| L1\n    L1 --&gt;|Response| REQUEST\n\n    ASIDE --&gt; L1\n    THROUGH --&gt; L2\n    BEHIND --&gt; L3</code></pre>"},{"location":"modules/orders/architecture/#cache-implementation","title":"Cache Implementation","text":"<pre><code>class OrderCache:\n    def __init__(self, redis: Redis, ttl: int = 1800):\n        self.redis = redis\n        self.ttl = ttl\n\n    async def get(self, order_id: int) -&gt; Optional[Order]:\n        key = f\"order:{order_id}\"\n        data = await self.redis.get(key)\n\n        if data:\n            return Order.parse_raw(data)\n        return None\n\n    async def set(self, order: Order):\n        key = f\"order:{order.id}\"\n        await self.redis.setex(\n            key,\n            self.ttl,\n            order.json()\n        )\n\n    async def invalidate(self, order_id: int):\n        key = f\"order:{order_id}\"\n        await self.redis.delete(key)\n</code></pre>"},{"location":"modules/orders/architecture/#7-performance-optimization","title":"7. Performance Optimization","text":""},{"location":"modules/orders/architecture/#database-query-optimization","title":"Database Query Optimization","text":"<pre><code>class OptimizedOrderQueries:\n    @staticmethod\n    def get_orders_with_items(db: Database, filters: OrderFilters):\n        # Use single query with joins instead of N+1\n        query = \"\"\"\n        SELECT \n            o.*,\n            json_agg(\n                json_build_object(\n                    'id', oi.id,\n                    'menu_item_id', oi.menu_item_id,\n                    'quantity', oi.quantity,\n                    'price', oi.price,\n                    'modifiers', oi.modifiers\n                ) ORDER BY oi.id\n            ) as items\n        FROM orders o\n        LEFT JOIN order_items oi ON o.id = oi.order_id\n        WHERE o.tenant_id = :tenant_id\n        \"\"\"\n\n        # Add dynamic filters\n        if filters.status:\n            query += \" AND o.status = :status\"\n        if filters.date_from:\n            query += \" AND o.created_at &gt;= :date_from\"\n\n        query += \" GROUP BY o.id ORDER BY o.created_at DESC\"\n\n        return db.fetch_all(query, filters.dict())\n</code></pre>"},{"location":"modules/orders/architecture/#async-processing","title":"Async Processing","text":"<pre><code>@app.post(\"/api/v1/orders\")\nasync def create_order(order_data: OrderCreate):\n    # Quick validation and order creation\n    order = await order_service.create_order(order_data)\n\n    # Async tasks for non-critical operations\n    background_tasks.add_task(\n        inventory_service.reserve_items,\n        order.items\n    )\n\n    background_tasks.add_task(\n        notification_service.send_confirmation,\n        order\n    )\n\n    background_tasks.add_task(\n        analytics_service.track_order,\n        order\n    )\n\n    return order\n</code></pre>"},{"location":"modules/orders/architecture/#8-monitoring-and-observability","title":"8. Monitoring and Observability","text":"<pre><code># Metrics collection\nfrom prometheus_client import Counter, Histogram, Gauge\n\norder_created_counter = Counter(\n    'orders_created_total',\n    'Total number of orders created',\n    ['order_type', 'location']\n)\n\norder_processing_time = Histogram(\n    'order_processing_seconds',\n    'Time spent processing orders',\n    ['operation']\n)\n\nactive_orders_gauge = Gauge(\n    'orders_active',\n    'Number of active orders',\n    ['status']\n)\n\n# Usage\n@order_processing_time.labels(operation='create').time()\nasync def create_order(order_data: OrderCreate) -&gt; Order:\n    order = await process_order(order_data)\n\n    order_created_counter.labels(\n        order_type=order.order_type,\n        location=order.location_id\n    ).inc()\n\n    active_orders_gauge.labels(\n        status=order.status\n    ).inc()\n\n    return order\n</code></pre>"},{"location":"modules/orders/architecture/#9-security-considerations","title":"9. Security Considerations","text":""},{"location":"modules/orders/architecture/#input-validation","title":"Input Validation","text":"<pre><code>class OrderValidator:\n    def validate_order_items(self, items: List[OrderItemCreate]):\n        if not items:\n            raise ValidationError(\"Order must contain at least one item\")\n\n        if len(items) &gt; MAX_ITEMS_PER_ORDER:\n            raise ValidationError(f\"Order cannot exceed {MAX_ITEMS_PER_ORDER} items\")\n\n        for item in items:\n            if item.quantity &lt;= 0:\n                raise ValidationError(\"Item quantity must be positive\")\n\n            if item.quantity &gt; MAX_ITEM_QUANTITY:\n                raise ValidationError(f\"Item quantity cannot exceed {MAX_ITEM_QUANTITY}\")\n</code></pre>"},{"location":"modules/orders/architecture/#authorization","title":"Authorization","text":"<pre><code>class OrderAuthorization:\n    def can_view_order(self, user: User, order: Order) -&gt; bool:\n        # Admin can view all orders\n        if user.role == UserRole.ADMIN:\n            return True\n\n        # Staff can view orders from their location\n        if user.role == UserRole.STAFF:\n            return order.location_id in user.location_ids\n\n        # Customers can view their own orders\n        if user.role == UserRole.CUSTOMER:\n            return order.customer_id == user.customer_id\n\n        return False\n</code></pre>"},{"location":"modules/orders/architecture/#10-deployment-architecture","title":"10. Deployment Architecture","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  orders-api:\n    build: ./modules/orders\n    environment:\n      - DATABASE_URL=postgresql://user:pass@postgres:5432/orders\n      - REDIS_URL=redis://redis:6379/0\n      - MENU_SERVICE_URL=http://menu-api:8001\n      - INVENTORY_SERVICE_URL=http://inventory-api:8003\n    ports:\n      - \"8002:8000\"\n    depends_on:\n      - postgres\n      - redis\n    deploy:\n      replicas: 3\n      resources:\n        limits:\n          cpus: '0.5'\n          memory: 512M\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n</code></pre>"},{"location":"modules/orders/architecture/#architecture-decision-records-adrs","title":"Architecture Decision Records (ADRs)","text":""},{"location":"modules/orders/architecture/#adr-001-event-driven-architecture","title":"ADR-001: Event-Driven Architecture","text":"<p>Decision: Use event-driven architecture for order state changes Rationale: Enables real-time updates, loose coupling, and scalability</p>"},{"location":"modules/orders/architecture/#adr-002-cqrs-pattern","title":"ADR-002: CQRS Pattern","text":"<p>Decision: Separate read and write models for orders Rationale: Optimizes performance for different access patterns</p>"},{"location":"modules/orders/architecture/#adr-003-saga-pattern-for-distributed-transactions","title":"ADR-003: Saga Pattern for Distributed Transactions","text":"<p>Decision: Use saga pattern for multi-service operations Rationale: Maintains consistency without distributed transactions</p>"},{"location":"modules/orders/architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>API Reference</li> <li>Database Schema (Coming Soon)</li> <li>Integration Guide (Coming Soon)</li> <li>Performance Guide</li> </ul> <p>Last Updated: January 2025</p>"},{"location":"modules/payments/","title":"Payments Module","text":""},{"location":"modules/payments/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Key Features</li> <li>Architecture Overview</li> <li>Quick Start</li> <li>Core Components</li> <li>API Endpoints</li> <li>Payment Gateway Integration</li> <li>Split Bill Management</li> <li>Refund Processing</li> <li>Tip Management</li> <li>Security Features</li> <li>Webhook Handling</li> <li>Testing</li> <li>Configuration</li> <li>Troubleshooting</li> <li>Related Documentation</li> </ol>"},{"location":"modules/payments/#overview","title":"Overview","text":"<p>The Payments module provides a comprehensive payment processing system with multi-gateway support, split bill functionality, refund management, and tip distribution. It integrates seamlessly with orders, payroll, and accounting systems.</p>"},{"location":"modules/payments/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udcb3 Multi-Gateway Support: Stripe, Square, PayPal integration</li> <li>\ud83d\udd04 Unified Payment Interface: Consistent API across all gateways</li> <li>\ud83d\udcf1 Split Bill Management: Flexible bill splitting with multiple methods</li> <li>\ud83d\udcb0 Refund Processing: Automated refund workflow with approval rules</li> <li>\ud83d\udcb5 Tip Management: Calculation and distribution to staff</li> <li>\ud83d\udd10 PCI Compliance: Token-based secure payment processing</li> <li>\ud83d\udd04 Webhook Integration: Real-time payment status updates</li> <li>\ud83d\udcca Analytics: Payment metrics and reporting</li> </ul>"},{"location":"modules/payments/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Payment Interfaces\"\n        POS[POS System]\n        WEB[Web App]\n        MOBILE[Mobile App]\n        KIOSK[Self-Service Kiosk]\n    end\n\n    subgraph \"Payment Service Core\"\n        API[Payment API]\n        PROCESSOR[Payment Processor]\n        GATEWAY[Gateway Manager]\n        SPLIT[Split Bill Engine]\n        REFUND[Refund Manager]\n    end\n\n    subgraph \"External Gateways\"\n        STRIPE[Stripe]\n        SQUARE[Square]\n        PAYPAL[PayPal]\n    end\n\n    subgraph \"Integration Layer\"\n        ORDER[Order Service]\n        PAYROLL[Payroll Service]\n        NOTIFY[Notification Service]\n    end\n\n    subgraph \"Data Layer\"\n        DB[(PostgreSQL)]\n        CACHE[(Redis Cache)]\n        QUEUE[Task Queue]\n    end\n\n    POS --&gt; API\n    WEB --&gt; API\n    MOBILE --&gt; API\n    KIOSK --&gt; API\n\n    API --&gt; PROCESSOR\n    PROCESSOR --&gt; GATEWAY\n    API --&gt; SPLIT\n    API --&gt; REFUND\n\n    GATEWAY --&gt; STRIPE\n    GATEWAY --&gt; SQUARE\n    GATEWAY --&gt; PAYPAL\n\n    PROCESSOR --&gt; ORDER\n    SPLIT --&gt; PAYROLL\n    REFUND --&gt; NOTIFY\n\n    PROCESSOR --&gt; DB\n    GATEWAY --&gt; CACHE\n    REFUND --&gt; QUEUE</code></pre>"},{"location":"modules/payments/#quick-start","title":"Quick Start","text":""},{"location":"modules/payments/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>PostgreSQL 14+</li> <li>Redis 6+</li> <li>Payment gateway credentials (Stripe, Square, or PayPal)</li> </ul>"},{"location":"modules/payments/#installation","title":"Installation","text":"<pre><code># Navigate to the payments module\ncd backend/modules/payments\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run migrations\nalembic upgrade head\n\n# Configure payment gateways\nexport STRIPE_API_KEY=\"your_stripe_key\"\nexport SQUARE_ACCESS_TOKEN=\"your_square_token\"\nexport PAYPAL_CLIENT_ID=\"your_paypal_client_id\"\n\n# Start the service\nuvicorn main:app --reload --port 8008\n</code></pre>"},{"location":"modules/payments/#basic-usage","title":"Basic Usage","text":"<pre><code>import requests\n\n# Create a payment\npayment_data = {\n    \"order_id\": 123,\n    \"amount\": 45.99,\n    \"currency\": \"USD\",\n    \"gateway\": \"stripe\",\n    \"payment_method\": {\n        \"type\": \"card\",\n        \"token\": \"tok_visa\"\n    }\n}\n\nresponse = requests.post(\n    \"http://localhost:8008/api/v1/payments\",\n    json=payment_data,\n    headers={\"Authorization\": \"Bearer &lt;token&gt;\"}\n)\n\npayment = response.json()\n\n# Split a bill\nsplit_data = {\n    \"order_id\": 123,\n    \"split_method\": \"equal\",\n    \"participant_count\": 4,\n    \"include_tip\": True,\n    \"tip_percentage\": 18\n}\n\nsplit_response = requests.post(\n    \"http://localhost:8008/api/v1/payments/split\",\n    json=split_data,\n    headers={\"Authorization\": \"Bearer &lt;token&gt;\"}\n)\n</code></pre>"},{"location":"modules/payments/#core-components","title":"Core Components","text":""},{"location":"modules/payments/#1-payment-processor","title":"1. Payment Processor","text":"<p>Handles payment creation, capture, and cancellation across all gateways.</p> <pre><code>class PaymentProcessor:\n    def create_payment(self, \n                      amount: Decimal, \n                      gateway: PaymentGateway,\n                      payment_method: PaymentMethod) -&gt; Payment:\n        # Validate payment data\n        # Select appropriate gateway\n        # Process payment with idempotency\n        # Handle gateway response\n        # Update payment status\n        pass\n</code></pre>"},{"location":"modules/payments/#2-gateway-manager","title":"2. Gateway Manager","text":"<p>Manages multiple payment gateway integrations with a unified interface.</p> <pre><code>class GatewayManager:\n    def get_gateway(self, gateway_type: str) -&gt; PaymentGateway:\n        # Return configured gateway instance\n        pass\n\n    def process_payment(self, \n                       gateway: PaymentGateway,\n                       payment_data: dict) -&gt; GatewayResponse:\n        # Process payment through selected gateway\n        pass\n</code></pre>"},{"location":"modules/payments/#3-split-bill-engine","title":"3. Split Bill Engine","text":"<p>Handles complex bill splitting scenarios.</p> <pre><code>class SplitBillEngine:\n    def create_split(self,\n                    order: Order,\n                    method: SplitMethod,\n                    participants: List[Participant]) -&gt; BillSplit:\n        # Calculate individual amounts\n        # Create participant entries\n        # Generate payment links\n        # Track payment status\n        pass\n</code></pre>"},{"location":"modules/payments/#api-endpoints","title":"API Endpoints","text":"<p>\ud83d\udccc See also: Payment Processing in API Reference for complete API documentation.</p>"},{"location":"modules/payments/#payment-management","title":"Payment Management","text":"Endpoint Method Description <code>/api/v1/payments</code> POST Create payment <code>/api/v1/payments/{id}</code> GET Get payment details <code>/api/v1/payments/{id}/capture</code> POST Capture authorized payment <code>/api/v1/payments/{id}/cancel</code> POST Cancel payment <code>/api/v1/payments/methods</code> GET List saved payment methods <code>/api/v1/payments/methods</code> POST Save payment method"},{"location":"modules/payments/#split-bill-management","title":"Split Bill Management","text":"Endpoint Method Description <code>/api/v1/payments/split</code> POST Create bill split <code>/api/v1/payments/split/{id}</code> GET Get split details <code>/api/v1/payments/split/{id}/participants</code> GET List participants <code>/api/v1/payments/split/{token}/accept</code> POST Accept split invitation <code>/api/v1/payments/split/{token}/pay</code> POST Pay split portion"},{"location":"modules/payments/#refund-management","title":"Refund Management","text":"Endpoint Method Description <code>/api/v1/payments/refunds</code> POST Create refund request <code>/api/v1/payments/refunds/{id}</code> GET Get refund details <code>/api/v1/payments/refunds/{id}/approve</code> POST Approve refund <code>/api/v1/payments/refunds/{id}/process</code> POST Process refund"},{"location":"modules/payments/#payment-gateway-integration","title":"Payment Gateway Integration","text":""},{"location":"modules/payments/#supported-gateways","title":"Supported Gateways","text":"<ol> <li>Stripe</li> <li>Card payments</li> <li>Digital wallets</li> <li>Bank transfers</li> <li> <p>Recurring payments</p> </li> <li> <p>Square</p> </li> <li>In-person payments</li> <li>Online payments</li> <li>Gift cards</li> <li> <p>Loyalty integration</p> </li> <li> <p>PayPal</p> </li> <li>PayPal checkout</li> <li>Venmo</li> <li>PayPal Credit</li> <li>International payments</li> </ol>"},{"location":"modules/payments/#gateway-configuration","title":"Gateway Configuration","text":"<pre><code># config/payments.yaml\npayments:\n  gateways:\n    stripe:\n      api_key: ${STRIPE_API_KEY}\n      webhook_secret: ${STRIPE_WEBHOOK_SECRET}\n      capture_method: \"manual\"\n\n    square:\n      access_token: ${SQUARE_ACCESS_TOKEN}\n      location_id: ${SQUARE_LOCATION_ID}\n      environment: \"production\"\n\n    paypal:\n      client_id: ${PAYPAL_CLIENT_ID}\n      client_secret: ${PAYPAL_CLIENT_SECRET}\n      mode: \"live\"\n</code></pre>"},{"location":"modules/payments/#split-bill-management_1","title":"Split Bill Management","text":""},{"location":"modules/payments/#split-methods","title":"Split Methods","text":"<ol> <li>Equal Split: Divide total equally among participants</li> <li>Percentage Split: Assign percentage to each participant</li> <li>Amount Split: Specify exact amount per participant</li> <li>Item-Based Split: Assign specific items to participants</li> <li>Custom Split: Manual allocation with validation</li> </ol>"},{"location":"modules/payments/#split-bill-workflow","title":"Split Bill Workflow","text":"<pre><code>graph LR\n    A[Create Split] --&gt; B[Invite Participants]\n    B --&gt; C[Participants Accept]\n    C --&gt; D[Make Payments]\n    D --&gt; E[Reconcile]\n    E --&gt; F[Complete]\n\n    C --&gt; G[Decline/Expire]\n    G --&gt; H[Reassign]\n    H --&gt; C</code></pre>"},{"location":"modules/payments/#example-creating-an-item-based-split","title":"Example: Creating an Item-Based Split","text":"<pre><code># Split by items\nsplit_data = {\n    \"order_id\": 123,\n    \"split_method\": \"item_based\",\n    \"participants\": [\n        {\n            \"name\": \"Alice\",\n            \"email\": \"alice@example.com\",\n            \"items\": [1, 3, 5],  # Order item IDs\n            \"tip_percentage\": 20\n        },\n        {\n            \"name\": \"Bob\",\n            \"email\": \"bob@example.com\",\n            \"items\": [2, 4],\n            \"tip_percentage\": 18\n        }\n    ]\n}\n</code></pre>"},{"location":"modules/payments/#refund-processing","title":"Refund Processing","text":""},{"location":"modules/payments/#refund-categories","title":"Refund Categories","text":"<ol> <li>Quality Issues: Food quality, incorrect order</li> <li>Service Issues: Poor service, long wait times</li> <li>Technical Issues: App errors, payment problems</li> <li>Customer Request: Changed mind, allergies</li> <li>Operational Issues: Restaurant closure, out of stock</li> </ol>"},{"location":"modules/payments/#refund-workflow","title":"Refund Workflow","text":"<pre><code>graph TD\n    A[Refund Request] --&gt; B{Auto-Approval Check}\n    B --&gt;|Under Threshold| C[Auto-Approved]\n    B --&gt;|Over Threshold| D[Manager Review]\n\n    C --&gt; E[Process Refund]\n    D --&gt; F{Approval Decision}\n    F --&gt;|Approved| E\n    F --&gt;|Rejected| G[Notify Customer]\n\n    E --&gt; H[Update Inventory]\n    E --&gt; I[Accounting Entry]\n    E --&gt; J[Customer Notification]</code></pre>"},{"location":"modules/payments/#refund-policy-configuration","title":"Refund Policy Configuration","text":"<pre><code>refund_policy = {\n    \"auto_approval_threshold\": 25.00,\n    \"max_refund_percentage\": 100,\n    \"time_limit_hours\": 24,\n    \"reasons_requiring_approval\": [\n        \"CUSTOMER_CHANGED_MIND\",\n        \"NO_REASON_PROVIDED\"\n    ],\n    \"notification_settings\": {\n        \"customer\": True,\n        \"manager\": True,\n        \"accounting\": True\n    }\n}\n</code></pre>"},{"location":"modules/payments/#tip-management","title":"Tip Management","text":""},{"location":"modules/payments/#tip-calculation-methods","title":"Tip Calculation Methods","text":"<ol> <li>Percentage: Based on order subtotal</li> <li>Fixed Amount: Specific dollar amount</li> <li>Round Up: Round total to nearest dollar</li> <li>Custom: Manual entry</li> </ol>"},{"location":"modules/payments/#tip-distribution","title":"Tip Distribution","text":"<pre><code># Configure tip distribution\ntip_distribution = {\n    \"method\": \"pool\",  # pool, percentage, role_based, direct\n    \"rules\": {\n        \"servers\": 0.7,\n        \"kitchen\": 0.2,\n        \"host\": 0.1\n    },\n    \"frequency\": \"daily\",\n    \"integration\": \"payroll\"\n}\n</code></pre>"},{"location":"modules/payments/#security-features","title":"Security Features","text":""},{"location":"modules/payments/#pci-compliance","title":"PCI Compliance","text":"<ul> <li>No storage of card numbers</li> <li>Token-based processing</li> <li>TLS encryption for all API calls</li> <li>Regular security audits</li> </ul>"},{"location":"modules/payments/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<pre><code># Required permissions\npermissions = {\n    \"create_payment\": [\"pos\", \"cashier\", \"manager\"],\n    \"process_refund\": [\"manager\", \"admin\"],\n    \"view_reports\": [\"manager\", \"admin\", \"accountant\"],\n    \"configure_gateways\": [\"admin\"]\n}\n</code></pre>"},{"location":"modules/payments/#data-protection","title":"Data Protection","text":"<ul> <li>Encrypted payment tokens</li> <li>Secure webhook endpoints</li> <li>Audit logging for all transactions</li> <li>GDPR compliance for customer data</li> </ul>"},{"location":"modules/payments/#webhook-handling","title":"Webhook Handling","text":""},{"location":"modules/payments/#webhook-endpoints","title":"Webhook Endpoints","text":"<pre><code>@router.post(\"/webhooks/stripe\")\nasync def handle_stripe_webhook(request: Request):\n    # Verify signature\n    # Process event\n    # Update payment status\n    # Trigger notifications\n    pass\n\n@router.post(\"/webhooks/square\")\nasync def handle_square_webhook(request: Request):\n    # Similar processing for Square\n    pass\n</code></pre>"},{"location":"modules/payments/#event-types-handled","title":"Event Types Handled","text":"<ul> <li>Payment completed</li> <li>Payment failed</li> <li>Refund processed</li> <li>Dispute created</li> <li>Card updated</li> </ul>"},{"location":"modules/payments/#testing","title":"Testing","text":"<pre><code># Run unit tests\npytest tests/unit/\n\n# Run integration tests\npytest tests/integration/\n\n# Test payment gateways (sandbox)\npytest tests/test_gateways.py -v\n\n# Test split bill scenarios\npytest tests/test_split_bill.py -v\n\n# Test refund workflows\npytest tests/test_refunds.py -v\n</code></pre>"},{"location":"modules/payments/#configuration","title":"Configuration","text":"<pre><code># config/payments.yaml\npayments:\n  default_currency: USD\n  supported_currencies: [USD, CAD, EUR]\n\n  processing:\n    timeout_seconds: 30\n    retry_attempts: 3\n    idempotency_window_hours: 24\n\n  split_bill:\n    expiration_hours: 48\n    reminder_intervals: [12, 24, 36]\n    max_participants: 20\n\n  refunds:\n    auto_approval_threshold: 25.00\n    processing_time_hours: 24\n    retention_days: 90\n\n  tips:\n    suggested_percentages: [15, 18, 20, 25]\n    max_percentage: 50\n    distribution_frequency: daily\n</code></pre>"},{"location":"modules/payments/#monitoring","title":"Monitoring","text":""},{"location":"modules/payments/#key-metrics","title":"Key Metrics","text":"<pre><code># Payment success rate\npayment_success_rate{gateway=\"stripe\"} 0.98\n\n# Average processing time\npayment_processing_duration_seconds{gateway=\"square\"} 1.2\n\n# Refund request rate\nrefund_requests_total{reason=\"quality_issue\"} 23\n\n# Split bill completion rate\nsplit_bill_completion_rate 0.85\n</code></pre>"},{"location":"modules/payments/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modules/payments/#common-issues","title":"Common Issues","text":"<ol> <li>Payment Declined</li> <li>Check card details</li> <li>Verify sufficient funds</li> <li> <p>Review gateway logs</p> </li> <li> <p>Split Bill Not Completing</p> </li> <li>Check participant status</li> <li>Verify payment methods</li> <li> <p>Review expiration settings</p> </li> <li> <p>Refund Not Processing</p> </li> <li>Verify original payment status</li> <li>Check refund policy limits</li> <li> <p>Review gateway capabilities</p> </li> <li> <p>Webhook Not Received</p> </li> <li>Verify endpoint URL</li> <li>Check signature validation</li> <li>Review firewall settings</li> </ol>"},{"location":"modules/payments/#related-documentation","title":"Related Documentation","text":"<ul> <li>Order Processing</li> <li>Payroll Integration</li> <li>Analytics &amp; Reporting (Coming Soon)</li> <li>API Reference</li> <li>Security Guide (Coming Soon)</li> </ul>"},{"location":"modules/payments/#support","title":"Support","text":"<ul> <li>Module Owner: Payments Team</li> <li>Email: payments-team@auraconnect.com</li> <li>Slack: #payments-module</li> </ul> <p>Last Updated: January 2025</p>"},{"location":"modules/payroll/production-checklist/","title":"Payroll Module Production Readiness Checklist","text":""},{"location":"modules/payroll/production-checklist/#overview","title":"Overview","text":"<p>This checklist ensures the payroll and tax modules are ready for production deployment. Each item must be verified before going live.</p>"},{"location":"modules/payroll/production-checklist/#infrastructure-requirements","title":"\u2705 Infrastructure Requirements","text":""},{"location":"modules/payroll/production-checklist/#database","title":"Database","text":"<ul> <li> PostgreSQL 13+ installed and configured</li> <li> Database migrations executed successfully</li> <li> Indexes created for performance-critical queries</li> <li> Backup and recovery procedures in place</li> <li> Connection pooling configured</li> <li> Read replicas set up for reporting</li> </ul>"},{"location":"modules/payroll/production-checklist/#caching","title":"Caching","text":"<ul> <li> Redis 6+ installed and configured</li> <li> Cache eviction policies defined</li> <li> Redis persistence configured</li> <li> Redis Sentinel or Cluster for HA</li> </ul>"},{"location":"modules/payroll/production-checklist/#storage","title":"Storage","text":"<ul> <li> S3 or compatible object storage configured</li> <li> Payslip storage bucket created</li> <li> Backup retention policies defined</li> <li> CDN configured for document delivery</li> </ul>"},{"location":"modules/payroll/production-checklist/#security-compliance","title":"\u2705 Security &amp; Compliance","text":""},{"location":"modules/payroll/production-checklist/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li> JWT secret keys rotated and secured</li> <li> Role-based access control implemented</li> <li> API rate limiting configured</li> <li> Session timeout policies enforced</li> <li> Multi-factor authentication available</li> </ul>"},{"location":"modules/payroll/production-checklist/#data-protection","title":"Data Protection","text":"<ul> <li> SSL/TLS certificates installed</li> <li> Database encryption at rest enabled</li> <li> PII fields encrypted</li> <li> Audit logging implemented</li> <li> Data retention policies configured</li> </ul>"},{"location":"modules/payroll/production-checklist/#compliance","title":"Compliance","text":"<ul> <li> GDPR compliance verified</li> <li> CCPA requirements met</li> <li> PCI DSS compliance (if processing payments)</li> <li> State-specific payroll regulations reviewed</li> <li> Tax table update process automated</li> </ul>"},{"location":"modules/payroll/production-checklist/#application-configuration","title":"\u2705 Application Configuration","text":""},{"location":"modules/payroll/production-checklist/#environment-variables","title":"Environment Variables","text":"<pre><code># Required environment variables\n- [ ] DATABASE_URL\n- [ ] REDIS_URL\n- [ ] JWT_SECRET_KEY\n- [ ] AWS_ACCESS_KEY_ID\n- [ ] AWS_SECRET_ACCESS_KEY\n- [ ] S3_BUCKET_NAME\n- [ ] SMTP_HOST\n- [ ] SMTP_PORT\n- [ ] SMTP_USERNAME\n- [ ] SMTP_PASSWORD\n- [ ] SENTRY_DSN (error tracking)\n- [ ] LOG_LEVEL\n</code></pre>"},{"location":"modules/payroll/production-checklist/#feature-flags","title":"Feature Flags","text":"<ul> <li> Payroll module enabled</li> <li> Tax calculations enabled</li> <li> Email notifications enabled</li> <li> Batch processing enabled</li> <li> Real-time updates enabled</li> </ul>"},{"location":"modules/payroll/production-checklist/#integration-settings","title":"Integration Settings","text":"<ul> <li> POS system credentials configured</li> <li> Banking API credentials set</li> <li> Tax service API keys configured</li> <li> Third-party integrations tested</li> </ul>"},{"location":"modules/payroll/production-checklist/#performance-scalability","title":"\u2705 Performance &amp; Scalability","text":""},{"location":"modules/payroll/production-checklist/#load-testing","title":"Load Testing","text":"<ul> <li> Batch processing tested with 1000+ employees</li> <li> API endpoints load tested</li> <li> Database query performance verified</li> <li> Cache hit rates optimized</li> <li> Memory usage profiled</li> </ul>"},{"location":"modules/payroll/production-checklist/#monitoring","title":"Monitoring","text":"<ul> <li> Application metrics configured</li> <li> Database monitoring enabled</li> <li> Redis monitoring set up</li> <li> Log aggregation configured</li> <li> Alert thresholds defined</li> </ul>"},{"location":"modules/payroll/production-checklist/#scaling-strategy","title":"Scaling Strategy","text":"<ul> <li> Horizontal scaling tested</li> <li> Auto-scaling policies configured</li> <li> Load balancer health checks</li> <li> Database connection limits set</li> <li> Queue worker scaling tested</li> </ul>"},{"location":"modules/payroll/production-checklist/#testing-quality-assurance","title":"\u2705 Testing &amp; Quality Assurance","text":""},{"location":"modules/payroll/production-checklist/#test-coverage","title":"Test Coverage","text":"<ul> <li> Unit test coverage &gt; 80%</li> <li> Integration tests passing</li> <li> End-to-end tests completed</li> <li> Performance tests passed</li> <li> Security tests conducted</li> </ul>"},{"location":"modules/payroll/production-checklist/#manual-testing","title":"Manual Testing","text":"<ul> <li> Payroll calculation accuracy verified</li> <li> Tax calculations validated</li> <li> Multi-tenant isolation tested</li> <li> Edge cases handled</li> <li> Error scenarios tested</li> </ul>"},{"location":"modules/payroll/production-checklist/#user-acceptance-testing","title":"User Acceptance Testing","text":"<ul> <li> Beta testing completed</li> <li> User feedback incorporated</li> <li> Training materials created</li> <li> Documentation reviewed</li> <li> Support procedures defined</li> </ul>"},{"location":"modules/payroll/production-checklist/#operational-readiness","title":"\u2705 Operational Readiness","text":""},{"location":"modules/payroll/production-checklist/#deployment","title":"Deployment","text":"<ul> <li> CI/CD pipeline configured</li> <li> Blue-green deployment tested</li> <li> Rollback procedures documented</li> <li> Database migration strategy tested</li> <li> Zero-downtime deployment verified</li> </ul>"},{"location":"modules/payroll/production-checklist/#backup-recovery","title":"Backup &amp; Recovery","text":"<ul> <li> Database backup schedule configured</li> <li> Point-in-time recovery tested</li> <li> Document backup implemented</li> <li> Disaster recovery plan documented</li> <li> RTO/RPO targets defined</li> </ul>"},{"location":"modules/payroll/production-checklist/#monitoring-alerting","title":"Monitoring &amp; Alerting","text":"<ul> <li> Health check endpoints active</li> <li> Error tracking configured (Sentry)</li> <li> Performance monitoring enabled</li> <li> Business metrics dashboards created</li> <li> On-call rotation established</li> </ul>"},{"location":"modules/payroll/production-checklist/#documentation","title":"\u2705 Documentation","text":""},{"location":"modules/payroll/production-checklist/#technical-documentation","title":"Technical Documentation","text":"<ul> <li> API documentation complete</li> <li> Architecture diagrams updated</li> <li> Database schema documented</li> <li> Integration guides written</li> <li> Troubleshooting guide created</li> </ul>"},{"location":"modules/payroll/production-checklist/#operational-documentation","title":"Operational Documentation","text":"<ul> <li> Runbook created</li> <li> Incident response procedures</li> <li> Maintenance procedures</li> <li> Monitoring guide</li> <li> Recovery procedures</li> </ul>"},{"location":"modules/payroll/production-checklist/#user-documentation","title":"User Documentation","text":"<ul> <li> User manual created</li> <li> FAQ compiled</li> <li> Video tutorials recorded</li> <li> Quick start guide</li> <li> API client examples</li> </ul>"},{"location":"modules/payroll/production-checklist/#legal-business","title":"\u2705 Legal &amp; Business","text":""},{"location":"modules/payroll/production-checklist/#contracts-agreements","title":"Contracts &amp; Agreements","text":"<ul> <li> Service Level Agreements defined</li> <li> Data Processing Agreements signed</li> <li> Third-party licenses verified</li> <li> Terms of Service updated</li> <li> Privacy Policy updated</li> </ul>"},{"location":"modules/payroll/production-checklist/#insurance-liability","title":"Insurance &amp; Liability","text":"<ul> <li> Errors &amp; Omissions coverage</li> <li> Cyber liability insurance</li> <li> Business continuity plan</li> <li> Incident response team identified</li> <li> Legal counsel consulted</li> </ul>"},{"location":"modules/payroll/production-checklist/#go-live-checklist","title":"\u2705 Go-Live Checklist","text":""},{"location":"modules/payroll/production-checklist/#pre-launch-t-7-days","title":"Pre-Launch (T-7 days)","text":"<ul> <li> Final security audit completed</li> <li> Performance benchmarks met</li> <li> Staging environment validated</li> <li> Communication plan prepared</li> <li> Support team briefed</li> </ul>"},{"location":"modules/payroll/production-checklist/#launch-day-t-0","title":"Launch Day (T-0)","text":"<ul> <li> Database migrations executed</li> <li> Feature flags enabled gradually</li> <li> Monitoring dashboards active</li> <li> Support team on standby</li> <li> Rollback plan ready</li> </ul>"},{"location":"modules/payroll/production-checklist/#post-launch-t7-days","title":"Post-Launch (T+7 days)","text":"<ul> <li> Performance metrics reviewed</li> <li> Error rates analyzed</li> <li> User feedback collected</li> <li> Optimization opportunities identified</li> <li> Lessons learned documented</li> </ul>"},{"location":"modules/payroll/production-checklist/#sign-offs","title":"Sign-offs","text":"Role Name Date Signature Engineering Lead ____ ____ ____ Security Officer ____ ____ ____ Compliance Officer ____ ____ ____ Product Manager ____ ____ ____ Operations Lead ____ ____ ____"},{"location":"modules/payroll/production-checklist/#notes","title":"Notes","text":"<ul> <li>This checklist should be reviewed and updated quarterly</li> <li>Any deviations must be documented and approved</li> <li>Critical items are marked with \ud83d\udd34 priority</li> <li>Consider using a tool like Jira or Linear to track progress</li> </ul>"},{"location":"modules/pricing-rules/","title":"Pricing Rules Module","text":""},{"location":"modules/pricing-rules/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Key Features</li> <li>Architecture Overview</li> <li>Quick Start</li> <li>Rule Types</li> <li>Rule Conditions</li> <li>API Endpoints</li> <li>Conflict Resolution</li> <li>Promo Codes</li> <li>Debugging &amp; Monitoring</li> <li>Integration Points</li> <li>Configuration</li> <li>Testing</li> <li>Best Practices</li> <li>Related Documentation</li> </ol>"},{"location":"modules/pricing-rules/#overview","title":"Overview","text":"<p>The Pricing Rules module provides a flexible and powerful system for dynamic pricing, discounts, and promotions. It supports various rule types, complex conditions, conflict resolution strategies, and real-time price calculations with comprehensive monitoring and debugging capabilities.</p>"},{"location":"modules/pricing-rules/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udcb0 10+ Rule Types: Percentage, fixed, BOGO, bundle, happy hour, and more</li> <li>\ud83c\udfaf Flexible Conditions: Time, items, customers, order value based</li> <li>\ud83d\udd04 Smart Conflict Resolution: 5 strategies for handling overlapping rules</li> <li>\ud83d\udcca Rule Stacking: Support for combining compatible rules</li> <li>\ud83c\udfab Promo Code Management: Customer and campaign specific codes</li> <li>\ud83d\udc1b Debug Mode: Detailed rule evaluation explanations</li> <li>\ud83d\udcc8 Prometheus Metrics: Performance and usage monitoring</li> <li>\ud83d\udd0d Audit Trail: Complete history of rule applications</li> </ul>"},{"location":"modules/pricing-rules/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Rule Interfaces\"\n        ADMIN[Admin Portal]\n        API[API Clients]\n        POS[POS Systems]\n        WEB[Web Orders]\n    end\n\n    subgraph \"Pricing Rules Core\"\n        ENGINE[Rules Engine]\n        EVAL[Rule Evaluator]\n        CALC[Price Calculator]\n        CONFLICT[Conflict Resolver]\n    end\n\n    subgraph \"Supporting Services\"\n        CACHE[Redis Cache]\n        METRICS[Prometheus]\n        WORKER[Background Worker]\n        AUDIT[Audit Logger]\n    end\n\n    subgraph \"Integration Layer\"\n        MENU[Menu Service]\n        ORDER[Order Service]\n        CUSTOMER[Customer Service]\n        ANALYTICS[Analytics Service]\n    end\n\n    subgraph \"Data Layer\"\n        DB[(PostgreSQL)]\n        HISTORY[Rule History]\n    end\n\n    ADMIN --&gt; ENGINE\n    API --&gt; ENGINE\n    POS --&gt; ENGINE\n    WEB --&gt; ENGINE\n\n    ENGINE --&gt; EVAL\n    EVAL --&gt; CALC\n    EVAL --&gt; CONFLICT\n\n    ENGINE --&gt; CACHE\n    ENGINE --&gt; METRICS\n    ENGINE --&gt; WORKER\n    CALC --&gt; AUDIT\n\n    EVAL --&gt; MENU\n    EVAL --&gt; ORDER\n    EVAL --&gt; CUSTOMER\n    AUDIT --&gt; ANALYTICS\n\n    ENGINE --&gt; DB\n    AUDIT --&gt; HISTORY</code></pre>"},{"location":"modules/pricing-rules/#quick-start","title":"Quick Start","text":""},{"location":"modules/pricing-rules/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>PostgreSQL 14+</li> <li>Redis 6+</li> <li>Prometheus (for metrics)</li> </ul>"},{"location":"modules/pricing-rules/#installation","title":"Installation","text":"<pre><code># Navigate to pricing rules module\ncd backend/modules/pricing_rules\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run migrations\nalembic upgrade head\n\n# Start the service\nuvicorn main:app --reload --port 8011\n\n# Start background worker\ncelery -A tasks worker --loglevel=info\n</code></pre>"},{"location":"modules/pricing-rules/#basic-usage","title":"Basic Usage","text":"<pre><code>import requests\nfrom datetime import datetime, timedelta\n\n# Create a percentage discount rule\nrule_data = {\n    \"name\": \"Weekend Special - 20% Off\",\n    \"rule_type\": \"percentage_discount\",\n    \"priority\": 100,\n    \"discount_value\": 20.0,\n    \"conditions\": {\n        \"days_of_week\": [\"saturday\", \"sunday\"],\n        \"min_order_value\": 30.0\n    },\n    \"start_date\": datetime.now().isoformat(),\n    \"end_date\": (datetime.now() + timedelta(days=30)).isoformat(),\n    \"is_active\": True\n}\n\nresponse = requests.post(\n    \"http://localhost:8011/api/v1/pricing-rules\",\n    json=rule_data,\n    headers={\"Authorization\": \"Bearer &lt;token&gt;\"}\n)\n\nrule = response.json()\nprint(f\"Rule created: {rule['id']}\")\n</code></pre>"},{"location":"modules/pricing-rules/#rule-types","title":"Rule Types","text":""},{"location":"modules/pricing-rules/#1-percentage-discount","title":"1. Percentage Discount","text":"<pre><code>{\n    \"rule_type\": \"percentage_discount\",\n    \"discount_value\": 15.0,  # 15% off\n    \"conditions\": {\n        \"min_order_value\": 50.0\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#2-fixed-amount-discount","title":"2. Fixed Amount Discount","text":"<pre><code>{\n    \"rule_type\": \"fixed_discount\",\n    \"discount_value\": 10.0,  # $10 off\n    \"conditions\": {\n        \"first_time_customer\": True\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#3-buy-one-get-one-bogo","title":"3. Buy One Get One (BOGO)","text":"<pre><code>{\n    \"rule_type\": \"bogo\",\n    \"config\": {\n        \"buy_quantity\": 2,\n        \"get_quantity\": 1,\n        \"get_percentage\": 100.0  # Free\n    },\n    \"conditions\": {\n        \"menu_items\": [123, 124, 125],\n        \"categories\": [\"beverages\"]\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#4-bundle-pricing","title":"4. Bundle Pricing","text":"<pre><code>{\n    \"rule_type\": \"bundle\",\n    \"config\": {\n        \"bundle_items\": [\n            {\"item_id\": 101, \"quantity\": 1},  # Burger\n            {\"item_id\": 201, \"quantity\": 1},  # Fries\n            {\"item_id\": 301, \"quantity\": 1}   # Drink\n        ],\n        \"bundle_price\": 12.99\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#5-happy-hour","title":"5. Happy Hour","text":"<pre><code>{\n    \"rule_type\": \"happy_hour\",\n    \"discount_value\": 50.0,  # 50% off\n    \"conditions\": {\n        \"time_ranges\": [\n            {\"start\": \"15:00\", \"end\": \"18:00\"}\n        ],\n        \"categories\": [\"beverages\", \"appetizers\"]\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#6-tiered-pricing","title":"6. Tiered Pricing","text":"<pre><code>{\n    \"rule_type\": \"tiered\",\n    \"config\": {\n        \"tiers\": [\n            {\"min_value\": 50, \"discount\": 5},\n            {\"min_value\": 100, \"discount\": 10},\n            {\"min_value\": 200, \"discount\": 15}\n        ]\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#7-item-specific-pricing","title":"7. Item-Specific Pricing","text":"<pre><code>{\n    \"rule_type\": \"item_price_override\",\n    \"config\": {\n        \"item_prices\": {\n            \"123\": 9.99,  # Menu item ID: price\n            \"124\": 7.99\n        }\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#8-category-discount","title":"8. Category Discount","text":"<pre><code>{\n    \"rule_type\": \"category_discount\",\n    \"discount_value\": 25.0,\n    \"conditions\": {\n        \"categories\": [\"desserts\"],\n        \"min_items\": 2\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#9-loyalty-pricing","title":"9. Loyalty Pricing","text":"<pre><code>{\n    \"rule_type\": \"loyalty\",\n    \"config\": {\n        \"tiers\": {\n            \"bronze\": 5,\n            \"silver\": 10,\n            \"gold\": 15,\n            \"platinum\": 20\n        }\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#10-flash-sale","title":"10. Flash Sale","text":"<pre><code>{\n    \"rule_type\": \"flash_sale\",\n    \"discount_value\": 30.0,\n    \"conditions\": {\n        \"start_time\": \"2024-01-20T10:00:00\",\n        \"end_time\": \"2024-01-20T14:00:00\",\n        \"max_uses\": 100\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#rule-conditions","title":"Rule Conditions","text":""},{"location":"modules/pricing-rules/#time-based-conditions","title":"Time-Based Conditions","text":"<pre><code>conditions = {\n    \"days_of_week\": [\"monday\", \"tuesday\", \"wednesday\"],\n    \"time_ranges\": [\n        {\"start\": \"11:00\", \"end\": \"14:00\"},\n        {\"start\": \"17:00\", \"end\": \"21:00\"}\n    ],\n    \"date_ranges\": [\n        {\n            \"start\": \"2024-12-20\",\n            \"end\": \"2024-12-31\"\n        }\n    ]\n}\n</code></pre>"},{"location":"modules/pricing-rules/#item-based-conditions","title":"Item-Based Conditions","text":"<pre><code>conditions = {\n    \"menu_items\": [101, 102, 103],\n    \"categories\": [\"entrees\", \"appetizers\"],\n    \"exclude_items\": [201, 202],\n    \"min_item_quantity\": 2\n}\n</code></pre>"},{"location":"modules/pricing-rules/#customer-based-conditions","title":"Customer-Based Conditions","text":"<pre><code>conditions = {\n    \"customer_segments\": [\"vip\", \"loyalty_gold\"],\n    \"first_time_customer\": False,\n    \"min_order_count\": 5,\n    \"customer_tags\": [\"birthday_month\"]\n}\n</code></pre>"},{"location":"modules/pricing-rules/#order-based-conditions","title":"Order-Based Conditions","text":"<pre><code>conditions = {\n    \"min_order_value\": 30.0,\n    \"max_order_value\": 200.0,\n    \"order_types\": [\"dine_in\", \"takeout\"],\n    \"payment_methods\": [\"credit_card\"]\n}\n</code></pre>"},{"location":"modules/pricing-rules/#complex-conditions","title":"Complex Conditions","text":"<pre><code>conditions = {\n    \"and\": [\n        {\"min_order_value\": 50.0},\n        {\"or\": [\n            {\"days_of_week\": [\"saturday\", \"sunday\"]},\n            {\"customer_segments\": [\"vip\"]}\n        ]}\n    ]\n}\n</code></pre>"},{"location":"modules/pricing-rules/#api-endpoints","title":"API Endpoints","text":"<p>\ud83d\udccc See also: Pricing Rules in API Reference for complete API documentation.</p>"},{"location":"modules/pricing-rules/#rule-management","title":"Rule Management","text":"Endpoint Method Description <code>/api/v1/pricing-rules</code> GET List all rules <code>/api/v1/pricing-rules</code> POST Create new rule <code>/api/v1/pricing-rules/{id}</code> GET Get rule details <code>/api/v1/pricing-rules/{id}</code> PUT Update rule <code>/api/v1/pricing-rules/{id}</code> DELETE Delete rule <code>/api/v1/pricing-rules/{id}/toggle</code> POST Enable/disable rule"},{"location":"modules/pricing-rules/#price-calculation","title":"Price Calculation","text":"Endpoint Method Description <code>/api/v1/pricing-rules/calculate</code> POST Calculate prices with rules <code>/api/v1/pricing-rules/preview</code> POST Preview rule effects <code>/api/v1/pricing-rules/debug</code> POST Debug rule evaluation"},{"location":"modules/pricing-rules/#promo-codes","title":"Promo Codes","text":"Endpoint Method Description <code>/api/v1/pricing-rules/promo-codes</code> GET List promo codes <code>/api/v1/pricing-rules/promo-codes</code> POST Create promo code <code>/api/v1/pricing-rules/promo-codes/validate</code> POST Validate promo code"},{"location":"modules/pricing-rules/#conflict-resolution","title":"Conflict Resolution","text":""},{"location":"modules/pricing-rules/#resolution-strategies","title":"Resolution Strategies","text":"<ol> <li> <p>Highest Priority Wins <pre><code>conflict_resolution = \"highest_priority\"\n# Rule with highest priority value is applied\n</code></pre></p> </li> <li> <p>Best for Customer <pre><code>conflict_resolution = \"best_for_customer\"\n# Rule giving maximum discount is applied\n</code></pre></p> </li> <li> <p>First Match <pre><code>conflict_resolution = \"first_match\"\n# First matching rule in priority order\n</code></pre></p> </li> <li> <p>Stack Compatible <pre><code>conflict_resolution = \"stack_compatible\"\n# Apply all non-conflicting rules\n</code></pre></p> </li> <li> <p>Manual Override <pre><code>conflict_resolution = \"manual\"\n# Requires manual selection\n</code></pre></p> </li> </ol>"},{"location":"modules/pricing-rules/#stacking-rules","title":"Stacking Rules","text":"<pre><code># Define stackable rule groups\nstacking_config = {\n    \"allow_stacking\": True,\n    \"stack_groups\": {\n        \"discounts\": [\"percentage_discount\", \"loyalty\"],\n        \"promotions\": [\"bogo\", \"bundle\"],\n        \"exclusive\": [\"flash_sale\", \"clearance\"]\n    },\n    \"max_stack_count\": 3\n}\n</code></pre>"},{"location":"modules/pricing-rules/#promo-codes_1","title":"Promo Codes","text":""},{"location":"modules/pricing-rules/#creating-promo-codes","title":"Creating Promo Codes","text":"<pre><code>promo_code = {\n    \"code\": \"SUMMER20\",\n    \"rule_id\": 123,\n    \"usage_limit\": 1000,\n    \"usage_per_customer\": 1,\n    \"valid_from\": \"2024-06-01\",\n    \"valid_until\": \"2024-08-31\",\n    \"minimum_order_value\": 25.0,\n    \"allowed_channels\": [\"web\", \"mobile\"]\n}\n</code></pre>"},{"location":"modules/pricing-rules/#promo-code-validation","title":"Promo Code Validation","text":"<pre><code># Validate promo code\nvalidation_request = {\n    \"code\": \"SUMMER20\",\n    \"order_value\": 35.0,\n    \"customer_id\": 456,\n    \"channel\": \"web\"\n}\n\nresponse = requests.post(\n    \"/api/v1/pricing-rules/promo-codes/validate\",\n    json=validation_request\n)\n\nif response.json()[\"valid\"]:\n    discount = response.json()[\"discount_amount\"]\n</code></pre>"},{"location":"modules/pricing-rules/#debugging-monitoring","title":"Debugging &amp; Monitoring","text":""},{"location":"modules/pricing-rules/#debug-endpoint","title":"Debug Endpoint","text":"<pre><code># Debug why rules are/aren't applying\ndebug_request = {\n    \"order\": {\n        \"items\": [\n            {\"id\": 123, \"quantity\": 2, \"price\": 15.99},\n            {\"id\": 456, \"quantity\": 1, \"price\": 8.99}\n        ],\n        \"customer_id\": 789,\n        \"order_type\": \"dine_in\"\n    },\n    \"promo_code\": \"TESTCODE\"\n}\n\nresponse = requests.post(\n    \"/api/v1/pricing-rules/debug\",\n    json=debug_request\n)\n\n# Response includes:\n# - All evaluated rules\n# - Why each rule matched/didn't match\n# - Final price calculation\n# - Applied discounts\n</code></pre>"},{"location":"modules/pricing-rules/#prometheus-metrics","title":"Prometheus Metrics","text":"<pre><code># Available metrics\npricing_rules_evaluated_total  # Counter\npricing_rules_applied_total    # Counter by rule type\npricing_rules_evaluation_duration_seconds  # Histogram\npricing_rules_discount_amount  # Histogram\npricing_rules_cache_hits_total  # Counter\npricing_rules_conflicts_total  # Counter\n\n# Custom metrics\nrule_usage_by_type = Counter(\n    'pricing_rule_usage_by_type',\n    'Number of times each rule type is used',\n    ['rule_type']\n)\n</code></pre>"},{"location":"modules/pricing-rules/#monitoring-dashboard","title":"Monitoring Dashboard","text":"<pre><code># Grafana dashboard queries\n- Average rule evaluation time\n- Most used rules\n- Discount amounts distribution\n- Cache hit rate\n- Conflict resolution frequency\n- Promo code usage\n</code></pre>"},{"location":"modules/pricing-rules/#integration-points","title":"Integration Points","text":""},{"location":"modules/pricing-rules/#menu-service","title":"Menu Service","text":"<ul> <li>Get item prices and categories</li> <li>Validate menu item availability</li> <li>Apply category-based rules</li> </ul>"},{"location":"modules/pricing-rules/#order-service","title":"Order Service","text":"<ul> <li>Calculate order totals</li> <li>Apply rules during checkout</li> <li>Track rule usage per order</li> </ul>"},{"location":"modules/pricing-rules/#customer-service","title":"Customer Service","text":"<ul> <li>Retrieve customer segments</li> <li>Check loyalty status</li> <li>Validate customer eligibility</li> </ul>"},{"location":"modules/pricing-rules/#analytics-service","title":"Analytics Service","text":"<ul> <li>Track rule performance</li> <li>Measure conversion impact</li> <li>ROI analysis</li> </ul>"},{"location":"modules/pricing-rules/#configuration","title":"Configuration","text":"<pre><code># config/pricing_rules.yaml\npricing_rules:\n  cache:\n    enabled: true\n    ttl_seconds: 300\n\n  evaluation:\n    max_rules_per_order: 10\n    timeout_seconds: 2\n\n  conflict_resolution:\n    default_strategy: \"best_for_customer\"\n    allow_manual_override: true\n\n  stacking:\n    enabled: true\n    max_stack_count: 3\n    max_total_discount_percentage: 50\n\n  promo_codes:\n    case_sensitive: false\n    min_length: 4\n    max_length: 20\n\n  monitoring:\n    metrics_enabled: true\n    debug_mode: false\n    audit_retention_days: 90\n\n  background_worker:\n    expiry_check_interval: 3600  # 1 hour\n    metrics_update_interval: 300  # 5 minutes\n</code></pre>"},{"location":"modules/pricing-rules/#testing","title":"Testing","text":"<pre><code># Run unit tests\npytest tests/unit/\n\n# Test rule evaluation\npytest tests/test_rule_evaluation.py -v\n\n# Test conflict resolution\npytest tests/test_conflict_resolution.py -v\n\n# Test promo codes\npytest tests/test_promo_codes.py -v\n\n# Performance tests\npytest tests/test_performance.py --benchmark\n</code></pre>"},{"location":"modules/pricing-rules/#test-scenarios","title":"Test Scenarios","text":"<pre><code># Test complex rule stacking\ndef test_rule_stacking():\n    rules = [\n        create_percentage_rule(10),  # 10% loyalty\n        create_happy_hour_rule(20),   # 20% happy hour\n        create_promo_code_rule(5)     # $5 off\n    ]\n\n    order = create_test_order(total=50.0)\n    result = pricing_engine.calculate(order, rules)\n\n    # Should apply: 10% + 20% = 28% off $50 = $14\n    # Then $5 off = $19 total discount\n    assert result.total_discount == 19.0\n    assert result.final_price == 31.0\n</code></pre>"},{"location":"modules/pricing-rules/#best-practices","title":"Best Practices","text":""},{"location":"modules/pricing-rules/#1-rule-design","title":"1. Rule Design","text":"<ul> <li>Keep conditions simple and testable</li> <li>Use descriptive rule names</li> <li>Set appropriate priorities</li> <li>Document rule purposes</li> </ul>"},{"location":"modules/pricing-rules/#2-performance","title":"2. Performance","text":"<ul> <li>Cache frequently used rules</li> <li>Limit condition complexity</li> <li>Use batch evaluation for multiple items</li> <li>Monitor evaluation times</li> </ul>"},{"location":"modules/pricing-rules/#3-conflict-management","title":"3. Conflict Management","text":"<ul> <li>Define clear stacking policies</li> <li>Test rule combinations</li> <li>Use debug mode for troubleshooting</li> <li>Monitor conflict frequencies</li> </ul>"},{"location":"modules/pricing-rules/#4-promo-code-security","title":"4. Promo Code Security","text":"<ul> <li>Use unique, hard-to-guess codes</li> <li>Implement rate limiting</li> <li>Track usage patterns</li> <li>Expire codes promptly</li> </ul>"},{"location":"modules/pricing-rules/#common-use-cases","title":"Common Use Cases","text":""},{"location":"modules/pricing-rules/#1-happy-hour-implementation","title":"1. Happy Hour Implementation","text":"<pre><code># 50% off drinks 3-6 PM weekdays\nhappy_hour = {\n    \"name\": \"Weekday Happy Hour\",\n    \"rule_type\": \"happy_hour\",\n    \"discount_value\": 50.0,\n    \"conditions\": {\n        \"days_of_week\": [\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"],\n        \"time_ranges\": [{\"start\": \"15:00\", \"end\": \"18:00\"}],\n        \"categories\": [\"beverages\", \"beer\", \"wine\"]\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#2-loyalty-program","title":"2. Loyalty Program","text":"<pre><code># Tiered discounts based on loyalty status\nloyalty_tiers = {\n    \"name\": \"Loyalty Rewards\",\n    \"rule_type\": \"loyalty\",\n    \"config\": {\n        \"bronze\": {\"min_points\": 100, \"discount\": 5},\n        \"silver\": {\"min_points\": 500, \"discount\": 10},\n        \"gold\": {\"min_points\": 1000, \"discount\": 15},\n        \"platinum\": {\"min_points\": 5000, \"discount\": 20}\n    }\n}\n</code></pre>"},{"location":"modules/pricing-rules/#3-seasonal-promotion","title":"3. Seasonal Promotion","text":"<pre><code># Summer special on specific items\nsummer_special = {\n    \"name\": \"Summer Menu Special\",\n    \"rule_type\": \"percentage_discount\",\n    \"discount_value\": 25.0,\n    \"conditions\": {\n        \"date_ranges\": [{\n            \"start\": \"2024-06-01\",\n            \"end\": \"2024-08-31\"\n        }],\n        \"menu_items\": [301, 302, 303, 304]  # Summer menu items\n    },\n    \"marketing_text\": \"25% off all summer specials!\"\n}\n</code></pre>"},{"location":"modules/pricing-rules/#related-documentation","title":"Related Documentation","text":"<ul> <li>Menu Module</li> <li>Order Processing</li> <li>Promotions Module (Coming Soon)</li> <li>Analytics Module (Coming Soon)</li> <li>API Reference</li> </ul>"},{"location":"modules/pricing-rules/#support","title":"Support","text":"<ul> <li>Module Owner: Pricing Team</li> <li>Email: pricing-team@auraconnect.com</li> <li>Slack: #pricing-rules</li> </ul> <p>Last Updated: January 2025</p>"},{"location":"modules/recipe-management/","title":"Recipe Management Module","text":""},{"location":"modules/recipe-management/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Key Features</li> <li>Architecture Overview</li> <li>Quick Start</li> <li>Core Components</li> <li>API Endpoints</li> <li>Recipe Structure</li> <li>Cost Calculation</li> <li>Compliance &amp; Validation</li> <li>Version Control</li> <li>Integration Points</li> <li>Analytics &amp; Reporting</li> <li>Configuration</li> <li>Testing</li> <li>Troubleshooting</li> <li>Related Documentation</li> </ol>"},{"location":"modules/recipe-management/#overview","title":"Overview","text":"<p>The Recipe Management module provides comprehensive Bill of Materials (BOM) functionality for menu items. It tracks ingredients, quantities, preparation steps, and automatically calculates food costs while maintaining version history and ensuring compliance.</p>"},{"location":"modules/recipe-management/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udccb Complete BOM Tracking: Detailed ingredient lists with quantities</li> <li>\ud83d\udcb0 Automatic Cost Calculation: Real-time food cost and profit margins</li> <li>\ud83d\udd04 Sub-Recipe Support: Complex recipes with nested components</li> <li>\ud83d\udcca Cost Analytics: Track cost trends and optimize pricing</li> <li>\u2705 Compliance Validation: Ensure all menu items have recipes</li> <li>\ud83d\udcc8 Version Control: Full history with rollback capability</li> <li>\ud83d\udd0d Recipe Search: Find recipes by ingredient or cost</li> <li>\ud83d\udce6 Bulk Operations: Import/export and batch updates</li> </ul>"},{"location":"modules/recipe-management/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Recipe Interfaces\"\n        CHEF[Chef Portal]\n        MANAGER[Manager Dashboard]\n        API_CLI[API/CLI Tools]\n    end\n\n    subgraph \"Recipe Service Core\"\n        API[Recipe API]\n        CALC[Cost Calculator]\n        VALIDATOR[Recipe Validator]\n        VERSION[Version Control]\n    end\n\n    subgraph \"Integration Layer\"\n        MENU[Menu Service]\n        INV[Inventory Service]\n        ANALYTICS[Analytics Service]\n        SUPPLIER[Supplier Service]\n    end\n\n    subgraph \"Data Layer\"\n        DB[(PostgreSQL)]\n        CACHE[(Redis Cache)]\n        HISTORY[Version History]\n    end\n\n    CHEF --&gt; API\n    MANAGER --&gt; API\n    API_CLI --&gt; API\n\n    API --&gt; CALC\n    API --&gt; VALIDATOR\n    API --&gt; VERSION\n\n    CALC --&gt; INV\n    VALIDATOR --&gt; MENU\n    CALC --&gt; SUPPLIER\n    VERSION --&gt; ANALYTICS\n\n    API --&gt; DB\n    CALC --&gt; CACHE\n    VERSION --&gt; HISTORY</code></pre>"},{"location":"modules/recipe-management/#quick-start","title":"Quick Start","text":""},{"location":"modules/recipe-management/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>PostgreSQL 14+</li> <li>Redis 6+</li> <li>Access to Menu and Inventory services</li> </ul>"},{"location":"modules/recipe-management/#installation","title":"Installation","text":"<pre><code># Navigate to recipe module\ncd backend/modules/recipes\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run migrations\nalembic upgrade head\n\n# Start the service\nuvicorn main:app --reload --port 8010\n</code></pre>"},{"location":"modules/recipe-management/#basic-usage","title":"Basic Usage","text":"<pre><code>import requests\n\n# Create a recipe\nrecipe_data = {\n    \"menu_item_id\": 123,\n    \"name\": \"Chicken Alfredo\",\n    \"yield_amount\": 1,\n    \"yield_unit\": \"portion\",\n    \"prep_time_minutes\": 10,\n    \"cook_time_minutes\": 15,\n    \"ingredients\": [\n        {\n            \"ingredient_id\": 45,  # Chicken breast\n            \"quantity\": 200,\n            \"unit\": \"g\",\n            \"preparation_notes\": \"Grilled and sliced\"\n        },\n        {\n            \"ingredient_id\": 67,  # Alfredo sauce\n            \"quantity\": 150,\n            \"unit\": \"ml\",\n            \"is_sub_recipe\": True\n        },\n        {\n            \"ingredient_id\": 89,  # Fettuccine pasta\n            \"quantity\": 180,\n            \"unit\": \"g\",\n            \"preparation_notes\": \"Cooked al dente\"\n        }\n    ],\n    \"instructions\": [\n        \"Cook pasta according to package directions\",\n        \"Grill chicken breast and slice\",\n        \"Heat alfredo sauce\",\n        \"Combine all ingredients and serve\"\n    ]\n}\n\nresponse = requests.post(\n    \"http://localhost:8010/api/v1/recipes\",\n    json=recipe_data,\n    headers={\"Authorization\": \"Bearer &lt;token&gt;\"}\n)\n\nrecipe = response.json()\nprint(f\"Recipe created with cost: ${recipe['total_cost']}\")\n</code></pre>"},{"location":"modules/recipe-management/#core-components","title":"Core Components","text":""},{"location":"modules/recipe-management/#1-recipe-builder","title":"1. Recipe Builder","text":"<pre><code>class RecipeBuilder:\n    def create_recipe(self, recipe_data: RecipeCreate) -&gt; Recipe:\n        # Validate ingredients exist\n        # Check sub-recipe references\n        # Calculate nutritional info\n        # Compute total cost\n        # Store recipe with version\n        pass\n\n    def clone_recipe(self, \n                    recipe_id: int,\n                    adjustments: RecipeAdjustments) -&gt; Recipe:\n        # Copy existing recipe\n        # Apply portion adjustments\n        # Recalculate costs\n        # Create new version\n        pass\n</code></pre>"},{"location":"modules/recipe-management/#2-cost-calculator","title":"2. Cost Calculator","text":"<pre><code>class CostCalculator:\n    def calculate_recipe_cost(self, recipe: Recipe) -&gt; CostBreakdown:\n        # Get current ingredient prices\n        # Calculate sub-recipe costs\n        # Add labor cost (optional)\n        # Include overhead percentage\n        # Return detailed breakdown\n        pass\n\n    def calculate_profit_margin(self,\n                               recipe_cost: Decimal,\n                               menu_price: Decimal) -&gt; ProfitAnalysis:\n        # Calculate gross margin\n        # Determine markup percentage\n        # Compare to target margins\n        # Suggest optimal pricing\n        pass\n</code></pre>"},{"location":"modules/recipe-management/#3-recipe-validator","title":"3. Recipe Validator","text":"<pre><code>class RecipeValidator:\n    def validate_completeness(self, recipe: Recipe) -&gt; ValidationResult:\n        # Check all required fields\n        # Verify ingredient availability\n        # Validate measurements\n        # Check nutritional data\n        # Ensure cost is reasonable\n        pass\n\n    def check_compliance(self, restaurant_id: int) -&gt; ComplianceReport:\n        # Find menu items without recipes\n        # Identify incomplete recipes\n        # Check expired versions\n        # Generate compliance score\n        pass\n</code></pre>"},{"location":"modules/recipe-management/#api-endpoints","title":"API Endpoints","text":"<p>\ud83d\udccc See also: Recipe Management in API Reference for complete API documentation.</p>"},{"location":"modules/recipe-management/#recipe-management","title":"Recipe Management","text":"Endpoint Method Description <code>/api/v1/recipes</code> GET List recipes <code>/api/v1/recipes</code> POST Create recipe <code>/api/v1/recipes/{id}</code> GET Get recipe details <code>/api/v1/recipes/{id}</code> PUT Update recipe <code>/api/v1/recipes/{id}</code> DELETE Delete recipe <code>/api/v1/recipes/{id}/clone</code> POST Clone recipe <code>/api/v1/recipes/{id}/versions</code> GET Get version history"},{"location":"modules/recipe-management/#cost-analysis","title":"Cost Analysis","text":"Endpoint Method Description <code>/api/v1/recipes/{id}/cost</code> GET Get current cost <code>/api/v1/recipes/cost-analysis</code> GET Analyze all costs <code>/api/v1/recipes/margin-report</code> GET Profit margin report <code>/api/v1/recipes/cost-trends</code> GET Cost trend analysis"},{"location":"modules/recipe-management/#compliance","title":"Compliance","text":"Endpoint Method Description <code>/api/v1/recipes/compliance</code> GET Compliance report <code>/api/v1/recipes/validate</code> POST Validate recipes <code>/api/v1/recipes/missing</code> GET Items without recipes"},{"location":"modules/recipe-management/#recipe-structure","title":"Recipe Structure","text":""},{"location":"modules/recipe-management/#basic-recipe-model","title":"Basic Recipe Model","text":"<pre><code>class Recipe:\n    id: int\n    menu_item_id: int\n    name: str\n    version: int\n    yield_amount: Decimal\n    yield_unit: str\n    prep_time_minutes: int\n    cook_time_minutes: int\n    total_time_minutes: int\n\n    # Ingredients\n    ingredients: List[RecipeIngredient]\n\n    # Instructions\n    instructions: List[str]\n    equipment_needed: List[str]\n\n    # Costs\n    ingredient_cost: Decimal\n    labor_cost: Optional[Decimal]\n    overhead_cost: Optional[Decimal]\n    total_cost: Decimal\n    cost_per_portion: Decimal\n\n    # Metadata\n    created_by: int\n    created_at: datetime\n    last_modified: datetime\n    is_active: bool\n</code></pre>"},{"location":"modules/recipe-management/#recipe-ingredient-model","title":"Recipe Ingredient Model","text":"<pre><code>class RecipeIngredient:\n    ingredient_id: int\n    ingredient_name: str\n    quantity: Decimal\n    unit: str\n    preparation_notes: Optional[str]\n    is_sub_recipe: bool\n\n    # Costs\n    unit_cost: Decimal\n    total_cost: Decimal\n\n    # Substitutions\n    can_substitute: bool\n    substitute_options: List[int]\n</code></pre>"},{"location":"modules/recipe-management/#sub-recipe-support","title":"Sub-Recipe Support","text":"<pre><code>graph TD\n    A[Chicken Alfredo] --&gt; B[Grilled Chicken]\n    A --&gt; C[Alfredo Sauce]\n    A --&gt; D[Pasta]\n\n    C --&gt; E[Butter]\n    C --&gt; F[Heavy Cream]\n    C --&gt; G[Parmesan]\n    C --&gt; H[Garlic]\n\n    style A fill:#f9f,stroke:#333,stroke-width:4px\n    style C fill:#bbf,stroke:#333,stroke-width:2px</code></pre>"},{"location":"modules/recipe-management/#cost-calculation","title":"Cost Calculation","text":""},{"location":"modules/recipe-management/#cost-components","title":"Cost Components","text":"<pre><code># Cost calculation example\ncost_breakdown = {\n    \"ingredient_costs\": [\n        {\"name\": \"Chicken\", \"quantity\": 200, \"unit\": \"g\", \"cost\": 2.50},\n        {\"name\": \"Alfredo Sauce\", \"quantity\": 150, \"unit\": \"ml\", \"cost\": 1.75},\n        {\"name\": \"Pasta\", \"quantity\": 180, \"unit\": \"g\", \"cost\": 0.45}\n    ],\n    \"total_ingredient_cost\": 4.70,\n    \"labor_cost\": 2.50,  # Based on prep/cook time\n    \"overhead_percentage\": 0.15,  # 15% overhead\n    \"overhead_cost\": 0.71,\n    \"total_cost\": 7.91,\n    \"menu_price\": 18.95,\n    \"food_cost_percentage\": 24.8,\n    \"gross_margin\": 11.04,\n    \"markup_percentage\": 139.4\n}\n</code></pre>"},{"location":"modules/recipe-management/#profit-margin-analysis","title":"Profit Margin Analysis","text":"<pre><code># Margin analysis\nmargin_analysis = {\n    \"current_margin\": {\n        \"food_cost_percentage\": 24.8,\n        \"gross_profit_margin\": 58.3,\n        \"contribution_margin\": 11.04\n    },\n    \"target_margin\": {\n        \"food_cost_percentage\": 30.0,\n        \"suggested_price\": 15.70\n    },\n    \"competitor_analysis\": {\n        \"average_price\": 17.50,\n        \"price_position\": \"above_average\"\n    }\n}\n</code></pre>"},{"location":"modules/recipe-management/#compliance-validation","title":"Compliance &amp; Validation","text":""},{"location":"modules/recipe-management/#validation-rules","title":"Validation Rules","text":"<pre><code>validation_rules = {\n    \"required_fields\": [\n        \"menu_item_id\",\n        \"ingredients\",\n        \"yield_amount\",\n        \"instructions\"\n    ],\n    \"cost_limits\": {\n        \"max_food_cost_percentage\": 40,\n        \"min_margin_percentage\": 50\n    },\n    \"ingredient_rules\": {\n        \"min_ingredients\": 1,\n        \"max_ingredients\": 50,\n        \"require_measurements\": True\n    }\n}\n</code></pre>"},{"location":"modules/recipe-management/#compliance-dashboard","title":"Compliance Dashboard","text":"<pre><code>compliance_report = {\n    \"total_menu_items\": 145,\n    \"items_with_recipes\": 142,\n    \"compliance_rate\": 97.9,\n    \"issues\": [\n        {\n            \"item_id\": 234,\n            \"item_name\": \"Daily Special\",\n            \"issue\": \"No recipe configured\"\n        },\n        {\n            \"item_id\": 567,\n            \"item_name\": \"Kids Mac &amp; Cheese\",\n            \"issue\": \"Recipe missing costs\"\n        }\n    ],\n    \"cost_analysis\": {\n        \"items_above_target_cost\": 12,\n        \"items_below_min_margin\": 8\n    }\n}\n</code></pre>"},{"location":"modules/recipe-management/#version-control","title":"Version Control","text":""},{"location":"modules/recipe-management/#version-management","title":"Version Management","text":"<pre><code># Version creation\nnew_version = {\n    \"recipe_id\": 123,\n    \"version\": 3,\n    \"changes\": [\n        \"Updated chicken quantity from 180g to 200g\",\n        \"Added garnish instructions\",\n        \"Revised cooking time\"\n    ],\n    \"changed_by\": \"chef_john\",\n    \"change_reason\": \"Portion size adjustment\",\n    \"cost_impact\": \"+0.35\"\n}\n\n# Version comparison\nversion_diff = {\n    \"version_1\": 2,\n    \"version_2\": 3,\n    \"changes\": {\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Chicken\",\n                \"old_quantity\": 180,\n                \"new_quantity\": 200,\n                \"cost_change\": \"+0.35\"\n            }\n        ],\n        \"instructions\": {\n            \"added\": [\"Garnish with parsley\"],\n            \"removed\": [],\n            \"modified\": []\n        },\n        \"cost_change\": {\n            \"old_cost\": 7.56,\n            \"new_cost\": 7.91,\n            \"percentage_change\": 4.6\n        }\n    }\n}\n</code></pre>"},{"location":"modules/recipe-management/#integration-points","title":"Integration Points","text":""},{"location":"modules/recipe-management/#menu-service","title":"Menu Service","text":"<ul> <li>Link recipes to menu items</li> <li>Update costs automatically</li> <li>Validate menu completeness</li> </ul>"},{"location":"modules/recipe-management/#inventory-service","title":"Inventory Service","text":"<ul> <li>Get real-time ingredient prices</li> <li>Check ingredient availability</li> <li>Track usage patterns</li> </ul>"},{"location":"modules/recipe-management/#analytics-service","title":"Analytics Service","text":"<ul> <li>Cost trend analysis</li> <li>Margin optimization</li> <li>Popular recipe tracking</li> </ul>"},{"location":"modules/recipe-management/#supplier-service","title":"Supplier Service","text":"<ul> <li>Price change notifications</li> <li>Alternative supplier costs</li> <li>Bulk pricing calculations</li> </ul>"},{"location":"modules/recipe-management/#analytics-reporting","title":"Analytics &amp; Reporting","text":""},{"location":"modules/recipe-management/#key-reports","title":"Key Reports","text":"<ol> <li> <p>Food Cost Report <pre><code>food_cost_report = {\n    \"period\": \"2024-01\",\n    \"total_food_cost\": 45678.90,\n    \"total_revenue\": 156789.00,\n    \"overall_food_cost_percentage\": 29.1,\n    \"by_category\": {\n        \"appetizers\": 27.3,\n        \"entrees\": 31.2,\n        \"desserts\": 22.8\n    }\n}\n</code></pre></p> </li> <li> <p>Recipe Performance <pre><code>recipe_performance = {\n    \"top_profit_items\": [\n        {\"name\": \"Caesar Salad\", \"margin\": 82.5},\n        {\"name\": \"Pasta Primavera\", \"margin\": 78.3}\n    ],\n    \"needs_optimization\": [\n        {\"name\": \"Ribeye Steak\", \"margin\": 45.2},\n        {\"name\": \"Lobster Roll\", \"margin\": 48.7}\n    ]\n}\n</code></pre></p> </li> <li> <p>Ingredient Usage <pre><code>ingredient_usage = {\n    \"most_used\": [\n        {\"name\": \"Olive Oil\", \"quantity\": \"45L\", \"cost\": 234.50},\n        {\"name\": \"Garlic\", \"quantity\": \"12kg\", \"cost\": 89.40}\n    ],\n    \"cost_drivers\": [\n        {\"name\": \"Beef\", \"total_cost\": 3456.78, \"percentage\": 15.2},\n        {\"name\": \"Seafood\", \"total_cost\": 2890.45, \"percentage\": 12.7}\n    ]\n}\n</code></pre></p> </li> </ol>"},{"location":"modules/recipe-management/#configuration","title":"Configuration","text":"<pre><code># config/recipes.yaml\nrecipes:\n  cost_calculation:\n    include_labor: true\n    labor_rate_per_hour: 25.00\n    overhead_percentage: 15.0\n\n  validation:\n    require_all_items_have_recipes: true\n    max_food_cost_percentage: 35.0\n    min_gross_margin: 60.0\n\n  versioning:\n    keep_versions: 10\n    require_change_notes: true\n\n  alerts:\n    cost_increase_threshold: 10.0  # percentage\n    margin_decrease_threshold: 5.0  # percentage\n\n  import_export:\n    supported_formats: [\"json\", \"csv\", \"xlsx\"]\n    max_batch_size: 1000\n</code></pre>"},{"location":"modules/recipe-management/#testing","title":"Testing","text":"<pre><code># Run unit tests\npytest tests/unit/\n\n# Test cost calculations\npytest tests/test_cost_calculator.py -v\n\n# Test recipe validation\npytest tests/test_validator.py -v\n\n# Test version control\npytest tests/test_versioning.py -v\n\n# Integration tests\npytest tests/integration/\n</code></pre>"},{"location":"modules/recipe-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modules/recipe-management/#common-issues","title":"Common Issues","text":"<ol> <li>Cost Calculation Errors</li> <li>Verify ingredient prices are current</li> <li>Check unit conversions</li> <li> <p>Ensure sub-recipes are calculated</p> </li> <li> <p>Recipe Not Linking to Menu</p> </li> <li>Confirm menu item exists</li> <li>Check recipe is active</li> <li> <p>Verify permissions</p> </li> <li> <p>Version History Missing</p> </li> <li>Check version retention settings</li> <li>Verify database space</li> <li> <p>Review cleanup jobs</p> </li> <li> <p>Import Failures</p> </li> <li>Validate file format</li> <li>Check required fields</li> <li>Review error logs</li> </ol>"},{"location":"modules/recipe-management/#best-practices","title":"Best Practices","text":"<ol> <li>Recipe Creation</li> <li>Use consistent units</li> <li>Include all ingredients</li> <li> <p>Add clear instructions</p> </li> <li> <p>Cost Management</p> </li> <li>Update prices regularly</li> <li>Review margins monthly</li> <li> <p>Track cost trends</p> </li> <li> <p>Version Control</p> </li> <li>Document all changes</li> <li>Test before deploying</li> <li>Keep historical data</li> </ol>"},{"location":"modules/recipe-management/#related-documentation","title":"Related Documentation","text":"<ul> <li>Menu Module</li> <li>Inventory Module (Coming Soon)</li> <li>Analytics Module (Coming Soon)</li> <li>API Reference</li> <li>Cost Management Guide (Coming Soon)</li> </ul>"},{"location":"modules/recipe-management/#support","title":"Support","text":"<ul> <li>Module Owner: Recipe Management Team</li> <li>Email: recipes-team@auraconnect.com</li> <li>Slack: #recipe-management</li> </ul> <p>Last Updated: January 2025</p>"},{"location":"modules/staff/","title":"Staff Module","text":""},{"location":"modules/staff/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Key Features</li> <li>Architecture Overview</li> <li>Quick Start</li> <li>Core Components</li> <li>API Endpoints</li> <li>Employee Roles &amp; Permissions</li> <li>Scheduling System</li> <li>Time Tracking Features</li> <li>Integration Points</li> <li>Mobile App Features</li> <li>Compliance Features</li> <li>Performance Metrics</li> <li>Configuration</li> <li>Testing</li> <li>Troubleshooting</li> <li>Related Documentation</li> </ol>"},{"location":"modules/staff/#overview","title":"Overview","text":"<p>The Staff module provides comprehensive employee management capabilities including scheduling, time tracking, role management, and performance monitoring. It integrates seamlessly with the Payroll module for accurate compensation processing.</p>"},{"location":"modules/staff/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udc65 Employee Management: Complete employee profiles and records</li> <li>\ud83d\udcc5 Smart Scheduling: AI-assisted shift scheduling with conflict detection</li> <li>\u23f0 Time Tracking: Clock in/out with geolocation and biometric support</li> <li>\ud83c\udfaf Role Management: Flexible role-based access control (RBAC)</li> <li>\ud83d\udcc8 Performance Tracking: KPIs, reviews, and goal management</li> <li>\ud83d\udcf1 Mobile Support: Native mobile app for staff</li> <li>\ud83d\udd14 Notifications: Real-time alerts for schedules and updates</li> <li>\ud83d\udcca Analytics: Labor cost analysis and productivity metrics</li> </ul>"},{"location":"modules/staff/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Staff Interfaces\"\n        WEB[Manager Portal]\n        MOBILE[Staff Mobile App]\n        KIOSK[Time Clock Kiosk]\n        BIO[Biometric Devices]\n    end\n\n    subgraph \"Staff Service Core\"\n        API[Staff API]\n        SCHEDULER[Schedule Engine]\n        TIME[Time Tracker]\n        RBAC[Access Control]\n    end\n\n    subgraph \"Integration Layer\"\n        AUTH_INT[Auth Service]\n        PAYROLL_INT[Payroll Service]\n        NOTIFY[Notification Service]\n        LOC[Location Service]\n    end\n\n    subgraph \"Data Layer\"\n        DB[(PostgreSQL)]\n        CACHE[(Redis Cache)]\n        BLOB[Document Storage]\n    end\n\n    WEB --&gt; API\n    MOBILE --&gt; API\n    KIOSK --&gt; API\n    BIO --&gt; TIME\n\n    API --&gt; SCHEDULER\n    API --&gt; TIME\n    API --&gt; RBAC\n\n    SCHEDULER --&gt; AUTH_INT\n    TIME --&gt; PAYROLL_INT\n    API --&gt; NOTIFY\n    TIME --&gt; LOC\n\n    API --&gt; DB\n    SCHEDULER --&gt; CACHE\n    API --&gt; BLOB</code></pre>"},{"location":"modules/staff/#quick-start","title":"Quick Start","text":""},{"location":"modules/staff/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>PostgreSQL 14+</li> <li>Redis 6+</li> <li>S3-compatible storage for documents</li> </ul>"},{"location":"modules/staff/#installation","title":"Installation","text":"<pre><code># Navigate to the staff module\ncd backend/modules/staff\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run migrations\nalembic upgrade head\n\n# Start the service\nuvicorn main:app --reload --port 8005\n</code></pre>"},{"location":"modules/staff/#basic-usage","title":"Basic Usage","text":"<pre><code>import requests\nfrom datetime import datetime, timedelta\n\n# Create an employee\nemployee_data = {\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"email\": \"john.doe@restaurant.com\",\n    \"phone\": \"(555) 123-4567\",\n    \"role_id\": 3,  # Server role\n    \"location_ids\": [1, 2],\n    \"hourly_rate\": \"15.50\",\n    \"employment_type\": \"full_time\",\n    \"start_date\": \"2024-01-15\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8005/api/v1/staff/employees\",\n    json=employee_data,\n    headers={\"Authorization\": \"Bearer &lt;token&gt;\"}\n)\n\nemployee = response.json()\n\n# Create a schedule\nschedule_data = {\n    \"employee_id\": employee[\"id\"],\n    \"location_id\": 1,\n    \"start_time\": \"2024-01-20T09:00:00\",\n    \"end_time\": \"2024-01-20T17:00:00\",\n    \"role\": \"server\",\n    \"break_minutes\": 30\n}\n\nschedule_response = requests.post(\n    \"http://localhost:8005/api/v1/staff/schedules\",\n    json=schedule_data,\n    headers={\"Authorization\": \"Bearer &lt;token&gt;\"}\n)\n</code></pre>"},{"location":"modules/staff/#core-components","title":"Core Components","text":""},{"location":"modules/staff/#1-employee-management","title":"1. Employee Management","text":"<pre><code>class EmployeeService:\n    def create_employee(self, data: EmployeeCreate) -&gt; Employee:\n        # Validate employee data\n        # Create user account\n        # Assign roles and permissions\n        # Set up payroll profile\n        # Send welcome email\n        pass\n\n    def update_employee(self, id: int, data: EmployeeUpdate) -&gt; Employee:\n        # Update employee information\n        # Log changes for audit\n        # Sync with payroll if needed\n        pass\n</code></pre>"},{"location":"modules/staff/#2-schedule-engine","title":"2. Schedule Engine","text":"<pre><code>class ScheduleEngine:\n    def generate_schedule(self, \n                         location_id: int, \n                         week_start: date,\n                         constraints: ScheduleConstraints) -&gt; Schedule:\n        # Analyze labor requirements\n        # Consider employee availability\n        # Apply scheduling rules\n        # Optimize for labor cost\n        # Detect and resolve conflicts\n        pass\n</code></pre>"},{"location":"modules/staff/#3-time-tracking","title":"3. Time Tracking","text":"<pre><code>class TimeTracker:\n    def clock_in(self, \n                 employee_id: int, \n                 location: Location,\n                 method: ClockMethod) -&gt; TimeEntry:\n        # Verify employee identity\n        # Check schedule\n        # Record location\n        # Start time tracking\n        pass\n\n    def clock_out(self, time_entry_id: int) -&gt; TimeEntry:\n        # Calculate hours worked\n        # Apply break rules\n        # Check for overtime\n        # Submit to payroll\n        pass\n</code></pre>"},{"location":"modules/staff/#api-endpoints","title":"API Endpoints","text":"<p>\ud83d\udccc See also: Staff Management in API Reference for integration details.</p>"},{"location":"modules/staff/#employee-management","title":"Employee Management","text":"Endpoint Method Description <code>/api/v1/staff/employees</code> GET List employees <code>/api/v1/staff/employees</code> POST Create employee <code>/api/v1/staff/employees/{id}</code> GET Get employee details <code>/api/v1/staff/employees/{id}</code> PUT Update employee <code>/api/v1/staff/employees/{id}</code> DELETE Deactivate employee <code>/api/v1/staff/employees/{id}/roles</code> PUT Update employee roles"},{"location":"modules/staff/#scheduling","title":"Scheduling","text":"Endpoint Method Description <code>/api/v1/staff/schedules</code> GET Get schedules <code>/api/v1/staff/schedules</code> POST Create schedule <code>/api/v1/staff/schedules/generate</code> POST Auto-generate schedules <code>/api/v1/staff/schedules/{id}/publish</code> POST Publish schedule <code>/api/v1/staff/shifts/swap</code> POST Request shift swap"},{"location":"modules/staff/#time-tracking","title":"Time Tracking","text":"Endpoint Method Description <code>/api/v1/staff/time/clock-in</code> POST Clock in <code>/api/v1/staff/time/clock-out</code> POST Clock out <code>/api/v1/staff/time/entries</code> GET Get time entries <code>/api/v1/staff/time/entries/{id}</code> PUT Edit time entry <p>View Complete API Reference (Coming Soon)</p>"},{"location":"modules/staff/#employee-roles-permissions","title":"Employee Roles &amp; Permissions","text":"<pre><code>graph TD\n    OWNER[Owner] --&gt; GM[General Manager]\n    GM --&gt; AM[Assistant Manager]\n    AM --&gt; SHIFT[Shift Leader]\n\n    SHIFT --&gt; SERVER[Server]\n    SHIFT --&gt; COOK[Cook]\n    SHIFT --&gt; HOST[Host]\n    SHIFT --&gt; BUSSER[Busser]\n\n    GM --&gt; CHEF[Head Chef]\n    CHEF --&gt; SOUS[Sous Chef]\n    SOUS --&gt; LINE[Line Cook]\n    SOUS --&gt; PREP[Prep Cook]</code></pre>"},{"location":"modules/staff/#permission-matrix","title":"Permission Matrix","text":"Permission Owner Manager Shift Lead Staff View All Employees \u2713 \u2713 \u2713 - Edit Employees \u2713 \u2713 - - Create Schedules \u2713 \u2713 \u2713 - Approve Time Off \u2713 \u2713 \u2713 - View Own Schedule \u2713 \u2713 \u2713 \u2713 Clock In/Out \u2713 \u2713 \u2713 \u2713 Request Time Off \u2713 \u2713 \u2713 \u2713"},{"location":"modules/staff/#scheduling-system","title":"Scheduling System","text":""},{"location":"modules/staff/#advanced-scheduling-features","title":"Advanced Scheduling Features","text":"<ul> <li>AI-Powered Optimization: Automatically generate optimal schedules</li> <li>Skill-Based Assignment: Match staff skills to shift requirements</li> <li>Availability Management: Track and respect employee preferences</li> <li>Labor Cost Forecasting: Predict costs based on schedules</li> <li>Shift Swapping: Employee-initiated swap requests with approval</li> <li>Template Scheduling: Reusable schedule patterns</li> </ul>"},{"location":"modules/staff/#schedule-generation-algorithm","title":"Schedule Generation Algorithm","text":"<pre><code># Enhanced scheduling constraints\nconstraints = {\n    \"min_staff\": {\n        \"monday\": {\"09:00\": 3, \"12:00\": 5, \"18:00\": 7},\n        # ... other days\n    },\n    \"max_hours_per_week\": 40,\n    \"max_consecutive_days\": 6,\n    \"min_hours_between_shifts\": 8,\n    \"required_skills\": {\n        \"kitchen\": [\"food_handler_cert\"],\n        \"bar\": [\"alcohol_service_cert\"]\n    },\n    \"preferences\": {\n        \"respect_availability\": True,\n        \"balance_hours\": True,\n        \"minimize_overtime\": True\n    },\n    \"labor_budget\": {\n        \"target_percentage\": 28.0,\n        \"max_percentage\": 32.0\n    }\n}\n\n# Generate optimal schedule with AI assistance\nschedule = schedule_engine.generate(\n    location_id=1,\n    week_start=date(2024, 1, 22),\n    constraints=constraints,\n    optimization_goals=[\"cost\", \"coverage\", \"satisfaction\"]\n)\n</code></pre>"},{"location":"modules/staff/#shift-templates","title":"Shift Templates","text":"<pre><code>{\n  \"templates\": [\n    {\n      \"name\": \"Morning Server\",\n      \"start_time\": \"07:00\",\n      \"end_time\": \"15:00\",\n      \"roles\": [\"server\"],\n      \"days\": [\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"]\n    },\n    {\n      \"name\": \"Evening Server\",\n      \"start_time\": \"16:00\",\n      \"end_time\": \"23:00\",\n      \"roles\": [\"server\"],\n      \"days\": [\"tue\", \"wed\", \"thu\", \"fri\", \"sat\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/staff/#time-tracking-features","title":"Time Tracking Features","text":""},{"location":"modules/staff/#clock-methods","title":"Clock Methods","text":"<ol> <li>Web Portal: Browser-based clock in/out</li> <li>Mobile App: GPS-verified mobile clocking</li> <li>Kiosk: Shared terminal with PIN/badge</li> <li>Biometric: Fingerprint or facial recognition (Face ID supported)</li> </ol>"},{"location":"modules/staff/#geofencing","title":"Geofencing","text":"<pre><code># Location verification\ngeofence_config = {\n    \"enabled\": True,\n    \"radius_meters\": 100,\n    \"locations\": [\n        {\n            \"id\": 1,\n            \"latitude\": 40.7128,\n            \"longitude\": -74.0060\n        }\n    ]\n}\n</code></pre>"},{"location":"modules/staff/#biometric-authentication","title":"Biometric Authentication","text":""},{"location":"modules/staff/#supported-methods","title":"Supported Methods","text":"<ol> <li>Fingerprint Recognition</li> <li>Secure SHA-256 hashing with salt</li> <li>Template-based matching</li> <li> <p>Multi-finger enrollment support</p> </li> <li> <p>Face ID</p> </li> <li>3D facial recognition</li> <li>Liveness detection</li> <li> <p>Works in various lighting conditions</p> </li> <li> <p>PIN Backup</p> </li> <li>4-6 digit PIN as fallback</li> <li>Rate-limited (5 attempts per minute)</li> <li>Automatic lockout protection</li> </ol>"},{"location":"modules/staff/#security-features","title":"Security Features","text":"<pre><code># Biometric data security\nbiometric_security = {\n    \"encryption\": \"SHA-256 with salt\",\n    \"hash_rounds\": 10000,\n    \"storage\": \"Hashed templates only\",\n    \"gdpr_compliant\": True,\n    \"retention_days\": 90,\n    \"audit_logging\": True\n}\n</code></pre>"},{"location":"modules/staff/#gdpr-compliance","title":"GDPR Compliance","text":"<ul> <li>Right to deletion</li> <li>Data export capability</li> <li>Consent management</li> <li>Retention policies</li> <li>Audit trail</li> </ul>"},{"location":"modules/staff/#api-endpoints_1","title":"API Endpoints","text":"Endpoint Method Description <code>/api/v1/staff/biometric/enroll/fingerprint</code> POST Enroll fingerprint <code>/api/v1/staff/biometric/enroll/face</code> POST Enroll Face ID <code>/api/v1/staff/biometric/check-in</code> POST Biometric clock in <code>/api/v1/staff/biometric/pin/set</code> POST Set backup PIN <code>/api/v1/staff/biometric/{id}</code> DELETE Remove biometric data"},{"location":"modules/staff/#integration-points","title":"Integration Points","text":""},{"location":"modules/staff/#payroll-service","title":"Payroll Service","text":"<ul> <li>Submit approved time entries</li> <li>Calculate overtime and breaks</li> <li>Track paid time off</li> <li>Process tip distributions</li> </ul>"},{"location":"modules/staff/#auth-service","title":"Auth Service","text":"<ul> <li>User account creation</li> <li>Role assignment</li> <li>Permission validation</li> <li>Biometric enrollment</li> </ul>"},{"location":"modules/staff/#notification-service","title":"Notification Service","text":"<ul> <li>Schedule updates</li> <li>Shift reminders</li> <li>Time-off approvals</li> <li>Clock-in confirmations</li> </ul>"},{"location":"modules/staff/#events","title":"Events","text":"Event Description Payload <code>staff.employee.created</code> New employee added Employee details <code>staff.schedule.published</code> Schedule published Schedule ID, week <code>staff.shift.swapped</code> Shift swap approved Swap details <code>staff.time.clocked_in</code> Employee clocked in Entry details <code>staff.time.clocked_out</code> Employee clocked out Hours worked <code>staff.biometric.enrolled</code> Biometric data enrolled Employee ID, method <code>staff.biometric.check_in</code> Biometric check-in Employee ID, location"},{"location":"modules/staff/#database-schema","title":"Database Schema","text":""},{"location":"modules/staff/#core-tables","title":"Core Tables","text":"<ul> <li><code>employees</code> - Employee records</li> <li><code>employee_roles</code> - Role assignments</li> <li><code>schedules</code> - Work schedules</li> <li><code>schedule_entries</code> - Individual shifts</li> <li><code>time_entries</code> - Clock in/out records</li> <li><code>time_off_requests</code> - PTO requests</li> <li><code>employee_documents</code> - Certifications, etc.</li> <li><code>staff_biometrics</code> - Encrypted biometric data</li> <li><code>attendance_logs</code> - Detailed attendance records</li> </ul> <p>View Complete Schema (Coming Soon)</p>"},{"location":"modules/staff/#mobile-app-features","title":"Mobile App Features","text":""},{"location":"modules/staff/#employee-app","title":"Employee App","text":"<ul> <li>View schedule</li> <li>Clock in/out with GPS</li> <li>Request time off</li> <li>Swap shifts</li> <li>View pay stubs</li> <li>Team communication</li> <li>Training materials</li> </ul>"},{"location":"modules/staff/#manager-app","title":"Manager App","text":"<ul> <li>Create/edit schedules</li> <li>Approve time off</li> <li>View labor costs</li> <li>Monitor attendance</li> <li>Send announcements</li> <li>Performance reviews</li> </ul>"},{"location":"modules/staff/#compliance-features","title":"Compliance Features","text":""},{"location":"modules/staff/#labor-law-compliance","title":"Labor Law Compliance","text":"<pre><code>class ComplianceChecker:\n    def validate_schedule(self, schedule: Schedule) -&gt; ValidationResult:\n        # Check minimum wage requirements\n        # Verify break compliance\n        # Validate overtime rules\n        # Check minor work restrictions\n        # Ensure meal period compliance\n        pass\n</code></pre>"},{"location":"modules/staff/#audit-trail","title":"Audit Trail","text":"<p>All actions are logged for compliance:</p> <ul> <li>Schedule changes</li> <li>Time entry modifications</li> <li>Rate changes</li> <li>Role assignments</li> </ul>"},{"location":"modules/staff/#performance-metrics","title":"Performance Metrics","text":""},{"location":"modules/staff/#kpis-tracked","title":"KPIs Tracked","text":"<ol> <li>Attendance</li> <li>On-time percentage</li> <li>Absence rate</li> <li> <p>No-show tracking</p> </li> <li> <p>Productivity</p> </li> <li>Sales per labor hour</li> <li>Tables served</li> <li> <p>Orders processed</p> </li> <li> <p>Labor Cost</p> </li> <li>Labor as % of sales</li> <li>Overtime hours</li> <li>Schedule efficiency</li> </ol>"},{"location":"modules/staff/#security","title":"Security","text":"<ul> <li>Biometric data encryption</li> <li>Role-based access control</li> <li>Time entry tampering prevention</li> <li>Audit logs for all changes</li> <li>PII data protection</li> </ul>"},{"location":"modules/staff/#configuration","title":"Configuration","text":"<pre><code># config/staff.yaml\nstaff:\n  max_schedule_weeks_ahead: 4\n  min_shift_length_hours: 3\n  max_shift_length_hours: 12\n\ntime_tracking:\n  clock_in_window_minutes: 15\n  auto_clock_out_hours: 16\n  require_manager_approval_after_minutes: 30\n\ncompliance:\n  minor_max_hours_school_day: 3\n  minor_max_hours_non_school: 8\n  required_break_after_hours: 5\n  break_duration_minutes: 30\n</code></pre>"},{"location":"modules/staff/#testing","title":"Testing","text":"<pre><code># Run unit tests\npytest tests/unit/\n\n# Test scheduling algorithm\npytest tests/test_scheduler.py -v\n\n# Test time tracking\npytest tests/test_time_tracking.py\n\n# Integration tests\npytest tests/integration/\n</code></pre>"},{"location":"modules/staff/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modules/staff/#common-issues","title":"Common Issues","text":"<ol> <li>Cannot Clock In</li> <li>Check schedule exists</li> <li>Verify location/geofence</li> <li> <p>Confirm active employee status</p> </li> <li> <p>Schedule Conflicts</p> </li> <li>Review availability settings</li> <li>Check time-off requests</li> <li> <p>Verify role requirements</p> </li> <li> <p>Missing Time Entries</p> </li> <li>Check clock-out status</li> <li>Review auto-clock rules</li> <li>Verify sync with payroll</li> </ol>"},{"location":"modules/staff/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Details (Coming Soon)</li> <li>API Reference (Coming Soon)</li> <li>Database Schema (Coming Soon)</li> <li>Integration Guide (Coming Soon)</li> <li>Mobile App Guide (Coming Soon)</li> </ul>"},{"location":"modules/staff/#support","title":"Support","text":"<ul> <li>Module Owner: Staff Management Team</li> <li>Email: staff-team@auraconnect.com</li> <li>Slack: #staff-module</li> </ul> <p>Last Updated: January 2025</p>"},{"location":"modules/table-management/","title":"Table Management Module","text":""},{"location":"modules/table-management/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Key Features</li> <li>Architecture Overview</li> <li>Quick Start</li> <li>Core Components</li> <li>API Endpoints</li> <li>Table Layout Designer</li> <li>Reservation System</li> <li>Real-time Updates</li> <li>Analytics &amp; Reporting</li> <li>Integration Points</li> <li>Configuration</li> <li>Testing</li> <li>Troubleshooting</li> <li>Related Documentation</li> </ol>"},{"location":"modules/table-management/#overview","title":"Overview","text":"<p>The Table Management module provides comprehensive restaurant floor planning, table management, and reservation handling. It includes a visual layout designer, real-time status tracking, and intelligent table assignment algorithms.</p>"},{"location":"modules/table-management/#key-features","title":"Key Features","text":"<ul> <li>\ud83c\udfe2 Multi-Floor Support: Manage multiple dining areas and floors</li> <li>\ud83c\udfa8 Visual Layout Designer: Drag-and-drop table arrangement</li> <li>\ud83d\udcc5 Smart Reservations: Intelligent table assignment and optimization</li> <li>\ud83d\udd04 Real-time Status: Live table status updates via WebSocket</li> <li>\ud83d\udcf1 QR Code Menus: Digital menu access per table</li> <li>\ud83d\udd17 Table Combining: Support for joining tables for larger parties</li> <li>\ud83d\udcca Utilization Analytics: Track table turnover and efficiency</li> <li>\ud83d\udce4 Import/Export: Layout templates and bulk operations</li> </ul>"},{"location":"modules/table-management/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"User Interfaces\"\n        HOST[Host Stand]\n        MANAGER[Manager Portal]\n        SERVER[Server App]\n        CUSTOMER[Customer App]\n    end\n\n    subgraph \"Table Service Core\"\n        API[Table API]\n        LAYOUT[Layout Engine]\n        ASSIGN[Assignment Algorithm]\n        STATUS[Status Manager]\n    end\n\n    subgraph \"Real-time Layer\"\n        WS[WebSocket Server]\n        PUBSUB[Redis Pub/Sub]\n        EVENTS[Event Stream]\n    end\n\n    subgraph \"Integration Services\"\n        ORDERS[Order Service]\n        RESERV[Reservation Service]\n        ANALYTICS[Analytics Service]\n    end\n\n    subgraph \"Data Layer\"\n        DB[(PostgreSQL)]\n        CACHE[(Redis Cache)]\n        CDN[CDN for QR codes]\n    end\n\n    HOST --&gt; API\n    MANAGER --&gt; API\n    SERVER --&gt; API\n    CUSTOMER --&gt; API\n\n    API --&gt; LAYOUT\n    API --&gt; ASSIGN\n    API --&gt; STATUS\n\n    STATUS --&gt; WS\n    WS --&gt; PUBSUB\n    PUBSUB --&gt; EVENTS\n\n    API --&gt; ORDERS\n    API --&gt; RESERV\n    STATUS --&gt; ANALYTICS\n\n    API --&gt; DB\n    STATUS --&gt; CACHE\n    API --&gt; CDN</code></pre>"},{"location":"modules/table-management/#quick-start","title":"Quick Start","text":""},{"location":"modules/table-management/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>PostgreSQL 14+</li> <li>Redis 6+</li> <li>WebSocket support</li> </ul>"},{"location":"modules/table-management/#installation","title":"Installation","text":"<pre><code># Navigate to table management module\ncd backend/modules/table_management\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run migrations\nalembic upgrade head\n\n# Start the service\nuvicorn main:app --reload --port 8009\n</code></pre>"},{"location":"modules/table-management/#basic-usage","title":"Basic Usage","text":"<pre><code>import requests\n\n# Create a floor\nfloor_data = {\n    \"name\": \"Main Dining Room\",\n    \"level\": 1,\n    \"is_active\": True,\n    \"layout_config\": {\n        \"width\": 1000,\n        \"height\": 800,\n        \"grid_size\": 20\n    }\n}\n\nfloor_response = requests.post(\n    \"http://localhost:8009/api/v1/tables/floors\",\n    json=floor_data,\n    headers={\"Authorization\": \"Bearer &lt;token&gt;\"}\n)\n\nfloor = floor_response.json()\n\n# Create a table\ntable_data = {\n    \"floor_id\": floor[\"id\"],\n    \"table_number\": \"T01\",\n    \"capacity\": 4,\n    \"shape\": \"square\",\n    \"position\": {\"x\": 100, \"y\": 100},\n    \"size\": {\"width\": 80, \"height\": 80},\n    \"rotation\": 0,\n    \"is_active\": True\n}\n\ntable_response = requests.post(\n    \"http://localhost:8009/api/v1/tables\",\n    json=table_data,\n    headers={\"Authorization\": \"Bearer &lt;token&gt;\"}\n)\n</code></pre>"},{"location":"modules/table-management/#core-components","title":"Core Components","text":""},{"location":"modules/table-management/#1-layout-engine","title":"1. Layout Engine","text":"<p>Manages floor plans and table positioning.</p> <pre><code>class LayoutEngine:\n    def create_floor(self, floor_data: FloorCreate) -&gt; Floor:\n        # Create floor with dimensions\n        # Initialize grid system\n        # Set up coordinate mapping\n        pass\n\n    def add_table(self, table_data: TableCreate) -&gt; Table:\n        # Validate position\n        # Check for overlaps\n        # Generate QR code\n        # Save table configuration\n        pass\n\n    def validate_layout(self, floor_id: int) -&gt; LayoutValidation:\n        # Check table spacing\n        # Verify accessibility paths\n        # Validate capacity distribution\n        pass\n</code></pre>"},{"location":"modules/table-management/#2-assignment-algorithm","title":"2. Assignment Algorithm","text":"<p>Intelligent table assignment based on party size and preferences.</p> <pre><code>class TableAssignmentAlgorithm:\n    def assign_table(self,\n                    party_size: int,\n                    preferences: TablePreferences,\n                    available_tables: List[Table]) -&gt; Table:\n        # Score tables based on:\n        # - Capacity match\n        # - Location preference\n        # - Special requirements\n        # - Current utilization\n        pass\n\n    def combine_tables(self,\n                      party_size: int,\n                      floor_id: int) -&gt; List[Table]:\n        # Find adjacent tables\n        # Check if combinable\n        # Create table group\n        pass\n</code></pre>"},{"location":"modules/table-management/#3-status-manager","title":"3. Status Manager","text":"<p>Real-time table status tracking and updates.</p> <pre><code>class TableStatusManager:\n    def update_status(self,\n                     table_id: int,\n                     status: TableStatus,\n                     metadata: dict) -&gt; None:\n        # Update database\n        # Broadcast via WebSocket\n        # Update cache\n        # Log status change\n        pass\n\n    def get_floor_status(self, floor_id: int) -&gt; FloorStatus:\n        # Aggregate table statuses\n        # Calculate occupancy\n        # Include wait times\n        pass\n</code></pre>"},{"location":"modules/table-management/#api-endpoints","title":"API Endpoints","text":"<p>\ud83d\udccc See also: Table Management in API Reference for complete API documentation.</p>"},{"location":"modules/table-management/#floor-management","title":"Floor Management","text":"Endpoint Method Description <code>/api/v1/tables/floors</code> GET List all floors <code>/api/v1/tables/floors</code> POST Create floor <code>/api/v1/tables/floors/{id}</code> GET Get floor details <code>/api/v1/tables/floors/{id}</code> PUT Update floor <code>/api/v1/tables/floors/{id}/layout</code> GET Get floor layout"},{"location":"modules/table-management/#table-management","title":"Table Management","text":"Endpoint Method Description <code>/api/v1/tables</code> GET List tables <code>/api/v1/tables</code> POST Create table <code>/api/v1/tables/{id}</code> PUT Update table <code>/api/v1/tables/{id}/status</code> PUT Update table status <code>/api/v1/tables/{id}/qr</code> GET Get QR code <code>/api/v1/tables/combine</code> POST Combine tables"},{"location":"modules/table-management/#session-management","title":"Session Management","text":"Endpoint Method Description <code>/api/v1/tables/sessions</code> POST Start dining session <code>/api/v1/tables/sessions/{id}</code> GET Get session details <code>/api/v1/tables/sessions/{id}/end</code> POST End session <code>/api/v1/tables/sessions/{id}/transfer</code> POST Transfer to another table"},{"location":"modules/table-management/#table-layout-designer","title":"Table Layout Designer","text":""},{"location":"modules/table-management/#visual-design-features","title":"Visual Design Features","text":"<pre><code>// Layout designer configuration\nconst designerConfig = {\n    grid: {\n        size: 20,\n        visible: true,\n        snap: true\n    },\n    shapes: ['square', 'circle', 'rectangle', 'oval'],\n    tools: ['select', 'add', 'delete', 'rotate', 'duplicate'],\n    constraints: {\n        minSpacing: 60,  // cm between tables\n        maxTables: 100,\n        pathWidth: 120   // cm for walkways\n    }\n}\n</code></pre>"},{"location":"modules/table-management/#table-shapes-and-sizes","title":"Table Shapes and Sizes","text":"<pre><code>table_templates:\n  - name: \"2-Top Square\"\n    shape: square\n    capacity: 2\n    dimensions: {width: 70, height: 70}\n\n  - name: \"4-Top Round\"\n    shape: circle\n    capacity: 4\n    dimensions: {diameter: 90}\n\n  - name: \"6-Top Rectangle\"\n    shape: rectangle\n    capacity: 6\n    dimensions: {width: 180, height: 90}\n\n  - name: \"Booth\"\n    shape: rectangle\n    capacity: 4\n    dimensions: {width: 150, height: 120}\n    type: booth\n</code></pre>"},{"location":"modules/table-management/#importexport-formats","title":"Import/Export Formats","text":"<pre><code>// JSON export format\n{\n    \"version\": \"1.0\",\n    \"restaurant_id\": 1,\n    \"floors\": [\n        {\n            \"name\": \"Main Floor\",\n            \"tables\": [\n                {\n                    \"number\": \"T01\",\n                    \"shape\": \"square\",\n                    \"capacity\": 4,\n                    \"position\": {\"x\": 100, \"y\": 100},\n                    \"rotation\": 0\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"modules/table-management/#reservation-system","title":"Reservation System","text":""},{"location":"modules/table-management/#table-assignment-logic","title":"Table Assignment Logic","text":"<pre><code>graph TD\n    A[Reservation Request] --&gt; B{Check Availability}\n    B --&gt;|Available| C[Score Tables]\n    B --&gt;|Not Available| D[Suggest Alternatives]\n\n    C --&gt; E{Preferences Match?}\n    E --&gt;|Yes| F[Assign Best Match]\n    E --&gt;|Partial| G[Assign with Notes]\n    E --&gt;|No| H[Manual Assignment]\n\n    F --&gt; I[Confirm Reservation]\n    G --&gt; I\n    H --&gt; I\n\n    D --&gt; J[Alternative Times]\n    D --&gt; K[Waitlist]</code></pre>"},{"location":"modules/table-management/#preference-handling","title":"Preference Handling","text":"<pre><code>class TablePreferences:\n    location: str  # \"window\", \"private\", \"bar\", \"patio\"\n    accessibility: bool\n    high_chair: bool\n    booth_seating: bool\n    quiet_area: bool\n    near_amenities: List[str]  # [\"restroom\", \"exit\"]\n</code></pre>"},{"location":"modules/table-management/#real-time-updates","title":"Real-time Updates","text":""},{"location":"modules/table-management/#websocket-events","title":"WebSocket Events","text":"<pre><code>// Client connection\nconst ws = new WebSocket('ws://localhost:8009/ws/tables');\n\n// Subscribe to floor updates\nws.send(JSON.stringify({\n    action: 'subscribe',\n    floor_id: 1\n}));\n\n// Receive status updates\nws.onmessage = (event) =&gt; {\n    const update = JSON.parse(event.data);\n    if (update.type === 'table_status_changed') {\n        updateTableUI(update.table_id, update.status);\n    }\n};\n</code></pre>"},{"location":"modules/table-management/#event-types","title":"Event Types","text":"Event Description Payload <code>table_status_changed</code> Table status update table_id, status, timestamp <code>session_started</code> New dining session session_id, table_id, party_size <code>session_ended</code> Session completed session_id, duration, total <code>tables_combined</code> Tables joined table_ids, session_id <code>layout_updated</code> Floor plan changed floor_id, changes"},{"location":"modules/table-management/#analytics-reporting","title":"Analytics &amp; Reporting","text":""},{"location":"modules/table-management/#key-metrics","title":"Key Metrics","text":"<pre><code># Table utilization metrics\nutilization_metrics = {\n    \"occupancy_rate\": 0.75,  # Average across day\n    \"turn_time_minutes\": 65,  # Average dining duration\n    \"peak_occupancy\": 0.95,  # During rush hours\n    \"revenue_per_table\": 250.00,  # Daily average\n    \"wait_time_minutes\": 15  # Average wait time\n}\n\n# Heat map data\nheat_map_data = {\n    \"table_id\": \"T01\",\n    \"utilization_score\": 0.85,\n    \"revenue_score\": 0.92,\n    \"turnover_rate\": 4.5  # Times per day\n}\n</code></pre>"},{"location":"modules/table-management/#reports-available","title":"Reports Available","text":"<ol> <li>Daily Utilization Report</li> <li>Occupancy by hour</li> <li>Revenue per table</li> <li> <p>Turn times analysis</p> </li> <li> <p>Table Performance</p> </li> <li>Most/least requested tables</li> <li>Revenue by table location</li> <li> <p>Maintenance requirements</p> </li> <li> <p>Reservation Analytics</p> </li> <li>No-show rates</li> <li>Booking patterns</li> <li>Preference trends</li> </ol>"},{"location":"modules/table-management/#integration-points","title":"Integration Points","text":""},{"location":"modules/table-management/#order-service","title":"Order Service","text":"<ul> <li>Link orders to table sessions</li> <li>Track order timing</li> <li>Calculate table revenue</li> </ul>"},{"location":"modules/table-management/#pos-integration","title":"POS Integration","text":"<ul> <li>Sync table status</li> <li>Transfer checks between tables</li> <li>Split bills by table</li> </ul>"},{"location":"modules/table-management/#staff-management","title":"Staff Management","text":"<ul> <li>Server table assignments</li> <li>Section management</li> <li>Performance tracking</li> </ul>"},{"location":"modules/table-management/#configuration","title":"Configuration","text":"<pre><code># config/tables.yaml\ntable_management:\n  floors:\n    max_floors: 5\n    max_tables_per_floor: 100\n\n  tables:\n    min_spacing_cm: 60\n    default_turn_time_minutes: 90\n    auto_release_minutes: 15\n\n  reservations:\n    advance_days: 30\n    min_party_size: 1\n    max_party_size: 20\n    buffer_minutes: 15\n\n  qr_codes:\n    base_url: \"https://menu.restaurant.com\"\n    size: 200\n    error_correction: \"M\"\n\n  websocket:\n    ping_interval: 30\n    max_connections_per_client: 5\n</code></pre>"},{"location":"modules/table-management/#testing","title":"Testing","text":"<pre><code># Run unit tests\npytest tests/unit/\n\n# Test layout engine\npytest tests/test_layout_engine.py -v\n\n# Test assignment algorithm\npytest tests/test_assignment.py -v\n\n# Test WebSocket connections\npytest tests/test_websocket.py -v\n\n# Integration tests\npytest tests/integration/\n</code></pre>"},{"location":"modules/table-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modules/table-management/#common-issues","title":"Common Issues","text":"<ol> <li>Tables Not Showing on Layout</li> <li>Verify floor is active</li> <li>Check table coordinates</li> <li> <p>Clear browser cache</p> </li> <li> <p>Can't Combine Tables</p> </li> <li>Ensure tables are adjacent</li> <li>Check if tables are available</li> <li> <p>Verify combine permissions</p> </li> <li> <p>WebSocket Connection Drops</p> </li> <li>Check network stability</li> <li>Verify authentication</li> <li> <p>Review connection limits</p> </li> <li> <p>QR Codes Not Working</p> </li> <li>Verify CDN configuration</li> <li>Check URL formatting</li> <li>Test QR code scanner</li> </ol>"},{"location":"modules/table-management/#best-practices","title":"Best Practices","text":"<ol> <li>Layout Design</li> <li>Maintain adequate spacing</li> <li>Consider traffic flow</li> <li> <p>Group similar table sizes</p> </li> <li> <p>Status Management</p> </li> <li>Update promptly</li> <li>Use appropriate statuses</li> <li> <p>Log status reasons</p> </li> <li> <p>Reservation Handling</p> </li> <li>Set realistic buffer times</li> <li>Track no-show patterns</li> <li>Optimize table assignments</li> </ol>"},{"location":"modules/table-management/#related-documentation","title":"Related Documentation","text":"<ul> <li>Orders Module</li> <li>Reservations Guide (Coming Soon)</li> <li>POS Integration (Coming Soon)</li> <li>Analytics Module (Coming Soon)</li> <li>API Reference</li> </ul>"},{"location":"modules/table-management/#support","title":"Support","text":"<ul> <li>Module Owner: Table Management Team</li> <li>Email: tables-team@auraconnect.com</li> <li>Slack: #table-management</li> </ul> <p>Last Updated: January 2025</p>"}]}