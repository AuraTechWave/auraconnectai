name: AuraConnect CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auraconnect_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        run: |
          cd backend
          # Stop build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Treat all other issues as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Check imports and syntax
        run: |
          cd backend
          export PYTHONPATH="${PWD}:$PYTHONPATH"
          python -c "
          import sys
          try:
              # Test core imports
              from core.database import Base
              from core.mixins import TimestampMixin
              print('‚úÖ Core imports successful')
              
              # Test payroll module imports
              from modules.payroll.enums.payroll_enums import TaxType
              from modules.payroll.models.payroll_models import TaxRule
              from modules.payroll.services.payroll_tax_engine import PayrollTaxEngine
              from modules.payroll.services.payroll_tax_service import PayrollTaxService
              print('‚úÖ Payroll module imports successful')
              
              print('‚úÖ All critical imports working')
          except Exception as e:
              print(f'‚ùå Import error: {e}')
              sys.exit(1)
          "

      - name: Run tests with pytest
        run: |
          cd backend
          export PYTHONPATH="${PWD}:$PYTHONPATH"
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/auraconnect_test"
          pytest modules/payroll/tests/ -v --tb=short
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/auraconnect_test

  frontend-tests:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --passWithNoTests

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install MkDocs dependencies
        run: |
          pip install mkdocs mkdocs-material

      - name: Build documentation
        run: |
          mkdocs build --strict

  # Optional: Deploy job that runs only on main branch
  deploy:
    name: Deploy to Production
    needs: [backend-tests, frontend-tests, docs-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy notification
        run: |
          echo "üöÄ All tests passed! Ready for deployment."
          echo "Backend tests: ‚úÖ"
          echo "Frontend tests: ‚úÖ" 
          echo "Documentation: ‚úÖ"