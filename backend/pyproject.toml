[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | alembic
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "pytest", "alembic"]
known_first_party = ["core", "modules", "tests"]
known_local_folder = ["core", "modules"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
import_heading_stdlib = "Standard library imports"
import_heading_thirdparty = "Third-party imports"
import_heading_firstparty = "Local application imports"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/alembic/*"]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "DTZ",  # flake8-datetimez
    "RUF",  # Ruff-specific rules
    "T20",  # flake8-print
    "N",    # pep8-naming
    "ERA",  # eradicate
    "PL",   # pylint
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
]
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "alembic",
    "migrations",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["ARG", "T20", "PLR2004"]
"alembic/*" = ["ERA", "T20"]

[tool.ruff.isort]
known-first-party = ["core", "modules"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "pytest"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
exclude = [
    "alembic/",
    "migrations/",
    ".venv/",
    "venv/",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--cov=core",
    "--cov=modules",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["core", "modules"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/alembic/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "alembic"]
skips = ["B101", "B601"]

[tool.poetry]
name = "auraconnect-backend"
version = "1.0.0"
description = "AuraConnect AI Backend Services"
authors = ["AuraConnect Team"]
readme = "README.md"
packages = [{include = "core"}, {include = "modules"}]

[tool.poetry.dependencies]
python = "^3.9"
fastapi = "^0.109.0"
sqlalchemy = "^2.0.0"
psycopg2-binary = "^2.9.0"
pydantic = "^2.0.0"
python-jose = "^3.3.0"
passlib = "^1.7.4"
python-multipart = "^0.0.6"
redis = "^5.0.0"
celery = "^5.3.0"
alembic = "^1.13.0"
python-dotenv = "^1.0.0"
httpx = "^0.25.0"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"

[tool.poetry.group.dev.dependencies]
black = "^24.0.0"
ruff = "^0.1.0"
isort = "^5.13.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
bandit = "^1.7.0"
pylint = "^3.0.0"
pytest-mock = "^3.12.0"
faker = "^22.0.0"
factory-boy = "^3.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"