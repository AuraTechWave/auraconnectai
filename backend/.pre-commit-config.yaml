# backend/.pre-commit-config.yaml

# Pre-commit hook configuration for the backend
# Install: pip install pre-commit && pre-commit install

default_stages: [commit]
fail_fast: false

repos:
  # General formatting and linting
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-json
      - id: pretty-format-json
        args: ['--autofix', '--no-sort-keys']
      - id: debug-statements
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.12.0
    hooks:
      - id: black
        language_version: python3.10
        args: ['--line-length=100']

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ['--profile', 'black', '--line-length', '100']

  # Linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: [
          '--max-line-length=100',
          '--extend-ignore=E203,W503',
          '--exclude=migrations,alembic',
        ]
        additional_dependencies: [
          'flake8-docstrings',
          'flake8-bugbear',
          'flake8-comprehensions',
          'flake8-simplify',
        ]

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        args: [
          '--ignore-missing-imports',
          '--no-strict-optional',
          '--warn-redundant-casts',
          '--warn-unused-ignores',
        ]
        additional_dependencies: [
          'types-requests',
          'types-python-dateutil',
          'sqlalchemy-stubs',
        ]
        exclude: '^(migrations|alembic|tests)/'

  # Security checks
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-ll', '-x', 'tests,migrations']

  # Docstring checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: ['--convention=google']
        exclude: '^(migrations|alembic|tests)/'

  # SQL injection prevention
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 3.0.0a1
    hooks:
      - id: sqlfluff-lint
        args: ['--dialect', 'postgres']
        files: '\.(sql|py)$'
        exclude: '^(migrations|alembic)/'

  # Local hooks
  - repo: local
    hooks:
      # Run payroll unit tests
      - id: payroll-unit-tests
        name: Payroll Unit Tests
        entry: bash -c 'cd backend/modules/payroll && ./tests/run_tests.sh --unit --no-coverage'
        language: system
        pass_filenames: false
        files: '^backend/modules/payroll/.*\.py$'
        exclude: '^backend/modules/payroll/tests/.*'
        stages: [commit]

      # Check for secrets
      - id: detect-secrets
        name: Detect Secrets
        entry: detect-secrets scan
        language: system
        types: [text]
        exclude: '\.lock$|\.yaml$|\.yml$'

      # Verify no print statements in production code
      - id: no-print-statements
        name: No Print Statements
        entry: bash -c 'grep -r "print(" --include="*.py" --exclude-dir=tests --exclude-dir=scripts . && exit 1 || exit 0'
        language: system
        pass_filenames: false

      # Check for TODO comments
      - id: todo-comments
        name: TODO Comments Check
        entry: bash -c 'grep -r "TODO\|FIXME\|XXX" --include="*.py" . || exit 0'
        language: system
        pass_filenames: false
        verbose: true

      # Validate requirements files
      - id: requirements-txt-fixer
        name: Fix requirements.txt
        entry: requirements-txt-fixer
        language: system
        files: 'requirements.*\.txt$'

# Configuration for specific tools
files: |
  (?x)^(
    backend/.*\.py|
    backend/.*\.sql|
    backend/.*\.json|
    backend/.*\.yaml|
    backend/.*\.yml
  )$

exclude: |
  (?x)^(
    backend/.*/migrations/.*|
    backend/.*/alembic/.*|
    backend/.*/__pycache__/.*|
    backend/.*/\.pytest_cache/.*|
    backend/.*/\.mypy_cache/.*|
    backend/.*/\.coverage|
    backend/.*/htmlcov/.*|
    backend/.*/venv/.*|
    backend/.*/\.env.*
  )$