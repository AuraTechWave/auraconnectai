{
  "openapi": "3.1.0",
  "info": {
    "title": "AuraConnect AI - Restaurant Management API",
    "description": "\n    Comprehensive restaurant management platform API with advanced payroll processing,\n    tax calculations, and POS integration capabilities.\n    \n    ## Features\n    \n    * **Enhanced Payroll Processing** - Complete payroll engine with tax integration\n    * **Tax Services** - Multi-jurisdiction tax calculations with real-time rates\n    * **Staff Management** - Employee scheduling, attendance, and role management\n    * **Order Management** - Complete order lifecycle management\n    * **POS Integration** - Connect with major POS systems (Square, Toast, Clover)\n    * **Menu Management** - Complete CRUD for menu items, categories, and modifiers\n    * **Menu Versioning** - Complete version control and audit trail for menu changes\n    * **Recipe Management** - Bill of Materials (BOM) tracking with cost calculations\n    * **Inventory Management** - Real-time inventory tracking with low-stock alerts\n    * **Vendor Management** - Comprehensive vendor and purchase order management\n    * **Analytics & Reporting** - Comprehensive business intelligence with AI insights\n    * **Customer Management** - Customer profiles, order history, and preferences\n    * **Feedback & Reviews** - Customer feedback collection and review management\n    * **Kitchen Display System** - Real-time order routing and kitchen station management\n    * **Loyalty & Rewards** - Points-based loyalty programs and rewards\n    * **Table Management** - Restaurant floor layout and table state management\n    * **Reservation System** - Advanced booking system with waitlist management and confirmations\n    * **Promotions & Marketing** - Promotional campaigns, coupons, and A/B testing\n    * **Payment Processing** - Multiple payment methods, split bills, and refunds\n    \n    ## Authentication\n    \n    Most endpoints require JWT authentication. Use the `/auth/login` endpoint to obtain a token.\n    \n    ### Test Credentials:\n    - **Admin**: username=`admin`, password=`secret`\n    - **Payroll Manager**: username=`payroll_clerk`, password=`secret`  \n    - **Manager**: username=`manager`, password=`secret`\n    \n    ## API Versioning\n    \n    This API follows semantic versioning. Current version includes:\n    - Phase 3: Enhanced Payroll Engine\n    - Phase 4: API & Schemas with Authentication\n    - Phase 5: Complete Feature Integration\n    \n    ",
    "version": "5.0.0",
    "x-logo": {
      "url": "https://auraconnect.ai/assets/logo.png",
      "altText": "AuraConnect Logo"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Local development server"
    },
    {
      "url": "https://api-staging.auraconnect.ai",
      "description": "Staging server"
    },
    {
      "url": "https://api.auraconnect.ai",
      "description": "Production server"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login For Access Token",
        "description": "Authenticate user and return JWT access and refresh tokens.\n\n## Request Body (Form Data)\n- **username**: Username for authentication\n- **password**: Password for authentication\n\n## Response\nReturns JWT access token, refresh token, and user information with session management.\n\n## Features\n- Creates secure session with Redis storage\n- Issues both access and refresh tokens\n- Tracks user agent and IP address\n- Provides comprehensive security logging\n\n## Test Credentials\n- **Username**: admin, **Password**: secret (Admin access)\n- **Username**: payroll_clerk, **Password**: secret (Payroll access)\n- **Username**: manager, **Password**: secret (Manager access)\n\n## Example\n```bash\ncurl -X POST \"http://localhost:8000/auth/login\"          -H \"Content-Type: application/x-www-form-urlencoded\"          -d \"username=admin&password=secret\"\n```",
        "operationId": "create_login_for_access_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_for_access_token_auth_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Read Users Me",
        "description": "Get current authenticated user information.\n\n## Authentication Required\n- Requires valid JWT token in Authorization header\n\n## Response\nReturns current user information including roles and tenant access.\n\n## Example\n```bash\ncurl -X GET \"http://localhost:8000/auth/me\"          -H \"Authorization: Bearer YOUR_JWT_TOKEN\"\n```",
        "operationId": "list_read_users_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh Token Endpoint",
        "description": "Refresh JWT access token using refresh token.\n\n## Request Body\n- **refresh_token**: Valid refresh token\n\n## Response\nReturns new JWT access token with extended expiration.\n\n## Security Features\n- Validates refresh token against session store\n- Checks token blacklist\n- Updates session last accessed time\n- Maintains session continuity\n\n## Example\n```bash\ncurl -X POST \"http://localhost:8000/auth/refresh\"          -H \"Content-Type: application/json\"          -d '{\"refresh_token\": \"your_refresh_token\"}'\n```",
        "operationId": "create_refresh_token_endpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout Endpoint",
        "description": "Logout user and revoke tokens.\n\n## Authentication Required\n- Requires valid JWT token in Authorization header\n\n## Request Body\n- **logout_all_sessions**: Whether to logout from all sessions (default: false)\n\n## Response\nReturns logout confirmation.\n\n## Security Features\n- Blacklists current token immediately\n- Revokes session(s) from Redis store\n- Optional logout from all user sessions\n- Comprehensive security logging\n\n## Example\n```bash\ncurl -X POST \"http://localhost:8000/auth/logout\"          -H \"Authorization: Bearer your_access_token\"          -H \"Content-Type: application/json\"          -d '{\"logout_all_sessions\": false}'\n```",
        "operationId": "create_logout_endpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest",
                "default": {
                  "logout_all_sessions": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/auth/sessions": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get User Sessions",
        "description": "Get current user's active sessions.\n\n## Authentication Required\n- Requires valid JWT token in Authorization header\n\n## Response\nReturns list of active sessions with metadata.\n\n## Example\n```bash\ncurl -X GET \"http://localhost:8000/auth/sessions\"          -H \"Authorization: Bearer your_access_token\"\n```",
        "operationId": "list_get_user_sessions",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/auth/sessions/{session_id}": {
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Revoke Session",
        "description": "Revoke a specific session.\n\n## Authentication Required\n- Requires valid JWT token in Authorization header\n\n## Path Parameters\n- **session_id**: Session ID to revoke\n\n## Response\nReturns revocation confirmation.\n\n## Example\n```bash\ncurl -X DELETE \"http://localhost:8000/auth/sessions/session_id\"          -H \"Authorization: Bearer your_access_token\"\n```",
        "operationId": "delete_revoke_session",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/payrolls/run": {
      "post": {
        "tags": [
          "Enhanced Payroll"
        ],
        "summary": "Run Payroll",
        "description": "Execute payroll processing for specified staff members and pay period.\n\n## Authentication Required\n- Requires `payroll_manager` or `admin` role\n\n## Request Body\n- **staff_ids**: Optional list of staff IDs (processes all active staff if not provided)\n- **pay_period_start**: Start date of pay period (YYYY-MM-DD)\n- **pay_period_end**: End date of pay period (YYYY-MM-DD)\n- **tenant_id**: Optional tenant ID for multi-tenant environments\n- **force_recalculate**: Force recalculation of existing payroll\n\n## Response\nReturns a job ID and summary of the payroll run. Processing happens asynchronously.\n\n## Example\n```json\n{\n    \"staff_ids\": [1, 2, 3],\n    \"pay_period_start\": \"2024-01-15\",\n    \"pay_period_end\": \"2024-01-29\",\n    \"tenant_id\": 1,\n    \"force_recalculate\": false\n}\n```",
        "operationId": "create_run_payroll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollRunRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollRunResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/payrolls/run/{job_id}/status": {
      "get": {
        "tags": [
          "Enhanced Payroll"
        ],
        "summary": "Get Payroll Run Status",
        "description": "Get the status of a payroll batch processing job from persistent storage.\n\n## Authentication Required\n- Requires `payroll_manager`, `payroll_clerk`, or `admin` role\n\n## Path Parameters\n- **job_id**: The job ID returned from POST /payrolls/run\n\n## Response\nReturns current status, progress, and any errors for the batch job.",
        "operationId": "get_get_payroll_run_status_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollBatchStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/payrolls/{staff_id}": {
      "get": {
        "tags": [
          "Enhanced Payroll"
        ],
        "summary": "Get Staff Payroll",
        "description": "Retrieve payroll history for a specific staff member.\n\n## Authentication Required\n- Requires `staff_viewer`, `manager`, `payroll_clerk`, `payroll_manager`, or `admin` role\n\n## Path Parameters\n- **staff_id**: The ID of the staff member\n\n## Query Parameters\n- **limit**: Number of records to return (1-100, default: 10)\n- **tenant_id**: Optional tenant ID for filtering\n\n## Response\nReturns payroll history with summary information for each pay period.",
        "operationId": "get_get_staff_payroll_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of payroll records to return",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of payroll records to return"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Tenant ID filter",
              "title": "Tenant Id"
            },
            "description": "Tenant ID filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollHistoryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/payrolls/{staff_id}/detail": {
      "get": {
        "tags": [
          "Enhanced Payroll"
        ],
        "summary": "Get Staff Payroll Detail",
        "description": "Retrieve detailed payroll information for a staff member and specific pay period.\n\n## Authentication Required\n- Requires `staff_viewer`, `manager`, `payroll_clerk`, `payroll_manager`, or `admin` role\n\n## Path Parameters\n- **staff_id**: The ID of the staff member\n\n## Query Parameters\n- **pay_period_start**: Start date of the pay period (YYYY-MM-DD)\n- **pay_period_end**: End date of the pay period (YYYY-MM-DD)\n- **tenant_id**: Optional tenant ID for filtering\n\n## Response\nReturns comprehensive payroll details including hours, earnings, and deductions breakdown.",
        "operationId": "get_get_staff_payroll_detail_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          },
          {
            "name": "pay_period_start",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Pay period start date",
              "title": "Pay Period Start"
            },
            "description": "Pay period start date"
          },
          {
            "name": "pay_period_end",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Pay period end date",
              "title": "Pay Period End"
            },
            "description": "Pay period end date"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Tenant ID filter",
              "title": "Tenant Id"
            },
            "description": "Tenant ID filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPayrollDetail"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/payrolls/rules": {
      "get": {
        "tags": [
          "Enhanced Payroll"
        ],
        "summary": "Get Payroll Rules",
        "description": "Retrieve tax rules and policies for payroll calculations.\n\n## Authentication Required\n- Requires `payroll_clerk`, `payroll_manager`, or `admin` role\n\n## Query Parameters\n- **location**: Location/jurisdiction for tax rules (default: \"default\")\n- **tenant_id**: Optional tenant ID for filtering\n- **active_only**: Return only currently active rules (default: true)\n\n## Response\nReturns comprehensive tax rules information including rates, jurisdictions, and effective dates.\n\n## Example\n- GET /payrolls/rules?location=california&active_only=true\n- GET /payrolls/rules?tenant_id=1",
        "operationId": "list_get_payroll_rules",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Location/jurisdiction for tax rules",
              "default": "default",
              "title": "Location"
            },
            "description": "Location/jurisdiction for tax rules"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Tenant ID filter",
              "title": "Tenant Id"
            },
            "description": "Tenant ID filter"
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Return only active rules",
              "default": true,
              "title": "Active Only"
            },
            "description": "Return only active rules"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollRulesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/payrolls/stats": {
      "get": {
        "tags": [
          "Enhanced Payroll"
        ],
        "summary": "Get Payroll Statistics",
        "description": "Get payroll statistics and analytics for a specific period.\n\n## Authentication Required\n- Requires `payroll_clerk`, `payroll_manager`, or `admin` role\n\n## Query Parameters\n- **period_start**: Start date for statistics period (YYYY-MM-DD)\n- **period_end**: End date for statistics period (YYYY-MM-DD)\n- **tenant_id**: Optional tenant ID for filtering\n\n## Response\nReturns comprehensive payroll statistics including totals, averages, and breakdowns.",
        "operationId": "list_get_payroll_statistics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "period_start",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Statistics period start date",
              "title": "Period Start"
            },
            "description": "Statistics period start date"
          },
          {
            "name": "period_end",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Statistics period end date",
              "title": "Period End"
            },
            "description": "Statistics period end date"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Tenant ID filter",
              "title": "Tenant Id"
            },
            "description": "Tenant ID filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollStatsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/payrolls/export": {
      "post": {
        "tags": [
          "Enhanced Payroll"
        ],
        "summary": "Export Payroll Data",
        "description": "Export payroll data in various formats (CSV, Excel, PDF).\n\n## Authentication Required\n- Requires `payroll_clerk`, `payroll_manager`, or `admin` role\n\n## Request Body\n- **format**: Export format (csv, xlsx, pdf)\n- **pay_period_start**: Export period start date\n- **pay_period_end**: Export period end date\n- **staff_ids**: Optional specific staff IDs to export\n- **include_details**: Include detailed breakdown\n- **tenant_id**: Optional tenant ID filter\n\n## Response\nReturns export job ID. The actual file will be generated asynchronously.",
        "operationId": "create_export_payroll_data",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/staff/members": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "List Staff",
        "operationId": "list_list_staff",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Staff"
        ],
        "summary": "Add Staff",
        "operationId": "create_add_staff",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Staff Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/tax/calculate": {
      "post": {
        "tags": [
          "Payroll",
          "Payroll Tax"
        ],
        "summary": "Calculate Payroll Taxes",
        "description": "Calculate payroll taxes for a given gross amount and parameters.\n\n## Request Body\n- **gross_amount**: Gross pay amount to calculate taxes on\n- **pay_date**: Date for tax rule lookup\n- **location**: Location/jurisdiction for tax calculation\n- **employee_id**: Optional employee ID for specific calculations\n- **year_to_date_gross**: Optional YTD gross for cap calculations\n- **year_to_date_ss**: Optional YTD social security for cap tracking\n- **year_to_date_medicare**: Optional YTD medicare for cap tracking\n\n## Response\nReturns detailed tax calculations including:\n- Federal, state, and local taxes\n- Social security and medicare\n- Employee and employer portions\n- Applied tax rules\n\n## Authentication\nRequires payroll access permissions.",
        "operationId": "create_calculate_payroll_taxes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollTaxCalculationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollTaxCalculationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/payroll/tax/calculate-and-save": {
      "post": {
        "tags": [
          "Payroll",
          "Payroll Tax"
        ],
        "summary": "Calculate And Save Taxes",
        "description": "Calculate payroll taxes and save the results with audit trail.\n\n## Request Body\n- **employee_id**: Employee ID for tax calculation\n- **gross_amount**: Gross pay amount\n- **pay_period_start**: Start of pay period\n- **pay_period_end**: End of pay period\n- **location**: Tax jurisdiction location\n- **tenant_id**: Optional tenant ID for multi-tenant support\n\n## Response\nReturns tax calculation results with:\n- All calculated tax amounts\n- Total deductions\n- Net pay amount\n- Applied tax rules audit trail\n\n## Authentication\nRequires payroll access permissions.",
        "operationId": "create_calculate_and_save_taxes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollTaxServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollTaxServiceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/payroll/tax/rules": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Tax"
        ],
        "summary": "Get Tax Rules",
        "description": "Get tax rules with optional filtering.\n\n## Query Parameters\n- **location**: Filter by location/jurisdiction\n- **tax_type**: Filter by tax type (FEDERAL, STATE, LOCAL, etc.)\n- **status**: Filter by status (ACTIVE, INACTIVE, PENDING)\n- **effective_date**: Get rules effective on specific date\n\n## Response\nReturns list of tax rules matching the criteria.\n\n## Authentication\nRequires payroll access permissions.",
        "operationId": "list_get_tax_rules",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Location"
            }
          },
          {
            "name": "tax_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaxRuleType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tax Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaxRuleStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "effective_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Effective Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxRuleResponse"
                  },
                  "title": "Response Get Tax Rules Api Payroll Tax Rules Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/tax/rules/{rule_id}": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Tax"
        ],
        "summary": "Get Tax Rule",
        "description": "Get a specific tax rule by ID.\n\n## Path Parameters\n- **rule_id**: Tax rule ID\n\n## Response\nReturns the tax rule details.\n\n## Authentication\nRequires payroll access permissions.",
        "operationId": "get_get_tax_rule_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/tax/effective-rates": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Tax"
        ],
        "summary": "Get Effective Tax Rates",
        "description": "Get effective tax rates for a location and gross amount.\n\n## Query Parameters\n- **location**: Tax jurisdiction location\n- **gross_amount**: Gross pay amount for rate calculation\n- **pay_date**: Optional date for rate lookup (defaults to today)\n\n## Response\nReturns effective tax rates and estimated tax amounts.\n\n## Authentication\nRequires payroll access permissions.",
        "operationId": "list_get_effective_tax_rates",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Location"
            }
          },
          {
            "name": "gross_amount",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ],
              "title": "Gross Amount"
            }
          },
          {
            "name": "pay_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pay Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/config/pay-policies": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Pay Policies"
        ],
        "summary": "Get Staff Pay Policies",
        "description": "Get staff pay policies with optional filtering.\n\n## Query Parameters\n- **staff_id**: Optional staff ID filter\n- **active_only**: Only return active policies (default: true)\n- **limit**: Maximum records to return\n- **offset**: Records to skip for pagination\n\n## Response\nReturns list of staff pay policies.\n\n## Error Responses\n- **404**: Staff not found\n- **422**: Invalid query parameters",
        "operationId": "list_get_staff_pay_policies",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by staff ID",
              "title": "Staff Id"
            },
            "description": "Filter by staff ID"
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only return active policies",
              "default": true,
              "title": "Active Only"
            },
            "description": "Only return active policies"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaffPayPolicyResponse"
                  },
                  "title": "Response Get Staff Pay Policies Api Payroll Config Pay Policies Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Pay Policies"
        ],
        "summary": "Create Staff Pay Policy",
        "description": "Create a new staff pay policy.\n\n## Request Body\nSee StaffPayPolicyCreate schema for required fields.\n\n## Response\nReturns the created pay policy.\n\n## Error Responses\n- **400**: Business rule violation (e.g., duplicate policy)\n- **422**: Invalid input data",
        "operationId": "create_create_staff_pay_policy",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffPayPolicyCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPayPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/config/pay-policies/{staff_id}": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Pay Policies"
        ],
        "summary": "Get Staff Pay Policy",
        "description": "Get active pay policy for a specific staff member.\n\n## Path Parameters\n- **staff_id**: Staff member ID\n\n## Response\nReturns the active pay policy.\n\n## Error Responses\n- **404**: No active policy found",
        "operationId": "get_get_staff_pay_policy_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPayPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Pay Policies"
        ],
        "summary": "Update Staff Pay Policy",
        "description": "Update an existing staff pay policy.\n\n## Path Parameters\n- **staff_id**: Staff member ID\n\n## Request Body\nPartial update - only include fields to update.\n\n## Response\nReturns the updated pay policy.\n\n## Error Responses\n- **404**: Policy not found\n- **422**: Invalid update data",
        "operationId": "update_update_staff_pay_policy",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Policy Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPayPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Pay Policies"
        ],
        "summary": "Deactivate Staff Pay Policy",
        "description": "Deactivate a staff pay policy (soft delete).\n\n## Path Parameters\n- **staff_id**: Staff member ID\n\n## Response\nNo content on success.\n\n## Error Responses\n- **404**: Policy not found",
        "operationId": "delete_deactivate_staff_pay_policy",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/config/overtime-rules": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Overtime Rules"
        ],
        "summary": "Get Overtime Rules",
        "description": "Get overtime rules with optional location filtering.\n\n## Query Parameters\n- **location**: Optional location filter\n- **limit**: Maximum records to return\n- **offset**: Records to skip for pagination\n\n## Response\nReturns list of overtime rules.\n\n## Error Responses\n- **500**: Database error",
        "operationId": "list_get_overtime_rules",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by location",
              "title": "Location"
            },
            "description": "Filter by location"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OvertimeRuleResponse"
                  },
                  "title": "Response Get Overtime Rules Api Payroll Config Overtime Rules Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Overtime Rules"
        ],
        "summary": "Create Overtime Rule",
        "description": "Create a new overtime rule.\n\n## Request Body\nSee OvertimeRuleCreate schema for required fields.\n\n## Response\nReturns the created overtime rule.\n\n## Error Responses\n- **400**: Invalid rule data or duplicate location\n- **422**: Validation error",
        "operationId": "create_create_overtime_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OvertimeRuleCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/config/overtime-rules/{location}": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Overtime Rules"
        ],
        "summary": "Get Overtime Rule By Location",
        "description": "Get overtime rule for a specific location.\n\n## Path Parameters\n- **location**: Location/jurisdiction code\n\n## Response\nReturns the overtime rule.\n\n## Error Responses\n- **404**: Rule not found",
        "operationId": "get_get_overtime_rule_by_location_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/config/overtime-rules/{rule_id}": {
      "put": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Overtime Rules"
        ],
        "summary": "Update Overtime Rule",
        "description": "Update an existing overtime rule.\n\n## Path Parameters\n- **rule_id**: Overtime rule ID\n\n## Request Body\nPartial update - only include fields to update.\n\n## Response\nReturns the updated overtime rule.\n\n## Error Responses\n- **404**: Rule not found\n- **422**: Invalid threshold values",
        "operationId": "update_update_overtime_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Rule Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Overtime Rules"
        ],
        "summary": "Delete Overtime Rule",
        "description": "Delete an overtime rule.\n\n## Path Parameters\n- **rule_id**: Overtime rule ID\n\n## Response\nNo content on success.\n\n## Error Responses\n- **404**: Rule not found",
        "operationId": "delete_delete_overtime_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/config/role-pay-rates": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Role Pay Rates"
        ],
        "summary": "Get Role Based Pay Rates",
        "description": "Get role-based pay rates with optional filtering.\n\n## Query Parameters\n- **role_name**: Optional role name filter\n- **location**: Optional location filter\n- **effective_date**: Get rates effective on specific date\n- **limit**: Maximum records to return\n- **offset**: Records to skip for pagination\n\n## Response\nReturns list of role-based pay rates.\n\n## Error Responses\n- **500**: Database error",
        "operationId": "list_get_role_based_pay_rates",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "role_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by role name",
              "title": "Role Name"
            },
            "description": "Filter by role name"
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by location",
              "title": "Location"
            },
            "description": "Filter by location"
          },
          {
            "name": "effective_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Get rates effective on date",
              "title": "Effective Date"
            },
            "description": "Get rates effective on date"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                  },
                  "title": "Response Get Role Based Pay Rates Api Payroll Config Role Pay Rates Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Role Pay Rates"
        ],
        "summary": "Create Role Based Pay Rate",
        "description": "Create a new role-based pay rate.\n\n## Request Body\nSee RoleBasedPayRateCreate schema for required fields.\n\n## Response\nReturns the created role-based pay rate.\n\n## Error Responses\n- **400**: Overlapping effective dates for same role/location\n- **422**: Validation error",
        "operationId": "create_create_role_based_pay_rate",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleBasedPayRateCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/config/role-pay-rates/{rate_id}": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Role Pay Rates"
        ],
        "summary": "Get Role Based Pay Rate",
        "description": "Get a specific role-based pay rate.\n\n## Path Parameters\n- **rate_id**: Pay rate ID\n\n## Response\nReturns the pay rate.\n\n## Error Responses\n- **404**: Rate not found",
        "operationId": "get_get_role_based_pay_rate_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rate Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Role Pay Rates"
        ],
        "summary": "Update Role Based Pay Rate",
        "description": "Update an existing role-based pay rate.\n\n## Path Parameters\n- **rate_id**: Pay rate ID\n\n## Request Body\nPartial update - only include fields to update.\n\n## Response\nReturns the updated pay rate.\n\n## Error Responses\n- **404**: Rate not found\n- **400**: Invalid update would create overlapping rates",
        "operationId": "update_update_role_based_pay_rate",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rate Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Rate Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payroll",
          "Payroll Configuration",
          "Role Pay Rates"
        ],
        "summary": "Expire Role Based Pay Rate",
        "description": "Expire a role-based pay rate (soft delete).\n\n## Path Parameters\n- **rate_id**: Pay rate ID\n\n## Query Parameters\n- **expiry_date**: Date to expire the rate (defaults to now)\n\n## Response\nNo content on success.\n\n## Error Responses\n- **404**: Rate not found",
        "operationId": "delete_expire_role_based_pay_rate",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rate Id"
            }
          },
          {
            "name": "expiry_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expiry Date"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/config/payroll-configs": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Configuration"
        ],
        "summary": "Get Payroll Configurations",
        "description": "Get all payroll configurations with optional filtering.\n\n## Query Parameters\n- **tenant_id**: Optional tenant ID filter\n- **active_only**: Only return active configurations (default: true)\n- **limit**: Maximum records to return\n- **offset**: Records to skip for pagination\n\n## Response\nReturns list of payroll configurations.\n\n## Error Responses\n- **500**: Database error",
        "operationId": "list_get_payroll_configurations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tenant ID",
              "title": "Tenant Id"
            },
            "description": "Filter by tenant ID"
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only return active configurations",
              "default": true,
              "title": "Active Only"
            },
            "description": "Only return active configurations"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayrollConfigurationResponse"
                  },
                  "title": "Response Get Payroll Configurations Api Payroll Config Payroll Configs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payroll",
          "Payroll Configuration"
        ],
        "summary": "Create Payroll Configuration",
        "description": "Create a new payroll configuration.\n\n## Request Body\nSee PayrollConfigurationCreate schema.\n\n## Response\nReturns the created configuration.\n\n## Error Responses\n- **400**: Invalid configuration data\n- **409**: Duplicate configuration key",
        "operationId": "create_create_payroll_configuration",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollConfigurationCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollConfigurationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/config/payroll-configs/{config_id}": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Configuration"
        ],
        "summary": "Get Payroll Configuration",
        "description": "Get a specific payroll configuration.\n\n## Path Parameters\n- **config_id**: Configuration ID\n\n## Response\nReturns the configuration.\n\n## Error Responses\n- **404**: Configuration not found",
        "operationId": "get_get_payroll_configuration_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollConfigurationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payroll",
          "Payroll Configuration"
        ],
        "summary": "Update Payroll Configuration",
        "description": "Update a payroll configuration.\n\n## Path Parameters\n- **config_id**: Configuration ID\n\n## Request Body\nPartial update - only include fields to update.\n\n## Response\nReturns the updated configuration.\n\n## Error Responses\n- **404**: Configuration not found\n- **400**: Invalid update data",
        "operationId": "update_update_payroll_configuration",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Config Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Config Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollConfigurationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payroll",
          "Payroll Configuration"
        ],
        "summary": "Delete Payroll Configuration",
        "description": "Delete (deactivate) a payroll configuration.\n\n## Path Parameters\n- **config_id**: Configuration ID\n\n## Response\nNo content on success.\n\n## Error Responses\n- **404**: Configuration not found",
        "operationId": "delete_delete_payroll_configuration",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Config Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/payments/history/{employee_id}": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Payments",
          "Payment History"
        ],
        "summary": "Get Employee Payment History",
        "description": "Get payment history for an employee with pagination.\n\n## Path Parameters\n- **employee_id**: Employee ID\n\n## Query Parameters\n- **start_date**: Filter payments from this date\n- **end_date**: Filter payments to this date\n- **status**: Filter by payment status\n- **limit**: Maximum records to return (default: 50, max: 100)\n- **offset**: Number of records to skip for pagination\n\n## Response\nReturns paginated payment history with summary statistics.\n\n## Error Responses\n- **404**: Employee not found\n- **422**: Invalid query parameters",
        "operationId": "get_get_employee_payment_history_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "employee_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Employee Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date filter",
              "title": "Start Date"
            },
            "description": "Start date filter"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date filter",
              "title": "End Date"
            },
            "description": "End date filter"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PaymentStatus-Input"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Payment status filter",
              "title": "Status"
            },
            "description": "Payment status filter"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum records to return",
              "default": 50,
              "title": "Limit"
            },
            "description": "Maximum records to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of records to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of records to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentHistoryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/payments/history/details/{payment_id}": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Payments",
          "Payment History"
        ],
        "summary": "Get Payment Details",
        "description": "Get detailed information for a specific payment.\n\n## Path Parameters\n- **payment_id**: Payment record ID\n\n## Response\nReturns complete payment details with structured breakdown.\n\n## Error Responses\n- **404**: Payment not found",
        "operationId": "get_get_payment_details_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/payments/summary/by-period": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Payments",
          "Payment Summary"
        ],
        "summary": "Get Payment Summary By Period",
        "description": "Get payment summary for a specific period using SQL aggregation.\n\n## Query Parameters\n- **start_date**: Period start date (required)\n- **end_date**: Period end date (required)\n- **tenant_id**: Optional tenant filter\n\n## Response\nReturns aggregated payment data for the period.\n\n## Error Responses\n- **422**: Invalid date range\n- **500**: Database error",
        "operationId": "list_get_payment_summary_by_period",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period start date",
              "title": "Start Date"
            },
            "description": "Period start date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period end date",
              "title": "End Date"
            },
            "description": "Period end date"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tenant",
              "title": "Tenant Id"
            },
            "description": "Filter by tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentSummaryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/payments/summary/by-employee/{employee_id}": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Payments",
          "Payment Summary"
        ],
        "summary": "Get Employee Payment Summary",
        "description": "Get payment summary for a specific employee.\n\n## Path Parameters\n- **employee_id**: Employee ID\n\n## Query Parameters\n- **year**: Optional year filter\n\n## Response\nReturns year-to-date or annual summary for the employee.\n\n## Error Responses\n- **404**: Employee has no payment records\n- **500**: Database error",
        "operationId": "get_get_employee_payment_summary_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "employee_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Employee Id"
            }
          },
          {
            "name": "year",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by year",
              "title": "Year"
            },
            "description": "Filter by year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/payments/summary/tax-summary": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Payments",
          "Payment Summary"
        ],
        "summary": "Get Tax Summary",
        "description": "Get tax summary with grouping options.\n\n## Query Parameters\n- **start_date**: Period start date\n- **end_date**: Period end date\n- **group_by**: Grouping option (tax_type, location, month)\n\n## Response\nReturns tax totals grouped by selected criteria.\n\n## Error Responses\n- **422**: Invalid grouping option\n- **500**: Database error",
        "operationId": "list_get_tax_summary",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period start date",
              "title": "Start Date"
            },
            "description": "Period start date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period end date",
              "title": "End Date"
            },
            "description": "Period end date"
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Group by: tax_type, location, or month",
              "default": "tax_type",
              "title": "Group By"
            },
            "description": "Group by: tax_type, location, or month"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/payments/export": {
      "post": {
        "tags": [
          "Payroll",
          "Payroll Payments",
          "Payment Export"
        ],
        "summary": "Export Payment Data",
        "description": "Export payment data asynchronously.\n\n## Request Body\n- **start_date**: Export period start\n- **end_date**: Export period end\n- **employee_ids**: Optional list of employee IDs\n- **format**: Export format (csv, excel, pdf)\n- **include_details**: Include detailed breakdown\n\n## Response\nReturns job information for tracking export progress.\n\n## Error Responses\n- **422**: Invalid date range or format\n- **429**: Too many export requests (rate limited)",
        "operationId": "create_export_payment_data",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentExportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/payroll/payments/export/status/{job_id}": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Payments",
          "Payment Export"
        ],
        "summary": "Get Export Status",
        "description": "Get status of an export job.\n\n## Path Parameters\n- **job_id**: Export job ID\n\n## Response\nReturns current job status and metadata.\n\n## Error Responses\n- **404**: Job not found",
        "operationId": "get_get_export_status_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/payments/export/download/{job_id}": {
      "get": {
        "tags": [
          "Payroll",
          "Payroll Payments",
          "Payment Export"
        ],
        "summary": "Download Export",
        "description": "Download completed export file.\n\n## Path Parameters\n- **job_id**: Export job ID\n\n## Response\nReturns file download if export is complete.\n\n## Error Responses\n- **404**: Job not found\n- **425**: Export not ready\n- **410**: Export expired",
        "operationId": "get_download_export_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/payments/{payment_id}/status": {
      "put": {
        "tags": [
          "Payroll",
          "Payroll Payments"
        ],
        "summary": "Update Payment Status",
        "description": "Update payment status.\n\n## Path Parameters\n- **payment_id**: Payment record ID\n\n## Request Body\n- **status**: New payment status\n- **payment_method**: Payment method (if paid)\n- **payment_reference**: Payment reference number\n- **notes**: Optional notes\n\n## Response\nReturns updated payment status information.\n\n## Error Responses\n- **404**: Payment not found\n- **400**: Invalid status transition",
        "operationId": "update_update_payment_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/payments/{payment_id}/void": {
      "post": {
        "tags": [
          "Payroll",
          "Payroll Payments"
        ],
        "summary": "Void Payment",
        "description": "Void a payment.\n\n## Path Parameters\n- **payment_id**: Payment record ID\n\n## Query Parameters\n- **reason**: Reason for voiding (required)\n\n## Response\nReturns voided payment information.\n\n## Error Responses\n- **404**: Payment not found\n- **400**: Cannot void paid payment",
        "operationId": "create_void_payment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Reason for voiding payment",
              "title": "Reason"
            },
            "description": "Reason for voiding payment"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/payroll/health": {
      "get": {
        "tags": [
          "Payroll"
        ],
        "summary": "Payroll Health Check",
        "description": "Health check endpoint for payroll module.\n\nReturns:\n    dict: Health status of payroll module",
        "operationId": "list_payroll_health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/attendance/log": {
      "post": {
        "tags": [
          "Staff Attendance",
          "Attendance"
        ],
        "summary": "Clock In Out",
        "operationId": "create_clock_in_out",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/shifts/": {
      "post": {
        "tags": [
          "Staff Shifts",
          "Shifts"
        ],
        "summary": "Create Shift",
        "operationId": "create_create_shift",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Shift Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/fingerprint/enroll": {
      "post": {
        "tags": [
          "Staff Biometrics"
        ],
        "summary": "Enroll Fingerprint",
        "description": "Enroll a staff member's fingerprint with enhanced security",
        "operationId": "create_enroll_fingerprint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FingerprintEnrollmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FingerprintEnrollmentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/staff/face/enroll": {
      "post": {
        "tags": [
          "Staff Biometrics"
        ],
        "summary": "Enroll Face",
        "description": "Enroll a staff member's face ID with enhanced security",
        "operationId": "create_enroll_face",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceEnrollmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceEnrollmentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/staff/biometric/check-in": {
      "post": {
        "tags": [
          "Staff Biometrics"
        ],
        "summary": "Biometric Check In",
        "description": "Check in using biometric (fingerprint or face) with enhanced security",
        "operationId": "create_biometric_check_in",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BiometricCheckInRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BiometricCheckInResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/fingerprint/check-in": {
      "post": {
        "tags": [
          "Staff Biometrics"
        ],
        "summary": "Fingerprint Check In",
        "description": "Check in using fingerprint (legacy endpoint - redirects to biometric check-in)",
        "operationId": "create_fingerprint_check_in",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BiometricCheckInRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BiometricCheckInResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/face/check-in": {
      "post": {
        "tags": [
          "Staff Biometrics"
        ],
        "summary": "Face Check In",
        "description": "Check in using face ID (legacy endpoint - redirects to biometric check-in)",
        "operationId": "create_face_check_in",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BiometricCheckInRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BiometricCheckInResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/pin/setup": {
      "post": {
        "tags": [
          "Staff Biometrics"
        ],
        "summary": "Setup Pin",
        "description": "Set up PIN for a staff member with enhanced security",
        "operationId": "create_setup_pin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinSetupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/staff/pin/check-in": {
      "post": {
        "tags": [
          "Staff Biometrics"
        ],
        "summary": "Pin Check In",
        "description": "Check in using PIN with enhanced security",
        "operationId": "create_pin_check_in",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinCheckInRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BiometricCheckInResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/biometric/status/{staff_id}": {
      "get": {
        "tags": [
          "Staff Biometrics"
        ],
        "summary": "Get Biometric Status",
        "description": "Get biometric enrollment status for a staff member",
        "operationId": "get_get_biometric_status_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/biometric/{staff_id}": {
      "delete": {
        "tags": [
          "Staff Biometrics"
        ],
        "summary": "Delete Biometric Data",
        "description": "Delete biometric data for GDPR compliance",
        "operationId": "delete_delete_biometric_data",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          },
          {
            "name": "data_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all",
              "title": "Data Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/biometric/{staff_id}/export": {
      "get": {
        "tags": [
          "Staff Biometrics"
        ],
        "summary": "Export Biometric Data",
        "description": "Export biometric data for GDPR data portability",
        "operationId": "get_export_biometric_data_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/templates": {
      "post": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Create Shift Template",
        "description": "Create a new shift template (Manager/Admin only)",
        "operationId": "create_create_shift_template",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftTemplateCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Get Shift Templates",
        "description": "Get all shift templates",
        "operationId": "list_get_shift_templates",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Location Id"
            }
          },
          {
            "name": "role_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Role Id"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "default": true,
              "title": "Is Active"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShiftTemplateResponse"
                  },
                  "title": "Response Get Shift Templates Api V1 Staff Templates Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/templates/{template_id}": {
      "put": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Update Shift Template",
        "description": "Update a shift template",
        "operationId": "update_update_shift_template",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Template Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftTemplateUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/shifts": {
      "post": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Create Shift",
        "description": "Create a new shift",
        "operationId": "create_create_shift",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Get Shifts",
        "description": "Get shifts for a date range with eager loading to prevent N+1 queries",
        "operationId": "list_get_shifts",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "End Date"
            }
          },
          {
            "name": "staff_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Staff Id"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Location Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ShiftStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShiftResponse"
                  },
                  "title": "Response Get Shifts Api V1 Staff Shifts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/shifts/{shift_id}": {
      "put": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Update Shift",
        "description": "Update a shift",
        "operationId": "update_update_shift",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "shift_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Shift Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Delete Shift",
        "description": "Delete or cancel a shift",
        "operationId": "delete_delete_shift",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "shift_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Shift Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/shifts/{shift_id}/breaks": {
      "post": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Add Shift Break",
        "description": "Add a break to a shift",
        "operationId": "create_add_shift_break",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "shift_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Shift Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftBreakCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftBreakResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/availability": {
      "post": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Set Availability",
        "description": "Set staff availability",
        "operationId": "create_set_availability",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailabilityCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailabilityResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Get Availability",
        "description": "Get staff availability",
        "operationId": "list_get_availability",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Staff Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailabilityResponse"
                  },
                  "title": "Response Get Availability Api V1 Staff Availability Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/swaps": {
      "post": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Request Shift Swap",
        "description": "Request a shift swap",
        "operationId": "create_request_shift_swap",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftSwapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftSwapResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/staff/swaps/{swap_id}/approve": {
      "put": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Approve Shift Swap",
        "description": "Approve or reject a shift swap (Manager/Supervisor only)",
        "operationId": "update_approve_shift_swap",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "swap_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Swap Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftSwapApproval"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/schedule/generate": {
      "post": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Generate Schedule",
        "description": "Generate schedule from templates (Manager/Admin only)",
        "operationId": "create_generate_schedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/staff/schedule/publish": {
      "post": {
        "tags": [
          "Staff Schedule Management",
          "Staff Schedule"
        ],
        "summary": "Publish Schedule",
        "description": "Publish schedule for specified date range\n\nRequires permission: schedule.publish",
        "operationId": "create_publish_schedule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "send_notifications",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Send notifications to staff",
              "default": true,
              "title": "Send Notifications"
            },
            "description": "Send notifications to staff"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/modules__staff__schemas__schedule_schemas__SchedulePublishRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/analytics/staffing": {
      "get": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Get Staffing Analytics",
        "description": "Get staffing analytics for a date range",
        "operationId": "list_get_staffing_analytics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "End Date"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaffingAnalytics"
                  },
                  "title": "Response Get Staffing Analytics Api V1 Staff Analytics Staffing Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/analytics/conflicts": {
      "get": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Check Schedule Conflicts",
        "description": "Check for scheduling conflicts",
        "operationId": "list_check_schedule_conflicts",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Start Time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "End Time"
            }
          },
          {
            "name": "exclude_shift_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Exclude Shift Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleConflict"
                  },
                  "title": "Response Check Schedule Conflicts Api V1 Staff Analytics Conflicts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/staff/{staff_id}/schedule-summary": {
      "get": {
        "tags": [
          "Staff Scheduling"
        ],
        "summary": "Get Staff Schedule Summary",
        "description": "Get weekly schedule summary for a staff member",
        "operationId": "get_get_staff_schedule_summary_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          },
          {
            "name": "week_start",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Week Start"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffScheduleSummary"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/schedule/preview": {
      "get": {
        "tags": [
          "Staff Schedule Management",
          "Staff Schedule"
        ],
        "summary": "Get Schedule Preview",
        "description": "Get schedule preview for date range with optional caching",
        "operationId": "list_get_schedule_preview",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Start date for preview",
              "title": "Start Date"
            },
            "description": "Start date for preview"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "End date for preview",
              "title": "End Date"
            },
            "description": "End date for preview"
          },
          {
            "name": "department_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Department Id"
            }
          },
          {
            "name": "role_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Role Id"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Location Id"
            }
          },
          {
            "name": "use_cache",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Use cached data if available",
              "default": true,
              "title": "Use Cache"
            },
            "description": "Use cached data if available"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulePreviewResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/schedule/preview/paginated": {
      "get": {
        "tags": [
          "Staff Schedule Management",
          "Staff Schedule"
        ],
        "summary": "Get Schedule Preview Paginated",
        "description": "Get paginated schedule preview for large staff lists",
        "operationId": "list_get_schedule_preview_paginated",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "End Date"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          },
          {
            "name": "department_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Department Id"
            }
          },
          {
            "name": "role_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Role Id"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Location Id"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(name|role|department)$",
              "default": "name",
              "title": "Sort By"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPreviewResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/schedule/shifts": {
      "post": {
        "tags": [
          "Staff Schedule Management",
          "Staff Schedule"
        ],
        "summary": "Create Shift",
        "description": "Create a new shift\n\nRequires permission: schedule.manage",
        "operationId": "create_create_shift",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/staff/schedule/shifts/{shift_id}": {
      "put": {
        "tags": [
          "Staff Schedule Management",
          "Staff Schedule"
        ],
        "summary": "Update Shift",
        "description": "Update an existing shift\n\nRequires permission: schedule.manage",
        "operationId": "update_update_shift",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "shift_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Shift Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Staff Schedule Management",
          "Staff Schedule"
        ],
        "summary": "Delete Shift",
        "description": "Delete a shift\n\nRequires permission: schedule.manage",
        "operationId": "delete_delete_shift",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "shift_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Shift Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/schedule/cache/warm": {
      "post": {
        "tags": [
          "Staff Schedule Management",
          "Staff Schedule"
        ],
        "summary": "Warm Schedule Cache",
        "description": "Pre-warm cache for a week's schedule\n\nRequires permission: schedule.manage",
        "operationId": "create_warm_schedule_cache",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "week_start",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Start of week to cache",
              "title": "Week Start"
            },
            "description": "Start of week to cache"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/schedule/cache/stats": {
      "get": {
        "tags": [
          "Staff Schedule Management",
          "Staff Schedule"
        ],
        "summary": "Get Cache Statistics",
        "description": "Get cache statistics for schedule data\n\nRequires permission: schedule.manage",
        "operationId": "list_get_cache_statistics",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/staff/schedule/cache/clear": {
      "post": {
        "tags": [
          "Staff Schedule Management",
          "Staff Schedule"
        ],
        "summary": "Clear Schedule Cache",
        "description": "Clear all cached schedule data\n\nRequires permission: schedule.manage",
        "operationId": "create_clear_schedule_cache",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/staff/schedule/reminders/send": {
      "post": {
        "tags": [
          "Staff Schedule Management",
          "Staff Schedule"
        ],
        "summary": "Send Shift Reminders",
        "description": "Send shift reminders for upcoming shifts\n\nRequires permission: schedule.manage",
        "operationId": "create_send_shift_reminders",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "hours_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 24,
              "minimum": 1,
              "description": "Hours before shift to send reminder",
              "default": 2,
              "title": "Hours Before"
            },
            "description": "Hours before shift to send reminder"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/schedule/notifications/test": {
      "post": {
        "tags": [
          "Staff Schedule Management",
          "Staff Schedule"
        ],
        "summary": "Test Schedule Notifications",
        "description": "Send test notification to verify notification system\n\nRequires permission: schedule.manage",
        "operationId": "create_test_schedule_notifications",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Staff ID to send test notification",
              "title": "Staff Id"
            },
            "description": "Staff ID to send test notification"
          },
          {
            "name": "channels",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Notification channels to test",
              "default": [
                "email"
              ],
              "title": "Channels"
            },
            "description": "Notification channels to test"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Orders",
        "description": "Retrieve a list of orders with optional filtering and pagination.\n\n- **status**: Filter by order status (pending, in_progress, etc.)\n- **staff_id**: Filter by staff member ID\n- **table_no**: Filter by table number\n- **tag_ids**: Filter by tag IDs\n- **category_id**: Filter by category ID\n- **limit**: Maximum number of orders to return (1-1000)\n- **offset**: Number of orders to skip for pagination\n- **include_items**: Whether to include order items in the response",
        "operationId": "list_get_orders",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by order status",
              "title": "Status"
            },
            "description": "Filter by order status"
          },
          {
            "name": "staff_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by staff member ID",
              "title": "Staff Id"
            },
            "description": "Filter by staff member ID"
          },
          {
            "name": "table_no",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by table number",
              "title": "Table No"
            },
            "description": "Filter by table number"
          },
          {
            "name": "tag_ids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tag IDs",
              "title": "Tag Ids"
            },
            "description": "Filter by tag IDs"
          },
          {
            "name": "category_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category ID",
              "title": "Category Id"
            },
            "description": "Filter by category ID"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Number of orders to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Number of orders to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of orders to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of orders to skip"
          },
          {
            "name": "include_items",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include order items in response",
              "default": false,
              "title": "Include Items"
            },
            "description": "Include order items in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderOut"
                  },
                  "title": "Response Get Orders Orders  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order",
        "operationId": "get_get_order_by_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update Existing Order",
        "operationId": "update_update_existing_order",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Update Existing Order Orders  Order Id  Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/kitchen": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Kitchen Orders",
        "description": "Retrieve a list of active kitchen orders (new or preparing).\nUsed for the BOH dashboard.\n\n- **limit**: Maximum number of orders to return (1-1000)\n- **offset**: Number of orders to skip for pagination",
        "operationId": "list_get_kitchen_orders",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Number of orders to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Number of orders to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of orders to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of orders to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderOut"
                  },
                  "title": "Response Get Kitchen Orders Orders Kitchen Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/validate-rules": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Validate Rules",
        "description": "Validate multi-item order rules including combo deals, bulk discounts,\nand compatibility restrictions.",
        "operationId": "create_validate_rules",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiItemRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleValidationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/validate-special-instructions": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Validate Special Instructions Endpoint",
        "description": "Validate special instructions for order items including priority ranges\nand instruction type validation.",
        "operationId": "create_validate_special_instructions_endpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/OrderItemUpdate"
                },
                "type": "array",
                "title": "Order Items"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/fraud-check": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Perform Order Fraud Check",
        "description": "Perform fraud detection check on a specific order.\n\n- **order_id**: ID of the order to check\n- **checkpoint_types**: Specific types of checks to perform\n- **force_recheck**: Force recheck even if recently checked",
        "operationId": "create_perform_order_fraud_check",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "force_recheck",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Force Recheck"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CheckpointType"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Checkpoint Types"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FraudCheckResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/fraud-alerts": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Fraud Alerts",
        "description": "Retrieve fraud alerts with optional filtering.\n\n- **resolved**: Filter by resolution status\n- **severity**: Filter by severity level (low, medium, high, critical)\n- **limit**: Maximum number of alerts to return\n- **offset**: Number of alerts to skip for pagination",
        "operationId": "list_get_fraud_alerts",
        "parameters": [
          {
            "name": "resolved",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by resolution status",
              "title": "Resolved"
            },
            "description": "Filter by resolution status"
          },
          {
            "name": "severity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FraudRiskLevel"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by severity level",
              "title": "Severity"
            },
            "description": "Filter by severity level"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Number of alerts to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Number of alerts to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of alerts to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of alerts to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Get Fraud Alerts Orders Fraud Alerts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/fraud-alerts/{alert_id}/resolve": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Resolve Fraud Alert",
        "description": "Resolve a fraud alert by marking it as handled.\n\n- **alert_id**: ID of the alert to resolve",
        "operationId": "update_resolve_fraud_alert",
        "parameters": [
          {
            "name": "alert_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Alert Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Resolve Fraud Alert Orders Fraud Alerts  Alert Id  Resolve Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/delay": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Delay Order",
        "description": "Schedule an order for delayed fulfillment at a specified time.\n\n- **order_id**: ID of the order to delay\n- **scheduled_fulfillment_time**: When the order should be fulfilled\n- **delay_reason**: Optional reason for the delay\n- **additional_notes**: Optional additional notes about the delay",
        "operationId": "create_delay_order",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelayFulfillmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Delay Order Orders  Order Id  Delay Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/delayed": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Delayed Orders Endpoint",
        "description": "Retrieve orders scheduled for delayed fulfillment within a time range.\n\n- **from_time**: Optional start time filter\n- **to_time**: Optional end time filter",
        "operationId": "list_get_delayed_orders_endpoint",
        "parameters": [
          {
            "name": "from_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter orders scheduled from this time",
              "title": "From Time"
            },
            "description": "Filter orders scheduled from this time"
          },
          {
            "name": "to_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter orders scheduled until this time",
              "title": "To Time"
            },
            "description": "Filter orders scheduled until this time"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderOut"
                  },
                  "title": "Response Get Delayed Orders Endpoint Orders Delayed Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/tags": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add Tags To Order",
        "description": "Add tags to an order.\n\n- **order_id**: ID of the order to add tags to\n- **tag_ids**: List of tag IDs to add to the order",
        "operationId": "create_add_tags_to_order",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Add Tags To Order Orders  Order Id  Tags Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/tags/{tag_id}": {
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Remove Tag From Order",
        "description": "Remove a tag from an order.\n\n- **order_id**: ID of the order to remove tag from\n- **tag_id**: ID of the tag to remove",
        "operationId": "delete_remove_tag_from_order",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Remove Tag From Order Orders  Order Id  Tags  Tag Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/category": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Set Order Category",
        "description": "Set or update the category of an order.\n\n- **order_id**: ID of the order to update\n- **category_id**: ID of the category to set (null to remove category)",
        "operationId": "update_set_order_category",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Set Order Category Orders  Order Id  Category Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/tags": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create Tag",
        "description": "Create a new tag.\n\n- **name**: Name of the tag (must be unique)\n- **description**: Optional description of the tag",
        "operationId": "create_create_tag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Tags",
        "description": "Retrieve all tags with pagination.\n\n- **limit**: Maximum number of tags to return (1-1000)\n- **offset**: Number of tags to skip for pagination",
        "operationId": "list_get_tags",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagOut"
                  },
                  "title": "Response Get Tags Orders Tags Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/categories": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create Category",
        "description": "Create a new category.\n\n- **name**: Name of the category (must be unique)\n- **description**: Optional description of the tag",
        "operationId": "create_create_category",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Categories",
        "description": "Retrieve all categories with pagination.\n\n- **limit**: Maximum number of categories to return (1-1000)\n- **offset**: Number of categories to skip for pagination",
        "operationId": "list_get_categories",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryOut"
                  },
                  "title": "Response Get Categories Orders Categories Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/archive": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Archive Order Endpoint",
        "description": "Archive a completed or cancelled order.\n\nOnly orders with status 'completed' or 'cancelled' can be archived.\nArchived orders are excluded from regular order listings by default.",
        "operationId": "create_archive_order_endpoint",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Archive Order Endpoint Orders  Order Id  Archive Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/restore": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Restore Order Endpoint",
        "description": "Restore an archived order back to completed status.\n\nOnly orders with status 'archived' can be restored.",
        "operationId": "create_restore_order_endpoint",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Restore Order Endpoint Orders  Order Id  Restore Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/archived": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Archived Orders Endpoint",
        "description": "Retrieve archived orders with optional filtering and pagination.\n\n- **staff_id**: Filter by staff member ID\n- **table_no**: Filter by table number\n- **limit**: Maximum number of orders to return (1-1000)\n- **offset**: Number of orders to skip for pagination",
        "operationId": "list_get_archived_orders_endpoint",
        "parameters": [
          {
            "name": "staff_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by staff member ID",
              "title": "Staff Id"
            },
            "description": "Filter by staff member ID"
          },
          {
            "name": "table_no",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by table number",
              "title": "Table No"
            },
            "description": "Filter by table number"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Number of orders to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Number of orders to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of orders to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of orders to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderOut"
                  },
                  "title": "Response Get Archived Orders Endpoint Orders Archived Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/priority": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update Priority",
        "description": "Update the priority of an order.\n\nPriority levels (highest to lowest):\n- URGENT: Critical orders requiring immediate attention\n- HIGH: Important orders that should be prioritized\n- NORMAL: Standard priority (default)\n- LOW: Orders that can wait if needed\n\n**Notes:**\n- Cannot change priority for completed or cancelled orders\n- Priority changes are logged with timestamps\n- Kitchen display will reflect new priority immediately",
        "operationId": "update_update_priority",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Order ID to update",
              "title": "Order Id"
            },
            "description": "Order ID to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPriorityUpdate",
                "description": "Priority update data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderPriorityResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/queue": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Kitchen Queue",
        "description": "Get kitchen queue sorted by priority.",
        "operationId": "list_get_kitchen_queue",
        "parameters": [
          {
            "name": "priority_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderPriority"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by minimum priority",
              "title": "Priority Filter"
            },
            "description": "Filter by minimum priority"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderOut"
                  },
                  "title": "Response Get Kitchen Queue Orders Queue Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/analytics/priority-distribution": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Priority Distribution",
        "description": "Get distribution of orders by priority level.",
        "operationId": "list_get_priority_distribution",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date for analysis",
              "title": "Date From"
            },
            "description": "Start date for analysis"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date for analysis",
              "title": "Date To"
            },
            "description": "End date for analysis"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/audit": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order Audit History",
        "description": "Retrieve audit trail for a specific order showing all status changes.\n\n- **order_id**: ID of the order to get audit history for\n- **limit**: Maximum number of audit events to return (1-1000)\n- **offset**: Number of audit events to skip for pagination",
        "operationId": "get_get_order_audit_history_by_id",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Number of audit events to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Number of audit events to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of audit events to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of audit events to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderAuditResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/notes": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update Notes",
        "description": "Update customer notes for an order.\n- **order_id**: ID of the order to update\n- **customer_notes**: New customer notes text (can be null to clear notes)",
        "operationId": "update_update_notes",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerNotesUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Update Notes Orders  Order Id  Notes Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}/attachments": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Upload Attachment",
        "description": "Upload a file attachment to an order.\n- **order_id**: ID of the order to attach the file to\n- **file**: File to upload (supports common document and image formats)",
        "operationId": "create_upload_attachment",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            }
          },
          {
            "name": "is_public",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Is Public"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_attachment_orders__order_id__attachments_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Attachments",
        "description": "Get all attachments for an order.\n- **order_id**: ID of the order to get attachments for",
        "operationId": "get_get_attachments_by_id",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttachmentOut"
                  },
                  "title": "Response Get Attachments Orders  Order Id  Attachments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/attachments/{attachment_id}": {
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete Attachment",
        "description": "Delete a specific attachment.\n- **attachment_id**: ID of the attachment to delete",
        "operationId": "delete_delete_attachment",
        "parameters": [
          {
            "name": "attachment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Attachment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Delete Attachment Orders Attachments  Attachment Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/auto-cancellation/configs": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Auto Cancellation Configs",
        "description": "Get auto-cancellation configurations with optional filtering.\n\n- **tenant_id**: Filter by tenant ID\n- **team_id**: Filter by team ID\n- **status**: Filter by order status",
        "operationId": "list_get_auto_cancellation_configs",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tenant ID",
              "title": "Tenant Id"
            },
            "description": "Filter by tenant ID"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by team ID",
              "title": "Team Id"
            },
            "description": "Filter by team ID"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by order status",
              "title": "Status"
            },
            "description": "Filter by order status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutoCancellationConfigOut"
                  },
                  "title": "Response Get Auto Cancellation Configs Orders Auto Cancellation Configs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create Auto Cancellation Config",
        "description": "Create or update auto-cancellation configuration.\n\n- **status**: Order status to configure (PENDING, IN_PROGRESS, IN_KITCHEN)\n- **threshold_minutes**: Time threshold in minutes before cancellation\n- **enabled**: Whether auto-cancellation is enabled for this config\n- **tenant_id**: Optional tenant ID for multi-tenant setups\n- **team_id**: Optional team ID for team-specific configurations",
        "operationId": "create_create_auto_cancellation_config",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoCancellationConfigCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoCancellationConfigOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/auto-cancellation/trigger": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Trigger Stale Order Cancellation",
        "description": "Manually trigger the stale order cancellation process.\n\nThis endpoint allows manual execution of the auto-cancellation logic,\nuseful for testing or immediate execution outside of scheduled runs.\n\n- **tenant_id**: Optional tenant ID filter\n- **team_id**: Optional team ID filter\n- **system_user_id**: User ID to use for audit logging (defaults to 1)",
        "operationId": "create_trigger_stale_order_cancellation",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tenant ID",
              "title": "Tenant Id"
            },
            "description": "Filter by tenant ID"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by team ID",
              "title": "Team Id"
            },
            "description": "Filter by team ID"
          },
          {
            "name": "system_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "System user ID for audit logging",
              "default": 1,
              "title": "System User Id"
            },
            "description": "System user ID for audit logging"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaleCancellationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/auto-cancellation/stale-orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Detect Stale Orders",
        "description": "Detect stale orders without cancelling them.\n\nThis endpoint identifies orders that would be cancelled by the\nauto-cancellation process without actually cancelling them.\nUseful for monitoring and testing.\n\n- **tenant_id**: Optional tenant ID filter\n- **team_id**: Optional team ID filter",
        "operationId": "list_detect_stale_orders",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tenant ID",
              "title": "Tenant Id"
            },
            "description": "Filter by tenant ID"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by team ID",
              "title": "Team Id"
            },
            "description": "Filter by team ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderOut"
                  },
                  "title": "Response Detect Stale Orders Orders Auto Cancellation Stale Orders Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/auto-cancellation/scheduled-run": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Scheduled Auto Cancellation",
        "description": "Endpoint for scheduled auto-cancellation execution.\n\nThis endpoint is designed to be called by external schedulers or cron jobs\nto automatically cancel stale orders based on configured thresholds.\n\n- **tenant_id**: Optional tenant ID filter\n- **team_id**: Optional team ID filter\n- **system_user_id**: User ID to use for audit logging (defaults to 1)",
        "operationId": "create_scheduled_auto_cancellation",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tenant ID",
              "title": "Tenant Id"
            },
            "description": "Filter by tenant ID"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by team ID",
              "title": "Team Id"
            },
            "description": "Filter by team ID"
          },
          {
            "name": "system_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "System user ID for audit logging",
              "default": 1,
              "title": "System User Id"
            },
            "description": "System user ID for audit logging"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaleCancellationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/auto-cancellation/create-defaults": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create Default Auto Cancellation Configs",
        "description": "Create default auto-cancellation configurations.",
        "operationId": "create_create_default_auto_cancellation_configs",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tenant Id"
            }
          },
          {
            "name": "updated_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Updated By"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/auto-cancellation/metrics": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Auto Cancellation Metrics",
        "description": "Get auto-cancellation metrics and statistics.",
        "operationId": "list_get_auto_cancellation_metrics",
        "parameters": [
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "From Date"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "To Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Inventory Items",
        "description": "Get inventory items with filtering and pagination",
        "operationId": "list_get_inventory_items",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search query",
              "title": "Query"
            },
            "description": "Search query"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category"
            },
            "description": "Filter by category"
          },
          {
            "name": "vendor_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by vendor",
              "title": "Vendor Id"
            },
            "description": "Filter by vendor"
          },
          {
            "name": "low_stock_only",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Show only low stock items",
              "title": "Low Stock Only"
            },
            "description": "Show only low stock items"
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Show only active items",
              "default": true,
              "title": "Active Only"
            },
            "description": "Show only active items"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Limit"
            },
            "description": "Items per page"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Items to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Items to skip"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(item_name|quantity|threshold|category|created_at)$",
              "default": "item_name",
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "default": "asc",
              "title": "Sort Order"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core__inventory_schemas__InventoryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Create Inventory Item",
        "description": "Create a new inventory item",
        "operationId": "create_create_inventory_item",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core__inventory_schemas__InventoryCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core__inventory_schemas__Inventory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Item",
        "operationId": "get_get_inventory_item_by_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Update Inventory Item",
        "description": "Update inventory item",
        "operationId": "update_update_inventory_item",
        "parameters": [
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core__inventory_schemas__InventoryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/core__inventory_schemas__Inventory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Inventory Item",
        "description": "Get inventory item by ID with details",
        "operationId": "get_get_inventory_item_by_id",
        "parameters": [
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryWithDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Delete Inventory Item",
        "description": "Soft delete inventory item",
        "operationId": "delete_delete_inventory_item",
        "parameters": [
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/alerts/low-stock": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Low Stock Alerts",
        "description": "Get inventory items that are below their threshold levels.",
        "operationId": "list_get_low_stock_alerts",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response Get Low Stock Alerts Inventory Alerts Low Stock Get"
                }
              }
            }
          }
        }
      }
    },
    "/inventory-impact/order/{order_id}/preview": {
      "get": {
        "tags": [
          "Inventory Impact"
        ],
        "summary": "Preview Order Inventory Impact",
        "description": "Preview the inventory impact of fulfilling an order without making changes.\n\nShows:\n- Which ingredients will be consumed\n- Current vs projected stock levels\n- Warnings for insufficient stock\n- Low stock alerts",
        "operationId": "get_preview_order_inventory_impact_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory-impact/preview": {
      "post": {
        "tags": [
          "Inventory Impact"
        ],
        "summary": "Preview Items Inventory Impact",
        "description": "Preview the inventory impact of a list of menu items without creating an order.\n\nUseful for:\n- Checking availability before order creation\n- Planning large catering orders\n- Inventory management decisions",
        "operationId": "create_preview_items_inventory_impact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/OrderItemCreate"
                },
                "type": "array",
                "title": "Items"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/inventory-impact/order/{order_id}/partial-fulfillment": {
      "post": {
        "tags": [
          "Inventory Impact"
        ],
        "summary": "Handle Partial Order Fulfillment",
        "description": "Handle inventory deduction for partially fulfilled orders.\n\nUsed when:\n- Some items are out of stock\n- Customer modifies order during preparation\n- Kitchen can only prepare partial quantities",
        "operationId": "create_handle_partial_order_fulfillment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "number"
                  }
                },
                "title": "Fulfilled Items"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory-impact/order/{order_id}/reverse-deduction": {
      "post": {
        "tags": [
          "Inventory Impact"
        ],
        "summary": "Reverse Order Inventory Deduction",
        "description": "Reverse inventory deductions for an order.\n\nUsed when:\n- Order is cancelled after inventory deduction\n- Mistake in order processing\n- Customer returns items",
        "operationId": "create_reverse_order_inventory_deduction",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/kitchen/orders/{id}/status": {
      "put": {
        "tags": [
          "Kitchen"
        ],
        "summary": "Update Order Status",
        "description": "Update order status from kitchen perspective.\n\nOnly allows updates to 'ready', 'served', or 'completed' statuses.\nReuses existing order update logic with kitchen-specific validation.",
        "operationId": "update_update_order_status",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Update Order Status Kitchen Orders  Id  Status Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/kitchen/orders/{id}/print": {
      "post": {
        "tags": [
          "Kitchen"
        ],
        "summary": "Print Kitchen Ticket",
        "description": "Generate and print kitchen ticket for an order.\n\nValidates order is in appropriate status and routes to POS for printing.",
        "operationId": "create_print_kitchen_ticket",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KitchenPrintRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KitchenPrintResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/kitchen/orders/{order_id}/print-ticket": {
      "post": {
        "tags": [
          "Kitchen Print Tickets"
        ],
        "summary": "Generate Print Ticket",
        "operationId": "create_generate_print_ticket",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrintTicketRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrintTicketResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/kitchen/print-queue": {
      "get": {
        "tags": [
          "Kitchen Print Tickets"
        ],
        "summary": "View Print Queue",
        "operationId": "list_view_print_queue",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrintQueueStatus"
                }
              }
            }
          }
        }
      }
    },
    "/kitchen/print-tickets/{ticket_id}/status": {
      "put": {
        "tags": [
          "Kitchen Print Tickets"
        ],
        "summary": "Update Print Ticket Status",
        "operationId": "update_update_print_ticket_status",
        "parameters": [
          {
            "name": "ticket_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Ticket Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrintTicketStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrintTicketResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/kitchen/print-tickets/retry-failed": {
      "post": {
        "tags": [
          "Kitchen Print Tickets"
        ],
        "summary": "Retry Failed Tickets",
        "operationId": "create_retry_failed_tickets",
        "parameters": [
          {
            "name": "max_retries",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 3,
              "title": "Max Retries"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrintTicketResponse"
                  },
                  "title": "Response Retry Failed Tickets Kitchen Print Tickets Retry Failed Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/stations": {
      "post": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Create Station",
        "description": "Create a new kitchen station",
        "operationId": "create_create_station",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "List Stations",
        "description": "List all kitchen stations",
        "operationId": "list_list_stations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "include_inactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Inactive"
            }
          },
          {
            "name": "station_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/StationType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Station Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StationResponse"
                  },
                  "title": "Response List Stations Api V1 Kds Stations Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/stations/{station_id}": {
      "get": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Get Station",
        "description": "Get a specific kitchen station",
        "operationId": "get_get_station_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "station_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Station Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Update Station",
        "description": "Update a kitchen station",
        "operationId": "update_update_station",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "station_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Station Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Delete Station",
        "description": "Delete a kitchen station (soft delete by marking as inactive)",
        "operationId": "delete_delete_station",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "station_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Station Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/displays": {
      "post": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Create Display",
        "description": "Create a new display for a station",
        "operationId": "create_create_display",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KitchenDisplayCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KitchenDisplayResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/kds/displays/{display_id}": {
      "put": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Update Display",
        "description": "Update a kitchen display",
        "operationId": "update_update_display",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "display_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Display Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KitchenDisplayUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KitchenDisplayResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/displays/{display_id}/heartbeat": {
      "post": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Update Display Heartbeat",
        "description": "Update display heartbeat (no auth required for displays)",
        "operationId": "create_update_display_heartbeat",
        "parameters": [
          {
            "name": "display_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Display Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/assignments": {
      "post": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Create Station Assignment",
        "description": "Create a station assignment rule",
        "operationId": "create_create_station_assignment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StationAssignmentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StationAssignmentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "List Station Assignments",
        "description": "List station assignment rules",
        "operationId": "list_list_station_assignments",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "station_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Station Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StationAssignmentResponse"
                  },
                  "title": "Response List Station Assignments Api V1 Kds Assignments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/assignments/{assignment_id}": {
      "delete": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Delete Station Assignment",
        "description": "Delete a station assignment rule",
        "operationId": "delete_delete_station_assignment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Assignment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/menu-items/stations": {
      "post": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Assign Menu Item To Station",
        "description": "Assign a menu item to a station",
        "operationId": "create_assign_menu_item_to_station",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuItemStationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemStationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/kds/menu-items/{menu_item_id}/stations": {
      "get": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Get Menu Item Stations",
        "description": "Get all station assignments for a menu item",
        "operationId": "get_get_menu_item_stations_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "menu_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Menu Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemStationResponse"
                  },
                  "title": "Response Get Menu Item Stations Api V1 Kds Menu Items  Menu Item Id  Stations Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/stations/{station_id}/items": {
      "get": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Get Station Items",
        "description": "Get order items for a station",
        "operationId": "get_get_station_items_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "station_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Station Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisplayStatus"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "default": 50,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KDSOrderItemResponse"
                  },
                  "title": "Response Get Station Items Api V1 Kds Stations  Station Id  Items Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/items/{item_id}/acknowledge": {
      "post": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Acknowledge Item",
        "description": "Acknowledge an order item",
        "operationId": "create_acknowledge_item",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/items/{item_id}/start": {
      "post": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Start Item",
        "description": "Mark an item as started",
        "operationId": "create_start_item",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/items/{item_id}/complete": {
      "post": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Complete Item",
        "description": "Mark an item as completed",
        "operationId": "create_complete_item",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/items/{item_id}/recall": {
      "post": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Recall Item",
        "description": "Recall a completed item",
        "operationId": "create_recall_item",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/stations/{station_id}/summary": {
      "get": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Get Station Summary",
        "description": "Get summary statistics for a station",
        "operationId": "get_get_station_summary_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "station_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Station Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StationSummary"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/kds/stations/summaries": {
      "get": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Get All Station Summaries",
        "description": "Get summaries for all active stations",
        "operationId": "list_get_all_station_summaries",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/StationSummary"
                  },
                  "type": "array",
                  "title": "Response Get All Station Summaries Api V1 Kds Stations Summaries Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/kds/orders/{order_id}/route": {
      "post": {
        "tags": [
          "Kitchen Display System"
        ],
        "summary": "Route Order To Stations",
        "description": "Route an order's items to appropriate kitchen stations",
        "operationId": "create_route_order_to_stations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/pricing/calculate": {
      "post": {
        "tags": [
          "Dynamic Pricing"
        ],
        "summary": "Calculate Dynamic Prices",
        "description": "Calculate dynamic prices for menu items based on AI recommendations.\n\n- **items**: List of menu items with quantities and base prices\n- **context**: Optional pricing context (time, demand, inventory levels)\n\nReturns calculated prices with adjustment details and confidence scores.\nUses AI-driven pricing when available, falls back to static pricing\nif needed.",
        "operationId": "create_calculate_dynamic_prices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/modules__orders__schemas__dynamic_pricing_schemas__BulkPricingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPricingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/pricing/{order_id}/apply-dynamic-pricing": {
      "put": {
        "tags": [
          "Dynamic Pricing"
        ],
        "summary": "Apply Dynamic Pricing To Order",
        "description": "Apply dynamic pricing to an existing order.\n\n- **order_id**: ID of the order to update with dynamic pricing\n- **force_recalculate**: Whether to recalculate prices even if already\n  dynamic\n\nUpdates order items with AI-calculated prices and returns pricing details.\nMaintains audit trail of original prices and adjustment reasons.",
        "operationId": "update_apply_dynamic_pricing_to_order",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "force_recalculate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Force Recalculate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/pricing-rules/": {
      "post": {
        "tags": [
          "Pricing Rules",
          "Pricing Rules"
        ],
        "summary": "Create Pricing Rule",
        "description": "Create a new pricing rule\n\nRequires permission: pricing.create",
        "operationId": "create_create_pricing_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Restaurant ID",
              "title": "Restaurant Id"
            },
            "description": "Restaurant ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePricingRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Pricing Rules",
          "Pricing Rules"
        ],
        "summary": "List Pricing Rules",
        "description": "List pricing rules with filtering",
        "operationId": "list_list_pricing_rules",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Restaurant Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/RuleStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "rule_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Rule Type"
            }
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Active Only"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricingRuleResponse"
                  },
                  "title": "Response List Pricing Rules Api V1 Orders Pricing Rules  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/pricing-rules/{rule_id}": {
      "get": {
        "tags": [
          "Pricing Rules",
          "Pricing Rules"
        ],
        "summary": "Get Pricing Rule",
        "description": "Get a specific pricing rule",
        "operationId": "get_get_pricing_rule_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pricing Rules",
          "Pricing Rules"
        ],
        "summary": "Update Pricing Rule",
        "description": "Update a pricing rule\n\nRequires permission: pricing.update",
        "operationId": "update_update_pricing_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePricingRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pricing Rules",
          "Pricing Rules"
        ],
        "summary": "Delete Pricing Rule",
        "description": "Soft delete a pricing rule by setting status to INACTIVE\n\nRequires permission: pricing.delete",
        "operationId": "delete_delete_pricing_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/pricing-rules/debug/{order_id}": {
      "get": {
        "tags": [
          "Pricing Rules",
          "Pricing Rules"
        ],
        "summary": "Debug Pricing Rules",
        "description": "Debug pricing rules for an order\n\nThis endpoint traces through all matching rules, shows which conditions\nwere met/not met, and explains why rules were skipped.\n\nGreat for QA and troubleshooting!",
        "operationId": "get_debug_pricing_rules_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "apply_rules",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Actually apply the rules",
              "default": false,
              "title": "Apply Rules"
            },
            "description": "Actually apply the rules"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingRuleDebugInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/pricing-rules/applications/history": {
      "get": {
        "tags": [
          "Pricing Rules",
          "Pricing Rules"
        ],
        "summary": "Get Application History",
        "description": "Get history of pricing rule applications",
        "operationId": "list_get_application_history",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order Id"
            }
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customer Id"
            }
          },
          {
            "name": "rule_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Rule Id"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date From"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date To"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricingRuleApplicationResponse"
                  },
                  "title": "Response Get Application History Api V1 Orders Pricing Rules Applications History Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/pricing-rules/metrics/{rule_id}": {
      "get": {
        "tags": [
          "Pricing Rules",
          "Pricing Rules"
        ],
        "summary": "Get Pricing Rule Metrics",
        "description": "Get metrics for a pricing rule\n\nRequires permission: pricing.view_metrics",
        "operationId": "get_get_pricing_rule_metrics_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          },
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 1,
              "description": "Number of days to analyze",
              "default": 7,
              "title": "Days"
            },
            "description": "Number of days to analyze"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingRuleMetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/pricing-rules/validate": {
      "post": {
        "tags": [
          "Pricing Rules",
          "Pricing Rules"
        ],
        "summary": "Validate Pricing Rule",
        "description": "Validate pricing rule conditions\n\nThis endpoint helps validate rule conditions JSON and optionally\ntest against sample order data.",
        "operationId": "create_validate_pricing_rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePricingRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatePricingRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/orders/pricing-rules/apply/{order_id}": {
      "post": {
        "tags": [
          "Pricing Rules",
          "Pricing Rules"
        ],
        "summary": "Apply Pricing Rules To Order",
        "description": "Apply pricing rules to an order\n\nRequires permission: pricing.apply",
        "operationId": "create_apply_pricing_rules_to_order",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Promo Code"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/payment-reconciliation/": {
      "post": {
        "tags": [
          "Payment Reconciliation",
          "Payment Reconciliation"
        ],
        "summary": "Create Payment Reconciliation",
        "operationId": "create_create_payment_reconciliation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentReconciliationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReconciliationOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Payment Reconciliation",
          "Payment Reconciliation"
        ],
        "summary": "Get Payment Reconciliations",
        "operationId": "list_get_payment_reconciliations",
        "parameters": [
          {
            "name": "reconciliation_status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ReconciliationStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Reconciliation Status"
            }
          },
          {
            "name": "discrepancy_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DiscrepancyType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Discrepancy Type"
            }
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order Id"
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "From Date"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "To Date"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentReconciliationOut"
                  },
                  "title": "Response Get Payment Reconciliations Api V1 Orders Payment Reconciliation  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/payment-reconciliation/{reconciliation_id}": {
      "get": {
        "tags": [
          "Payment Reconciliation",
          "Payment Reconciliation"
        ],
        "summary": "Get Payment Reconciliation",
        "operationId": "get_get_payment_reconciliation_by_id",
        "parameters": [
          {
            "name": "reconciliation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reconciliation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReconciliationOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payment Reconciliation",
          "Payment Reconciliation"
        ],
        "summary": "Update Payment Reconciliation",
        "operationId": "update_update_payment_reconciliation",
        "parameters": [
          {
            "name": "reconciliation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reconciliation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentReconciliationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReconciliationOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/payment-reconciliation/reconcile": {
      "post": {
        "tags": [
          "Payment Reconciliation",
          "Payment Reconciliation"
        ],
        "summary": "Perform Payment Reconciliation",
        "operationId": "create_perform_payment_reconciliation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReconciliationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReconciliationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/payment-reconciliation/{reconciliation_id}/resolve": {
      "post": {
        "tags": [
          "Payment Reconciliation",
          "Payment Reconciliation"
        ],
        "summary": "Resolve Payment Discrepancy",
        "operationId": "create_resolve_payment_discrepancy",
        "parameters": [
          {
            "name": "reconciliation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reconciliation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReconciliationOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/payment-reconciliation/metrics": {
      "get": {
        "tags": [
          "Payment Reconciliation",
          "Payment Reconciliation"
        ],
        "summary": "Get Reconciliation Metrics",
        "description": "Get reconciliation metrics for dashboard insights.\n\nReturns comprehensive metrics including:\n- Total reconciliations processed\n- Success rates and counts by status\n- Common discrepancy types",
        "operationId": "list_get_reconciliation_metrics",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReconciliationMetrics"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/payment-reconciliation/auto-reconcile": {
      "post": {
        "tags": [
          "Payment Reconciliation",
          "Payment Reconciliation"
        ],
        "summary": "Auto Reconcile Pending",
        "description": "Automatically reconcile pending reconciliations.\n\nUses enhanced matching logic to automatically match\npending reconciliations with high confidence scores.",
        "operationId": "create_auto_reconcile_pending",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoReconcileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/payment-reconciliation/webhook/payment-received": {
      "post": {
        "tags": [
          "Payment Reconciliation",
          "Payment Reconciliation"
        ],
        "summary": "Handle Payment Webhook",
        "description": "Handle real-time payment notification webhooks.\n\nAutomatically creates reconciliation records when\npayments are received from external POS systems.",
        "operationId": "create_handle_payment_webhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentWebhookData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/payment-reconciliation/analytics/reconciliation-summary": {
      "get": {
        "tags": [
          "Payment Reconciliation",
          "Payment Reconciliation"
        ],
        "summary": "Get Reconciliation Summary",
        "description": "Get reconciliation analytics and KPIs.\n\nReturns detailed analytics including counts, totals, and variances\ngrouped by reconciliation status for the specified date range.",
        "operationId": "list_get_reconciliation_summary",
        "parameters": [
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "From Date"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "To Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/payment-reconciliation/webhooks/pos-payment": {
      "post": {
        "tags": [
          "Payment Reconciliation",
          "Payment Reconciliation"
        ],
        "summary": "Handle Pos Payment Webhook",
        "description": "Handle real-time payment notifications from POS.\n\nProcesses incoming payment webhooks and automatically creates\nreconciliation records with proper status detection.",
        "operationId": "create_handle_pos_payment_webhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Payment Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/orders/{order_id}/calculate-discounts": {
      "post": {
        "tags": [
          "Order Promotions",
          "Order Promotions"
        ],
        "summary": "Calculate Order Discounts",
        "description": "Calculate available discounts for an order",
        "operationId": "create_calculate_order_discounts",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_calculate_order_discounts_api_v1_orders_orders__order_id__calculate_discounts_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountCalculationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/orders/{order_id}/apply-discounts": {
      "post": {
        "tags": [
          "Order Promotions",
          "Order Promotions"
        ],
        "summary": "Apply Discounts To Order",
        "description": "Apply discounts to an order",
        "operationId": "create_apply_discounts_to_order",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_apply_discounts_to_order_api_v1_orders_orders__order_id__apply_discounts_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/orders/{order_id}/applicable-promotions": {
      "get": {
        "tags": [
          "Order Promotions",
          "Order Promotions"
        ],
        "summary": "Get Applicable Promotions",
        "description": "Get all applicable promotions for an order",
        "operationId": "get_get_applicable_promotions_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/orders/{order_id}/validate-promotion/{promotion_id}": {
      "post": {
        "tags": [
          "Order Promotions",
          "Order Promotions"
        ],
        "summary": "Validate Promotion For Order",
        "description": "Validate if a specific promotion can be applied to an order",
        "operationId": "create_validate_promotion_for_order",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/orders/{order_id}/promotion-summary": {
      "get": {
        "tags": [
          "Order Promotions",
          "Order Promotions"
        ],
        "summary": "Get Order Promotion Summary",
        "description": "Get summary of all promotions applied to an order",
        "operationId": "get_get_order_promotion_summary_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/orders/{order_id}/complete": {
      "post": {
        "tags": [
          "Order Promotions",
          "Order Promotions"
        ],
        "summary": "Complete Order With Promotions",
        "description": "Complete an order and process promotion-related actions",
        "operationId": "create_complete_order_with_promotions",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/orders/bulk-apply-promotion": {
      "post": {
        "tags": [
          "Order Promotions",
          "Order Promotions"
        ],
        "summary": "Bulk Apply Promotion To Orders",
        "description": "Apply a promotion to multiple orders (admin only)",
        "operationId": "create_bulk_apply_promotion_to_orders",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "title": "Order Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/orders/promotion-analytics": {
      "get": {
        "tags": [
          "Order Promotions",
          "Order Promotions"
        ],
        "summary": "Get Order Promotion Analytics",
        "description": "Get analytics on promotion usage in orders",
        "operationId": "list_get_order_promotion_analytics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "promotion_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Promotion Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/orders/auto-apply-promotions": {
      "post": {
        "tags": [
          "Order Promotions",
          "Order Promotions"
        ],
        "summary": "Auto Apply Best Promotions",
        "description": "Automatically apply the best available promotions to orders",
        "operationId": "create_auto_apply_best_promotions",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "max_promotions_per_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 3,
              "title": "Max Promotions Per Order"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "title": "Order Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/{order_id}/complete-with-inventory": {
      "post": {
        "tags": [
          "Order Inventory Integration",
          "Order Inventory Integration"
        ],
        "summary": "Complete Order With Inventory",
        "description": "Complete an order and automatically deduct inventory based on recipes.\n\nThis endpoint:\n- Updates order status to COMPLETED\n- Deducts inventory based on menu item recipes\n- Creates audit logs for all deductions\n- Handles insufficient inventory gracefully\n- Supports optional inventory skip for special cases",
        "operationId": "create_complete_order_with_inventory",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/OrderCompleteRequest"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCompleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/{order_id}/cancel-with-inventory": {
      "post": {
        "tags": [
          "Order Inventory Integration",
          "Order Inventory Integration"
        ],
        "summary": "Cancel Order With Inventory",
        "description": "Cancel an order with optional inventory reversal.\n\nThis endpoint:\n- Updates order status to CANCELLED\n- Reverses inventory deductions if order was completed\n- Creates audit logs for all reversals\n- Supports forced cancellation for special cases",
        "operationId": "create_cancel_order_with_inventory",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCancelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCancelResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/{order_id}/partial-fulfillment": {
      "post": {
        "tags": [
          "Order Inventory Integration",
          "Order Inventory Integration"
        ],
        "summary": "Handle Partial Fulfillment",
        "description": "Handle partial order fulfillment with proportional inventory deduction.\n\nThis endpoint:\n- Deducts inventory only for fulfilled items\n- Tracks partial fulfillments in order metadata\n- Maintains audit trail for each partial fulfillment\n- Validates order is in appropriate status",
        "operationId": "create_handle_partial_fulfillment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialFulfillmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialFulfillmentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/{order_id}/inventory-availability": {
      "get": {
        "tags": [
          "Order Inventory Integration",
          "Order Inventory Integration"
        ],
        "summary": "Check Inventory Availability",
        "description": "Check if an order can be fulfilled with current inventory levels.\n\nThis endpoint:\n- Calculates required ingredients based on recipes\n- Checks current inventory levels\n- Returns detailed availability status\n- Identifies items with insufficient stock",
        "operationId": "get_check_inventory_availability_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAvailabilityResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/{order_id}/reverse-deduction": {
      "post": {
        "tags": [
          "Order Inventory Integration",
          "Order Inventory Integration"
        ],
        "summary": "Reverse Inventory Deduction",
        "description": "Manually reverse inventory deductions for an order.\n\nThis endpoint:\n- Reverses all inventory deductions for the order\n- Creates reversal audit logs\n- Checks for external system sync before reversal\n- Requires admin permission for force reversal",
        "operationId": "create_reverse_inventory_deduction",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Reason for reversal",
              "title": "Reason"
            },
            "description": "Reason for reversal"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force reversal even if synced to external systems",
              "default": false,
              "title": "Force"
            },
            "description": "Force reversal even if synced to external systems"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/customer/tracking/orders/{order_id}/enable-tracking": {
      "post": {
        "tags": [
          "Customer Order Tracking",
          "customer-tracking"
        ],
        "summary": "Enable Order Tracking",
        "description": "Enable tracking for an order\n\nCreates tracking entry with notification preferences\nReturns tracking code and access token",
        "operationId": "create_enable_order_tracking",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerTrackingCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Enable Order Tracking Api V1 Orders Customer Tracking Orders  Order Id  Enable Tracking Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/customer/tracking/track/{tracking_code}": {
      "get": {
        "tags": [
          "Customer Order Tracking",
          "customer-tracking"
        ],
        "summary": "Get Order By Tracking Code",
        "description": "Get order tracking information by tracking code\n\nPublic endpoint - no authentication required",
        "operationId": "get_get_order_by_tracking_code_by_id",
        "parameters": [
          {
            "name": "tracking_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tracking Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderTrackingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/customer/tracking/track": {
      "get": {
        "tags": [
          "Customer Order Tracking",
          "customer-tracking"
        ],
        "summary": "Get Order By Token",
        "description": "Get order tracking information by access token\n\nAlternative to tracking code for programmatic access",
        "operationId": "list_get_order_by_token",
        "parameters": [
          {
            "name": "access_token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Access token for order tracking",
              "title": "Access Token"
            },
            "description": "Access token for order tracking"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderTrackingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/customer/tracking/my-orders/active": {
      "get": {
        "tags": [
          "Customer Order Tracking",
          "customer-tracking"
        ],
        "summary": "Get My Active Orders",
        "description": "Get all active orders for the authenticated customer\n\nRequires customer authentication",
        "operationId": "list_get_my_active_orders",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "include_completed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include recently completed orders",
              "default": false,
              "title": "Include Completed"
            },
            "description": "Include recently completed orders"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActiveOrdersResponse"
                  },
                  "title": "Response Get My Active Orders Api V1 Orders Customer Tracking My Orders Active Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/customer/tracking/orders/{order_id}/notifications": {
      "put": {
        "tags": [
          "Customer Order Tracking",
          "customer-tracking"
        ],
        "summary": "Update Notification Preferences",
        "description": "Update notification preferences for an order\n\nCan be accessed with tracking token or customer auth",
        "operationId": "update_update_notification_preferences",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationPreferencesUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Update Notification Preferences Api V1 Orders Customer Tracking Orders  Order Id  Notifications Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/customer/tracking/orders/{order_id}/events": {
      "post": {
        "tags": [
          "Customer Order Tracking",
          "customer-tracking"
        ],
        "summary": "Create Customer Event",
        "description": "Allow customers to create certain tracking events\n\nFor example: marking order as picked up, rating delivery, etc.",
        "operationId": "create_create_customer_event",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Event Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackingEventResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Customer Order Tracking",
          "customer-tracking"
        ],
        "summary": "Get Order Events",
        "description": "Get all tracking events for an order\n\nRequires either:\n- Valid tracking code\n- Valid access token\n- Customer authentication (for own orders)",
        "operationId": "get_get_order_events_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "tracking_code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tracking Code"
            }
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackingEventResponse"
                  },
                  "title": "Response Get Order Events Api V1 Orders Customer Tracking Orders  Order Id  Events Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/customer/tracking/register-push-token": {
      "post": {
        "tags": [
          "Customer Order Tracking",
          "customer-tracking"
        ],
        "summary": "Register Push Token",
        "description": "Register a push notification token for the customer\n\nUpdates all active order trackings with the new token",
        "operationId": "create_register_push_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object",
                "title": "Token Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Register Push Token Api V1 Orders Customer Tracking Register Push Token Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/orders/customer/tracking/test-notification/{order_id}": {
      "post": {
        "tags": [
          "Customer Order Tracking",
          "customer-tracking"
        ],
        "summary": "Test Notification",
        "description": "Test endpoint to trigger a notification for an order\n\nFor development/testing purposes",
        "operationId": "create_test_notification",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NotificationChannel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/manual-reviews/pending": {
      "get": {
        "tags": [
          "Manual Order Review",
          "manual_reviews"
        ],
        "summary": "Get Pending Reviews",
        "description": "Get pending manual reviews\n\n- **limit**: Maximum number of reviews to return\n- **offset**: Offset for pagination\n- **priority_threshold**: Only return reviews with priority >= threshold",
        "operationId": "list_get_pending_reviews",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "priority_threshold",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Priority Threshold"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManualReviewListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/manual-reviews/statistics": {
      "get": {
        "tags": [
          "Manual Order Review",
          "manual_reviews"
        ],
        "summary": "Get Review Statistics",
        "description": "Get statistics about manual reviews\n\n- **start_date**: Filter reviews created after this date\n- **end_date**: Filter reviews created before this date",
        "operationId": "list_get_review_statistics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewStatisticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/manual-reviews/{review_id}": {
      "get": {
        "tags": [
          "Manual Order Review",
          "manual_reviews"
        ],
        "summary": "Get Review Details",
        "description": "Get details of a specific review",
        "operationId": "get_get_review_details_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Review Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManualReviewResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/manual-reviews/{review_id}/assign": {
      "post": {
        "tags": [
          "Manual Order Review",
          "manual_reviews"
        ],
        "summary": "Assign Review",
        "description": "Assign a review to a user\n\n- **review_id**: ID of the review to assign\n- **assignee_id**: User ID to assign the review to",
        "operationId": "create_assign_review",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Review Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/manual-reviews/{review_id}/resolve": {
      "post": {
        "tags": [
          "Manual Order Review",
          "manual_reviews"
        ],
        "summary": "Resolve Review",
        "description": "Resolve a manual review\n\n- **review_id**: ID of the review to resolve\n- **resolution_action**: Action taken to resolve the issue\n- **notes**: Additional notes about the resolution\n- **mark_order_completed**: Whether to mark the associated order as completed",
        "operationId": "create_resolve_review",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Review Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/manual-reviews/{review_id}/escalate": {
      "post": {
        "tags": [
          "Manual Order Review",
          "manual_reviews"
        ],
        "summary": "Escalate Review",
        "description": "Escalate a review to higher management\n\n- **review_id**: ID of the review to escalate\n- **escalation_reason**: Reason for escalation",
        "operationId": "create_escalate_review",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Review Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EscalateReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/manual-reviews/order/{order_id}/reviews": {
      "get": {
        "tags": [
          "Manual Order Review",
          "manual_reviews"
        ],
        "summary": "Get Order Reviews",
        "description": "Get all reviews associated with an order",
        "operationId": "get_get_order_reviews_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/manual-reviews/my-assigned": {
      "get": {
        "tags": [
          "Manual Order Review",
          "manual_reviews"
        ],
        "summary": "Get My Assigned Reviews",
        "description": "Get reviews assigned to the current user",
        "operationId": "list_get_my_assigned_reviews",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/modules__orders__models__manual_review_models__ReviewStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sync/status": {
      "get": {
        "tags": [
          "order-sync",
          "sync-status"
        ],
        "summary": "Get Sync Status",
        "description": "Get current synchronization status overview.\n\nReturns summary of sync status including pending orders,\nrecent batches, and any conflicts.",
        "operationId": "list_get_sync_status",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/sync/orders/{order_id}/sync-status": {
      "get": {
        "tags": [
          "order-sync",
          "sync-status"
        ],
        "summary": "Get Order Sync Status",
        "description": "Get sync status for a specific order.\n\nReturns detailed sync information for a single order.",
        "operationId": "get_get_order_sync_status_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Order Sync Status Sync Orders  Order Id  Sync Status Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sync/metrics": {
      "get": {
        "tags": [
          "order-sync",
          "sync-status"
        ],
        "summary": "Get Sync Metrics",
        "description": "Get synchronization metrics and statistics.\n\nReturns metrics for monitoring sync performance and health.",
        "operationId": "list_get_sync_metrics",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncMetricsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/sync/health": {
      "get": {
        "tags": [
          "order-sync",
          "sync-status"
        ],
        "summary": "Get Sync Health",
        "description": "Perform sync system health check.\n\nAnalyzes sync system health and provides recommendations.",
        "operationId": "list_get_sync_health",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncHealthCheckResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/sync/configuration": {
      "put": {
        "tags": [
          "order-sync",
          "sync-config"
        ],
        "summary": "Update Sync Configuration",
        "description": "Update sync configuration.\n\nAllows enabling/disabling sync and changing sync interval.",
        "operationId": "update_update_sync_configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncConfigurationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Update Sync Configuration Sync Configuration Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/sync/conflicts": {
      "get": {
        "tags": [
          "order-sync",
          "sync-conflicts"
        ],
        "summary": "Get Sync Conflicts",
        "description": "Get unresolved sync conflicts.\n\nReturns list of conflicts that need manual resolution.",
        "operationId": "list_get_sync_conflicts",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Conflict resolution status",
              "default": "pending",
              "title": "Status"
            },
            "description": "Conflict resolution status"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SyncConflictResponse"
                  },
                  "title": "Response Get Sync Conflicts Sync Conflicts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sync/conflicts/{conflict_id}/resolve": {
      "post": {
        "tags": [
          "order-sync",
          "sync-conflicts"
        ],
        "summary": "Resolve Conflict",
        "description": "Resolve a sync conflict.\n\nAllows manual resolution of sync conflicts by choosing\nwhich version to keep or merging changes.",
        "operationId": "create_resolve_conflict",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "conflict_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Conflict Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConflictResolutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Resolve Conflict Sync Conflicts  Conflict Id  Resolve Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sync/batches": {
      "get": {
        "tags": [
          "order-sync"
        ],
        "summary": "Get Sync Batches",
        "description": "Get sync batch history.\n\nReturns list of recent sync batches with their results.",
        "operationId": "list_get_sync_batches",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SyncBatchResponse"
                  },
                  "title": "Response Get Sync Batches Sync Batches Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sync/manual": {
      "post": {
        "tags": [
          "order-sync"
        ],
        "summary": "Trigger Manual Sync",
        "description": "Trigger a manual synchronization.\n\nCan sync all pending orders or specific order IDs.",
        "operationId": "create_trigger_manual_sync",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualSyncRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Trigger Manual Sync Sync Manual Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/sync/retry-failed": {
      "post": {
        "tags": [
          "order-sync"
        ],
        "summary": "Retry Failed Syncs",
        "description": "Retry all failed sync attempts.\n\nResets failed orders to retry status for next sync run.",
        "operationId": "create_retry_failed_syncs",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Retry Failed Syncs Sync Retry Failed Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pos/sync": {
      "post": {
        "tags": [
          "POS Integration"
        ],
        "summary": "Sync Order To Pos",
        "description": "Sync an order to POS system",
        "operationId": "create_sync_order_to_pos",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pos/sync/status": {
      "get": {
        "tags": [
          "pos-sync"
        ],
        "summary": "Get Pos Sync Status",
        "description": "Get current sync status for POS terminal.\n\nReturns overview of sync status including pending orders,\nconflicts, and recent sync activity.",
        "operationId": "list_get_pos_sync_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "terminal_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Terminal Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/external-pos/{provider_code}/events": {
      "post": {
        "tags": [
          "External POS Webhooks"
        ],
        "summary": "Receive Webhook Event",
        "description": "Receive webhook events from external POS systems.\n\nThis endpoint receives webhook events from various POS providers like\nSquare, Stripe, Toast, etc. It verifies the webhook signature and\nprocesses payment updates asynchronously.",
        "operationId": "create_receive_webhook_event",
        "parameters": [
          {
            "name": "provider_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/external-pos/{provider_code}/status": {
      "get": {
        "tags": [
          "External POS Webhooks"
        ],
        "summary": "Get Provider Webhook Status",
        "description": "Get webhook configuration status for a provider",
        "operationId": "get_get_provider_webhook_status_by_id",
        "parameters": [
          {
            "name": "provider_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Provider Webhook Status Webhooks External Pos  Provider Code  Status Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/external-pos/{provider_code}/test": {
      "post": {
        "tags": [
          "External POS Webhooks"
        ],
        "summary": "Test Webhook Endpoint",
        "description": "Test webhook endpoint with sample data",
        "operationId": "create_test_webhook_endpoint",
        "parameters": [
          {
            "name": "provider_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider Code"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Test Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Test Webhook Endpoint Webhooks External Pos  Provider Code  Test Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/external-pos/health/status": {
      "get": {
        "tags": [
          "Webhook Health"
        ],
        "summary": "Get Webhook Health",
        "description": "Get overall webhook system health status",
        "operationId": "list_get_webhook_health",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookHealthStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/webhooks/external-pos/health/statistics": {
      "get": {
        "tags": [
          "Webhook Health"
        ],
        "summary": "Get Webhook Statistics",
        "description": "Get webhook processing statistics",
        "operationId": "list_get_webhook_statistics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "time_period_hours",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 168,
              "minimum": 1,
              "default": 24,
              "title": "Time Period Hours"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookStatistics"
                  },
                  "title": "Response Get Webhook Statistics Webhooks External Pos Health Statistics Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/external-pos/providers": {
      "get": {
        "tags": [
          "Webhook Providers"
        ],
        "summary": "List Providers",
        "description": "List all configured external POS providers",
        "operationId": "list_list_providers",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalPOSProviderResponse"
                  },
                  "title": "Response List Providers Webhooks External Pos Providers Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhook Providers"
        ],
        "summary": "Create Provider",
        "description": "Create a new external POS provider configuration",
        "operationId": "create_create_provider",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalPOSProviderCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalPOSProviderResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/external-pos/providers/{provider_id}": {
      "put": {
        "tags": [
          "Webhook Providers"
        ],
        "summary": "Update Provider",
        "description": "Update an external POS provider configuration",
        "operationId": "update_update_provider",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalPOSProviderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalPOSProviderResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhook Providers"
        ],
        "summary": "Delete Provider",
        "description": "Delete an external POS provider configuration",
        "operationId": "delete_delete_provider",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/external-pos/monitoring/events": {
      "get": {
        "tags": [
          "Webhook Monitoring"
        ],
        "summary": "List Webhook Events",
        "description": "List webhook events with filtering",
        "operationId": "list_list_webhook_events",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider_code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Provider Code"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/WebhookProcessingStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookEventResponse"
                  },
                  "title": "Response List Webhook Events Webhooks External Pos Monitoring Events Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/external-pos/monitoring/events/{event_id}": {
      "get": {
        "tags": [
          "Webhook Monitoring"
        ],
        "summary": "Get Webhook Event Detail",
        "description": "Get detailed information about a webhook event",
        "operationId": "get_get_webhook_event_detail_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Event Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEventDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/external-pos/monitoring/events/{event_id}/logs": {
      "get": {
        "tags": [
          "Webhook Monitoring"
        ],
        "summary": "Get Webhook Event Logs",
        "description": "Get processing logs for a webhook event",
        "operationId": "get_get_webhook_event_logs_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Event Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookLogResponse"
                  },
                  "title": "Response Get Webhook Event Logs Webhooks External Pos Monitoring Events  Event Id  Logs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/external-pos/monitoring/retry-failed": {
      "post": {
        "tags": [
          "Webhook Monitoring"
        ],
        "summary": "Retry Failed Webhooks",
        "description": "Manually trigger retry of failed webhooks",
        "operationId": "create_retry_failed_webhooks",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/external-pos/monitoring/scheduler/trigger": {
      "post": {
        "tags": [
          "Webhook Monitoring"
        ],
        "summary": "Trigger Scheduler",
        "description": "Manually trigger the webhook retry scheduler",
        "operationId": "create_trigger_scheduler",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/webhooks/configurations": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create Webhook Config",
        "operationId": "create_create_webhook_config",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookConfigurationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookConfigurationOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List Webhook Configs",
        "operationId": "list_list_webhook_configs",
        "parameters": [
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookConfigurationOut"
                  },
                  "title": "Response List Webhook Configs Webhooks Configurations Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/configurations/{config_id}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Webhook Config",
        "operationId": "get_get_webhook_config_by_id",
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookConfigurationOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update Webhook Config",
        "operationId": "update_update_webhook_config",
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Config Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookConfigurationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookConfigurationOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete Webhook Config",
        "operationId": "delete_delete_webhook_config",
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/configurations/{config_id}/test": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Test Webhook Config",
        "operationId": "create_test_webhook_config",
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookTestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/delivery-logs": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Delivery Logs",
        "operationId": "list_get_delivery_logs",
        "parameters": [
          {
            "name": "webhook_config_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Webhook Config Id"
            }
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookDeliveryLogOut"
                  },
                  "title": "Response Get Delivery Logs Webhooks Delivery Logs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/incoming/{webhook_id}": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Receive Incoming Webhook",
        "operationId": "create_receive_incoming_webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Webhook Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/health": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Webhook Health Check",
        "operationId": "list_webhook_health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/tax/jurisdictions/": {
      "post": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Create Jurisdiction",
        "description": "Create a new tax jurisdiction",
        "operationId": "create_create_jurisdiction",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxJurisdictionCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxJurisdictionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "List Jurisdictions",
        "description": "List tax jurisdictions with filters",
        "operationId": "list_list_jurisdictions",
        "parameters": [
          {
            "name": "jurisdiction_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(federal|state|county|city|special)$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Jurisdiction Type"
            }
          },
          {
            "name": "country_code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 2
                },
                {
                  "type": "null"
                }
              ],
              "title": "Country Code"
            }
          },
          {
            "name": "state_code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 10
                },
                {
                  "type": "null"
                }
              ],
              "title": "State Code"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxJurisdictionResponse"
                  },
                  "title": "Response List Jurisdictions Tax Jurisdictions  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/jurisdictions/{jurisdiction_id}": {
      "get": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Get Jurisdiction",
        "description": "Get a specific tax jurisdiction",
        "operationId": "get_get_jurisdiction_by_id",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxJurisdictionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Update Jurisdiction",
        "description": "Update a tax jurisdiction",
        "operationId": "patch_update_jurisdiction",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxJurisdictionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxJurisdictionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/jurisdictions/{jurisdiction_id}/rates": {
      "post": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Create Tax Rate",
        "description": "Create a new tax rate for a jurisdiction",
        "operationId": "create_create_tax_rate",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRateCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "List Jurisdiction Rates",
        "description": "List tax rates for a jurisdiction",
        "operationId": "get_list_jurisdiction_rates_by_id",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "tax_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tax Type"
            }
          },
          {
            "name": "effective_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Effective Date"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxRateResponse"
                  },
                  "title": "Response List Jurisdiction Rates Tax Jurisdictions  Jurisdiction Id  Rates Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/jurisdictions/rates/{rate_id}": {
      "patch": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Update Tax Rate",
        "description": "Update a tax rate",
        "operationId": "patch_update_tax_rate",
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rate Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRateUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/jurisdictions/{jurisdiction_id}/nexus": {
      "post": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Create Nexus",
        "description": "Create tax nexus for a jurisdiction",
        "operationId": "create_create_nexus",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxNexusCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxNexusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/jurisdictions/nexus": {
      "get": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "List All Nexus",
        "description": "List all tax nexus across jurisdictions",
        "operationId": "list_list_all_nexus",
        "parameters": [
          {
            "name": "nexus_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(physical|economic|affiliate|click_through)$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Nexus Type"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          },
          {
            "name": "requires_filing",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Requires Filing"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxNexusResponse"
                  },
                  "title": "Response List All Nexus Tax Jurisdictions Nexus Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/jurisdictions/nexus/{nexus_id}": {
      "patch": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Update Nexus",
        "description": "Update tax nexus",
        "operationId": "patch_update_nexus",
        "parameters": [
          {
            "name": "nexus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Nexus Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxNexusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxNexusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/jurisdictions/import/jurisdictions": {
      "post": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Import Jurisdictions",
        "description": "Import jurisdictions from a file",
        "operationId": "create_import_jurisdictions",
        "parameters": [
          {
            "name": "file_url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Url"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/jurisdictions/sync/rates": {
      "post": {
        "tags": [
          "Tax",
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Sync Tax Rates",
        "description": "Sync tax rates from external provider",
        "operationId": "create_sync_tax_rates",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(avalara|taxjar)$",
              "title": "Provider"
            }
          },
          {
            "name": "jurisdiction_ids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "title": "Jurisdiction Ids"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/calculations/calculate": {
      "post": {
        "tags": [
          "Tax",
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Calculate Tax",
        "description": "Calculate tax for a transaction\n\nSupports multi-jurisdiction tax calculation with exemptions and special rules.\nCan use internal engine or external providers (Avalara, TaxJar).",
        "operationId": "create_calculate_tax",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Tax provider to use (internal, avalara, taxjar)",
              "title": "Provider"
            },
            "description": "Tax provider to use (internal, avalara, taxjar)"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnhancedTaxCalculationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnhancedTaxCalculationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/calculations/validate-address": {
      "post": {
        "tags": [
          "Tax",
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Validate Address",
        "description": "Validate and standardize an address\n\nUses external providers for address validation and correction.\nReturns standardized address if valid.",
        "operationId": "create_validate_address",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Address validation provider",
              "default": "avalara",
              "title": "Provider"
            },
            "description": "Address validation provider"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "title": "Address"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/calculations/rates": {
      "get": {
        "tags": [
          "Tax",
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Get Tax Rates",
        "description": "Get tax rates for a location\n\nReturns all applicable tax rates including state, county, city, and special districts.",
        "operationId": "list_get_tax_rates",
        "parameters": [
          {
            "name": "country_code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2,
              "title": "Country Code"
            }
          },
          {
            "name": "state_code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State Code"
            }
          },
          {
            "name": "city_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "City Name"
            }
          },
          {
            "name": "zip_code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Zip Code"
            }
          },
          {
            "name": "tax_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tax Date"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Provider"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/calculations/exemptions": {
      "post": {
        "tags": [
          "Tax",
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Create Exemption Certificate",
        "description": "Create a tax exemption certificate",
        "operationId": "create_create_exemption_certificate",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxExemptionCertificateCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxExemptionCertificateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tax",
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "List Exemption Certificates",
        "description": "List exemption certificates with filters",
        "operationId": "list_list_exemption_certificates",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customer Id"
            }
          },
          {
            "name": "exemption_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Exemption Type"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          },
          {
            "name": "is_verified",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Verified"
            }
          },
          {
            "name": "expires_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expires Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/calculations/exemptions/{certificate_id}": {
      "get": {
        "tags": [
          "Tax",
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Get Exemption Certificate",
        "description": "Get a specific exemption certificate",
        "operationId": "get_get_exemption_certificate_by_id",
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Certificate Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxExemptionCertificateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/calculations/exemptions/{certificate_id}/verify": {
      "post": {
        "tags": [
          "Tax",
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Verify Exemption Certificate",
        "description": "Verify an exemption certificate",
        "operationId": "create_verify_exemption_certificate",
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Certificate Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxExemptionCertificateVerify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxExemptionCertificateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/calculations/test/calculate": {
      "post": {
        "tags": [
          "Tax",
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Test Tax Calculation",
        "description": "Test tax calculation with sample data",
        "operationId": "create_test_tax_calculation",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/filings": {
      "post": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Create Filing",
        "description": "Create a new tax filing",
        "operationId": "create_create_filing",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxFilingCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxFilingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "List Filings",
        "description": "List tax filings with filters",
        "operationId": "list_list_filings",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "filing_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilingType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filing Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilingStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "period_start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Period Start"
            }
          },
          {
            "name": "period_end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Period End"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxFilingResponse"
                  },
                  "title": "Response List Filings Tax Compliance Filings Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/filings/{filing_id}": {
      "get": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Get Filing",
        "description": "Get a specific tax filing",
        "operationId": "get_get_filing_by_id",
        "parameters": [
          {
            "name": "filing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Filing Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxFilingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Update Filing",
        "description": "Update a tax filing",
        "operationId": "patch_update_filing",
        "parameters": [
          {
            "name": "filing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Filing Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxFilingUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxFilingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/filings/{filing_id}/submit": {
      "post": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Submit Filing",
        "description": "Submit a tax filing",
        "operationId": "create_submit_filing",
        "parameters": [
          {
            "name": "filing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Filing Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxFilingSubmit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxFilingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/filings/{filing_id}/amend": {
      "post": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Amend Filing",
        "description": "Create an amended filing",
        "operationId": "create_amend_filing",
        "parameters": [
          {
            "name": "filing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Filing Id"
            }
          },
          {
            "name": "amendment_reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Amendment Reason"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/remittances": {
      "post": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Create Remittance",
        "description": "Create a tax payment remittance",
        "operationId": "create_create_remittance",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRemittanceCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/dashboard": {
      "get": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Get Compliance Dashboard",
        "description": "Get tax compliance dashboard",
        "operationId": "list_get_compliance_dashboard",
        "parameters": [
          {
            "name": "as_of_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "As Of Date"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxComplianceDashboard"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/reports": {
      "post": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Generate Report",
        "description": "Generate a tax report",
        "operationId": "create_generate_report",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/reports/{report_id}/download": {
      "get": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Download Report",
        "description": "Download a generated report",
        "operationId": "get_download_report_by_id",
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Report Id"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(pdf|excel|csv)$",
              "default": "pdf",
              "title": "Format"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/automation/schedule": {
      "post": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Schedule Automation",
        "description": "Schedule automated filing generation",
        "operationId": "create_schedule_automation",
        "parameters": [
          {
            "name": "frequency",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AutomationFrequency",
              "default": "daily"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/automation/generate/{nexus_id}": {
      "post": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Generate Automated Filing",
        "description": "Generate automated filing for a specific nexus",
        "operationId": "create_generate_automated_filing",
        "parameters": [
          {
            "name": "nexus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Nexus Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/automation/submit": {
      "post": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Auto Submit Filings",
        "description": "Auto-submit ready filings",
        "operationId": "create_auto_submit_filings",
        "parameters": [
          {
            "name": "dry_run",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Dry Run"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/automation/reconcile": {
      "post": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Reconcile Accounts",
        "description": "Reconcile tax accounts with transaction data",
        "operationId": "create_reconcile_accounts",
        "parameters": [
          {
            "name": "period_start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Period Start"
            }
          },
          {
            "name": "period_end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Period End"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/automation/estimated-payments": {
      "get": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Get Estimated Payments",
        "description": "Get estimated tax payment schedule",
        "operationId": "list_get_estimated_payments",
        "parameters": [
          {
            "name": "tax_year",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tax Year"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/audit-logs": {
      "get": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "List Audit Logs",
        "description": "List audit logs with filters",
        "operationId": "list_list_audit_logs",
        "parameters": [
          {
            "name": "entity_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Entity Type"
            }
          },
          {
            "name": "entity_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Entity Id"
            }
          },
          {
            "name": "event_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Event Type"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date From"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date To"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/compliance/quick-stats": {
      "get": {
        "tags": [
          "Tax",
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Get Quick Stats",
        "description": "Get quick tax statistics",
        "operationId": "list_get_quick_stats",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tax/calculate": {
      "post": {
        "tags": [
          "Tax"
        ],
        "summary": "Calculate Tax",
        "description": "Calculate tax for draft order or cart data (Simple version).\n\nFor advanced multi-jurisdiction calculations, use /calculations/calculate\n\n- **location**: Location for jurisdiction-based tax rules\n- **order_items**: List of items with quantities and prices\n- **customer_exemptions**: Optional tax exemptions to apply\n\nReturns detailed tax breakdown by line item and total amounts.",
        "operationId": "create_calculate_tax",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxCalculationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCalculationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/calculations/calculate": {
      "post": {
        "tags": [
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Calculate Tax",
        "description": "Calculate tax for a transaction\n\nSupports multi-jurisdiction tax calculation with exemptions and special rules.\nCan use internal engine or external providers (Avalara, TaxJar).",
        "operationId": "create_calculate_tax",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Tax provider to use (internal, avalara, taxjar)",
              "title": "Provider"
            },
            "description": "Tax provider to use (internal, avalara, taxjar)"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnhancedTaxCalculationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnhancedTaxCalculationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/calculations/validate-address": {
      "post": {
        "tags": [
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Validate Address",
        "description": "Validate and standardize an address\n\nUses external providers for address validation and correction.\nReturns standardized address if valid.",
        "operationId": "create_validate_address",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Address validation provider",
              "default": "avalara",
              "title": "Provider"
            },
            "description": "Address validation provider"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "title": "Address"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/calculations/rates": {
      "get": {
        "tags": [
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Get Tax Rates",
        "description": "Get tax rates for a location\n\nReturns all applicable tax rates including state, county, city, and special districts.",
        "operationId": "list_get_tax_rates",
        "parameters": [
          {
            "name": "country_code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2,
              "title": "Country Code"
            }
          },
          {
            "name": "state_code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State Code"
            }
          },
          {
            "name": "city_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "City Name"
            }
          },
          {
            "name": "zip_code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Zip Code"
            }
          },
          {
            "name": "tax_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tax Date"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Provider"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/calculations/exemptions": {
      "post": {
        "tags": [
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Create Exemption Certificate",
        "description": "Create a tax exemption certificate",
        "operationId": "create_create_exemption_certificate",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxExemptionCertificateCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxExemptionCertificateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "List Exemption Certificates",
        "description": "List exemption certificates with filters",
        "operationId": "list_list_exemption_certificates",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customer Id"
            }
          },
          {
            "name": "exemption_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Exemption Type"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          },
          {
            "name": "is_verified",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Verified"
            }
          },
          {
            "name": "expires_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expires Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/calculations/exemptions/{certificate_id}": {
      "get": {
        "tags": [
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Get Exemption Certificate",
        "description": "Get a specific exemption certificate",
        "operationId": "get_get_exemption_certificate_by_id",
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Certificate Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxExemptionCertificateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/calculations/exemptions/{certificate_id}/verify": {
      "post": {
        "tags": [
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Verify Exemption Certificate",
        "description": "Verify an exemption certificate",
        "operationId": "create_verify_exemption_certificate",
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Certificate Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxExemptionCertificateVerify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxExemptionCertificateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/calculations/test/calculate": {
      "post": {
        "tags": [
          "Tax Calculations",
          "Tax Calculations"
        ],
        "summary": "Test Tax Calculation",
        "description": "Test tax calculation with sample data",
        "operationId": "create_test_tax_calculation",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/filings": {
      "post": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Create Filing",
        "description": "Create a new tax filing",
        "operationId": "create_create_filing",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxFilingCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxFilingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "List Filings",
        "description": "List tax filings with filters",
        "operationId": "list_list_filings",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "filing_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilingType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filing Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilingStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "period_start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Period Start"
            }
          },
          {
            "name": "period_end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Period End"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxFilingResponse"
                  },
                  "title": "Response List Filings Api V1 Tax Compliance Filings Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/filings/{filing_id}": {
      "get": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Get Filing",
        "description": "Get a specific tax filing",
        "operationId": "get_get_filing_by_id",
        "parameters": [
          {
            "name": "filing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Filing Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxFilingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Update Filing",
        "description": "Update a tax filing",
        "operationId": "patch_update_filing",
        "parameters": [
          {
            "name": "filing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Filing Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxFilingUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxFilingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/filings/{filing_id}/submit": {
      "post": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Submit Filing",
        "description": "Submit a tax filing",
        "operationId": "create_submit_filing",
        "parameters": [
          {
            "name": "filing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Filing Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxFilingSubmit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxFilingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/filings/{filing_id}/amend": {
      "post": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Amend Filing",
        "description": "Create an amended filing",
        "operationId": "create_amend_filing",
        "parameters": [
          {
            "name": "filing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Filing Id"
            }
          },
          {
            "name": "amendment_reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Amendment Reason"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/remittances": {
      "post": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Create Remittance",
        "description": "Create a tax payment remittance",
        "operationId": "create_create_remittance",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRemittanceCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/dashboard": {
      "get": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Get Compliance Dashboard",
        "description": "Get tax compliance dashboard",
        "operationId": "list_get_compliance_dashboard",
        "parameters": [
          {
            "name": "as_of_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "As Of Date"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxComplianceDashboard"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/reports": {
      "post": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Generate Report",
        "description": "Generate a tax report",
        "operationId": "create_generate_report",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/reports/{report_id}/download": {
      "get": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Download Report",
        "description": "Download a generated report",
        "operationId": "get_download_report_by_id",
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Report Id"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(pdf|excel|csv)$",
              "default": "pdf",
              "title": "Format"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/automation/schedule": {
      "post": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Schedule Automation",
        "description": "Schedule automated filing generation",
        "operationId": "create_schedule_automation",
        "parameters": [
          {
            "name": "frequency",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AutomationFrequency",
              "default": "daily"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/automation/generate/{nexus_id}": {
      "post": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Generate Automated Filing",
        "description": "Generate automated filing for a specific nexus",
        "operationId": "create_generate_automated_filing",
        "parameters": [
          {
            "name": "nexus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Nexus Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/automation/submit": {
      "post": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Auto Submit Filings",
        "description": "Auto-submit ready filings",
        "operationId": "create_auto_submit_filings",
        "parameters": [
          {
            "name": "dry_run",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Dry Run"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/automation/reconcile": {
      "post": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Reconcile Accounts",
        "description": "Reconcile tax accounts with transaction data",
        "operationId": "create_reconcile_accounts",
        "parameters": [
          {
            "name": "period_start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Period Start"
            }
          },
          {
            "name": "period_end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Period End"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/automation/estimated-payments": {
      "get": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Get Estimated Payments",
        "description": "Get estimated tax payment schedule",
        "operationId": "list_get_estimated_payments",
        "parameters": [
          {
            "name": "tax_year",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tax Year"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/audit-logs": {
      "get": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "List Audit Logs",
        "description": "List audit logs with filters",
        "operationId": "list_list_audit_logs",
        "parameters": [
          {
            "name": "entity_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Entity Type"
            }
          },
          {
            "name": "entity_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Entity Id"
            }
          },
          {
            "name": "event_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Event Type"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date From"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date To"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/compliance/quick-stats": {
      "get": {
        "tags": [
          "Tax Compliance",
          "Tax Compliance"
        ],
        "summary": "Get Quick Stats",
        "description": "Get quick tax statistics",
        "operationId": "list_get_quick_stats",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/jurisdictions/": {
      "post": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Create Jurisdiction",
        "description": "Create a new tax jurisdiction",
        "operationId": "create_create_jurisdiction",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxJurisdictionCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxJurisdictionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "List Jurisdictions",
        "description": "List tax jurisdictions with filters",
        "operationId": "list_list_jurisdictions",
        "parameters": [
          {
            "name": "jurisdiction_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(federal|state|county|city|special)$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Jurisdiction Type"
            }
          },
          {
            "name": "country_code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 2
                },
                {
                  "type": "null"
                }
              ],
              "title": "Country Code"
            }
          },
          {
            "name": "state_code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 10
                },
                {
                  "type": "null"
                }
              ],
              "title": "State Code"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxJurisdictionResponse"
                  },
                  "title": "Response List Jurisdictions Api V1 Tax Jurisdictions  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/jurisdictions/{jurisdiction_id}": {
      "get": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Get Jurisdiction",
        "description": "Get a specific tax jurisdiction",
        "operationId": "get_get_jurisdiction_by_id",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxJurisdictionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Update Jurisdiction",
        "description": "Update a tax jurisdiction",
        "operationId": "patch_update_jurisdiction",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxJurisdictionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxJurisdictionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/jurisdictions/{jurisdiction_id}/rates": {
      "post": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Create Tax Rate",
        "description": "Create a new tax rate for a jurisdiction",
        "operationId": "create_create_tax_rate",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRateCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "List Jurisdiction Rates",
        "description": "List tax rates for a jurisdiction",
        "operationId": "get_list_jurisdiction_rates_by_id",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "tax_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tax Type"
            }
          },
          {
            "name": "effective_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Effective Date"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxRateResponse"
                  },
                  "title": "Response List Jurisdiction Rates Api V1 Tax Jurisdictions  Jurisdiction Id  Rates Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/jurisdictions/rates/{rate_id}": {
      "patch": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Update Tax Rate",
        "description": "Update a tax rate",
        "operationId": "patch_update_tax_rate",
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rate Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRateUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/jurisdictions/{jurisdiction_id}/nexus": {
      "post": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Create Nexus",
        "description": "Create tax nexus for a jurisdiction",
        "operationId": "create_create_nexus",
        "parameters": [
          {
            "name": "jurisdiction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Jurisdiction Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxNexusCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxNexusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/jurisdictions/nexus": {
      "get": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "List All Nexus",
        "description": "List all tax nexus across jurisdictions",
        "operationId": "list_list_all_nexus",
        "parameters": [
          {
            "name": "nexus_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(physical|economic|affiliate|click_through)$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Nexus Type"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          },
          {
            "name": "requires_filing",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Requires Filing"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxNexusResponse"
                  },
                  "title": "Response List All Nexus Api V1 Tax Jurisdictions Nexus Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/jurisdictions/nexus/{nexus_id}": {
      "patch": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Update Nexus",
        "description": "Update tax nexus",
        "operationId": "patch_update_nexus",
        "parameters": [
          {
            "name": "nexus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Nexus Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxNexusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxNexusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/jurisdictions/import/jurisdictions": {
      "post": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Import Jurisdictions",
        "description": "Import jurisdictions from a file",
        "operationId": "create_import_jurisdictions",
        "parameters": [
          {
            "name": "file_url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Url"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tax/jurisdictions/sync/rates": {
      "post": {
        "tags": [
          "Tax Jurisdictions",
          "Tax Jurisdictions"
        ],
        "summary": "Sync Tax Rates",
        "description": "Sync tax rates from external provider",
        "operationId": "create_sync_tax_rates",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(avalara|taxjar)$",
              "title": "Provider"
            }
          },
          {
            "name": "jurisdiction_ids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "title": "Jurisdiction Ids"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/pay-policies": {
      "get": {
        "tags": [
          "Payroll Configuration",
          "Pay Policies"
        ],
        "summary": "Get Staff Pay Policies",
        "description": "Get staff pay policies with optional filtering.\n\n## Query Parameters\n- **staff_id**: Optional staff ID filter\n- **active_only**: Only return active policies (default: true)\n- **limit**: Maximum records to return\n- **offset**: Records to skip for pagination\n\n## Response\nReturns list of staff pay policies.\n\n## Error Responses\n- **404**: Staff not found\n- **422**: Invalid query parameters",
        "operationId": "list_get_staff_pay_policies",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by staff ID",
              "title": "Staff Id"
            },
            "description": "Filter by staff ID"
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only return active policies",
              "default": true,
              "title": "Active Only"
            },
            "description": "Only return active policies"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaffPayPolicyResponse"
                  },
                  "title": "Response Get Staff Pay Policies Api V1 Payroll Pay Policies Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payroll Configuration",
          "Pay Policies"
        ],
        "summary": "Create Staff Pay Policy",
        "description": "Create a new staff pay policy.\n\n## Request Body\nSee StaffPayPolicyCreate schema for required fields.\n\n## Response\nReturns the created pay policy.\n\n## Error Responses\n- **400**: Business rule violation (e.g., duplicate policy)\n- **422**: Invalid input data",
        "operationId": "create_create_staff_pay_policy",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffPayPolicyCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPayPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/pay-policies/{staff_id}": {
      "get": {
        "tags": [
          "Payroll Configuration",
          "Pay Policies"
        ],
        "summary": "Get Staff Pay Policy",
        "description": "Get active pay policy for a specific staff member.\n\n## Path Parameters\n- **staff_id**: Staff member ID\n\n## Response\nReturns the active pay policy.\n\n## Error Responses\n- **404**: No active policy found",
        "operationId": "get_get_staff_pay_policy_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPayPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payroll Configuration",
          "Pay Policies"
        ],
        "summary": "Update Staff Pay Policy",
        "description": "Update an existing staff pay policy.\n\n## Path Parameters\n- **staff_id**: Staff member ID\n\n## Request Body\nPartial update - only include fields to update.\n\n## Response\nReturns the updated pay policy.\n\n## Error Responses\n- **404**: Policy not found\n- **422**: Invalid update data",
        "operationId": "update_update_staff_pay_policy",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Policy Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPayPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payroll Configuration",
          "Pay Policies"
        ],
        "summary": "Deactivate Staff Pay Policy",
        "description": "Deactivate a staff pay policy (soft delete).\n\n## Path Parameters\n- **staff_id**: Staff member ID\n\n## Response\nNo content on success.\n\n## Error Responses\n- **404**: Policy not found",
        "operationId": "delete_deactivate_staff_pay_policy",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/overtime-rules": {
      "get": {
        "tags": [
          "Payroll Configuration",
          "Overtime Rules"
        ],
        "summary": "Get Overtime Rules",
        "description": "Get overtime rules with optional location filtering.\n\n## Query Parameters\n- **location**: Optional location filter\n- **limit**: Maximum records to return\n- **offset**: Records to skip for pagination\n\n## Response\nReturns list of overtime rules.\n\n## Error Responses\n- **500**: Database error",
        "operationId": "list_get_overtime_rules",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by location",
              "title": "Location"
            },
            "description": "Filter by location"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OvertimeRuleResponse"
                  },
                  "title": "Response Get Overtime Rules Api V1 Payroll Overtime Rules Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payroll Configuration",
          "Overtime Rules"
        ],
        "summary": "Create Overtime Rule",
        "description": "Create a new overtime rule.\n\n## Request Body\nSee OvertimeRuleCreate schema for required fields.\n\n## Response\nReturns the created overtime rule.\n\n## Error Responses\n- **400**: Invalid rule data or duplicate location\n- **422**: Validation error",
        "operationId": "create_create_overtime_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OvertimeRuleCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/overtime-rules/{location}": {
      "get": {
        "tags": [
          "Payroll Configuration",
          "Overtime Rules"
        ],
        "summary": "Get Overtime Rule By Location",
        "description": "Get overtime rule for a specific location.\n\n## Path Parameters\n- **location**: Location/jurisdiction code\n\n## Response\nReturns the overtime rule.\n\n## Error Responses\n- **404**: Rule not found",
        "operationId": "get_get_overtime_rule_by_location_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/overtime-rules/{rule_id}": {
      "put": {
        "tags": [
          "Payroll Configuration",
          "Overtime Rules"
        ],
        "summary": "Update Overtime Rule",
        "description": "Update an existing overtime rule.\n\n## Path Parameters\n- **rule_id**: Overtime rule ID\n\n## Request Body\nPartial update - only include fields to update.\n\n## Response\nReturns the updated overtime rule.\n\n## Error Responses\n- **404**: Rule not found\n- **422**: Invalid threshold values",
        "operationId": "update_update_overtime_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Rule Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payroll Configuration",
          "Overtime Rules"
        ],
        "summary": "Delete Overtime Rule",
        "description": "Delete an overtime rule.\n\n## Path Parameters\n- **rule_id**: Overtime rule ID\n\n## Response\nNo content on success.\n\n## Error Responses\n- **404**: Rule not found",
        "operationId": "delete_delete_overtime_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/role-pay-rates": {
      "get": {
        "tags": [
          "Payroll Configuration",
          "Role Pay Rates"
        ],
        "summary": "Get Role Based Pay Rates",
        "description": "Get role-based pay rates with optional filtering.\n\n## Query Parameters\n- **role_name**: Optional role name filter\n- **location**: Optional location filter\n- **effective_date**: Get rates effective on specific date\n- **limit**: Maximum records to return\n- **offset**: Records to skip for pagination\n\n## Response\nReturns list of role-based pay rates.\n\n## Error Responses\n- **500**: Database error",
        "operationId": "list_get_role_based_pay_rates",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "role_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by role name",
              "title": "Role Name"
            },
            "description": "Filter by role name"
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by location",
              "title": "Location"
            },
            "description": "Filter by location"
          },
          {
            "name": "effective_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Get rates effective on date",
              "title": "Effective Date"
            },
            "description": "Get rates effective on date"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                  },
                  "title": "Response Get Role Based Pay Rates Api V1 Payroll Role Pay Rates Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payroll Configuration",
          "Role Pay Rates"
        ],
        "summary": "Create Role Based Pay Rate",
        "description": "Create a new role-based pay rate.\n\n## Request Body\nSee RoleBasedPayRateCreate schema for required fields.\n\n## Response\nReturns the created role-based pay rate.\n\n## Error Responses\n- **400**: Overlapping effective dates for same role/location\n- **422**: Validation error",
        "operationId": "create_create_role_based_pay_rate",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleBasedPayRateCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/role-pay-rates/{rate_id}": {
      "get": {
        "tags": [
          "Payroll Configuration",
          "Role Pay Rates"
        ],
        "summary": "Get Role Based Pay Rate",
        "description": "Get a specific role-based pay rate.\n\n## Path Parameters\n- **rate_id**: Pay rate ID\n\n## Response\nReturns the pay rate.\n\n## Error Responses\n- **404**: Rate not found",
        "operationId": "get_get_role_based_pay_rate_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rate Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payroll Configuration",
          "Role Pay Rates"
        ],
        "summary": "Update Role Based Pay Rate",
        "description": "Update an existing role-based pay rate.\n\n## Path Parameters\n- **rate_id**: Pay rate ID\n\n## Request Body\nPartial update - only include fields to update.\n\n## Response\nReturns the updated pay rate.\n\n## Error Responses\n- **404**: Rate not found\n- **400**: Invalid update would create overlapping rates",
        "operationId": "update_update_role_based_pay_rate",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rate Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Rate Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payroll Configuration",
          "Role Pay Rates"
        ],
        "summary": "Expire Role Based Pay Rate",
        "description": "Expire a role-based pay rate (soft delete).\n\n## Path Parameters\n- **rate_id**: Pay rate ID\n\n## Query Parameters\n- **expiry_date**: Date to expire the rate (defaults to now)\n\n## Response\nNo content on success.\n\n## Error Responses\n- **404**: Rate not found",
        "operationId": "delete_expire_role_based_pay_rate",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rate Id"
            }
          },
          {
            "name": "expiry_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expiry Date"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/payroll-configs": {
      "get": {
        "tags": [
          "Payroll Configuration"
        ],
        "summary": "Get Payroll Configurations",
        "description": "Get all payroll configurations with optional filtering.\n\n## Query Parameters\n- **tenant_id**: Optional tenant ID filter\n- **active_only**: Only return active configurations (default: true)\n- **limit**: Maximum records to return\n- **offset**: Records to skip for pagination\n\n## Response\nReturns list of payroll configurations.\n\n## Error Responses\n- **500**: Database error",
        "operationId": "list_get_payroll_configurations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tenant ID",
              "title": "Tenant Id"
            },
            "description": "Filter by tenant ID"
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only return active configurations",
              "default": true,
              "title": "Active Only"
            },
            "description": "Only return active configurations"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayrollConfigurationResponse"
                  },
                  "title": "Response Get Payroll Configurations Api V1 Payroll Payroll Configs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payroll Configuration"
        ],
        "summary": "Create Payroll Configuration",
        "description": "Create a new payroll configuration.\n\n## Request Body\nSee PayrollConfigurationCreate schema.\n\n## Response\nReturns the created configuration.\n\n## Error Responses\n- **400**: Invalid configuration data\n- **409**: Duplicate configuration key",
        "operationId": "create_create_payroll_configuration",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollConfigurationCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollConfigurationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/payroll-configs/{config_id}": {
      "get": {
        "tags": [
          "Payroll Configuration"
        ],
        "summary": "Get Payroll Configuration",
        "description": "Get a specific payroll configuration.\n\n## Path Parameters\n- **config_id**: Configuration ID\n\n## Response\nReturns the configuration.\n\n## Error Responses\n- **404**: Configuration not found",
        "operationId": "get_get_payroll_configuration_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollConfigurationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payroll Configuration"
        ],
        "summary": "Update Payroll Configuration",
        "description": "Update a payroll configuration.\n\n## Path Parameters\n- **config_id**: Configuration ID\n\n## Request Body\nPartial update - only include fields to update.\n\n## Response\nReturns the updated configuration.\n\n## Error Responses\n- **404**: Configuration not found\n- **400**: Invalid update data",
        "operationId": "update_update_payroll_configuration",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Config Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Config Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollConfigurationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payroll Configuration"
        ],
        "summary": "Delete Payroll Configuration",
        "description": "Delete (deactivate) a payroll configuration.\n\n## Path Parameters\n- **config_id**: Configuration ID\n\n## Response\nNo content on success.\n\n## Error Responses\n- **404**: Configuration not found",
        "operationId": "delete_delete_payroll_configuration",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Config Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll": {
      "get": {
        "tags": [
          "Role Pay Rates"
        ],
        "summary": "Get Role Based Pay Rates",
        "description": "Get role-based pay rates with optional filtering.\n\n## Query Parameters\n- **role_name**: Optional role name filter\n- **location**: Optional location filter\n- **effective_date**: Get rates effective on specific date\n- **limit**: Maximum records to return\n- **offset**: Records to skip for pagination\n\n## Response\nReturns list of role-based pay rates.\n\n## Error Responses\n- **500**: Database error",
        "operationId": "list_get_role_based_pay_rates",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "role_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by role name",
              "title": "Role Name"
            },
            "description": "Filter by role name"
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by location",
              "title": "Location"
            },
            "description": "Filter by location"
          },
          {
            "name": "effective_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Get rates effective on date",
              "title": "Effective Date"
            },
            "description": "Get rates effective on date"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                  },
                  "title": "Response Get Role Based Pay Rates Api V1 Payroll Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Role Pay Rates"
        ],
        "summary": "Create Role Based Pay Rate",
        "description": "Create a new role-based pay rate.\n\n## Request Body\nSee RoleBasedPayRateCreate schema for required fields.\n\n## Response\nReturns the created role-based pay rate.\n\n## Error Responses\n- **400**: Overlapping effective dates for same role/location\n- **422**: Validation error",
        "operationId": "create_create_role_based_pay_rate",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleBasedPayRateCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/{location}": {
      "get": {
        "tags": [
          "Overtime Rules"
        ],
        "summary": "Get Overtime Rule By Location",
        "description": "Get overtime rule for a specific location.\n\n## Path Parameters\n- **location**: Location/jurisdiction code\n\n## Response\nReturns the overtime rule.\n\n## Error Responses\n- **404**: Rule not found",
        "operationId": "get_get_overtime_rule_by_location_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/{rule_id}": {
      "put": {
        "tags": [
          "Overtime Rules"
        ],
        "summary": "Update Overtime Rule",
        "description": "Update an existing overtime rule.\n\n## Path Parameters\n- **rule_id**: Overtime rule ID\n\n## Request Body\nPartial update - only include fields to update.\n\n## Response\nReturns the updated overtime rule.\n\n## Error Responses\n- **404**: Rule not found\n- **422**: Invalid threshold values",
        "operationId": "update_update_overtime_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Rule Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Overtime Rules"
        ],
        "summary": "Delete Overtime Rule",
        "description": "Delete an overtime rule.\n\n## Path Parameters\n- **rule_id**: Overtime rule ID\n\n## Response\nNo content on success.\n\n## Error Responses\n- **404**: Rule not found",
        "operationId": "delete_delete_overtime_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/{staff_id}": {
      "get": {
        "tags": [
          "Pay Policies"
        ],
        "summary": "Get Staff Pay Policy",
        "description": "Get active pay policy for a specific staff member.\n\n## Path Parameters\n- **staff_id**: Staff member ID\n\n## Response\nReturns the active pay policy.\n\n## Error Responses\n- **404**: No active policy found",
        "operationId": "get_get_staff_pay_policy_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPayPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pay Policies"
        ],
        "summary": "Update Staff Pay Policy",
        "description": "Update an existing staff pay policy.\n\n## Path Parameters\n- **staff_id**: Staff member ID\n\n## Request Body\nPartial update - only include fields to update.\n\n## Response\nReturns the updated pay policy.\n\n## Error Responses\n- **404**: Policy not found\n- **422**: Invalid update data",
        "operationId": "update_update_staff_pay_policy",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Policy Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPayPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pay Policies"
        ],
        "summary": "Deactivate Staff Pay Policy",
        "description": "Deactivate a staff pay policy (soft delete).\n\n## Path Parameters\n- **staff_id**: Staff member ID\n\n## Response\nNo content on success.\n\n## Error Responses\n- **404**: Policy not found",
        "operationId": "delete_deactivate_staff_pay_policy",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "staff_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Staff Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/status/{job_id}": {
      "get": {
        "tags": [
          "Payment Export"
        ],
        "summary": "Get Export Status",
        "description": "Get status of an export job.\n\n## Path Parameters\n- **job_id**: Export job ID\n\n## Response\nReturns current job status and metadata.\n\n## Error Responses\n- **404**: Job not found",
        "operationId": "get_get_export_status_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/download/{job_id}": {
      "get": {
        "tags": [
          "Payment Export"
        ],
        "summary": "Download Export",
        "description": "Download completed export file.\n\n## Path Parameters\n- **job_id**: Export job ID\n\n## Response\nReturns file download if export is complete.\n\n## Error Responses\n- **404**: Job not found\n- **425**: Export not ready\n- **410**: Export expired",
        "operationId": "get_download_export_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/{employee_id}": {
      "get": {
        "tags": [
          "Payment History"
        ],
        "summary": "Get Employee Payment History",
        "description": "Get payment history for an employee with pagination.\n\n## Path Parameters\n- **employee_id**: Employee ID\n\n## Query Parameters\n- **start_date**: Filter payments from this date\n- **end_date**: Filter payments to this date\n- **status**: Filter by payment status\n- **limit**: Maximum records to return (default: 50, max: 100)\n- **offset**: Number of records to skip for pagination\n\n## Response\nReturns paginated payment history with summary statistics.\n\n## Error Responses\n- **404**: Employee not found\n- **422**: Invalid query parameters",
        "operationId": "get_get_employee_payment_history_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "employee_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Employee Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date filter",
              "title": "Start Date"
            },
            "description": "Start date filter"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date filter",
              "title": "End Date"
            },
            "description": "End date filter"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PaymentStatus-Input"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Payment status filter",
              "title": "Status"
            },
            "description": "Payment status filter"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum records to return",
              "default": 50,
              "title": "Limit"
            },
            "description": "Maximum records to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of records to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of records to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentHistoryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/details/{payment_id}": {
      "get": {
        "tags": [
          "Payment History"
        ],
        "summary": "Get Payment Details",
        "description": "Get detailed information for a specific payment.\n\n## Path Parameters\n- **payment_id**: Payment record ID\n\n## Response\nReturns complete payment details with structured breakdown.\n\n## Error Responses\n- **404**: Payment not found",
        "operationId": "get_get_payment_details_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/history/{employee_id}": {
      "get": {
        "tags": [
          "Payroll Payments",
          "Payment History"
        ],
        "summary": "Get Employee Payment History",
        "description": "Get payment history for an employee with pagination.\n\n## Path Parameters\n- **employee_id**: Employee ID\n\n## Query Parameters\n- **start_date**: Filter payments from this date\n- **end_date**: Filter payments to this date\n- **status**: Filter by payment status\n- **limit**: Maximum records to return (default: 50, max: 100)\n- **offset**: Number of records to skip for pagination\n\n## Response\nReturns paginated payment history with summary statistics.\n\n## Error Responses\n- **404**: Employee not found\n- **422**: Invalid query parameters",
        "operationId": "get_get_employee_payment_history_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "employee_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Employee Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date filter",
              "title": "Start Date"
            },
            "description": "Start date filter"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date filter",
              "title": "End Date"
            },
            "description": "End date filter"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PaymentStatus-Input"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Payment status filter",
              "title": "Status"
            },
            "description": "Payment status filter"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum records to return",
              "default": 50,
              "title": "Limit"
            },
            "description": "Maximum records to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of records to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of records to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentHistoryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/history/details/{payment_id}": {
      "get": {
        "tags": [
          "Payroll Payments",
          "Payment History"
        ],
        "summary": "Get Payment Details",
        "description": "Get detailed information for a specific payment.\n\n## Path Parameters\n- **payment_id**: Payment record ID\n\n## Response\nReturns complete payment details with structured breakdown.\n\n## Error Responses\n- **404**: Payment not found",
        "operationId": "get_get_payment_details_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/summary/by-period": {
      "get": {
        "tags": [
          "Payroll Payments",
          "Payment Summary"
        ],
        "summary": "Get Payment Summary By Period",
        "description": "Get payment summary for a specific period using SQL aggregation.\n\n## Query Parameters\n- **start_date**: Period start date (required)\n- **end_date**: Period end date (required)\n- **tenant_id**: Optional tenant filter\n\n## Response\nReturns aggregated payment data for the period.\n\n## Error Responses\n- **422**: Invalid date range\n- **500**: Database error",
        "operationId": "list_get_payment_summary_by_period",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period start date",
              "title": "Start Date"
            },
            "description": "Period start date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period end date",
              "title": "End Date"
            },
            "description": "Period end date"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tenant",
              "title": "Tenant Id"
            },
            "description": "Filter by tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentSummaryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/summary/by-employee/{employee_id}": {
      "get": {
        "tags": [
          "Payroll Payments",
          "Payment Summary"
        ],
        "summary": "Get Employee Payment Summary",
        "description": "Get payment summary for a specific employee.\n\n## Path Parameters\n- **employee_id**: Employee ID\n\n## Query Parameters\n- **year**: Optional year filter\n\n## Response\nReturns year-to-date or annual summary for the employee.\n\n## Error Responses\n- **404**: Employee has no payment records\n- **500**: Database error",
        "operationId": "get_get_employee_payment_summary_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "employee_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Employee Id"
            }
          },
          {
            "name": "year",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by year",
              "title": "Year"
            },
            "description": "Filter by year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/summary/tax-summary": {
      "get": {
        "tags": [
          "Payroll Payments",
          "Payment Summary"
        ],
        "summary": "Get Tax Summary",
        "description": "Get tax summary with grouping options.\n\n## Query Parameters\n- **start_date**: Period start date\n- **end_date**: Period end date\n- **group_by**: Grouping option (tax_type, location, month)\n\n## Response\nReturns tax totals grouped by selected criteria.\n\n## Error Responses\n- **422**: Invalid grouping option\n- **500**: Database error",
        "operationId": "list_get_tax_summary",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period start date",
              "title": "Start Date"
            },
            "description": "Period start date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period end date",
              "title": "End Date"
            },
            "description": "Period end date"
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Group by: tax_type, location, or month",
              "default": "tax_type",
              "title": "Group By"
            },
            "description": "Group by: tax_type, location, or month"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/export": {
      "post": {
        "tags": [
          "Payroll Payments",
          "Payment Export"
        ],
        "summary": "Export Payment Data",
        "description": "Export payment data asynchronously.\n\n## Request Body\n- **start_date**: Export period start\n- **end_date**: Export period end\n- **employee_ids**: Optional list of employee IDs\n- **format**: Export format (csv, excel, pdf)\n- **include_details**: Include detailed breakdown\n\n## Response\nReturns job information for tracking export progress.\n\n## Error Responses\n- **422**: Invalid date range or format\n- **429**: Too many export requests (rate limited)",
        "operationId": "create_export_payment_data",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentExportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payroll/export/status/{job_id}": {
      "get": {
        "tags": [
          "Payroll Payments",
          "Payment Export"
        ],
        "summary": "Get Export Status",
        "description": "Get status of an export job.\n\n## Path Parameters\n- **job_id**: Export job ID\n\n## Response\nReturns current job status and metadata.\n\n## Error Responses\n- **404**: Job not found",
        "operationId": "get_get_export_status_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/export/download/{job_id}": {
      "get": {
        "tags": [
          "Payroll Payments",
          "Payment Export"
        ],
        "summary": "Download Export",
        "description": "Download completed export file.\n\n## Path Parameters\n- **job_id**: Export job ID\n\n## Response\nReturns file download if export is complete.\n\n## Error Responses\n- **404**: Job not found\n- **425**: Export not ready\n- **410**: Export expired",
        "operationId": "get_download_export_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/{payment_id}/status": {
      "put": {
        "tags": [
          "Payroll Payments"
        ],
        "summary": "Update Payment Status",
        "description": "Update payment status.\n\n## Path Parameters\n- **payment_id**: Payment record ID\n\n## Request Body\n- **status**: New payment status\n- **payment_method**: Payment method (if paid)\n- **payment_reference**: Payment reference number\n- **notes**: Optional notes\n\n## Response\nReturns updated payment status information.\n\n## Error Responses\n- **404**: Payment not found\n- **400**: Invalid status transition",
        "operationId": "update_update_payment_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/{payment_id}/void": {
      "post": {
        "tags": [
          "Payroll Payments"
        ],
        "summary": "Void Payment",
        "description": "Void a payment.\n\n## Path Parameters\n- **payment_id**: Payment record ID\n\n## Query Parameters\n- **reason**: Reason for voiding (required)\n\n## Response\nReturns voided payment information.\n\n## Error Responses\n- **404**: Payment not found\n- **400**: Cannot void paid payment",
        "operationId": "create_void_payment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Reason for voiding payment",
              "title": "Reason"
            },
            "description": "Reason for voiding payment"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/by-period": {
      "get": {
        "tags": [
          "Payment Summary"
        ],
        "summary": "Get Payment Summary By Period",
        "description": "Get payment summary for a specific period using SQL aggregation.\n\n## Query Parameters\n- **start_date**: Period start date (required)\n- **end_date**: Period end date (required)\n- **tenant_id**: Optional tenant filter\n\n## Response\nReturns aggregated payment data for the period.\n\n## Error Responses\n- **422**: Invalid date range\n- **500**: Database error",
        "operationId": "list_get_payment_summary_by_period",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period start date",
              "title": "Start Date"
            },
            "description": "Period start date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period end date",
              "title": "End Date"
            },
            "description": "Period end date"
          },
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tenant",
              "title": "Tenant Id"
            },
            "description": "Filter by tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentSummaryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/by-employee/{employee_id}": {
      "get": {
        "tags": [
          "Payment Summary"
        ],
        "summary": "Get Employee Payment Summary",
        "description": "Get payment summary for a specific employee.\n\n## Path Parameters\n- **employee_id**: Employee ID\n\n## Query Parameters\n- **year**: Optional year filter\n\n## Response\nReturns year-to-date or annual summary for the employee.\n\n## Error Responses\n- **404**: Employee has no payment records\n- **500**: Database error",
        "operationId": "get_get_employee_payment_summary_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "employee_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Employee Id"
            }
          },
          {
            "name": "year",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by year",
              "title": "Year"
            },
            "description": "Filter by year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/tax-summary": {
      "get": {
        "tags": [
          "Payment Summary"
        ],
        "summary": "Get Tax Summary",
        "description": "Get tax summary with grouping options.\n\n## Query Parameters\n- **start_date**: Period start date\n- **end_date**: Period end date\n- **group_by**: Grouping option (tax_type, location, month)\n\n## Response\nReturns tax totals grouped by selected criteria.\n\n## Error Responses\n- **422**: Invalid grouping option\n- **500**: Database error",
        "operationId": "list_get_tax_summary",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period start date",
              "title": "Start Date"
            },
            "description": "Period start date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Period end date",
              "title": "End Date"
            },
            "description": "Period end date"
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Group by: tax_type, location, or month",
              "default": "tax_type",
              "title": "Group By"
            },
            "description": "Group by: tax_type, location, or month"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/{rate_id}": {
      "get": {
        "tags": [
          "Role Pay Rates"
        ],
        "summary": "Get Role Based Pay Rate",
        "description": "Get a specific role-based pay rate.\n\n## Path Parameters\n- **rate_id**: Pay rate ID\n\n## Response\nReturns the pay rate.\n\n## Error Responses\n- **404**: Rate not found",
        "operationId": "get_get_role_based_pay_rate_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rate Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Role Pay Rates"
        ],
        "summary": "Update Role Based Pay Rate",
        "description": "Update an existing role-based pay rate.\n\n## Path Parameters\n- **rate_id**: Pay rate ID\n\n## Request Body\nPartial update - only include fields to update.\n\n## Response\nReturns the updated pay rate.\n\n## Error Responses\n- **404**: Rate not found\n- **400**: Invalid update would create overlapping rates",
        "operationId": "update_update_role_based_pay_rate",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rate Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Rate Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBasedPayRateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Role Pay Rates"
        ],
        "summary": "Expire Role Based Pay Rate",
        "description": "Expire a role-based pay rate (soft delete).\n\n## Path Parameters\n- **rate_id**: Pay rate ID\n\n## Query Parameters\n- **expiry_date**: Date to expire the rate (defaults to now)\n\n## Response\nNo content on success.\n\n## Error Responses\n- **404**: Rate not found",
        "operationId": "delete_expire_role_based_pay_rate",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rate_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rate Id"
            }
          },
          {
            "name": "expiry_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expiry Date"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/calculate": {
      "post": {
        "tags": [
          "Payroll Tax Calculations"
        ],
        "summary": "Calculate Payroll Taxes",
        "description": "Calculate payroll taxes for a given gross amount and parameters.\n\n## Request Body\n- **gross_amount**: Gross pay amount to calculate taxes on\n- **pay_date**: Date for tax rule lookup\n- **location**: Location/jurisdiction for tax calculation\n- **employee_id**: Optional employee ID for specific calculations\n- **year_to_date_gross**: Optional YTD gross for cap calculations\n- **year_to_date_ss**: Optional YTD social security for cap tracking\n- **year_to_date_medicare**: Optional YTD medicare for cap tracking\n\n## Response\nReturns detailed tax calculations including:\n- Federal, state, and local taxes\n- Social security and medicare\n- Employee and employer portions\n- Applied tax rules\n\n## Authentication\nRequires payroll access permissions.",
        "operationId": "create_calculate_payroll_taxes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollTaxCalculationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollTaxCalculationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payroll/calculate-and-save": {
      "post": {
        "tags": [
          "Payroll Tax Calculations"
        ],
        "summary": "Calculate And Save Taxes",
        "description": "Calculate payroll taxes and save the results with audit trail.\n\n## Request Body\n- **employee_id**: Employee ID for tax calculation\n- **gross_amount**: Gross pay amount\n- **pay_period_start**: Start of pay period\n- **pay_period_end**: End of pay period\n- **location**: Tax jurisdiction location\n- **tenant_id**: Optional tenant ID for multi-tenant support\n\n## Response\nReturns tax calculation results with:\n- All calculated tax amounts\n- Total deductions\n- Net pay amount\n- Applied tax rules audit trail\n\n## Authentication\nRequires payroll access permissions.",
        "operationId": "create_calculate_and_save_taxes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollTaxServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollTaxServiceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payroll/rules": {
      "get": {
        "tags": [
          "Payroll Tax Calculations"
        ],
        "summary": "Get Tax Rules",
        "description": "Get tax rules with optional filtering.\n\n## Query Parameters\n- **location**: Filter by location/jurisdiction\n- **tax_type**: Filter by tax type (FEDERAL, STATE, LOCAL, etc.)\n- **status**: Filter by status (ACTIVE, INACTIVE, PENDING)\n- **effective_date**: Get rules effective on specific date\n\n## Response\nReturns list of tax rules matching the criteria.\n\n## Authentication\nRequires payroll access permissions.",
        "operationId": "list_get_tax_rules",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Location"
            }
          },
          {
            "name": "tax_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaxRuleType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tax Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaxRuleStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "effective_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Effective Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxRuleResponse"
                  },
                  "title": "Response Get Tax Rules Api V1 Payroll Rules Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/rules/{rule_id}": {
      "get": {
        "tags": [
          "Payroll Tax Calculations"
        ],
        "summary": "Get Tax Rule",
        "description": "Get a specific tax rule by ID.\n\n## Path Parameters\n- **rule_id**: Tax rule ID\n\n## Response\nReturns the tax rule details.\n\n## Authentication\nRequires payroll access permissions.",
        "operationId": "get_get_tax_rule_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payroll/effective-rates": {
      "get": {
        "tags": [
          "Payroll Tax Calculations"
        ],
        "summary": "Get Effective Tax Rates",
        "description": "Get effective tax rates for a location and gross amount.\n\n## Query Parameters\n- **location**: Tax jurisdiction location\n- **gross_amount**: Gross pay amount for rate calculation\n- **pay_date**: Optional date for rate lookup (defaults to today)\n\n## Response\nReturns effective tax rates and estimated tax amounts.\n\n## Authentication\nRequires payroll access permissions.",
        "operationId": "list_get_effective_tax_rates",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Location"
            }
          },
          {
            "name": "gross_amount",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ],
              "title": "Gross Amount"
            }
          },
          {
            "name": "pay_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pay Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/settings/pos-sync/": {
      "get": {
        "tags": [
          "POS Sync Settings"
        ],
        "summary": "Get Pos Sync Settings",
        "operationId": "list_get_pos_sync_settings",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tenant ID",
              "title": "Tenant Id"
            },
            "description": "Filter by tenant ID"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by team ID",
              "title": "Team Id"
            },
            "description": "Filter by team ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POSSyncSettingOut"
                  },
                  "title": "Response Get Pos Sync Settings Settings Pos Sync  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "POS Sync Settings"
        ],
        "summary": "Create Or Update Pos Sync Setting",
        "operationId": "create_create_or_update_pos_sync_setting",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POSSyncSettingCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POSSyncSettingOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pos/integrations": {
      "get": {
        "tags": [
          "POS Integration"
        ],
        "summary": "List Pos Integrations",
        "description": "List all POS integrations",
        "operationId": "list_list_pos_integrations",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/POSIntegrationOut"
                  },
                  "type": "array",
                  "title": "Response List Pos Integrations Pos Integrations Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "POS Integration"
        ],
        "summary": "Create Pos Integration",
        "description": "Create a new POS integration",
        "operationId": "create_create_pos_integration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POSIntegrationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POSIntegrationOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pos/integrations/{integration_id}": {
      "get": {
        "tags": [
          "POS Integration"
        ],
        "summary": "Get Pos Integration",
        "description": "Get a specific POS integration",
        "operationId": "get_get_pos_integration_by_id",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Integration Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POSIntegrationOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "POS Integration"
        ],
        "summary": "Delete Pos Integration",
        "description": "Delete a POS integration",
        "operationId": "delete_delete_pos_integration",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Integration Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pos/integrations/{integration_id}/status": {
      "put": {
        "tags": [
          "POS Integration"
        ],
        "summary": "Update Integration Status",
        "description": "Update POS integration status",
        "operationId": "update_update_integration_status",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Integration Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/POSIntegrationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pos/integrations/{integration_id}/test": {
      "get": {
        "tags": [
          "POS Integration"
        ],
        "summary": "Test Pos Integration",
        "description": "Test POS integration connection",
        "operationId": "get_test_pos_integration_by_id",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Integration Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pos/sync/all/{order_id}": {
      "post": {
        "tags": [
          "POS Integration"
        ],
        "summary": "Sync Order To All Pos",
        "description": "Sync an order to all active POS integrations",
        "operationId": "create_sync_order_to_all_pos",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pos/sync-logs": {
      "get": {
        "tags": [
          "POS Integration"
        ],
        "summary": "Get Sync Logs",
        "description": "Get sync logs, optionally filtered by integration or order",
        "operationId": "list_get_sync_logs",
        "parameters": [
          {
            "name": "integration_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Integration Id"
            }
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POSSyncLogOut"
                  },
                  "title": "Response Get Sync Logs Pos Sync Logs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pos/webhook/{integration_id}": {
      "post": {
        "tags": [
          "POS Integration"
        ],
        "summary": "Pos Webhook Receiver",
        "description": "Receive webhook notifications from POS systems for new orders",
        "operationId": "create_pos_webhook_receiver",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Integration Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pos/sync/pull/{integration_id}": {
      "post": {
        "tags": [
          "POS Integration"
        ],
        "summary": "Manual Sync From Pos",
        "description": "Manually trigger sync to pull orders from POS system",
        "operationId": "create_manual_sync_from_pos",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Integration Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POSOrderSyncRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/pos/integrations/{integration_id}/orders": {
      "get": {
        "tags": [
          "POS Integration"
        ],
        "summary": "Get Pos Orders",
        "description": "Get orders from POS system without creating them in AuraConnect",
        "operationId": "get_get_pos_orders_by_id",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Integration Id"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Since"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/categories": {
      "post": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Create Category",
        "description": "Create a new menu category",
        "operationId": "create_create_category",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuCategoryCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuCategory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Categories",
        "description": "Get all menu categories",
        "operationId": "list_get_categories",
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter by active categories only",
              "default": true,
              "title": "Active Only"
            },
            "description": "Filter by active categories only"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuCategory"
                  },
                  "title": "Response Get Categories Menu Categories Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/categories/{category_id}": {
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Category By Id",
        "description": "Get a category by ID with its items",
        "operationId": "get_get_category_by_id_by_id",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Category Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuCategoryWithItems"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Update Category",
        "description": "Update a menu category",
        "operationId": "update_update_category",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Category Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuCategoryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuCategory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Delete Category",
        "description": "Delete a menu category",
        "operationId": "delete_delete_category",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Category Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/categories/bulk": {
      "put": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Bulk Update Categories",
        "description": "Bulk update menu categories",
        "operationId": "update_bulk_update_categories",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCategoryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuCategory"
                  },
                  "title": "Response Bulk Update Categories Menu Categories Bulk Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/items": {
      "post": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Create Menu Item",
        "description": "Create a new menu item",
        "operationId": "create_create_menu_item",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuItemCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Menu Items",
        "description": "Get menu items with search and pagination",
        "operationId": "list_get_menu_items",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search query",
              "title": "Query"
            },
            "description": "Search query"
          },
          {
            "name": "category_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category Id"
            },
            "description": "Filter by category"
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by active status",
              "title": "Is Active"
            },
            "description": "Filter by active status"
          },
          {
            "name": "is_available",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by availability",
              "title": "Is Available"
            },
            "description": "Filter by availability"
          },
          {
            "name": "min_price",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Minimum price",
              "title": "Min Price"
            },
            "description": "Minimum price"
          },
          {
            "name": "max_price",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Maximum price",
              "title": "Max Price"
            },
            "description": "Maximum price"
          },
          {
            "name": "dietary_tags",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by dietary tags",
              "title": "Dietary Tags"
            },
            "description": "Filter by dietary tags"
          },
          {
            "name": "allergens",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Exclude allergens",
              "title": "Allergens"
            },
            "description": "Exclude allergens"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Limit"
            },
            "description": "Items per page"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Items to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Items to skip"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(name|price|created_at|display_order)$",
              "default": "display_order",
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "default": "asc",
              "title": "Sort Order"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/items/{item_id}": {
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Menu Item By Id",
        "description": "Get a menu item by ID with details",
        "operationId": "get_get_menu_item_by_id_by_id",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemWithDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Update Menu Item",
        "description": "Update a menu item",
        "operationId": "update_update_menu_item",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuItemUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Delete Menu Item",
        "description": "Delete a menu item",
        "operationId": "delete_delete_menu_item",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/items/bulk": {
      "put": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Bulk Update Menu Items",
        "description": "Bulk update menu items",
        "operationId": "update_bulk_update_menu_items",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMenuItemUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItem"
                  },
                  "title": "Response Bulk Update Menu Items Menu Items Bulk Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/modifier-groups": {
      "post": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Create Modifier Group",
        "description": "Create a new modifier group",
        "operationId": "create_create_modifier_group",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierGroupCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifierGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Modifier Groups",
        "description": "Get all modifier groups",
        "operationId": "list_get_modifier_groups",
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter by active groups only",
              "default": true,
              "title": "Active Only"
            },
            "description": "Filter by active groups only"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModifierGroup"
                  },
                  "title": "Response Get Modifier Groups Menu Modifier Groups Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/modifier-groups/{group_id}": {
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Modifier Group By Id",
        "description": "Get a modifier group by ID with its modifiers",
        "operationId": "get_get_modifier_group_by_id_by_id",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifierGroupWithModifiers"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Update Modifier Group",
        "description": "Update a modifier group",
        "operationId": "update_update_modifier_group",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierGroupUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifierGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Delete Modifier Group",
        "description": "Delete a modifier group",
        "operationId": "delete_delete_modifier_group",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/modifiers": {
      "post": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Create Modifier",
        "description": "Create a new modifier",
        "operationId": "create_create_modifier",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/modifier-groups/{group_id}/modifiers": {
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Modifiers By Group",
        "description": "Get modifiers by group ID",
        "operationId": "get_get_modifiers_by_group_by_id",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter by active modifiers only",
              "default": true,
              "title": "Active Only"
            },
            "description": "Filter by active modifiers only"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Modifier"
                  },
                  "title": "Response Get Modifiers By Group Menu Modifier Groups  Group Id  Modifiers Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/modifiers/{modifier_id}": {
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Modifier By Id",
        "description": "Get a modifier by ID",
        "operationId": "get_get_modifier_by_id_by_id",
        "parameters": [
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Modifier Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Update Modifier",
        "description": "Update a modifier",
        "operationId": "update_update_modifier",
        "parameters": [
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Modifier Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Delete Modifier",
        "description": "Delete a modifier",
        "operationId": "delete_delete_modifier",
        "parameters": [
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Modifier Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/items/{item_id}/modifiers": {
      "post": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Add Modifier To Item",
        "description": "Add a modifier group to a menu item",
        "operationId": "create_add_modifier_to_item",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuItemModifierCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemModifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Item Modifiers",
        "description": "Get all modifier groups for a menu item",
        "operationId": "get_get_item_modifiers_by_id",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemModifier"
                  },
                  "title": "Response Get Item Modifiers Menu Items  Item Id  Modifiers Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/items/{item_id}/modifiers/{modifier_group_id}": {
      "delete": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Remove Modifier From Item",
        "description": "Remove a modifier group from a menu item",
        "operationId": "delete_remove_modifier_from_item",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          },
          {
            "name": "modifier_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Modifier Group Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/items/{item_id}/inventory": {
      "post": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Add Inventory To Item",
        "description": "Link an inventory item to a menu item",
        "operationId": "create_add_inventory_to_item",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuItemInventoryCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemInventory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/stats": {
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Menu Stats",
        "description": "Get menu statistics",
        "operationId": "list_get_menu_stats",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/public/categories": {
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Public Categories",
        "description": "Get active menu categories for public use",
        "operationId": "list_get_public_categories",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MenuCategory"
                  },
                  "type": "array",
                  "title": "Response Get Public Categories Menu Public Categories Get"
                }
              }
            }
          }
        }
      }
    },
    "/menu/public/items": {
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Public Menu Items",
        "description": "Get available menu items for public use",
        "operationId": "list_get_public_menu_items",
        "parameters": [
          {
            "name": "category_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category Id"
            },
            "description": "Filter by category"
          },
          {
            "name": "dietary_tags",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by dietary tags",
              "title": "Dietary Tags"
            },
            "description": "Filter by dietary tags"
          },
          {
            "name": "allergens",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Exclude allergens",
              "title": "Allergens"
            },
            "description": "Exclude allergens"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Limit"
            },
            "description": "Items per page"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Items to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Items to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/public/items/{item_id}": {
      "get": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Get Public Menu Item",
        "description": "Get a menu item for public use",
        "operationId": "get_get_public_menu_item_by_id",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemWithDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/items/bulk-update": {
      "post": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Bulk Update Menu Items",
        "description": "Bulk update multiple menu items and create version if significant changes",
        "operationId": "create_bulk_update_menu_items",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_bulk_update_menu_items_menu_items_bulk_update_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/items/bulk-activate": {
      "post": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Bulk Activate Menu Items",
        "description": "Bulk activate or deactivate multiple menu items",
        "operationId": "create_bulk_activate_menu_items",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Active"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "title": "Item Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/items/bulk-price-update": {
      "post": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Bulk Update Prices",
        "description": "Bulk update item prices - always creates a version due to criticality",
        "operationId": "create_bulk_update_prices",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                },
                "title": "Price Updates"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/items/bulk-delete": {
      "delete": {
        "tags": [
          "Menu Management"
        ],
        "summary": "Bulk Delete Menu Items",
        "description": "Bulk soft-delete multiple menu items",
        "operationId": "delete_bulk_delete_menu_items",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "title": "Item Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/low-stock": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Low Stock Items",
        "description": "Get items that are below their reorder threshold",
        "operationId": "list_get_low_stock_items",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/core__inventory_schemas__Inventory"
                  },
                  "title": "Response Get Low Stock Items Inventory Low Stock Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventory_id}/adjust-quantity": {
      "post": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Adjust Inventory Quantity",
        "description": "Adjust inventory quantity (positive for increase, negative for decrease)",
        "operationId": "create_adjust_inventory_quantity",
        "parameters": [
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "adjustment",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "title": "Adjustment"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Reason for adjustment",
              "title": "Reason"
            },
            "description": "Reason for adjustment"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/alerts/low-stock-count": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Low Stock Count",
        "description": "Get count of items below reorder threshold",
        "operationId": "list_get_low_stock_count",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/reports/usage": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Inventory Usage Report",
        "description": "Get inventory usage report (placeholder for future implementation)",
        "operationId": "list_get_inventory_usage_report",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date (YYYY-MM-DD)",
              "title": "Start Date"
            },
            "description": "Start date (YYYY-MM-DD)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date (YYYY-MM-DD)",
              "title": "End Date"
            },
            "description": "End date (YYYY-MM-DD)"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/": {
      "post": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Create Version",
        "description": "Create a new menu version from current active menu state",
        "operationId": "create_create_version",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuVersion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Get Versions",
        "description": "Get paginated list of menu versions",
        "operationId": "list_get_versions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Size"
            }
          },
          {
            "name": "version_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/VersionType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Version Type"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMenuVersions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/{version_id}": {
      "get": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Get Version Details",
        "description": "Get detailed information about a specific version",
        "operationId": "get_get_version_details_by_id",
        "parameters": [
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuVersionWithDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Delete Version",
        "description": "Soft delete a menu version",
        "operationId": "delete_delete_version",
        "parameters": [
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/{version_id}/publish": {
      "post": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Publish Version",
        "description": "Publish a menu version (make it active)",
        "operationId": "create_publish_version",
        "parameters": [
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuVersion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/rollback": {
      "post": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Rollback Version",
        "description": "Rollback to a previous version",
        "operationId": "create_rollback_version",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RollbackVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuVersion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/compare": {
      "post": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Compare Versions",
        "description": "Compare two menu versions and return differences",
        "operationId": "create_compare_versions",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionComparisonRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuVersionComparison"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/audit/logs": {
      "get": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Get Audit Logs",
        "description": "Get paginated audit logs for menu changes",
        "operationId": "list_get_audit_logs",
        "parameters": [
          {
            "name": "version_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Version Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 50,
              "title": "Size"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAuditLogs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/stats": {
      "get": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Get Version Stats",
        "description": "Get statistics about menu versions",
        "operationId": "list_get_version_stats",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuVersionStats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/bulk-change": {
      "post": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Bulk Change",
        "description": "Apply bulk changes to menu entities",
        "operationId": "create_bulk_change",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkChangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Bulk Change Menu Versions Bulk Change Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/{version_id}/export": {
      "post": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Export Version",
        "description": "Export a menu version to various formats",
        "operationId": "create_export_version",
        "parameters": [
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionExportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/import": {
      "post": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Import Version",
        "description": "Import menu data and optionally create a new version",
        "operationId": "create_import_version",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionImportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuVersion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/webhooks/auto-version": {
      "post": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Auto Version Webhook",
        "description": "Webhook endpoint for automatic version creation based on external triggers",
        "operationId": "create_auto_version_webhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu/versions/{version_id}/preview": {
      "get": {
        "tags": [
          "Menu Versioning"
        ],
        "summary": "Preview Version",
        "description": "Preview what the menu would look like with this version active",
        "operationId": "get_preview_version_by_id",
        "parameters": [
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/": {
      "post": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Create Recipe",
        "description": "Create a new recipe for a menu item",
        "operationId": "create_create_recipe",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Search Recipes",
        "description": "Search and list recipes with filters",
        "operationId": "list_search_recipes",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search query",
              "title": "Query"
            },
            "description": "Search query"
          },
          {
            "name": "menu_item_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by menu item",
              "title": "Menu Item Id"
            },
            "description": "Filter by menu item"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "complexity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by complexity",
              "title": "Complexity"
            },
            "description": "Filter by complexity"
          },
          {
            "name": "min_cost",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Minimum cost",
              "title": "Min Cost"
            },
            "description": "Minimum cost"
          },
          {
            "name": "max_cost",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Maximum cost",
              "title": "Max Cost"
            },
            "description": "Maximum cost"
          },
          {
            "name": "ingredient_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Find recipes using specific ingredient",
              "title": "Ingredient Id"
            },
            "description": "Find recipes using specific ingredient"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Limit"
            },
            "description": "Items per page"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Items to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Items to skip"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort field",
              "default": "name",
              "title": "Sort By"
            },
            "description": "Sort field"
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "default": "asc",
              "title": "Sort Order"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Search Recipes Api V1 Menu Recipes  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/{recipe_id}": {
      "get": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Get Recipe",
        "description": "Get a recipe by ID",
        "operationId": "get_get_recipe_by_id",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Update Recipe",
        "description": "Update recipe details",
        "operationId": "update_update_recipe",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Delete Recipe",
        "description": "Delete a recipe",
        "operationId": "delete_delete_recipe",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/menu-item/{menu_item_id}": {
      "get": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Get Recipe By Menu Item",
        "description": "Get recipe for a specific menu item",
        "operationId": "get_get_recipe_by_menu_item_by_id",
        "parameters": [
          {
            "name": "menu_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Menu Item Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/{recipe_id}/ingredients": {
      "put": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Update Recipe Ingredients",
        "description": "Update recipe ingredients (replaces all ingredients)",
        "operationId": "update_update_recipe_ingredients",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RecipeIngredientCreate"
                },
                "title": "Ingredients"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Add Recipe Ingredient",
        "description": "Add a single ingredient to a recipe",
        "operationId": "create_add_recipe_ingredient",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeIngredientCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeIngredientResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/{recipe_id}/ingredients/{inventory_id}": {
      "delete": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Remove Recipe Ingredient",
        "description": "Remove an ingredient from a recipe",
        "operationId": "delete_remove_recipe_ingredient",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/{recipe_id}/cost-analysis": {
      "get": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Get Recipe Cost Analysis",
        "description": "Get detailed cost analysis for a recipe",
        "operationId": "get_get_recipe_cost_analysis_by_id",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeCostAnalysis"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/recalculate-costs": {
      "post": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Recalculate All Costs",
        "description": "Recalculate costs for all recipes (admin only)",
        "operationId": "create_recalculate_all_costs",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/{recipe_id}/validate": {
      "get": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Validate Recipe",
        "description": "Validate a recipe for completeness and accuracy",
        "operationId": "get_validate_recipe_by_id",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeValidation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/compliance/report": {
      "get": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Get Compliance Report",
        "description": "Get compliance report showing menu items without recipes\n\nNote: This report is cached for 10 minutes to improve performance.\nSet use_cache=false to force regeneration.",
        "operationId": "list_get_compliance_report",
        "parameters": [
          {
            "name": "use_cache",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Use cached data if available",
              "default": true,
              "title": "Use Cache"
            },
            "description": "Use cached data if available"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeComplianceReport"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/compliance/missing": {
      "get": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Get Menu Items Without Recipes",
        "description": "Get list of menu items that don't have recipes",
        "operationId": "list_get_menu_items_without_recipes",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemRecipeStatus"
                  },
                  "title": "Response Get Menu Items Without Recipes Api V1 Menu Recipes Compliance Missing Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/clone": {
      "post": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Clone Recipe",
        "description": "Clone a recipe to another menu item",
        "operationId": "create_clone_recipe",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeCloneRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/{recipe_id}/history": {
      "get": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Get Recipe History",
        "description": "Get version history for a recipe",
        "operationId": "get_get_recipe_history_by_id",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecipeHistoryResponse"
                  },
                  "title": "Response Get Recipe History Api V1 Menu Recipes  Recipe Id  History Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/bulk/update": {
      "put": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Bulk Update Recipes",
        "description": "Bulk update multiple recipes (manager/admin only).\n\nUse dry_run=true to simulate changes and see what would happen without committing.",
        "operationId": "update_bulk_update_recipes",
        "parameters": [
          {
            "name": "dry_run",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Simulate the operation without making changes",
              "default": false,
              "title": "Dry Run"
            },
            "description": "Simulate the operation without making changes"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkRecipeUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Bulk Update Recipes Api V1 Menu Recipes Bulk Update Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/bulk/activate": {
      "put": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Bulk Activate Recipes",
        "description": "Bulk activate or deactivate recipes (manager/admin only).\n\nUse dry_run=true to see which recipes would be affected without making changes.",
        "operationId": "update_bulk_activate_recipes",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Active"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Simulate the operation without making changes",
              "default": false,
              "title": "Dry Run"
            },
            "description": "Simulate the operation without making changes"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "title": "Recipe Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Bulk Activate Recipes Api V1 Menu Recipes Bulk Activate Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/public/{recipe_id}/nutrition": {
      "get": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Get Public Recipe Nutrition",
        "description": "Get nutritional information for a recipe (public)",
        "operationId": "get_get_public_recipe_nutrition_by_id",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Public Recipe Nutrition Api V1 Menu Recipes Public  Recipe Id  Nutrition Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/{recipe_id}/approve": {
      "post": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Approve Recipe",
        "description": "Approve a recipe (manager/admin only)",
        "operationId": "create_approve_recipe",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Notes"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/{recipe_id}/sub-recipes": {
      "put": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Update Recipe Sub Recipes",
        "description": "Update sub-recipes for a recipe. This replaces all existing sub-recipes.\nIncludes circular dependency validation.\n\nUse dry_run=true to validate changes without committing them.",
        "operationId": "update_update_recipe_sub_recipes",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Simulate the operation without making changes",
              "default": false,
              "title": "Dry Run"
            },
            "description": "Simulate the operation without making changes"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RecipeSubRecipeCreate"
                },
                "title": "Sub Recipes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Add Sub Recipe",
        "description": "Add a single sub-recipe to an existing recipe.\nIncludes circular dependency validation.",
        "operationId": "create_add_sub_recipe",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeSubRecipeCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Add Sub Recipe Api V1 Menu Recipes  Recipe Id  Sub Recipes Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/{recipe_id}/sub-recipes/{sub_recipe_id}": {
      "delete": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Remove Sub Recipe",
        "description": "Remove a sub-recipe from a recipe",
        "operationId": "delete_remove_sub_recipe",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "sub_recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Sub Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/{recipe_id}/validate-hierarchy": {
      "get": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Validate Recipe Hierarchy",
        "description": "Validate the entire hierarchy of a recipe for circular dependencies.\nReturns validation results including depth and any detected cycles.",
        "operationId": "get_validate_recipe_hierarchy_by_id",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Validate Recipe Hierarchy Api V1 Menu Recipes  Recipe Id  Validate Hierarchy Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/{recipe_id}/dependencies": {
      "get": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Get Recipe Dependencies",
        "description": "Get all dependencies (recipes this recipe uses) and dependents (recipes that use this recipe).\nUseful for understanding the impact of changes.",
        "operationId": "get_get_recipe_dependencies_by_id",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Recipe Dependencies Api V1 Menu Recipes  Recipe Id  Dependencies Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/validate-sub-recipes": {
      "post": {
        "tags": [
          "Recipe Management",
          "Recipe Management"
        ],
        "summary": "Validate Sub Recipes",
        "description": "Validate a list of sub-recipes before adding them.\nChecks for circular dependencies and duplicates.",
        "operationId": "create_validate_sub_recipes",
        "parameters": [
          {
            "name": "parent_recipe_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Parent Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RecipeSubRecipeCreate"
                },
                "title": "Sub Recipes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Validate Sub Recipes Api V1 Menu Recipes Validate Sub Recipes Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/v2/{recipe_id}/cost-analysis": {
      "get": {
        "tags": [
          "Recipe Management - Optimized",
          "Recipe Management - Optimized"
        ],
        "summary": "Get Recipe Cost Analysis Cached",
        "description": "Get detailed cost analysis for a recipe with caching.\n\n- **use_cache**: Set to false to force recalculation\n- **Cache TTL**: 5 minutes for cost analysis",
        "operationId": "get_get_recipe_cost_analysis_cached_by_id",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "use_cache",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Use cached results if available",
              "default": true,
              "title": "Use Cache"
            },
            "description": "Use cached results if available"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeCostAnalysis"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/v2/{recipe_id}/cost-analysis/refresh": {
      "post": {
        "tags": [
          "Recipe Management - Optimized",
          "Recipe Management - Optimized"
        ],
        "summary": "Refresh Recipe Cost Analysis",
        "description": "Force refresh cost analysis for a recipe.\nInvalidates cache and recalculates in the background.",
        "operationId": "create_refresh_recipe_cost_analysis",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/v2/recalculate-costs": {
      "post": {
        "tags": [
          "Recipe Management - Optimized",
          "Recipe Management - Optimized"
        ],
        "summary": "Recalculate All Costs Async",
        "description": "Recalculate costs for all recipes with background task support.\n\n- **batch_size**: Number of recipes to process per batch (default: 100)\n- **use_background**: Process in background (recommended for large datasets)\n\nReturns task ID for background processing or immediate result.",
        "operationId": "create_recalculate_all_costs_async",
        "parameters": [
          {
            "name": "batch_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of recipes per batch",
              "default": 100,
              "title": "Batch Size"
            },
            "description": "Number of recipes per batch"
          },
          {
            "name": "use_background",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Use background task processing",
              "default": true,
              "title": "Use Background"
            },
            "description": "Use background task processing"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/v2/tasks/{task_id}": {
      "get": {
        "tags": [
          "Recipe Management - Optimized",
          "Recipe Management - Optimized"
        ],
        "summary": "Get Task Status Endpoint",
        "description": "Get status of a background task.\n\nReturns current progress and result when completed.",
        "operationId": "get_get_task_status_endpoint_by_id",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/v2/compliance/report": {
      "get": {
        "tags": [
          "Recipe Management - Optimized",
          "Recipe Management - Optimized"
        ],
        "summary": "Get Compliance Report Paginated",
        "description": "Get paginated compliance report showing menu items without recipes.\n\n- **page**: Page number (1-based)\n- **page_size**: Number of items per page (10-100)\n- **category**: Optional category filter\n- **use_cache**: Use cached results (TTL: 10 minutes)\n\nReturns paginated results with navigation metadata.",
        "operationId": "list_get_compliance_report_paginated",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 10,
              "description": "Items per page",
              "default": 50,
              "title": "Page Size"
            },
            "description": "Items per page"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category"
            },
            "description": "Filter by category"
          },
          {
            "name": "use_cache",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Use cached results",
              "default": true,
              "title": "Use Cache"
            },
            "description": "Use cached results"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/v2/recipes": {
      "get": {
        "tags": [
          "Recipe Management - Optimized",
          "Recipe Management - Optimized"
        ],
        "summary": "List Recipes With Cursor",
        "description": "List recipes with cursor-based pagination for large datasets (5K+ recipes).\n\nUses cursor-based pagination which is more efficient for large datasets\ncompared to offset-based pagination. The cursor encodes the position\nin the result set, allowing for stable pagination even with concurrent updates.\n\n- **cursor**: Opaque cursor string from previous request\n- **page_size**: Number of items per page\n- **order_by**: Field to order by (updated_at, created_at, name)\n- **include_cost**: Include cost analysis for each recipe\n\nReturns recipes with next/previous cursor for navigation.",
        "operationId": "list_list_recipes_with_cursor",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor for pagination",
              "title": "Cursor"
            },
            "description": "Cursor for pagination"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 10,
              "description": "Items per page",
              "default": 50,
              "title": "Page Size"
            },
            "description": "Items per page"
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Field to order by",
              "default": "updated_at",
              "title": "Order By"
            },
            "description": "Field to order by"
          },
          {
            "name": "include_cost",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include cost analysis",
              "default": false,
              "title": "Include Cost"
            },
            "description": "Include cost analysis"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/v2/compliance/export": {
      "get": {
        "tags": [
          "Recipe Management - Optimized",
          "Recipe Management - Optimized"
        ],
        "summary": "Export Compliance Report",
        "description": "Export compliance report in various formats.\n\nSupports CSV, JSON, and Excel formats for easy reporting.",
        "operationId": "list_export_compliance_report",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Export format (csv, json, excel)",
              "default": "csv",
              "title": "Format"
            },
            "description": "Export format (csv, json, excel)"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category"
            },
            "description": "Filter by category"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/v2/cache/invalidate": {
      "post": {
        "tags": [
          "Recipe Management - Optimized",
          "Recipe Management - Optimized"
        ],
        "summary": "Invalidate Cache",
        "description": "Invalidate cache entries.\n\n- **recipe_id**: Invalidate cache for specific recipe\n- **invalidate_all**: Clear all cache entries (use with caution)",
        "operationId": "create_invalidate_cache",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Specific recipe ID to invalidate",
              "title": "Recipe Id"
            },
            "description": "Specific recipe ID to invalidate"
          },
          {
            "name": "invalidate_all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Invalidate all cache entries",
              "default": false,
              "title": "Invalidate All"
            },
            "description": "Invalidate all cache entries"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/v2/cache/stats": {
      "get": {
        "tags": [
          "Recipe Management - Optimized",
          "Recipe Management - Optimized"
        ],
        "summary": "Get Cache Statistics",
        "description": "Get cache performance statistics.\n\nReturns cache hit rates, memory usage, and entry counts.",
        "operationId": "list_get_cache_statistics",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/v2/cache/warm": {
      "post": {
        "tags": [
          "Recipe Management - Optimized",
          "Recipe Management - Optimized"
        ],
        "summary": "Warm Cache",
        "description": "Pre-warm cache for frequently accessed recipes.\n\n- **recipe_ids**: Specific recipe IDs to warm\n- **top_recipes**: Number of most active recipes to warm (if recipe_ids not provided)\n\nRuns in background to avoid blocking.",
        "operationId": "create_warm_cache",
        "parameters": [
          {
            "name": "recipe_ids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Recipe IDs to warm",
              "title": "Recipe Ids"
            },
            "description": "Recipe IDs to warm"
          },
          {
            "name": "top_recipes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of top recipes to warm",
              "default": 100,
              "title": "Top Recipes"
            },
            "description": "Number of top recipes to warm"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/menu/recipes/v2/performance/metrics": {
      "get": {
        "tags": [
          "Recipe Management - Optimized",
          "Recipe Management - Optimized"
        ],
        "summary": "Get Performance Metrics",
        "description": "Get performance metrics for recipe endpoints.\n\nReturns response times, cache hit rates, and throughput metrics.",
        "operationId": "list_get_performance_metrics",
        "parameters": [
          {
            "name": "time_range",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Time range (1h, 24h, 7d)",
              "default": "1h",
              "title": "Time Range"
            },
            "description": "Time range (1h, 24h, 7d)"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/dashboard": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Dashboard Stats",
        "description": "Get inventory dashboard statistics",
        "operationId": "list_get_dashboard_stats",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryDashboardStats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventory_id}/adjust": {
      "post": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Adjust Inventory Quantity",
        "description": "Adjust inventory quantity with audit trail",
        "operationId": "create_adjust_inventory_quantity",
        "parameters": [
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryAdjustmentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAdjustment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventory_id}/adjustments": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Inventory Adjustments",
        "description": "Get adjustment history for inventory item",
        "operationId": "get_get_inventory_adjustments_by_id",
        "parameters": [
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryAdjustment"
                  },
                  "title": "Response Get Inventory Adjustments Inventory  Inventory Id  Adjustments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/adjustments/bulk": {
      "post": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Bulk Adjust Inventory",
        "description": "Perform bulk inventory adjustments",
        "operationId": "create_bulk_adjust_inventory",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAdjustmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryAdjustment"
                  },
                  "title": "Response Bulk Adjust Inventory Inventory Adjustments Bulk Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventory_id}/waste": {
      "post": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Record Waste Event",
        "description": "Record a waste event for an inventory item\n\n- Validates that the inventory item exists\n- Ensures waste quantity doesn't exceed available stock\n- Creates proper audit trail\n- Triggers low stock alerts if necessary",
        "operationId": "create_record_waste_event",
        "parameters": [
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WasteEventCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WasteEventResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Waste History",
        "description": "Get waste history for a specific inventory item\n\nReturns all waste events with filtering options",
        "operationId": "get_get_waste_history_by_id",
        "parameters": [
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date for waste history",
              "title": "Start Date"
            },
            "description": "Start date for waste history"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date for waste history",
              "title": "End Date"
            },
            "description": "End date for waste history"
          },
          {
            "name": "waste_reason",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/WasteReason"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by waste reason",
              "title": "Waste Reason"
            },
            "description": "Filter by waste reason"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WasteEventResponse"
                  },
                  "title": "Response Get Waste History Inventory  Inventory Id  Waste Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/alerts/": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Inventory Alerts",
        "description": "Get inventory alerts with filtering",
        "operationId": "list_get_inventory_alerts",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertPriority"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by priority",
              "title": "Priority"
            },
            "description": "Filter by priority"
          },
          {
            "name": "alert_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by alert type",
              "title": "Alert Type"
            },
            "description": "Filter by alert type"
          },
          {
            "name": "inventory_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by inventory item",
              "title": "Inventory Id"
            },
            "description": "Filter by inventory item"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/alerts/active": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Active Alerts",
        "description": "Get active inventory alerts",
        "operationId": "list_get_active_alerts",
        "parameters": [
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertPriority"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by priority",
              "title": "Priority"
            },
            "description": "Filter by priority"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryAlertWithItem"
                  },
                  "title": "Response Get Active Alerts Inventory Alerts Active Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/alerts/{alert_id}/acknowledge": {
      "post": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Acknowledge Alert",
        "description": "Acknowledge an inventory alert",
        "operationId": "create_acknowledge_alert",
        "parameters": [
          {
            "name": "alert_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Alert Id"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Acknowledgment notes",
              "title": "Notes"
            },
            "description": "Acknowledgment notes"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAlert"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/alerts/{alert_id}/resolve": {
      "post": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Resolve Alert",
        "description": "Resolve an inventory alert",
        "operationId": "create_resolve_alert",
        "parameters": [
          {
            "name": "alert_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Alert Id"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Resolution notes",
              "title": "Notes"
            },
            "description": "Resolution notes"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAlert"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/alerts/check": {
      "post": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Check All Alerts",
        "description": "Manually trigger alert checking for all inventory items",
        "operationId": "create_check_all_alerts",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventory_id}/usage": {
      "post": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Record Inventory Usage",
        "description": "Record inventory usage",
        "operationId": "create_record_inventory_usage",
        "parameters": [
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryUsageLogCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryUsageLog"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Inventory Usage",
        "description": "Get usage history for inventory item",
        "operationId": "get_get_inventory_usage_by_id",
        "parameters": [
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date (YYYY-MM-DD)",
              "title": "Start Date"
            },
            "description": "Start date (YYYY-MM-DD)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date (YYYY-MM-DD)",
              "title": "End Date"
            },
            "description": "End date (YYYY-MM-DD)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryUsageLog"
                  },
                  "title": "Response Get Inventory Usage Inventory  Inventory Id  Usage Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventory_id}/analytics": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Inventory Analytics",
        "description": "Get analytics for inventory item",
        "operationId": "get_get_inventory_analytics_by_id",
        "parameters": [
          {
            "name": "inventory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Inventory Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date (YYYY-MM-DD)",
              "title": "Start Date"
            },
            "description": "Start date (YYYY-MM-DD)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date (YYYY-MM-DD)",
              "title": "End Date"
            },
            "description": "End date (YYYY-MM-DD)"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAnalytics"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/bulk": {
      "put": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Bulk Update Inventory",
        "description": "Bulk update inventory items",
        "operationId": "update_bulk_update_inventory",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkInventoryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/core__inventory_schemas__Inventory"
                  },
                  "title": "Response Bulk Update Inventory Inventory Bulk Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/categories/": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Inventory Categories",
        "description": "Get list of inventory categories",
        "operationId": "list_get_inventory_categories",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Response Get Inventory Categories Inventory Categories  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/reports/low-stock": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Low Stock Report",
        "description": "Get detailed low stock report",
        "operationId": "list_get_low_stock_report",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category"
            },
            "description": "Filter by category"
          },
          {
            "name": "vendor_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by vendor",
              "title": "Vendor Id"
            },
            "description": "Filter by vendor"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/core__inventory_schemas__Inventory"
                  },
                  "title": "Response Get Low Stock Report Inventory Reports Low Stock Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/reports/waste-summary": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Waste Summary Report",
        "description": "Get waste summary report with cost analysis",
        "operationId": "list_get_waste_summary_report",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date",
              "title": "Start Date"
            },
            "description": "Start date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date",
              "title": "End Date"
            },
            "description": "End date"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category"
            },
            "description": "Filter by category"
          },
          {
            "name": "waste_reason",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/WasteReason"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by waste reason",
              "title": "Waste Reason"
            },
            "description": "Filter by waste reason"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/reports/usage-summary": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Get Usage Summary Report",
        "description": "Get usage summary report",
        "operationId": "list_get_usage_summary_report",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date",
              "title": "Start Date"
            },
            "description": "Start date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date",
              "title": "End Date"
            },
            "description": "End date"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category"
            },
            "description": "Filter by category"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/health": {
      "get": {
        "tags": [
          "Inventory Management"
        ],
        "summary": "Inventory Health Check",
        "description": "Get inventory system health status",
        "operationId": "list_inventory_health_check",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/vendors/": {
      "post": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Create Vendor",
        "description": "Create a new vendor",
        "operationId": "create_create_vendor",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Get Vendors",
        "description": "Get all vendors",
        "operationId": "list_get_vendors",
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Show only active vendors",
              "default": true,
              "title": "Active Only"
            },
            "description": "Show only active vendors"
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/VendorStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by vendor status",
              "title": "Status Filter"
            },
            "description": "Filter by vendor status"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search vendors by name",
              "title": "Search"
            },
            "description": "Search vendors by name"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vendor"
                  },
                  "title": "Response Get Vendors Vendors  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/vendors/{vendor_id}": {
      "get": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Get Vendor",
        "description": "Get vendor by ID",
        "operationId": "get_get_vendor_by_id",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Update Vendor",
        "description": "Update vendor",
        "operationId": "update_update_vendor",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Delete Vendor",
        "description": "Soft delete vendor",
        "operationId": "delete_delete_vendor",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/vendors/{vendor_id}/inventory": {
      "get": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Get Vendor Inventory",
        "description": "Get inventory items supplied by vendor",
        "operationId": "get_get_vendor_inventory_by_id",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Get Vendor Inventory Vendors  Vendor Id  Inventory Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/vendors/{vendor_id}/purchase-orders": {
      "post": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Create Purchase Order",
        "description": "Create purchase order for vendor",
        "operationId": "create_create_purchase_order",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Get Vendor Purchase Orders",
        "description": "Get purchase orders for vendor",
        "operationId": "get_get_vendor_purchase_orders_by_id",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by PO status",
              "title": "Status Filter"
            },
            "description": "Filter by PO status"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  },
                  "title": "Response Get Vendor Purchase Orders Vendors  Vendor Id  Purchase Orders Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/vendors/{vendor_id}/purchase-orders/{po_id}": {
      "get": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Get Purchase Order",
        "description": "Get specific purchase order with items",
        "operationId": "get_get_purchase_order_by_id",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "po_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Po Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderWithItems"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Update Purchase Order",
        "description": "Update purchase order",
        "operationId": "update_update_purchase_order",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "po_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Po Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/vendors/{vendor_id}/purchase-orders/{po_id}/items": {
      "post": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Add Item To Purchase Order",
        "description": "Add item to purchase order",
        "operationId": "create_add_item_to_purchase_order",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "po_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Po Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderItemCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/vendors/{vendor_id}/purchase-orders/{po_id}/receive": {
      "post": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Receive Purchase Order",
        "description": "Receive items from purchase order and update inventory",
        "operationId": "create_receive_purchase_order",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "po_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Po Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                },
                "title": "Received Items"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/vendors/{vendor_id}/analytics": {
      "get": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Get Vendor Analytics",
        "description": "Get vendor performance analytics",
        "operationId": "get_get_vendor_analytics_by_id",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date (YYYY-MM-DD)",
              "title": "Start Date"
            },
            "description": "Start date (YYYY-MM-DD)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date (YYYY-MM-DD)",
              "title": "End Date"
            },
            "description": "End date (YYYY-MM-DD)"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/vendors/{vendor_id}/rate": {
      "post": {
        "tags": [
          "Vendor Management"
        ],
        "summary": "Rate Vendor",
        "description": "Rate vendor performance",
        "operationId": "create_rate_vendor",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Vendor Id"
            }
          },
          {
            "name": "rating",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "maximum": 5,
              "minimum": 1,
              "description": "Rating from 1 to 5",
              "title": "Rating"
            },
            "description": "Rating from 1 to 5"
          },
          {
            "name": "notes",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Rating notes",
              "title": "Notes"
            },
            "description": "Rating notes"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/equipment/": {
      "post": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Create Equipment",
        "description": "Create new equipment",
        "operationId": "create_create_equipment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EquipmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Equipment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/equipment/search": {
      "get": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Search Equipment",
        "description": "Search equipment with filters and pagination",
        "operationId": "list_search_equipment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search query for equipment name, type, manufacturer, etc.",
              "title": "Query"
            },
            "description": "Search query for equipment name, type, manufacturer, etc."
          },
          {
            "name": "equipment_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by equipment type",
              "title": "Equipment Type"
            },
            "description": "Filter by equipment type"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by location",
              "title": "Location"
            },
            "description": "Filter by location"
          },
          {
            "name": "is_critical",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by critical equipment",
              "title": "Is Critical"
            },
            "description": "Filter by critical equipment"
          },
          {
            "name": "needs_maintenance",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter equipment needing maintenance",
              "title": "Needs Maintenance"
            },
            "description": "Filter equipment needing maintenance"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(equipment_name|next_due_date|status|created_at)$",
              "default": "equipment_name",
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "default": "asc",
              "title": "Sort Order"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 50,
              "title": "Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EquipmentListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/equipment/{equipment_id}": {
      "get": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Get Equipment",
        "description": "Get equipment by ID with maintenance history",
        "operationId": "get_get_equipment_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "equipment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Equipment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EquipmentWithMaintenance"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Update Equipment",
        "description": "Update equipment",
        "operationId": "update_update_equipment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "equipment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Equipment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EquipmentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Equipment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Delete Equipment",
        "description": "Delete equipment (soft delete)",
        "operationId": "delete_delete_equipment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "equipment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Equipment Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/equipment/maintenance": {
      "post": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Create Maintenance Record",
        "description": "Create maintenance record",
        "operationId": "create_create_maintenance_record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceRecordCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceRecord"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/equipment/maintenance/search": {
      "get": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Search Maintenance Records",
        "description": "Search maintenance records with filters and pagination",
        "operationId": "list_search_maintenance_records",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "equipment_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by equipment ID",
              "title": "Equipment Id"
            },
            "description": "Filter by equipment ID"
          },
          {
            "name": "maintenance_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by maintenance type",
              "title": "Maintenance Type"
            },
            "description": "Filter by maintenance type"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by date from (ISO format)",
              "title": "Date From"
            },
            "description": "Filter by date from (ISO format)"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by date to (ISO format)",
              "title": "Date To"
            },
            "description": "Filter by date to (ISO format)"
          },
          {
            "name": "performed_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by person who performed maintenance",
              "title": "Performed By"
            },
            "description": "Filter by person who performed maintenance"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(scheduled_date|date_performed|status|cost)$",
              "default": "scheduled_date",
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "default": "desc",
              "title": "Sort Order"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 50,
              "title": "Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/equipment/maintenance/summary": {
      "get": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Get Maintenance Summary",
        "description": "Get maintenance summary statistics",
        "operationId": "list_get_maintenance_summary",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceSummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/equipment/maintenance/{record_id}": {
      "get": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Get Maintenance Record",
        "description": "Get maintenance record by ID",
        "operationId": "get_get_maintenance_record_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Record Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceRecord"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Update Maintenance Record",
        "description": "Update maintenance record",
        "operationId": "update_update_maintenance_record",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Record Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceRecordUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceRecord"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Delete Maintenance Record",
        "description": "Delete maintenance record",
        "operationId": "delete_delete_maintenance_record",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Record Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/equipment/maintenance/{record_id}/complete": {
      "post": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Complete Maintenance",
        "description": "Complete a maintenance record",
        "operationId": "create_complete_maintenance",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Record Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceRecordComplete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceRecord"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/equipment/check-overdue": {
      "post": {
        "tags": [
          "Equipment Management",
          "equipment"
        ],
        "summary": "Check Overdue Maintenance",
        "description": "Check and update overdue maintenance (typically called by a scheduled job)",
        "operationId": "create_check_overdue_maintenance",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/analytics/dashboard": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Dashboard Metrics",
        "description": "Get dashboard metrics for sales analytics (legacy endpoint).\n\nReturns current day metrics with comparisons to previous periods,\ntop performers, trends, and active alerts.\n\nNote: For real-time updates, use /analytics/realtime/dashboard endpoints",
        "operationId": "list_get_dashboard_metrics",
        "parameters": [
          {
            "name": "current_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Date for dashboard metrics",
              "title": "Current Date"
            },
            "description": "Date for dashboard metrics"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardMetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/dashboard/realtime": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Realtime Dashboard Metrics",
        "description": "Get real-time dashboard metrics with enhanced features.\n\nReturns comprehensive real-time metrics including:\n- Current revenue, orders, customers\n- Growth indicators with live updates\n- Top performers with rankings\n- Hourly trends for visualization\n- Active alerts and critical metrics",
        "operationId": "list_get_realtime_dashboard_metrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Current User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RealtimeDashboardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/reports/sales-summary": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Generate Sales Summary",
        "description": "Generate a comprehensive sales summary report.\n\nProvides aggregated metrics including revenue, orders, customers,\ngrowth comparisons, and key performance indicators.",
        "operationId": "create_generate_sales_summary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_sales_summary_analytics_reports_sales_summary_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesSummaryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/reports/sales-detailed": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Generate Detailed Sales Report",
        "description": "Generate detailed sales report with filtering and pagination.\n\nReturns detailed breakdown of sales data with support for various\nfilters including date ranges, staff, products, and categories.",
        "operationId": "create_generate_detailed_sales_report",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Field to sort by",
              "default": "total_revenue",
              "title": "Sort By"
            },
            "description": "Field to sort by"
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "description": "Sort order",
              "default": "desc",
              "title": "Sort Order"
            },
            "description": "Sort order"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_detailed_sales_report_analytics_reports_sales_detailed_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSalesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/reports/staff-performance": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Generate Staff Performance Report",
        "description": "Generate staff performance analytics report.\n\nProvides detailed performance metrics for staff members including\nrevenue generated, orders handled, efficiency metrics, and rankings.",
        "operationId": "create_generate_staff_performance_report",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Per Page"
            },
            "description": "Items per page"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_staff_performance_report_analytics_reports_staff_performance_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaffPerformanceResponse"
                  },
                  "title": "Response Generate Staff Performance Report Analytics Reports Staff Performance Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/reports/product-performance": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Generate Product Performance Report",
        "description": "Generate product performance analytics report.\n\nProvides detailed performance metrics for products including\nsales quantities, revenue, popularity rankings, and market share.",
        "operationId": "create_generate_product_performance_report",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 50,
              "title": "Per Page"
            },
            "description": "Items per page"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_product_performance_report_analytics_reports_product_performance_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPerformanceResponse"
                  },
                  "title": "Response Generate Product Performance Report Analytics Reports Product Performance Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/reports/quick-stats": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Quick Stats",
        "description": "Get quick statistics for the specified period and filters.\n\nReturns key metrics in a simplified format for dashboard widgets\nand quick reference displays.",
        "operationId": "list_get_quick_stats",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date",
              "title": "Date From"
            },
            "description": "Start date"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date",
              "title": "Date To"
            },
            "description": "End date"
          },
          {
            "name": "staff_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by staff member",
              "title": "Staff Id"
            },
            "description": "Filter by staff member"
          },
          {
            "name": "category_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category Id"
            },
            "description": "Filter by category"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/reports/top-performers": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Top Performers",
        "description": "Get top performers for the specified metric and period.\n\nReturns ranked list of top performing entities (staff, products, or categories)\nbased on the selected performance metric.",
        "operationId": "list_get_top_performers",
        "parameters": [
          {
            "name": "metric",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(revenue|orders|efficiency)$",
              "description": "Performance metric",
              "default": "revenue",
              "title": "Metric"
            },
            "description": "Performance metric"
          },
          {
            "name": "period_days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "description": "Period in days",
              "default": 7,
              "title": "Period Days"
            },
            "description": "Period in days"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Number of top performers",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of top performers"
          },
          {
            "name": "entity_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(staff|product|category)$",
              "description": "Entity type",
              "default": "staff",
              "title": "Entity Type"
            },
            "description": "Entity type"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/reports/trends": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Trends",
        "description": "Get trend data for the specified metric and period.\n\nReturns time series data for visualization in charts and graphs.\nSupports different granularities and metrics.",
        "operationId": "list_get_trends",
        "parameters": [
          {
            "name": "metric",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(revenue|orders|customers)$",
              "description": "Trend metric",
              "default": "revenue",
              "title": "Metric"
            },
            "description": "Trend metric"
          },
          {
            "name": "period_days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 7,
              "description": "Period in days",
              "default": 30,
              "title": "Period Days"
            },
            "description": "Period in days"
          },
          {
            "name": "granularity",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(hourly|daily|weekly)$",
              "description": "Data granularity",
              "default": "daily",
              "title": "Granularity"
            },
            "description": "Data granularity"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/health": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint for the analytics service.",
        "operationId": "list_health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/analytics/export/csv": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Export To Csv",
        "description": "Export sales report to CSV format.\n\nSupports all report types: sales_summary, sales_detailed, \nstaff_performance, and product_performance.",
        "operationId": "create_export_to_csv",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_export_to_csv_analytics_export_csv_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/export/pdf": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Export To Pdf",
        "description": "Export sales report to PDF format.\n\nCreates a professional PDF report with tables, charts, and formatting.\nRequires ReportLab library: pip install reportlab",
        "operationId": "create_export_to_pdf",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_export_to_pdf_analytics_export_pdf_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/export/excel": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Export To Excel",
        "description": "Export sales report to Excel format.\n\nCreates a formatted Excel workbook with styling, formulas, and charts.\nRequires OpenPyXL library: pip install openpyxl",
        "operationId": "create_export_to_excel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_export_to_excel_analytics_export_excel_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/alerts/rules": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Create Alert Rule",
        "description": "Create a new alert rule for sales analytics.\n\nMonitor metrics and trigger notifications when conditions are met.",
        "operationId": "create_create_alert_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Description"
            }
          },
          {
            "name": "metric_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Metric Name"
            }
          },
          {
            "name": "condition_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Condition Type"
            }
          },
          {
            "name": "threshold_value",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "title": "Threshold Value"
            }
          },
          {
            "name": "evaluation_period",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Period"
            }
          },
          {
            "name": "comparison_period",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Comparison Period"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_alert_rule_analytics_alerts_rules_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Alert Rules",
        "description": "Get all alert rules for the current user.",
        "operationId": "list_get_alert_rules",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "include_inactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include inactive rules",
              "default": false,
              "title": "Include Inactive"
            },
            "description": "Include inactive rules"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/alerts/evaluate": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Evaluate Alerts",
        "description": "Manually trigger evaluation of all active alert rules.",
        "operationId": "create_evaluate_alerts",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/analytics/alerts/rules/{rule_id}/test": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Test Alert Rule",
        "description": "Test an alert rule without triggering notifications.",
        "operationId": "create_test_alert_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          },
          {
            "name": "test_value",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Test value to evaluate",
              "title": "Test Value"
            },
            "description": "Test value to evaluate"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/alerts/history": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Alert History",
        "description": "Get alert trigger history.",
        "operationId": "list_get_alert_history",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by rule ID",
              "title": "Rule Id"
            },
            "description": "Filter by rule ID"
          },
          {
            "name": "days_back",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "description": "Days of history",
              "default": 30,
              "title": "Days Back"
            },
            "description": "Days of history"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/async/large-report": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Submit Large Report",
        "description": "Submit a large report generation task for async processing.\n\nUse this endpoint for reports that may take a long time to generate.\nReturns a task ID that can be used to check progress.",
        "operationId": "create_submit_large_report",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100000,
              "minimum": 1000,
              "description": "Maximum records to include",
              "default": 50000,
              "title": "Limit"
            },
            "description": "Maximum records to include"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_submit_large_report_analytics_async_large_report_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/async/tasks/{task_id}": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Task Status",
        "description": "Get the status of an async task.",
        "operationId": "get_get_task_status_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Cancel Task",
        "description": "Cancel a pending or running async task.",
        "operationId": "delete_cancel_task",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/async/tasks": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get User Tasks",
        "description": "Get all async tasks for the current user.",
        "operationId": "list_get_user_tasks",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by task status",
              "title": "Status Filter"
            },
            "description": "Filter by task status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/async/queue-status": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Queue Status",
        "description": "Get overall async queue status (admin only).",
        "operationId": "list_get_queue_status",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Current User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/permissions/summary": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Permissions Summary",
        "description": "Get summary of current user's analytics permissions.",
        "operationId": "list_get_permissions_summary",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/analytics/widgets/data": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Widget Data",
        "description": "Get data for a specific dashboard widget",
        "operationId": "create_get_widget_data",
        "parameters": [
          {
            "name": "force_refresh",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force refresh widget data",
              "default": false,
              "title": "Force Refresh"
            },
            "description": "Force refresh widget data"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_get_widget_data_analytics_widgets_data_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/dashboard/layout/data": {
      "post": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Dashboard Layout Data",
        "description": "Get data for all widgets in a dashboard layout",
        "operationId": "create_get_dashboard_layout_data",
        "parameters": [
          {
            "name": "force_refresh",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force refresh all widget data",
              "default": false,
              "title": "Force Refresh"
            },
            "description": "Force refresh all widget data"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_get_dashboard_layout_data_analytics_dashboard_layout_data_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/dashboard/layout/default": {
      "get": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Get Default Dashboard Layout",
        "description": "Get default dashboard layout for the current user",
        "operationId": "list_get_default_dashboard_layout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Current User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/widgets/cache": {
      "delete": {
        "tags": [
          "Analytics & Reporting"
        ],
        "summary": "Invalidate Widget Cache",
        "description": "Invalidate widget cache (admin only)",
        "operationId": "delete_invalidate_widget_cache",
        "parameters": [
          {
            "name": "widget_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Specific widget ID to invalidate",
              "title": "Widget Id"
            },
            "description": "Specific widget ID to invalidate"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/realtime/dashboard/current": {
      "get": {
        "tags": [
          "Real-time Analytics"
        ],
        "summary": "Get Current Dashboard Data",
        "description": "Get current dashboard data via REST API\n\nReturns the same data as WebSocket but via HTTP request",
        "operationId": "list_get_current_dashboard_data",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Current User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/realtime/metrics/{metric_name}/current": {
      "get": {
        "tags": [
          "Real-time Analytics"
        ],
        "summary": "Get Current Metric Data",
        "description": "Get current value for a specific metric via REST API",
        "operationId": "get_get_current_metric_data_by_id",
        "parameters": [
          {
            "name": "metric_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Metric Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/realtime/trends/hourly": {
      "get": {
        "tags": [
          "Real-time Analytics"
        ],
        "summary": "Get Hourly Trends",
        "description": "Get hourly trends for dashboard charts",
        "operationId": "list_get_hourly_trends",
        "parameters": [
          {
            "name": "hours_back",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 168,
              "minimum": 1,
              "description": "Hours to look back (max 1 week)",
              "default": 24,
              "title": "Hours Back"
            },
            "description": "Hours to look back (max 1 week)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/realtime/performers/top": {
      "get": {
        "tags": [
          "Real-time Analytics"
        ],
        "summary": "Get Top Performers",
        "description": "Get top performing staff and products",
        "operationId": "list_get_top_performers",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 20,
              "minimum": 1,
              "description": "Number of top performers to return",
              "default": 5,
              "title": "Limit"
            },
            "description": "Number of top performers to return"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/realtime/cache/invalidate": {
      "post": {
        "tags": [
          "Real-time Analytics"
        ],
        "summary": "Invalidate Cache",
        "description": "Invalidate real-time metrics cache (admin only)",
        "operationId": "create_invalidate_cache",
        "parameters": [
          {
            "name": "cache_pattern",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cache pattern to invalidate",
              "title": "Cache Pattern"
            },
            "description": "Cache pattern to invalidate"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/realtime/websocket/stats": {
      "get": {
        "tags": [
          "Real-time Analytics"
        ],
        "summary": "Get Websocket Stats",
        "description": "Get WebSocket connection statistics (admin only)",
        "operationId": "list_get_websocket_stats",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Current User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/realtime/websocket/broadcast": {
      "post": {
        "tags": [
          "Real-time Analytics"
        ],
        "summary": "Broadcast Message",
        "description": "Broadcast a message to all connected WebSocket clients (admin only)",
        "operationId": "create_broadcast_message",
        "parameters": [
          {
            "name": "message_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Type of message to broadcast",
              "title": "Message Type"
            },
            "description": "Type of message to broadcast"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_broadcast_message_analytics_realtime_websocket_broadcast_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/realtime/health": {
      "get": {
        "tags": [
          "Real-time Analytics"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint for real-time analytics services",
        "operationId": "list_health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/analytics/realtime/events/order-completed": {
      "post": {
        "tags": [
          "Real-time Analytics"
        ],
        "summary": "Handle Order Completed Event",
        "description": "Handle order completed event for real-time metrics update\n\nThis endpoint can be called by the orders module when an order is completed\nto trigger immediate metrics updates",
        "operationId": "create_handle_order_completed_event",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Order Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/analytics/realtime/events/staff-action": {
      "post": {
        "tags": [
          "Real-time Analytics"
        ],
        "summary": "Handle Staff Action Event",
        "description": "Handle staff action event for real-time metrics update\n\nThis endpoint can be called when staff members perform significant actions\nthat should trigger metrics updates",
        "operationId": "create_handle_staff_action_event",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Action Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/ai-insights/generate": {
      "post": {
        "tags": [
          "Analytics AI Insights"
        ],
        "summary": "Generate Ai Insights",
        "description": "Generate AI-powered analytics insights based on historical data.\n\nThis endpoint analyzes business data to provide:\n- Peak time analysis for optimal staffing\n- Product trend predictions\n- Customer behavior patterns\n- Seasonal pattern detection\n- Anomaly detection\n\nRequires 'analytics_view' permission.",
        "operationId": "create_generate_ai_insights",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_ai_insights_ai_insights_generate_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-insights/peak-times": {
      "get": {
        "tags": [
          "Analytics AI Insights"
        ],
        "summary": "Get Peak Time Insights",
        "description": "Get AI insights specifically for peak business hours.\n\nAnalyzes order patterns to identify:\n- Primary and secondary peak hours\n- Quiet periods for reduced staffing\n- Weekly patterns by day\n- Staffing recommendations",
        "operationId": "list_get_peak_time_insights",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date for analysis",
              "title": "Date From"
            },
            "description": "Start date for analysis"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date for analysis",
              "title": "Date To"
            },
            "description": "End date for analysis"
          },
          {
            "name": "force_refresh",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force regeneration of insights",
              "default": false,
              "title": "Force Refresh"
            },
            "description": "Force regeneration of insights"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-insights/product-trends": {
      "get": {
        "tags": [
          "Analytics AI Insights"
        ],
        "summary": "Get Product Trend Insights",
        "description": "Get AI insights for product performance trends.\n\nAnalyzes product sales to identify:\n- Rising products to stock up on\n- Declining products needing promotion\n- Stable performers\n- New trending items\n- Demand predictions",
        "operationId": "list_get_product_trend_insights",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date for analysis",
              "title": "Date From"
            },
            "description": "Start date for analysis"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date for analysis",
              "title": "Date To"
            },
            "description": "End date for analysis"
          },
          {
            "name": "force_refresh",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force regeneration of insights",
              "default": false,
              "title": "Force Refresh"
            },
            "description": "Force regeneration of insights"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-insights/customer-patterns": {
      "get": {
        "tags": [
          "Analytics AI Insights"
        ],
        "summary": "Get Customer Pattern Insights",
        "description": "Get AI insights for customer behavior patterns.\n\nAnalyzes customer data to identify:\n- Repeat customer rates\n- Order frequency patterns\n- At-risk customer segments\n- Lifetime value trends\n- Retention recommendations",
        "operationId": "list_get_customer_pattern_insights",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date for analysis",
              "title": "Date From"
            },
            "description": "Start date for analysis"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date for analysis",
              "title": "Date To"
            },
            "description": "End date for analysis"
          },
          {
            "name": "force_refresh",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force regeneration of insights",
              "default": false,
              "title": "Force Refresh"
            },
            "description": "Force regeneration of insights"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-insights/comprehensive": {
      "get": {
        "tags": [
          "Analytics AI Insights"
        ],
        "summary": "Get Comprehensive Insights",
        "description": "Get comprehensive AI insights covering all analysis types.\n\nIncludes:\n- Peak time analysis\n- Product trends\n- Customer patterns\n- Seasonality detection\n- Anomaly detection\n- Overall business recommendations",
        "operationId": "list_get_comprehensive_insights",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date for analysis",
              "title": "Date From"
            },
            "description": "Start date for analysis"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date for analysis",
              "title": "Date To"
            },
            "description": "End date for analysis"
          },
          {
            "name": "min_confidence",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ConfidenceLevel",
              "description": "Minimum confidence level",
              "default": "medium"
            },
            "description": "Minimum confidence level"
          },
          {
            "name": "force_refresh",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force regeneration of insights",
              "default": false,
              "title": "Force Refresh"
            },
            "description": "Force regeneration of insights"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-insights/anomalies": {
      "get": {
        "tags": [
          "Analytics AI Insights"
        ],
        "summary": "Get Anomaly Insights",
        "description": "Get AI-detected anomalies in business metrics.\n\nDetects:\n- Revenue spikes or drops\n- Unusual order patterns\n- Statistical outliers\n- Potential causes",
        "operationId": "list_get_anomaly_insights",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date for analysis",
              "title": "Date From"
            },
            "description": "Start date for analysis"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date for analysis",
              "title": "Date To"
            },
            "description": "End date for analysis"
          },
          {
            "name": "severity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by severity (high, medium, low)",
              "title": "Severity"
            },
            "description": "Filter by severity (high, medium, low)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-insights/seasonality": {
      "get": {
        "tags": [
          "Analytics AI Insights"
        ],
        "summary": "Get Seasonality Insights",
        "description": "Get AI insights for seasonal patterns.\n\nAnalyzes historical data to identify:\n- Monthly/quarterly patterns\n- Seasonal products\n- Revenue multipliers by season\n- Forecast accuracy",
        "operationId": "list_get_seasonality_insights",
        "parameters": [
          {
            "name": "months_of_data",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 36,
              "minimum": 3,
              "description": "Months of historical data to analyze",
              "default": 12,
              "title": "Months Of Data"
            },
            "description": "Months of historical data to analyze"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-insights/generate-async": {
      "post": {
        "tags": [
          "Analytics AI Insights"
        ],
        "summary": "Generate Ai Insights Async",
        "description": "Generate AI insights asynchronously for heavy requests.\n\nReturns a task ID that can be used to check the status and retrieve results.\nThis is recommended for:\n- Date ranges > 90 days\n- Multiple insight types with large datasets\n- When include_recommendations is True with comprehensive analysis",
        "operationId": "create_generate_ai_insights_async",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_ai_insights_async_ai_insights_generate_async_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Generate Ai Insights Async Ai Insights Generate Async Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-insights/task/{task_id}/status": {
      "get": {
        "tags": [
          "Analytics AI Insights"
        ],
        "summary": "Get Task Status",
        "description": "Check the status of an async insights generation task.",
        "operationId": "get_get_task_status_by_id",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-insights/task/{task_id}/result": {
      "get": {
        "tags": [
          "Analytics AI Insights"
        ],
        "summary": "Get Task Result",
        "description": "Retrieve the results of a completed async insights generation task.",
        "operationId": "get_get_task_result_by_id",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/ai-assistant/batch": {
      "post": {
        "tags": [
          "AI Chat Analytics",
          "AI Analytics Assistant"
        ],
        "summary": "Send Batch Messages",
        "description": "Process multiple chat messages in batch.\n\nUseful for:\n- Processing multiple queries at once\n- Analyzing different aspects of data simultaneously\n- Improving performance for bulk operations\n\nNote: Messages are grouped by session to maintain context.",
        "operationId": "create_send_batch_messages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ChatRequest"
                },
                "type": "array",
                "title": "Requests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ChatResponse"
                  },
                  "type": "array",
                  "title": "Response Send Batch Messages Api V1 Analytics Analytics Ai Assistant Batch Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/analytics/analytics/ai-assistant/chat": {
      "post": {
        "tags": [
          "AI Chat Analytics",
          "AI Analytics Assistant"
        ],
        "summary": "Chat Rest Endpoint",
        "description": "REST endpoint for AI chat (fallback for non-WebSocket clients).\n\nProcess a single chat message and return AI response.",
        "operationId": "create_chat_rest_endpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_chat_rest_endpoint_api_v1_analytics_analytics_ai_assistant_chat_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/ai-assistant/suggestions": {
      "get": {
        "tags": [
          "AI Chat Analytics",
          "AI Analytics Assistant"
        ],
        "summary": "Get Suggested Queries",
        "description": "Get suggested analytics queries for quick access.\n\nReturns contextual suggestions based on current data and user activity.",
        "operationId": "list_get_suggested_queries",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Current User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SuggestedQuery"
                  },
                  "type": "array",
                  "title": "Response Get Suggested Queries Api V1 Analytics Analytics Ai Assistant Suggestions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/ai-assistant/capabilities": {
      "get": {
        "tags": [
          "AI Chat Analytics",
          "AI Analytics Assistant"
        ],
        "summary": "Get Assistant Capabilities",
        "description": "Get AI assistant capabilities and limitations.\n\nReturns information about what the assistant can do.",
        "operationId": "list_get_assistant_capabilities",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssistantCapabilities"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/analytics/analytics/ai-assistant/history/{session_id}": {
      "get": {
        "tags": [
          "AI Chat Analytics",
          "AI Analytics Assistant"
        ],
        "summary": "Get Conversation History",
        "description": "Get conversation history for a specific session.\n\nReturns all messages in the conversation.",
        "operationId": "get_get_conversation_history_by_id",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessage"
                  },
                  "title": "Response Get Conversation History Api V1 Analytics Analytics Ai Assistant History  Session Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/ai-assistant/session/{session_id}": {
      "delete": {
        "tags": [
          "AI Chat Analytics",
          "AI Analytics Assistant"
        ],
        "summary": "Clear Session",
        "description": "Clear a chat session and its history.\n\nRemoves all conversation data for the session.",
        "operationId": "delete_clear_session",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/ai-assistant/feedback": {
      "post": {
        "tags": [
          "AI Chat Analytics",
          "AI Analytics Assistant"
        ],
        "summary": "Submit Feedback",
        "description": "Submit feedback on AI assistant response.\n\nHelps improve the assistant's responses over time.",
        "operationId": "create_submit_feedback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/analytics/analytics/ai-assistant/stats": {
      "get": {
        "tags": [
          "AI Chat Analytics",
          "AI Analytics Assistant"
        ],
        "summary": "Get Chat Statistics",
        "description": "Get AI assistant usage statistics (admin only).\n\nReturns metrics about chat usage and performance.",
        "operationId": "list_get_chat_statistics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Current User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/ai-assistant/health": {
      "get": {
        "tags": [
          "AI Chat Analytics",
          "AI Analytics Assistant"
        ],
        "summary": "Health Check",
        "description": "Health check for AI assistant service",
        "operationId": "list_health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/predictive/demand-forecast": {
      "post": {
        "tags": [
          "Predictive Analytics",
          "predictive-analytics"
        ],
        "summary": "Forecast Demand",
        "description": "Generate demand forecast for a product or category.\n\nAnalyzes historical sales data and applies machine learning models\nto predict future demand with confidence intervals.",
        "operationId": "create_forecast_demand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_forecast_demand_api_v1_analytics_analytics_predictive_demand_forecast_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemandForecast"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/predictive/stock-optimization": {
      "post": {
        "tags": [
          "Predictive Analytics",
          "predictive-analytics"
        ],
        "summary": "Optimize Stock Levels",
        "description": "Optimize stock levels for products.\n\nCalculates optimal stock levels, reorder points, and safety stock\nbased on demand forecasts and business constraints.",
        "operationId": "create_optimize_stock_levels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_optimize_stock_levels_api_v1_analytics_analytics_predictive_stock_optimization_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockOptimizationResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/predictive/batch-predictions": {
      "post": {
        "tags": [
          "Predictive Analytics",
          "predictive-analytics"
        ],
        "summary": "Create Batch Predictions",
        "description": "Create batch predictions for multiple entities.\n\nProcesses multiple prediction requests asynchronously and\noptionally sends results to a callback URL.",
        "operationId": "create_create_batch_predictions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_batch_predictions_api_v1_analytics_analytics_predictive_batch_predictions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/predictive/forecast-accuracy": {
      "get": {
        "tags": [
          "Predictive Analytics",
          "predictive-analytics"
        ],
        "summary": "Get Forecast Accuracy Report",
        "description": "Get forecast accuracy report for a time period.\n\nAnalyzes prediction accuracy across different models and entities,\nproviding insights for model improvement.",
        "operationId": "list_get_forecast_accuracy_report",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Start date for accuracy report",
              "title": "Start Date"
            },
            "description": "Start date for accuracy report"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "End date for accuracy report",
              "title": "End Date"
            },
            "description": "End date for accuracy report"
          },
          {
            "name": "entity_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by entity type",
              "title": "Entity Type"
            },
            "description": "Filter by entity type"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForecastAccuracyReport"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/predictive/forecast-comparison": {
      "post": {
        "tags": [
          "Predictive Analytics",
          "predictive-analytics"
        ],
        "summary": "Compare Forecast To Actuals",
        "description": "Compare forecast predictions to actual values.\n\nTracks forecast accuracy and provides detailed comparison metrics.",
        "operationId": "create_compare_forecast_to_actuals",
        "parameters": [
          {
            "name": "entity_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Entity Type"
            }
          },
          {
            "name": "entity_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Entity Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_compare_forecast_to_actuals_api_v1_analytics_analytics_predictive_forecast_comparison_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForecastComparison"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/predictive/prediction-alerts": {
      "get": {
        "tags": [
          "Predictive Analytics",
          "predictive-analytics"
        ],
        "summary": "Get Prediction Alerts",
        "description": "Get active prediction alerts.\n\nReturns alerts for stockout risks, demand spikes, and forecast anomalies.",
        "operationId": "list_get_prediction_alerts",
        "parameters": [
          {
            "name": "entity_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by entity type",
              "title": "Entity Type"
            },
            "description": "Filter by entity type"
          },
          {
            "name": "severity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by severity",
              "title": "Severity"
            },
            "description": "Filter by severity"
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Show only active alerts",
              "default": true,
              "title": "Active Only"
            },
            "description": "Show only active alerts"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PredictionAlert"
                  },
                  "title": "Response Get Prediction Alerts Api V1 Analytics Analytics Predictive Prediction Alerts Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/predictive/trend-analysis/{entity_type}/{entity_id}": {
      "get": {
        "tags": [
          "Predictive Analytics",
          "predictive-analytics"
        ],
        "summary": "Analyze Trends",
        "description": "Analyze trends for a specific entity.\n\nIdentifies trend direction, seasonal patterns, and change points.",
        "operationId": "get_analyze_trends_by_id",
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Entity Type"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Entity Id"
            }
          },
          {
            "name": "lookback_days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Days to analyze",
              "default": 90,
              "title": "Lookback Days"
            },
            "description": "Days to analyze"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendAnalysis"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/predictive/predictive-insights": {
      "get": {
        "tags": [
          "Predictive Analytics",
          "predictive-analytics"
        ],
        "summary": "Get Predictive Insights",
        "description": "Get actionable predictive insights.\n\nReturns AI-generated insights based on forecast analysis and trends.",
        "operationId": "list_get_predictive_insights",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum insights to return",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum insights to return"
          },
          {
            "name": "min_impact_score",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "description": "Minimum impact score",
              "default": 5.0,
              "title": "Min Impact Score"
            },
            "description": "Minimum impact score"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PredictiveInsight"
                  },
                  "title": "Response Get Predictive Insights Api V1 Analytics Analytics Predictive Predictive Insights Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/predictive/train-models": {
      "post": {
        "tags": [
          "Predictive Analytics",
          "predictive-analytics"
        ],
        "summary": "Train Prediction Models",
        "description": "Train or retrain prediction models.\n\nInitiates model training with specified parameters and data range.",
        "operationId": "create_train_prediction_models",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_train_prediction_models_api_v1_analytics_analytics_predictive_train_models_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/predictive/export-predictions": {
      "post": {
        "tags": [
          "Predictive Analytics",
          "predictive-analytics"
        ],
        "summary": "Export Predictions",
        "description": "Export predictions to file.\n\nExports forecast data in various formats (CSV, Excel, JSON).",
        "operationId": "create_export_predictions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_export_predictions_api_v1_analytics_analytics_predictive_export_predictions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/analytics/predictive/model-performance": {
      "get": {
        "tags": [
          "Predictive Analytics",
          "predictive-analytics"
        ],
        "summary": "Get Model Performance Metrics",
        "description": "Get performance metrics for prediction models.\n\nReturns accuracy metrics and performance statistics for different models.",
        "operationId": "list_get_model_performance_metrics",
        "parameters": [
          {
            "name": "model_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by model type",
              "title": "Model Type"
            },
            "description": "Filter by model type"
          },
          {
            "name": "entity_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by entity type",
              "title": "Entity Type"
            },
            "description": "Filter by entity type"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelPerformance"
                  },
                  "title": "Response Get Model Performance Metrics Api V1 Analytics Analytics Predictive Model Performance Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/dashboard": {
      "post": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Get Pos Analytics Dashboard",
        "description": "Get comprehensive POS analytics dashboard data.\n\nReturns overview metrics, provider summaries, terminal health,\ntransaction trends, and active alerts.\n\nRequires: analytics.view permission",
        "operationId": "create_get_pos_analytics_dashboard",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POSDashboardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POSDashboardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/health/terminals": {
      "get": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Get Terminal Health Summary",
        "description": "Get summary of terminal health status.\n\nReturns breakdown of terminal health across providers.\n\nRequires: analytics.view permission",
        "operationId": "list_get_terminal_health_summary",
        "parameters": [
          {
            "name": "provider_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by provider",
              "title": "Provider Id"
            },
            "description": "Filter by provider"
          },
          {
            "name": "health_status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by health status",
              "title": "Health Status"
            },
            "description": "Filter by health status"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/refresh": {
      "post": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Refresh Pos Analytics Data",
        "description": "Manually trigger refresh of POS analytics data.\n\nForces recalculation of aggregated metrics.\n\nRequires: analytics.manage permission",
        "operationId": "create_refresh_pos_analytics_data",
        "parameters": [
          {
            "name": "provider_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Specific provider to refresh",
              "title": "Provider Id"
            },
            "description": "Specific provider to refresh"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/provider/{provider_id}/details": {
      "post": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Get Provider Analytics Details",
        "description": "Get detailed analytics for a specific POS provider.\n\nReturns comprehensive metrics including sync performance,\nwebhook processing, error analysis, and terminal breakdown.\n\nRequires: analytics.view permission",
        "operationId": "create_get_provider_analytics_details",
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POSProviderDetailsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POSProviderDetailsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/terminal/{terminal_id}/details": {
      "post": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Get Terminal Analytics Details",
        "description": "Get detailed analytics for a specific POS terminal.\n\nReturns transaction metrics, sync performance, error analysis,\nand historical trends for the terminal.\n\nRequires: analytics.view permission",
        "operationId": "create_get_terminal_analytics_details",
        "parameters": [
          {
            "name": "terminal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Terminal Id"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POSTerminalDetailsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POSTerminalDetailsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/compare": {
      "post": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Compare Pos Providers",
        "description": "Compare analytics metrics across multiple POS providers.\n\nReturns side-by-side comparison of key metrics, rankings,\nand insights for selected providers.\n\nRequires: analytics.view permission",
        "operationId": "create_compare_pos_providers",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POSComparisonRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POSComparisonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/alerts/active": {
      "get": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Get Active Pos Alerts",
        "description": "Get active POS analytics alerts with pagination.\n\nReturns list of active alerts with filtering options.\n\nRequires: analytics.view permission\nRate limit: 60 requests per minute",
        "operationId": "list_get_active_pos_alerts",
        "parameters": [
          {
            "name": "severity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertSeverity"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by severity",
              "title": "Severity"
            },
            "description": "Filter by severity"
          },
          {
            "name": "provider_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by provider",
              "title": "Provider Id"
            },
            "description": "Filter by provider"
          },
          {
            "name": "terminal_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by terminal",
              "title": "Terminal Id"
            },
            "description": "Filter by terminal"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "description": "Maximum alerts to return",
              "default": 50,
              "title": "Limit"
            },
            "description": "Maximum alerts to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Pagination offset",
              "default": 0,
              "title": "Offset"
            },
            "description": "Pagination offset"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/alerts/{alert_id}/acknowledge": {
      "post": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Acknowledge Pos Alert",
        "description": "Acknowledge a POS analytics alert.\n\nMarks the alert as acknowledged by the current user.\n\nRequires: analytics.manage permission",
        "operationId": "create_acknowledge_pos_alert",
        "parameters": [
          {
            "name": "alert_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Alert Id"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 500
                },
                {
                  "type": "null"
                }
              ],
              "description": "Acknowledgment notes",
              "title": "Notes"
            },
            "description": "Acknowledgment notes"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/alerts/{alert_id}/resolve": {
      "post": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Resolve Pos Alert",
        "description": "Resolve a POS analytics alert.\n\nMarks the alert as resolved with resolution notes.\n\nRequires: analytics.manage permission",
        "operationId": "create_resolve_pos_alert",
        "parameters": [
          {
            "name": "alert_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Alert Id"
            }
          },
          {
            "name": "resolution_notes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 1000,
              "description": "Resolution notes",
              "title": "Resolution Notes"
            },
            "description": "Resolution notes"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/alerts/history": {
      "get": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Get Alert History",
        "description": "Get historical alerts.\n\nReturns resolved and acknowledged alerts from the specified time period.\n\nRequires: analytics.view permission",
        "operationId": "list_get_alert_history",
        "parameters": [
          {
            "name": "provider_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by provider",
              "title": "Provider Id"
            },
            "description": "Filter by provider"
          },
          {
            "name": "terminal_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by terminal",
              "title": "Terminal Id"
            },
            "description": "Filter by terminal"
          },
          {
            "name": "days_back",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 1,
              "description": "Days of history to retrieve",
              "default": 7,
              "title": "Days Back"
            },
            "description": "Days of history to retrieve"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "description": "Maximum alerts to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum alerts to return"
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/trends/transactions": {
      "get": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Get Transaction Trends",
        "description": "Get transaction trend data for charts.\n\nReturns time-series data for transaction volumes and values.\n\nRequires: analytics.view permission",
        "operationId": "list_get_transaction_trends",
        "parameters": [
          {
            "name": "time_range",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TimeRange",
              "default": "last_7_days"
            }
          },
          {
            "name": "provider_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by provider",
              "title": "Provider Id"
            },
            "description": "Filter by provider"
          },
          {
            "name": "terminal_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by terminal",
              "title": "Terminal Id"
            },
            "description": "Filter by terminal"
          },
          {
            "name": "granularity",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(hourly|daily|weekly)$",
              "default": "hourly",
              "title": "Granularity"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/trends/performance": {
      "get": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Get Performance Trends",
        "description": "Get performance metric trends.\n\nReturns time-series data for performance metrics.\n\nRequires: analytics.view permission",
        "operationId": "list_get_performance_trends",
        "parameters": [
          {
            "name": "metric",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(response_time|success_rate|error_rate)$",
              "title": "Metric"
            }
          },
          {
            "name": "time_range",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TimeRange",
              "default": "last_7_days"
            }
          },
          {
            "name": "provider_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by provider",
              "title": "Provider Id"
            },
            "description": "Filter by provider"
          },
          {
            "name": "granularity",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(hourly|daily|weekly)$",
              "default": "daily",
              "title": "Granularity"
            }
          },
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/export": {
      "post": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Export Pos Analytics",
        "description": "Export POS analytics data to file.\n\nSupports CSV, Excel, and PDF formats with various report types.\n\nRequires: analytics.export permission",
        "operationId": "create_export_pos_analytics",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POSExportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/pos/export/templates": {
      "get": {
        "tags": [
          "POS Analytics"
        ],
        "summary": "Get Export Templates",
        "description": "Get available export templates.\n\nReturns list of predefined export configurations.\n\nRequires: analytics.view permission",
        "operationId": "list_get_export_templates",
        "parameters": [
          {
            "name": "func",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Func"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/pricing/generate": {
      "post": {
        "tags": [
          "AI Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Generate Pricing Recommendations",
        "description": "Generate AI-powered pricing recommendations for menu items.\n\nThis endpoint analyzes:\n- Historical sales data and trends\n- Current demand levels\n- Inventory levels\n- Competitor pricing (if available)\n- Price elasticity estimates\n- Seasonal factors\n\nRequires 'analytics:view_financial_details' permission.",
        "operationId": "create_generate_pricing_recommendations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_pricing_recommendations_ai_recommendations_ai_recommendations_pricing_generate_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingRecommendationSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/pricing/categories/{category_id}": {
      "get": {
        "tags": [
          "AI Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Get Category Pricing Recommendations",
        "description": "Get pricing recommendations for all items in a category.\n\nQuick way to analyze and optimize pricing for an entire menu category.",
        "operationId": "get_get_category_pricing_recommendations_by_id",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Category Id"
            }
          },
          {
            "name": "max_price_change",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "maximum": 50,
              "minimum": 0,
              "description": "Maximum price change percentage",
              "default": 20.0,
              "title": "Max Price Change"
            },
            "description": "Maximum price change percentage"
          },
          {
            "name": "optimization_goal",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optimization goal",
              "default": "maximize_profit",
              "title": "Optimization Goal"
            },
            "description": "Optimization goal"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingRecommendationSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/pricing/items/{item_id}": {
      "get": {
        "tags": [
          "AI Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Get Item Pricing Recommendation",
        "description": "Get pricing recommendation for a specific menu item.\n\nProvides detailed analysis and recommendations for a single item.",
        "operationId": "get_get_item_pricing_recommendation_by_id",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          },
          {
            "name": "include_competitors",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include competitor analysis",
              "default": true,
              "title": "Include Competitors"
            },
            "description": "Include competitor analysis"
          },
          {
            "name": "time_horizon_days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 30,
              "minimum": 1,
              "description": "Analysis time horizon",
              "default": 7,
              "title": "Time Horizon Days"
            },
            "description": "Analysis time horizon"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingRecommendationSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/pricing/test/configure": {
      "post": {
        "tags": [
          "AI Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Configure Price Test",
        "description": "Configure an A/B test for menu item pricing.\n\nSets up controlled price testing to measure actual customer response\nto different price points.\n\nRequires 'analytics:manage_alerts' permission.",
        "operationId": "create_configure_price_test",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_configure_price_test_ai_recommendations_ai_recommendations_pricing_test_configure_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/pricing/test/{test_id}/results": {
      "get": {
        "tags": [
          "AI Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Get Price Test Results",
        "description": "Get results from a completed price test.\n\nReturns statistical analysis and recommendations based on actual\ncustomer behavior during the test period.",
        "operationId": "get_get_price_test_results_by_id",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceTestingResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/pricing/insights/elasticity": {
      "get": {
        "tags": [
          "AI Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Get Price Elasticity Insights",
        "description": "Get price elasticity insights for menu items.\n\nAnalyzes historical price changes and demand response to estimate\nprice sensitivity for different items.",
        "operationId": "list_get_price_elasticity_insights",
        "parameters": [
          {
            "name": "category_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category Id"
            },
            "description": "Filter by category"
          },
          {
            "name": "days_back",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 30,
              "description": "Days of history to analyze",
              "default": 90,
              "title": "Days Back"
            },
            "description": "Days of history to analyze"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/pricing/insights/competitive": {
      "get": {
        "tags": [
          "AI Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Get Competitive Pricing Insights",
        "description": "Get competitive pricing analysis and insights.\n\nCompares menu prices with market data to identify opportunities\nfor competitive advantage.",
        "operationId": "list_get_competitive_pricing_insights",
        "parameters": [
          {
            "name": "include_recommendations",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include pricing recommendations",
              "default": true,
              "title": "Include Recommendations"
            },
            "description": "Include pricing recommendations"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/pricing/apply/{recommendation_id}": {
      "post": {
        "tags": [
          "AI Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Apply Pricing Recommendation",
        "description": "Apply a specific pricing recommendation.\n\nUpdates menu prices based on the recommendation. This action is logged\nand can be reverted if needed.\n\nRequires 'analytics:admin' permission.",
        "operationId": "create_apply_pricing_recommendation",
        "parameters": [
          {
            "name": "recommendation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Recommendation Id"
            }
          },
          {
            "name": "effective_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "When to apply the price change",
              "title": "Effective Date"
            },
            "description": "When to apply the price change"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/pricing/rollback/{rollback_token}": {
      "post": {
        "tags": [
          "AI Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Rollback Price Changes",
        "description": "Rollback previously applied price changes.\n\nReverts menu prices to their previous values before the recommendation\nwas applied.\n\nRequires 'analytics:admin' permission.",
        "operationId": "create_rollback_price_changes",
        "parameters": [
          {
            "name": "rollback_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Rollback Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/staffing/optimize": {
      "post": {
        "tags": [
          "AI Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Optimize Staffing",
        "description": "Generate AI-powered staffing recommendations for a date range.\n\nThis endpoint analyzes:\n- Historical demand patterns\n- Peak hours and seasonality\n- Staff productivity metrics\n- Labor cost optimization\n- Service level requirements\n\nRequires 'analytics:view_staff_performance' permission.",
        "operationId": "create_optimize_staffing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_optimize_staffing_ai_recommendations_ai_recommendations_staffing_optimize_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffingRecommendationSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/staffing/daily/{target_date}": {
      "get": {
        "tags": [
          "AI Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Daily Staffing Recommendation",
        "description": "Get staffing recommendations for a specific day.\n\nProvides detailed hourly staffing requirements and shift recommendations\nfor a single day.",
        "operationId": "get_get_daily_staffing_recommendation_by_id",
        "parameters": [
          {
            "name": "target_date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Target Date"
            }
          },
          {
            "name": "include_flexibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include flexibility analysis",
              "default": true,
              "title": "Include Flexibility"
            },
            "description": "Include flexibility analysis"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/staffing/weekly": {
      "get": {
        "tags": [
          "AI Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Weekly Staffing Summary",
        "description": "Get weekly staffing summary and recommendations.\n\nProvides a week-at-a-glance view of staffing needs with daily summaries\nand total labor costs.",
        "operationId": "list_get_weekly_staffing_summary",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start of week (defaults to current week)",
              "title": "Start Date"
            },
            "description": "Start of week (defaults to current week)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/staffing/patterns": {
      "get": {
        "tags": [
          "AI Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Staffing Patterns",
        "description": "Get identified staffing patterns.\n\nReturns optimal staffing templates based on historical analysis,\nuseful for creating standard schedules.",
        "operationId": "list_get_staffing_patterns",
        "parameters": [
          {
            "name": "pattern_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by pattern type (weekday/weekend)",
              "title": "Pattern Type"
            },
            "description": "Filter by pattern type (weekday/weekend)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/staffing/labor-cost/analysis": {
      "get": {
        "tags": [
          "AI Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Labor Cost Analysis",
        "description": "Get detailed labor cost analysis for a period.\n\nAnalyzes actual vs recommended staffing costs and identifies\noptimization opportunities.\n\nRequires 'analytics:view_financial_details' permission.",
        "operationId": "list_get_labor_cost_analysis",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Analysis start date",
              "title": "Start Date"
            },
            "description": "Analysis start date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Analysis end date",
              "title": "End Date"
            },
            "description": "Analysis end date"
          },
          {
            "name": "compare_to_budget",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include budget comparison",
              "default": false,
              "title": "Compare To Budget"
            },
            "description": "Include budget comparison"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/staffing/demand-forecast/{target_date}": {
      "get": {
        "tags": [
          "AI Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Demand Forecast",
        "description": "Get hourly demand forecast for a specific date.\n\nProvides predicted order volumes, revenue, and customer counts\nby hour to support staffing decisions.",
        "operationId": "get_get_demand_forecast_by_id",
        "parameters": [
          {
            "name": "target_date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Target Date"
            }
          },
          {
            "name": "include_confidence_intervals",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include confidence intervals",
              "default": true,
              "title": "Include Confidence Intervals"
            },
            "description": "Include confidence intervals"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/staffing/schedule/generate/{week_start}": {
      "post": {
        "tags": [
          "AI Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Generate Schedule",
        "description": "Generate an optimized schedule for a week.\n\nCreates a complete staff schedule based on recommendations,\nstaff availability, and business rules.\n\nRequires 'analytics:manage_alerts' permission.",
        "operationId": "create_generate_schedule",
        "parameters": [
          {
            "name": "week_start",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Week Start"
            }
          },
          {
            "name": "auto_assign_staff",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Automatically assign available staff",
              "default": false,
              "title": "Auto Assign Staff"
            },
            "description": "Automatically assign available staff"
          },
          {
            "name": "respect_preferences",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Respect staff scheduling preferences",
              "default": true,
              "title": "Respect Preferences"
            },
            "description": "Respect staff scheduling preferences"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai-recommendations/ai-recommendations/staffing/insights/productivity": {
      "get": {
        "tags": [
          "AI Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Productivity Insights",
        "description": "Get staff productivity insights and recommendations.\n\nAnalyzes staff performance metrics to identify training needs\nand optimization opportunities.",
        "operationId": "list_get_productivity_insights",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by staff role",
              "title": "Role"
            },
            "description": "Filter by staff role"
          },
          {
            "name": "days_back",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 7,
              "description": "Days of history to analyze",
              "default": 30,
              "title": "Days Back"
            },
            "description": "Days of history to analyze"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/admin/insights/feedback/summary": {
      "get": {
        "tags": [
          "Admin AI Insights",
          "AI Admin Insights"
        ],
        "summary": "Get Feedback Summary",
        "description": "Get feedback summary for AI models\n\nRequires permission: ai.view_insights",
        "operationId": "list_get_feedback_summary",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 1,
              "description": "Number of days to analyze",
              "default": 7,
              "title": "Days"
            },
            "description": "Number of days to analyze"
          },
          {
            "name": "model_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by model type",
              "title": "Model Type"
            },
            "description": "Filter by model type"
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by domain",
              "title": "Domain"
            },
            "description": "Filter by domain"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackSummaryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/admin/insights/model/performance": {
      "get": {
        "tags": [
          "Admin AI Insights",
          "AI Admin Insights"
        ],
        "summary": "Get Model Performance",
        "description": "Get model performance metrics grouped by specified dimension\n\nRequires permission: ai.view_insights",
        "operationId": "list_get_model_performance",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 1,
              "default": 7,
              "title": "Days"
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(model_type|domain|endpoint)$",
              "default": "model_type",
              "title": "Group By"
            }
          },
          {
            "name": "min_requests",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Minimum requests to include",
              "default": 10,
              "title": "Min Requests"
            },
            "description": "Minimum requests to include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelPerformanceResponse"
                  },
                  "title": "Response Get Model Performance Api V1 Ai Admin Insights Model Performance Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/admin/insights/domain/{domain}": {
      "get": {
        "tags": [
          "Admin AI Insights",
          "AI Admin Insights"
        ],
        "summary": "Get Domain Insights",
        "description": "Get detailed insights for a specific domain\n\nRequires permission: ai.view_insights",
        "operationId": "get_get_domain_insights_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Domain"
            }
          },
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 1,
              "default": 30,
              "title": "Days"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainInsightsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/admin/insights/feedback/trends": {
      "get": {
        "tags": [
          "Admin AI Insights",
          "AI Admin Insights"
        ],
        "summary": "Get Feedback Trends",
        "description": "Get feedback trends over time\n\nRequires permission: ai.view_insights",
        "operationId": "list_get_feedback_trends",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 7,
              "default": 30,
              "title": "Days"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(hourly|daily|weekly)$",
              "default": "daily",
              "title": "Interval"
            }
          },
          {
            "name": "model_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Type"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Domain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackTrendResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/admin/insights/feedback/details": {
      "get": {
        "tags": [
          "Admin AI Insights",
          "AI Admin Insights"
        ],
        "summary": "Get Feedback Details",
        "description": "Get detailed feedback entries with filtering\n\nRequires permission: ai.view_insights",
        "operationId": "list_get_feedback_details",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "suggestion_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Suggestion Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          },
          {
            "name": "rating_min",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 5,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Rating Min"
            }
          },
          {
            "name": "rating_max",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 5,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Rating Max"
            }
          },
          {
            "name": "has_comment",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Comment"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/admin/insights/metrics/export": {
      "get": {
        "tags": [
          "Admin AI Insights",
          "AI Admin Insights"
        ],
        "summary": "Export Metrics",
        "description": "Export AI metrics and insights\n\nRequires permission: ai.export_data",
        "operationId": "list_export_metrics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(json|csv)$",
              "default": "json",
              "title": "Format"
            }
          },
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "default": 30,
              "title": "Days"
            }
          },
          {
            "name": "include_feedback",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Feedback"
            }
          },
          {
            "name": "include_performance",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Performance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/admin/insights/alerts/configure": {
      "post": {
        "tags": [
          "Admin AI Insights",
          "AI Admin Insights"
        ],
        "summary": "Configure Alerts",
        "description": "Configure alerts for AI model performance\n\nExample config:\n{\n    \"low_rating_threshold\": 2.5,\n    \"high_failure_rate\": 0.2,\n    \"low_confidence_threshold\": 0.5,\n    \"notification_channels\": [\"email\", \"slack\"],\n    \"check_interval_minutes\": 60\n}\n\nRequires permission: ai.configure_alerts",
        "operationId": "create_configure_alerts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Alert Config"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/admin/insights/comparison": {
      "get": {
        "tags": [
          "Admin AI Insights",
          "AI Admin Insights"
        ],
        "summary": "Compare Models",
        "description": "Compare performance across different models\n\nRequires permission: ai.view_insights",
        "operationId": "list_compare_models",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_types",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Model types to compare",
              "title": "Model Types"
            },
            "description": "Model types to compare"
          },
          {
            "name": "metric",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(average_rating|success_rate|response_time|confidence_score)$",
              "default": "average_rating",
              "title": "Metric"
            }
          },
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 1,
              "default": 30,
              "title": "Days"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/admin/insights/recommendations": {
      "get": {
        "tags": [
          "Admin AI Insights",
          "AI Admin Insights"
        ],
        "summary": "Get Improvement Recommendations",
        "description": "Get AI-powered recommendations for improving model performance\n\nRequires permission: ai.view_insights",
        "operationId": "list_get_improvement_recommendations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "min_feedback_count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 10,
              "default": 50,
              "title": "Min Feedback Count"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/pricing/generate": {
      "post": {
        "tags": [
          "AI Pricing Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Generate Pricing Recommendations",
        "description": "Generate AI-powered pricing recommendations for menu items.\n\nThis endpoint analyzes:\n- Historical sales data and trends\n- Current demand levels\n- Inventory levels\n- Competitor pricing (if available)\n- Price elasticity estimates\n- Seasonal factors\n\nRequires 'analytics:view_financial_details' permission.",
        "operationId": "create_generate_pricing_recommendations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_pricing_recommendations_api_v1_ai_ai_recommendations_pricing_generate_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingRecommendationSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/pricing/categories/{category_id}": {
      "get": {
        "tags": [
          "AI Pricing Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Get Category Pricing Recommendations",
        "description": "Get pricing recommendations for all items in a category.\n\nQuick way to analyze and optimize pricing for an entire menu category.",
        "operationId": "get_get_category_pricing_recommendations_by_id",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Category Id"
            }
          },
          {
            "name": "max_price_change",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "maximum": 50,
              "minimum": 0,
              "description": "Maximum price change percentage",
              "default": 20.0,
              "title": "Max Price Change"
            },
            "description": "Maximum price change percentage"
          },
          {
            "name": "optimization_goal",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Optimization goal",
              "default": "maximize_profit",
              "title": "Optimization Goal"
            },
            "description": "Optimization goal"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingRecommendationSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/pricing/items/{item_id}": {
      "get": {
        "tags": [
          "AI Pricing Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Get Item Pricing Recommendation",
        "description": "Get pricing recommendation for a specific menu item.\n\nProvides detailed analysis and recommendations for a single item.",
        "operationId": "get_get_item_pricing_recommendation_by_id",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          },
          {
            "name": "include_competitors",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include competitor analysis",
              "default": true,
              "title": "Include Competitors"
            },
            "description": "Include competitor analysis"
          },
          {
            "name": "time_horizon_days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 30,
              "minimum": 1,
              "description": "Analysis time horizon",
              "default": 7,
              "title": "Time Horizon Days"
            },
            "description": "Analysis time horizon"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingRecommendationSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/pricing/test/configure": {
      "post": {
        "tags": [
          "AI Pricing Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Configure Price Test",
        "description": "Configure an A/B test for menu item pricing.\n\nSets up controlled price testing to measure actual customer response\nto different price points.\n\nRequires 'analytics:manage_alerts' permission.",
        "operationId": "create_configure_price_test",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_configure_price_test_api_v1_ai_ai_recommendations_pricing_test_configure_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/pricing/test/{test_id}/results": {
      "get": {
        "tags": [
          "AI Pricing Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Get Price Test Results",
        "description": "Get results from a completed price test.\n\nReturns statistical analysis and recommendations based on actual\ncustomer behavior during the test period.",
        "operationId": "get_get_price_test_results_by_id",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceTestingResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/pricing/insights/elasticity": {
      "get": {
        "tags": [
          "AI Pricing Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Get Price Elasticity Insights",
        "description": "Get price elasticity insights for menu items.\n\nAnalyzes historical price changes and demand response to estimate\nprice sensitivity for different items.",
        "operationId": "list_get_price_elasticity_insights",
        "parameters": [
          {
            "name": "category_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category Id"
            },
            "description": "Filter by category"
          },
          {
            "name": "days_back",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 30,
              "description": "Days of history to analyze",
              "default": 90,
              "title": "Days Back"
            },
            "description": "Days of history to analyze"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/pricing/insights/competitive": {
      "get": {
        "tags": [
          "AI Pricing Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Get Competitive Pricing Insights",
        "description": "Get competitive pricing analysis and insights.\n\nCompares menu prices with market data to identify opportunities\nfor competitive advantage.",
        "operationId": "list_get_competitive_pricing_insights",
        "parameters": [
          {
            "name": "include_recommendations",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include pricing recommendations",
              "default": true,
              "title": "Include Recommendations"
            },
            "description": "Include pricing recommendations"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/pricing/apply/{recommendation_id}": {
      "post": {
        "tags": [
          "AI Pricing Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Apply Pricing Recommendation",
        "description": "Apply a specific pricing recommendation.\n\nUpdates menu prices based on the recommendation. This action is logged\nand can be reverted if needed.\n\nRequires 'analytics:admin' permission.",
        "operationId": "create_apply_pricing_recommendation",
        "parameters": [
          {
            "name": "recommendation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Recommendation Id"
            }
          },
          {
            "name": "effective_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "When to apply the price change",
              "title": "Effective Date"
            },
            "description": "When to apply the price change"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/pricing/rollback/{rollback_token}": {
      "post": {
        "tags": [
          "AI Pricing Recommendations",
          "AI Pricing Recommendations"
        ],
        "summary": "Rollback Price Changes",
        "description": "Rollback previously applied price changes.\n\nReverts menu prices to their previous values before the recommendation\nwas applied.\n\nRequires 'analytics:admin' permission.",
        "operationId": "create_rollback_price_changes",
        "parameters": [
          {
            "name": "rollback_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Rollback Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/staffing/optimize": {
      "post": {
        "tags": [
          "AI Staffing Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Optimize Staffing",
        "description": "Generate AI-powered staffing recommendations for a date range.\n\nThis endpoint analyzes:\n- Historical demand patterns\n- Peak hours and seasonality\n- Staff productivity metrics\n- Labor cost optimization\n- Service level requirements\n\nRequires 'analytics:view_staff_performance' permission.",
        "operationId": "create_optimize_staffing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_optimize_staffing_api_v1_ai_ai_recommendations_staffing_optimize_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffingRecommendationSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/staffing/daily/{target_date}": {
      "get": {
        "tags": [
          "AI Staffing Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Daily Staffing Recommendation",
        "description": "Get staffing recommendations for a specific day.\n\nProvides detailed hourly staffing requirements and shift recommendations\nfor a single day.",
        "operationId": "get_get_daily_staffing_recommendation_by_id",
        "parameters": [
          {
            "name": "target_date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Target Date"
            }
          },
          {
            "name": "include_flexibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include flexibility analysis",
              "default": true,
              "title": "Include Flexibility"
            },
            "description": "Include flexibility analysis"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/staffing/weekly": {
      "get": {
        "tags": [
          "AI Staffing Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Weekly Staffing Summary",
        "description": "Get weekly staffing summary and recommendations.\n\nProvides a week-at-a-glance view of staffing needs with daily summaries\nand total labor costs.",
        "operationId": "list_get_weekly_staffing_summary",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start of week (defaults to current week)",
              "title": "Start Date"
            },
            "description": "Start of week (defaults to current week)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/staffing/patterns": {
      "get": {
        "tags": [
          "AI Staffing Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Staffing Patterns",
        "description": "Get identified staffing patterns.\n\nReturns optimal staffing templates based on historical analysis,\nuseful for creating standard schedules.",
        "operationId": "list_get_staffing_patterns",
        "parameters": [
          {
            "name": "pattern_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by pattern type (weekday/weekend)",
              "title": "Pattern Type"
            },
            "description": "Filter by pattern type (weekday/weekend)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/staffing/labor-cost/analysis": {
      "get": {
        "tags": [
          "AI Staffing Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Labor Cost Analysis",
        "description": "Get detailed labor cost analysis for a period.\n\nAnalyzes actual vs recommended staffing costs and identifies\noptimization opportunities.\n\nRequires 'analytics:view_financial_details' permission.",
        "operationId": "list_get_labor_cost_analysis",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Analysis start date",
              "title": "Start Date"
            },
            "description": "Analysis start date"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Analysis end date",
              "title": "End Date"
            },
            "description": "Analysis end date"
          },
          {
            "name": "compare_to_budget",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include budget comparison",
              "default": false,
              "title": "Compare To Budget"
            },
            "description": "Include budget comparison"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/staffing/demand-forecast/{target_date}": {
      "get": {
        "tags": [
          "AI Staffing Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Demand Forecast",
        "description": "Get hourly demand forecast for a specific date.\n\nProvides predicted order volumes, revenue, and customer counts\nby hour to support staffing decisions.",
        "operationId": "get_get_demand_forecast_by_id",
        "parameters": [
          {
            "name": "target_date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Target Date"
            }
          },
          {
            "name": "include_confidence_intervals",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include confidence intervals",
              "default": true,
              "title": "Include Confidence Intervals"
            },
            "description": "Include confidence intervals"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/staffing/schedule/generate/{week_start}": {
      "post": {
        "tags": [
          "AI Staffing Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Generate Schedule",
        "description": "Generate an optimized schedule for a week.\n\nCreates a complete staff schedule based on recommendations,\nstaff availability, and business rules.\n\nRequires 'analytics:manage_alerts' permission.",
        "operationId": "create_generate_schedule",
        "parameters": [
          {
            "name": "week_start",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Week Start"
            }
          },
          {
            "name": "auto_assign_staff",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Automatically assign available staff",
              "default": false,
              "title": "Auto Assign Staff"
            },
            "description": "Automatically assign available staff"
          },
          {
            "name": "respect_preferences",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Respect staff scheduling preferences",
              "default": true,
              "title": "Respect Preferences"
            },
            "description": "Respect staff scheduling preferences"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/ai-recommendations/staffing/insights/productivity": {
      "get": {
        "tags": [
          "AI Staffing Recommendations",
          "AI Staffing Recommendations"
        ],
        "summary": "Get Productivity Insights",
        "description": "Get staff productivity insights and recommendations.\n\nAnalyzes staff performance metrics to identify training needs\nand optimization opportunities.",
        "operationId": "list_get_productivity_insights",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by staff role",
              "title": "Role"
            },
            "description": "Filter by staff role"
          },
          {
            "name": "days_back",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 7,
              "description": "Days of history to analyze",
              "default": 30,
              "title": "Days Back"
            },
            "description": "Days of history to analyze"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Current User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Create Customer",
        "description": "Create a new customer",
        "operationId": "create_create_customer",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Search Customers",
        "description": "Search and filter customers",
        "operationId": "list_search_customers",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search in name, email, phone",
              "title": "Query"
            },
            "description": "Search in name, email, phone"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Phone"
            }
          },
          {
            "name": "tier",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tier"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "min_orders",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Orders"
            }
          },
          {
            "name": "max_orders",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Orders"
            }
          },
          {
            "name": "min_spent",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Spent"
            }
          },
          {
            "name": "max_spent",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Spent"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created After"
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created Before"
            }
          },
          {
            "name": "last_order_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Order After"
            }
          },
          {
            "name": "last_order_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Order Before"
            }
          },
          {
            "name": "has_active_rewards",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Active Rewards"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Location Id"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tags"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(created_at|updated_at|last_order_date|total_spent|total_orders)$",
              "default": "created_at",
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "default": "desc",
              "title": "Sort Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get Customer",
        "description": "Get customer by ID",
        "operationId": "get_get_customer_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customers"
        ],
        "summary": "Update Customer",
        "description": "Update customer information",
        "operationId": "update_update_customer",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/profile": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get Customer Profile",
        "description": "Get complete customer profile with related data",
        "operationId": "get_get_customer_profile_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/status": {
      "patch": {
        "tags": [
          "customers"
        ],
        "summary": "Update Customer Status",
        "description": "Update customer status",
        "operationId": "patch_update_customer_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/tier": {
      "patch": {
        "tags": [
          "customers"
        ],
        "summary": "Update Customer Tier",
        "description": "Update customer loyalty tier",
        "operationId": "patch_update_customer_tier",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerTierUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/analytics": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get Customer Analytics",
        "description": "Get customer analytics and insights",
        "operationId": "get_get_customer_analytics_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAnalytics"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/addresses": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Add Customer Address",
        "description": "Add a new address for customer",
        "operationId": "create_add_customer_address",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddressCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddress"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/addresses/{address_id}": {
      "put": {
        "tags": [
          "customers"
        ],
        "summary": "Update Customer Address",
        "description": "Update customer address",
        "operationId": "update_update_customer_address",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Address Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddressUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddress"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customers"
        ],
        "summary": "Delete Customer Address",
        "description": "Delete customer address",
        "operationId": "delete_delete_customer_address",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Address Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/preferences": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Set Customer Preference",
        "description": "Set or update customer preference",
        "operationId": "create_set_customer_preference",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPreferenceCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPreference"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get Customer Preferences",
        "description": "Get customer preferences",
        "operationId": "get_get_customer_preferences_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Category"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerPreference"
                  },
                  "title": "Response Get Customer Preferences Customers  Customer Id  Preferences Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/loyalty/add-points": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Add Loyalty Points",
        "description": "Add loyalty points to customer",
        "operationId": "create_add_loyalty_points",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          },
          {
            "name": "points",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Points"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/loyalty/redeem-points": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Redeem Loyalty Points",
        "description": "Redeem loyalty points",
        "operationId": "create_redeem_loyalty_points",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          },
          {
            "name": "points",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Points"
            }
          },
          {
            "name": "reward_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Reward Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/orders": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get Customer Orders",
        "description": "Get customer's order history",
        "operationId": "get_get_customer_orders_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Filter"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date From"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date To"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderSummary"
                  },
                  "title": "Response Get Customer Orders Customers  Customer Id  Orders Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}/favorite-items": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get Customer Favorite Items",
        "description": "Get customer's favorite menu items",
        "operationId": "get_get_customer_favorite_items_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "min_orders",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 2,
              "title": "Min Orders"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemSummary"
                  },
                  "title": "Response Get Customer Favorite Items Customers  Customer Id  Favorite Items Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/auth/register": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Register Customer",
        "description": "Register a new customer account",
        "operationId": "create_register_customer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/auth/login": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Authenticate Customer",
        "description": "Authenticate customer login",
        "operationId": "create_authenticate_customer",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Email"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/auth/refresh": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Refresh Customer Token",
        "description": "Refresh customer access token",
        "operationId": "create_refresh_customer_token",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/customers/auth/logout": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Logout Customer",
        "description": "Logout customer (revoke token)",
        "operationId": "create_logout_customer",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/customers/auth/change-password": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Change Customer Password",
        "description": "Change customer password",
        "operationId": "create_change_customer_password",
        "parameters": [
          {
            "name": "old_password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Old Password"
            }
          },
          {
            "name": "new_password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "New Password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/auth/reset-password-request": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Request Password Reset",
        "description": "Request password reset",
        "operationId": "create_request_password_reset",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/customers/auth/reset-password": {
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "Reset Customer Password",
        "description": "Reset customer password using reset token",
        "operationId": "create_reset_customer_password",
        "parameters": [
          {
            "name": "reset_token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Reset Token"
            }
          },
          {
            "name": "new_password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "New Password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/": {
      "post": {
        "tags": [
          "Reservations",
          "Reservations"
        ],
        "summary": "Create Reservation",
        "description": "Create a new reservation for the current customer.\n\n- Validates availability\n- Assigns tables automatically\n- Sends confirmation notification",
        "operationId": "create_create_reservation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/reservations/my-reservations": {
      "get": {
        "tags": [
          "Reservations",
          "Reservations"
        ],
        "summary": "Get My Reservations",
        "description": "Get all reservations for the current customer with pagination.",
        "operationId": "list_get_my_reservations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/modules__reservations__schemas__reservation_schemas__ReservationStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "upcoming_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Show only upcoming reservations",
              "default": false,
              "title": "Upcoming Only"
            },
            "description": "Show only upcoming reservations"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/availability": {
      "get": {
        "tags": [
          "Reservations",
          "Reservations"
        ],
        "summary": "Check Availability",
        "description": "Check available reservation times for a given date and party size.\n\nReturns time slots with availability status and waitlist information.",
        "operationId": "list_check_availability",
        "parameters": [
          {
            "name": "check_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Date to check availability",
              "title": "Check Date"
            },
            "description": "Date to check availability"
          },
          {
            "name": "party_size",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "maximum": 20,
              "minimum": 1,
              "description": "Number of guests",
              "title": "Party Size"
            },
            "description": "Number of guests"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationAvailability"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/{reservation_id}": {
      "get": {
        "tags": [
          "Reservations",
          "Reservations"
        ],
        "summary": "Get Reservation",
        "description": "Get a specific reservation by ID.",
        "operationId": "get_get_reservation_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Reservations",
          "Reservations"
        ],
        "summary": "Update Reservation",
        "description": "Update a reservation.\n\n- Can modify date, time, party size, or preferences\n- Automatically re-checks availability and reassigns tables if needed",
        "operationId": "update_update_reservation",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/confirm/{confirmation_code}": {
      "get": {
        "tags": [
          "Reservations",
          "Reservations"
        ],
        "summary": "Get Reservation By Code",
        "description": "Get a reservation by confirmation code (no authentication required).\n\nUseful for sharing reservation details or quick lookups.",
        "operationId": "get_get_reservation_by_code_by_id",
        "parameters": [
          {
            "name": "confirmation_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Confirmation Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/{reservation_id}/cancel": {
      "post": {
        "tags": [
          "Reservations",
          "Reservations"
        ],
        "summary": "Cancel Reservation",
        "description": "Cancel a reservation.\n\n- Updates status to cancelled\n- Sends cancellation notification\n- Checks waitlist for available slots",
        "operationId": "create_cancel_reservation",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationCancellation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/{reservation_id}/confirm": {
      "post": {
        "tags": [
          "Reservations",
          "Reservations"
        ],
        "summary": "Confirm Reservation",
        "description": "Confirm a pending reservation.\n\nSome restaurants require confirmation 24-48 hours before the reservation.",
        "operationId": "create_confirm_reservation",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationConfirmation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/waitlist/": {
      "post": {
        "tags": [
          "Reservations",
          "Reservations",
          "Waitlist"
        ],
        "summary": "Join Waitlist",
        "description": "Add customer to waitlist for a specific date/time range.\n\n- Automatically assigns position in queue\n- Sends confirmation notification\n- Monitors for availability",
        "operationId": "create_join_waitlist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaitlistCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitlistResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/reservations/waitlist/my-waitlist": {
      "get": {
        "tags": [
          "Reservations",
          "Reservations",
          "Waitlist"
        ],
        "summary": "Get My Waitlist Entries",
        "description": "Get all waitlist entries for the current customer.",
        "operationId": "list_get_my_waitlist_entries",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Show only active waitlist entries",
              "default": true,
              "title": "Active Only"
            },
            "description": "Show only active waitlist entries"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitlistListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/waitlist/{waitlist_id}": {
      "get": {
        "tags": [
          "Reservations",
          "Reservations",
          "Waitlist"
        ],
        "summary": "Get Waitlist Entry",
        "description": "Get a specific waitlist entry.",
        "operationId": "get_get_waitlist_entry_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "waitlist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Waitlist Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitlistResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reservations",
          "Reservations",
          "Waitlist"
        ],
        "summary": "Cancel Waitlist Entry",
        "description": "Cancel a waitlist entry.\n\n- Updates positions for remaining entries\n- Cannot cancel if already converted or cancelled",
        "operationId": "delete_cancel_waitlist_entry",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "waitlist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Waitlist Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/waitlist/{waitlist_id}/confirm": {
      "post": {
        "tags": [
          "Reservations",
          "Reservations",
          "Waitlist"
        ],
        "summary": "Confirm Waitlist Availability",
        "description": "Confirm availability notification and convert waitlist to reservation.\n\nMust be called within the notification window after being notified.",
        "operationId": "create_confirm_waitlist_availability",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "waitlist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Waitlist Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/waitlist/estimate/{date}": {
      "get": {
        "tags": [
          "Reservations",
          "Reservations",
          "Waitlist"
        ],
        "summary": "Estimate Wait Time",
        "description": "Estimate wait time for a potential waitlist entry.\n\nHelps customers decide if they want to join the waitlist.",
        "operationId": "get_estimate_wait_time_by_id",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Date"
            }
          },
          {
            "name": "time_start",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
              "title": "Time Start"
            }
          },
          {
            "name": "party_size",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "maximum": 20,
              "minimum": 1,
              "title": "Party Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Estimate Wait Time Api V1 Reservations Waitlist Estimate  Date  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/staff/daily": {
      "get": {
        "tags": [
          "Reservations",
          "Reservations",
          "Staff Reservations"
        ],
        "summary": "Get Daily Reservations",
        "description": "Get all reservations for a specific date.\n\nRequires RESERVATION_VIEW permission.",
        "operationId": "list_get_daily_reservations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Date to get reservations for",
              "title": "Reservation Date"
            },
            "description": "Date to get reservations for"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/modules__reservations__schemas__reservation_schemas__ReservationStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 50,
              "title": "Page Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/staff/{reservation_id}": {
      "patch": {
        "tags": [
          "Reservations",
          "Reservations",
          "Staff Reservations"
        ],
        "summary": "Update Reservation Status",
        "description": "Update reservation status or details.\n\nRequires RESERVATION_UPDATE permission.\nCan update status (seated, completed, no-show) and table assignment.",
        "operationId": "patch_update_reservation_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffReservationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/staff/{reservation_id}/seat": {
      "post": {
        "tags": [
          "Reservations",
          "Reservations",
          "Staff Reservations"
        ],
        "summary": "Mark As Seated",
        "description": "Mark a reservation as seated.\n\nRequires RESERVATION_UPDATE permission.",
        "operationId": "create_mark_as_seated",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          },
          {
            "name": "table_number",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Assigned table number",
              "title": "Table Number"
            },
            "description": "Assigned table number"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/staff/{reservation_id}/complete": {
      "post": {
        "tags": [
          "Reservations",
          "Reservations",
          "Staff Reservations"
        ],
        "summary": "Mark As Completed",
        "description": "Mark a reservation as completed.\n\nRequires RESERVATION_UPDATE permission.",
        "operationId": "create_mark_as_completed",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/staff/{reservation_id}/no-show": {
      "post": {
        "tags": [
          "Reservations",
          "Reservations",
          "Staff Reservations"
        ],
        "summary": "Mark As No Show",
        "description": "Mark a reservation as no-show.\n\nRequires RESERVATION_UPDATE permission.\nTracks no-show history for customers.",
        "operationId": "create_mark_as_no_show",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/staff/waitlist/daily": {
      "get": {
        "tags": [
          "Reservations",
          "Reservations",
          "Staff Reservations"
        ],
        "summary": "Get Daily Waitlist",
        "description": "Get all waitlist entries for a specific date.\n\nRequires RESERVATION_VIEW permission.",
        "operationId": "list_get_daily_waitlist",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "waitlist_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Date to get waitlist for",
              "title": "Waitlist Date"
            },
            "description": "Date to get waitlist for"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/WaitlistStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitlistListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/staff/waitlist/{waitlist_id}/notify": {
      "post": {
        "tags": [
          "Reservations",
          "Reservations",
          "Staff Reservations"
        ],
        "summary": "Notify Waitlist Customer",
        "description": "Manually notify a waitlist customer about availability.\n\nRequires RESERVATION_UPDATE permission.",
        "operationId": "create_notify_waitlist_customer",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "waitlist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Waitlist Id"
            }
          },
          {
            "name": "available_time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
              "title": "Available Time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reservations/staff/settings": {
      "get": {
        "tags": [
          "Reservations",
          "Reservations",
          "Staff Reservations"
        ],
        "summary": "Get Reservation Settings",
        "description": "Get current reservation settings.\n\nRequires ADMIN_ACCESS permission.",
        "operationId": "list_get_reservation_settings",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationSettingsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Reservations",
          "Reservations",
          "Staff Reservations"
        ],
        "summary": "Update Reservation Settings",
        "description": "Update reservation settings.\n\nRequires ADMIN_ACCESS permission.",
        "operationId": "update_update_reservation_settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Settings Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationSettingsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/payments/create": {
      "post": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "Create Payment",
        "description": "Create a new payment for an order\n\nRequired permissions: order.payment.create",
        "operationId": "create_create_payment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/payments/{payment_id}/capture": {
      "post": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "Capture Payment",
        "description": "Capture a previously authorized payment\n\nRequired permissions: order.payment.create",
        "operationId": "create_capture_payment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Amount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/payments/{payment_id}/cancel": {
      "post": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "Cancel Payment",
        "description": "Cancel a pending payment\n\nRequired permissions: order.payment.create",
        "operationId": "create_cancel_payment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Reason"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/payments/{payment_id}": {
      "get": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "Get Payment",
        "description": "Get payment details\n\nRequired permissions: order.view (own) or order.view.all",
        "operationId": "get_get_payment_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetail"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/payments/{payment_id}/refund": {
      "post": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "Create Refund",
        "description": "Create a refund for a payment\n\nRequired permissions: order.refund.create",
        "operationId": "create_create_refund",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/payments/refunds/{refund_id}": {
      "get": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "Get Refund",
        "description": "Get refund details\n\nRequired permissions: order.view (own) or order.view.all",
        "operationId": "get_get_refund_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Refund Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/payments/methods/save": {
      "post": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "Save Payment Method",
        "description": "Save a payment method for future use\n\nCustomers can only save their own payment methods",
        "operationId": "create_save_payment_method",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/payments/methods/list": {
      "get": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "List Payment Methods",
        "description": "List saved payment methods for the current user",
        "operationId": "list_list_payment_methods",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "gateway",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PaymentGateway"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gateway"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethodResponse"
                  },
                  "title": "Response List Payment Methods Api V1 Payments Payments Methods List Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/payments/methods/{method_id}": {
      "delete": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "Delete Payment Method",
        "description": "Delete a saved payment method",
        "operationId": "delete_delete_payment_method",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Method Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/payments/gateways/available": {
      "get": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "Get Available Gateways",
        "description": "Get list of available payment gateways and their configuration",
        "operationId": "list_get_available_gateways",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PaymentGatewayConfig"
                  },
                  "type": "array",
                  "title": "Response Get Available Gateways Api V1 Payments Payments Gateways Available Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/payments/webhook/{gateway}": {
      "post": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "Handle Webhook",
        "description": "Handle incoming webhooks from payment gateways\n\nThis endpoint is called by payment gateways and doesn't require authentication",
        "operationId": "create_handle_webhook",
        "parameters": [
          {
            "name": "gateway",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaymentGateway"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWebhookResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/payments/{payment_id}/sync": {
      "post": {
        "tags": [
          "Payments",
          "payments"
        ],
        "summary": "Sync Payment Status",
        "description": "Manually sync payment status with gateway\n\nRequired permissions: order.payment.create",
        "operationId": "create_sync_payment_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Payment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/": {
      "post": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Create Split",
        "description": "Create a new bill split",
        "operationId": "create_create_split",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSplitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "List Splits",
        "description": "Get paginated list of splits for current user",
        "operationId": "list_list_splits",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SplitStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "organizer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only show splits I organized",
              "default": false,
              "title": "Organizer"
            },
            "description": "Only show splits I organized"
          },
          {
            "name": "participant",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only show splits I'm participating in",
              "default": false,
              "title": "Participant"
            },
            "description": "Only show splits I'm participating in"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSplitsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/{split_id}": {
      "get": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Get Split",
        "description": "Get split details",
        "operationId": "get_get_split_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "split_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Split Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/participant/{access_token}": {
      "get": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Get Participant By Token",
        "description": "Get participant details by access token (for guest access)",
        "operationId": "get_get_participant_by_token_by_id",
        "parameters": [
          {
            "name": "access_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Access Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipantResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/participant/{participant_id}/status": {
      "put": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Update Participant Status",
        "description": "Update participant status (accept/decline)",
        "operationId": "update_update_participant_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "participant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Participant Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParticipantStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/participant/{participant_id}/pay": {
      "post": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Pay Participant Share",
        "description": "Process payment for a participant's share",
        "operationId": "create_pay_participant_share",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "participant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Participant Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantPaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/{split_id}/cancel": {
      "post": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Cancel Split",
        "description": "Cancel a bill split",
        "operationId": "create_cancel_split",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "split_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Split Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Reason"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/{split_id}/remind": {
      "post": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Send Payment Reminders",
        "description": "Send payment reminders to pending participants",
        "operationId": "create_send_payment_reminders",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "split_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Split Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/tips/calculate": {
      "post": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Calculate Tip",
        "description": "Calculate tip amount",
        "operationId": "create_calculate_tip",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_calculate_tip_api_v1_payments_splits_tips_calculate_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/tips/suggestions": {
      "post": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Get Tip Suggestions",
        "description": "Get suggested tip amounts",
        "operationId": "create_get_tip_suggestions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TipSuggestionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/{split_id}/tips/distribute": {
      "post": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Process Tip Distribution",
        "description": "Process tip distribution for a completed split",
        "operationId": "create_process_tip_distribution",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "split_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Split Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessTipDistributionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/{split_id}/resend-invitation/{participant_id}": {
      "post": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Resend Participant Invitation",
        "description": "Resend invitation to a specific participant",
        "operationId": "create_resend_participant_invitation",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "split_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Split Id"
            }
          },
          {
            "name": "participant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Participant Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/splits/{split_id}/resend-all-invitations": {
      "post": {
        "tags": [
          "Payments",
          "Split Bills"
        ],
        "summary": "Resend All Invitations",
        "description": "Resend invitations to all (or pending) participants",
        "operationId": "create_resend_all_invitations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "split_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Split Id"
            }
          },
          {
            "name": "pending_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only resend to pending participants",
              "default": true,
              "title": "Pending Only"
            },
            "description": "Only resend to pending participants"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds/request": {
      "post": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Create Refund Request",
        "description": "Create a new refund request",
        "operationId": "create_create_refund_request",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRefundRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/refunds/requests": {
      "get": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "List Refund Requests",
        "description": "List refund requests with filtering",
        "operationId": "list_list_refund_requests",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/RefundApprovalStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/RefundCategory"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Category"
            }
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customer Id"
            }
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order Id"
            }
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Priority"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date From"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date To"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response List Refund Requests Api V1 Payments Refunds Requests Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds/requests/{request_id}": {
      "get": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Get Refund Request",
        "description": "Get a specific refund request",
        "operationId": "get_get_refund_request_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Request Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundRequestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds/requests/{request_id}/approve": {
      "post": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Approve Refund Request",
        "description": "Approve a refund request (staff only)",
        "operationId": "create_approve_refund_request",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Request Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundApprovalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds/requests/{request_id}/reject": {
      "post": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Reject Refund Request",
        "description": "Reject a refund request (staff only)",
        "operationId": "create_reject_refund_request",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Request Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRejectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds/requests/{request_id}/process": {
      "post": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Process Refund Request",
        "description": "Manually process an approved refund request",
        "operationId": "create_process_refund_request",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Request Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds/statistics": {
      "get": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Get Refund Statistics",
        "description": "Get refund statistics for reporting",
        "operationId": "list_get_refund_statistics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Restaurant Id"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date From"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date To"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundStatisticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds/reasons": {
      "get": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Get Refund Reasons",
        "description": "Get available refund reasons and their categories",
        "operationId": "list_get_refund_reasons",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds/policies": {
      "post": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Create Refund Policy",
        "description": "Create a new refund policy",
        "operationId": "create_create_refund_policy",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Restaurant Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds/policies/{restaurant_id}": {
      "get": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Get Refund Policy",
        "description": "Get refund policy for a restaurant",
        "operationId": "get_get_refund_policy_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Restaurant Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds/upload-evidence/{request_id}": {
      "post": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Upload Refund Evidence",
        "description": "Upload evidence files for a refund request",
        "operationId": "create_upload_refund_evidence",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Request Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_refund_evidence_api_v1_payments_refunds_upload_evidence__request_id__post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds/bulk/create": {
      "post": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Create Bulk Refund Requests",
        "description": "Create multiple refund requests in batch",
        "operationId": "create_create_bulk_refund_requests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkRefundRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkRefundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/refunds/bulk/approve": {
      "post": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Bulk Approve Refund Requests",
        "description": "Approve multiple refund requests in batch",
        "operationId": "create_bulk_approve_refund_requests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkApprovalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkRefundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/refunds/bulk/process": {
      "post": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Bulk Process Refund Requests",
        "description": "Process multiple approved refund requests in batch",
        "operationId": "create_bulk_process_refund_requests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkProcessingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkRefundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/refunds/bulk/reject": {
      "post": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Bulk Reject Refund Requests",
        "description": "Reject multiple refund requests in batch",
        "operationId": "create_bulk_reject_refund_requests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_bulk_reject_refund_requests_api_v1_payments_refunds_bulk_reject_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/refunds/bulk/status/{batch_id}": {
      "get": {
        "tags": [
          "Payments",
          "Refunds"
        ],
        "summary": "Get Bulk Operation Status",
        "description": "Get the status of a bulk operation",
        "operationId": "get_get_bulk_operation_status_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Batch Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/": {
      "post": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Create Feedback",
        "description": "Create new feedback (anonymous or authenticated)",
        "operationId": "create_create_feedback",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "List Feedback",
        "description": "List feedback with filtering and pagination",
        "operationId": "list_list_feedback",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "feedback_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by feedback type",
              "title": "Feedback Type"
            },
            "description": "Filter by feedback type"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by priority",
              "title": "Priority"
            },
            "description": "Filter by priority"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category"
            },
            "description": "Filter by category"
          },
          {
            "name": "assigned_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by assignee",
              "title": "Assigned To"
            },
            "description": "Filter by assignee"
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by customer ID",
              "title": "Customer Id"
            },
            "description": "Filter by customer ID"
          },
          {
            "name": "follow_up_required",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by follow-up requirement",
              "title": "Follow Up Required"
            },
            "description": "Filter by follow-up requirement"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort field",
              "default": "created_at",
              "title": "Sort By"
            },
            "description": "Sort field"
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "description": "Sort order",
              "default": "desc",
              "title": "Sort Order"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/{feedback_id}": {
      "get": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Get Feedback",
        "description": "Get specific feedback by ID",
        "operationId": "get_get_feedback_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Feedback ID",
              "title": "Feedback Id"
            },
            "description": "Feedback ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Update Feedback",
        "description": "Update feedback (staff only)",
        "operationId": "update_update_feedback",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Feedback ID",
              "title": "Feedback Id"
            },
            "description": "Feedback ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/uuid/{feedback_uuid}": {
      "get": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Get Feedback By Uuid",
        "description": "Get feedback by UUID",
        "operationId": "get_get_feedback_by_uuid_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "feedback_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Feedback UUID",
              "title": "Feedback Uuid"
            },
            "description": "Feedback UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/{feedback_id}/assign": {
      "post": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Assign Feedback",
        "description": "Assign feedback to a staff member (staff only)",
        "operationId": "create_assign_feedback",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Feedback ID",
              "title": "Feedback Id"
            },
            "description": "Feedback ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "integer",
                "description": "Staff member to assign to",
                "title": "Assignee Id"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/{feedback_id}/resolve": {
      "post": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Resolve Feedback",
        "description": "Mark feedback as resolved (staff only)",
        "operationId": "create_resolve_feedback",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Feedback ID",
              "title": "Feedback Id"
            },
            "description": "Feedback ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "description": "Resolution notes",
                "title": "Resolution Notes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/{feedback_id}/escalate": {
      "post": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Escalate Feedback",
        "description": "Escalate feedback to higher level support (staff only)",
        "operationId": "create_escalate_feedback",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Feedback ID",
              "title": "Feedback Id"
            },
            "description": "Feedback ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_escalate_feedback_api_v1_feedback__feedback_id__escalate_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/{feedback_id}/responses": {
      "post": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Add Feedback Response",
        "description": "Add response to feedback (staff only)",
        "operationId": "create_add_feedback_response",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Feedback ID",
              "title": "Feedback Id"
            },
            "description": "Feedback ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackResponseCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/analytics/overview": {
      "get": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Get Feedback Analytics",
        "description": "Get feedback analytics overview (staff only)",
        "operationId": "list_get_feedback_analytics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date (ISO format)",
              "title": "Start Date"
            },
            "description": "Start date (ISO format)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date (ISO format)",
              "title": "End Date"
            },
            "description": "End date (ISO format)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/categories": {
      "post": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Create Feedback Category",
        "description": "Create a new feedback category (staff only)",
        "operationId": "create_create_feedback_category",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackCategoryCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "List Feedback Categories",
        "description": "List all feedback categories",
        "operationId": "list_list_feedback_categories",
        "parameters": [
          {
            "name": "include_inactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include inactive categories",
              "default": false,
              "title": "Include Inactive"
            },
            "description": "Include inactive categories"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/moderation/queue": {
      "get": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Get Feedback Moderation Queue",
        "description": "Get feedback pending moderation (staff only)",
        "operationId": "list_get_feedback_moderation_queue",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(all|low|medium|high|urgent)$",
              "description": "Priority filter",
              "default": "all",
              "title": "Priority"
            },
            "description": "Priority filter"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/{feedback_id}/moderate": {
      "post": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Moderate Feedback",
        "description": "Run moderation analysis on feedback (staff only)",
        "operationId": "create_moderate_feedback",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Feedback ID",
              "title": "Feedback Id"
            },
            "description": "Feedback ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/my/feedback": {
      "get": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Get My Feedback",
        "description": "Get current user's feedback",
        "operationId": "list_get_my_feedback",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/my/feedback/{feedback_id}": {
      "get": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Get My Feedback Detail",
        "description": "Get specific feedback for current user",
        "operationId": "get_get_my_feedback_detail_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Feedback ID",
              "title": "Feedback Id"
            },
            "description": "Feedback ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/health": {
      "get": {
        "tags": [
          "Customer Feedback",
          "Feedback"
        ],
        "summary": "Feedback Health Check",
        "description": "Health check for feedback service",
        "operationId": "list_feedback_health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/": {
      "post": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Create Review",
        "description": "Create a new review",
        "operationId": "create_create_review",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "List Reviews",
        "description": "List reviews with filtering, pagination, and sorting",
        "operationId": "list_list_reviews",
        "parameters": [
          {
            "name": "review_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by review type",
              "title": "Review Type"
            },
            "description": "Filter by review type"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "rating_min",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 5.0,
                  "minimum": 1.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Minimum rating",
              "title": "Rating Min"
            },
            "description": "Minimum rating"
          },
          {
            "name": "rating_max",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 5.0,
                  "minimum": 1.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Maximum rating",
              "title": "Rating Max"
            },
            "description": "Maximum rating"
          },
          {
            "name": "verified_only",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Show only verified reviews",
              "title": "Verified Only"
            },
            "description": "Show only verified reviews"
          },
          {
            "name": "with_media",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Show only reviews with media",
              "title": "With Media"
            },
            "description": "Show only reviews with media"
          },
          {
            "name": "sentiment",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by sentiment",
              "title": "Sentiment"
            },
            "description": "Filter by sentiment"
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by customer ID",
              "title": "Customer Id"
            },
            "description": "Filter by customer ID"
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by product ID",
              "title": "Product Id"
            },
            "description": "Filter by product ID"
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by order ID",
              "title": "Order Id"
            },
            "description": "Filter by order ID"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort field",
              "default": "created_at",
              "title": "Sort By"
            },
            "description": "Sort field"
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "description": "Sort order",
              "default": "desc",
              "title": "Sort Order"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{review_id}": {
      "get": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Get Review",
        "description": "Get a specific review by ID",
        "operationId": "get_get_review_by_id",
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Review ID",
              "title": "Review Id"
            },
            "description": "Review ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Update Review",
        "description": "Update an existing review",
        "operationId": "update_update_review",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Review ID",
              "title": "Review Id"
            },
            "description": "Review ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Delete Review",
        "description": "Delete or hide a review",
        "operationId": "delete_delete_review",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Review ID",
              "title": "Review Id"
            },
            "description": "Review ID"
          },
          {
            "name": "soft_delete",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to soft delete (hide) or hard delete",
              "default": true,
              "title": "Soft Delete"
            },
            "description": "Whether to soft delete (hide) or hard delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/uuid/{review_uuid}": {
      "get": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Get Review By Uuid",
        "description": "Get a review by UUID",
        "operationId": "get_get_review_by_uuid_by_id",
        "parameters": [
          {
            "name": "review_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Review UUID",
              "title": "Review Uuid"
            },
            "description": "Review UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{review_id}/vote": {
      "post": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Vote On Review",
        "description": "Vote on review helpfulness",
        "operationId": "create_vote_on_review",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Review ID",
              "title": "Review Id"
            },
            "description": "Review ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewVoteCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{review_id}/business-response": {
      "post": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Add Business Response",
        "description": "Add business response to a review (staff only)",
        "operationId": "create_add_business_response",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Review ID",
              "title": "Review Id"
            },
            "description": "Review ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessResponseCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{review_id}/media": {
      "post": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Add Review Media",
        "description": "Add media attachments to a review",
        "operationId": "create_add_review_media",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Review ID",
              "title": "Review Id"
            },
            "description": "Review ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReviewMediaCreate"
                },
                "title": "Media Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{entity_type}/{entity_id}/aggregates": {
      "get": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Get Review Aggregates",
        "description": "Get aggregated review statistics for an entity",
        "operationId": "get_get_review_aggregates_by_id",
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(product|service)$",
              "description": "Entity type",
              "title": "Entity Type"
            },
            "description": "Entity type"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Entity ID",
              "title": "Entity Id"
            },
            "description": "Entity ID"
          },
          {
            "name": "force_refresh",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force recalculation",
              "default": false,
              "title": "Force Refresh"
            },
            "description": "Force recalculation"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{entity_type}/{entity_id}/insights": {
      "get": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Get Review Insights",
        "description": "Get detailed review insights for an entity",
        "operationId": "get_get_review_insights_by_id",
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(product|service)$",
              "description": "Entity type",
              "title": "Entity Type"
            },
            "description": "Entity type"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Entity ID",
              "title": "Entity Id"
            },
            "description": "Entity ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{review_id}/moderate": {
      "post": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Moderate Review",
        "description": "Moderate a review (staff only)",
        "operationId": "create_moderate_review",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Review ID",
              "title": "Review Id"
            },
            "description": "Review ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewModeration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/bulk-moderate": {
      "post": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Bulk Moderate Reviews",
        "description": "Bulk moderate multiple reviews (staff only)",
        "operationId": "create_bulk_moderate_reviews",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_bulk_moderate_reviews_api_v1_reviews_bulk_moderate_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/reviews/moderation/queue": {
      "get": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Get Moderation Queue",
        "description": "Get reviews pending moderation (staff only)",
        "operationId": "list_get_moderation_queue",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(all|high|urgent)$",
              "description": "Priority filter",
              "default": "all",
              "title": "Priority"
            },
            "description": "Priority filter"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/moderation/stats": {
      "get": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Get Moderation Stats",
        "description": "Get moderation statistics (staff only)",
        "operationId": "list_get_moderation_stats",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date (ISO format)",
              "title": "Start Date"
            },
            "description": "Start date (ISO format)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date (ISO format)",
              "title": "End Date"
            },
            "description": "End date (ISO format)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/top-rated/{entity_type}": {
      "get": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Get Top Rated Entities",
        "description": "Get top-rated entities",
        "operationId": "get_get_top_rated_entities_by_id",
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(product|service)$",
              "description": "Entity type",
              "title": "Entity Type"
            },
            "description": "Entity type"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Number of results",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of results"
          },
          {
            "name": "min_reviews",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Minimum number of reviews",
              "default": 5,
              "title": "Min Reviews"
            },
            "description": "Minimum number of reviews"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/trending/{entity_type}": {
      "get": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Get Trending Entities",
        "description": "Get trending entities based on recent review activity",
        "operationId": "get_get_trending_entities_by_id",
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(product|service)$",
              "description": "Entity type",
              "title": "Entity Type"
            },
            "description": "Entity type"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Number of results",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of results"
          },
          {
            "name": "days_back",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 30,
              "minimum": 1,
              "description": "Days to look back",
              "default": 7,
              "title": "Days Back"
            },
            "description": "Days to look back"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/aggregates/update": {
      "post": {
        "tags": [
          "Customer Reviews",
          "Reviews"
        ],
        "summary": "Update Review Aggregates",
        "description": "Update review aggregates (staff only)",
        "operationId": "create_update_review_aggregates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_review_aggregates_api_v1_reviews_aggregates_update_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/loyalty/rewards/templates": {
      "post": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Create Reward Template",
        "description": "Create a new reward template",
        "operationId": "create_create_reward_template",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewardTemplateCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "List Reward Templates",
        "description": "List reward templates",
        "operationId": "list_list_reward_templates",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Active Only"
            }
          },
          {
            "name": "reward_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Reward Type"
            }
          },
          {
            "name": "trigger_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Trigger Type"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RewardTemplate"
                  },
                  "title": "Response List Reward Templates Api V1 Loyalty Rewards Templates Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/loyalty/rewards/templates/{template_id}": {
      "get": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Get Reward Template",
        "description": "Get a specific reward template",
        "operationId": "get_get_reward_template_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Template Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Update Reward Template",
        "description": "Update a reward template",
        "operationId": "update_update_reward_template",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Template Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewardTemplateUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Delete Reward Template",
        "description": "Deactivate a reward template",
        "operationId": "delete_delete_reward_template",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Template Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/loyalty/rewards/customer/{customer_id}/rewards": {
      "get": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Get Customer Rewards",
        "description": "Get all rewards for a customer",
        "operationId": "get_get_customer_rewards_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "valid_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Valid Only"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerRewardSummary"
                  },
                  "title": "Response Get Customer Rewards Api V1 Loyalty Rewards Customer  Customer Id  Rewards Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/loyalty/rewards/search": {
      "get": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Search Rewards",
        "description": "Search rewards with advanced filtering",
        "operationId": "list_search_rewards",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customer Id"
            }
          },
          {
            "name": "template_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Template Id"
            }
          },
          {
            "name": "reward_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Reward Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "valid_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Valid Only"
            }
          },
          {
            "name": "expiring_soon",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 30,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expiring Soon"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "created_at",
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "desc",
              "title": "Sort Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/loyalty/rewards/redeem": {
      "post": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Redeem Reward",
        "description": "Redeem a reward against an order",
        "operationId": "create_redeem_reward",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewardRedemptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardRedemptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/loyalty/rewards/issue": {
      "post": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Issue Reward Manually",
        "description": "Manually issue a reward to a customer",
        "operationId": "create_issue_reward_manually",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualRewardIssuance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/modules__loyalty__schemas__rewards_schemas__CustomerReward"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/loyalty/rewards/issue/bulk": {
      "post": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Issue Rewards Bulk",
        "description": "Issue rewards to multiple customers",
        "operationId": "create_issue_rewards_bulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkRewardIssuance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkRewardIssuanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/loyalty/rewards/process-order": {
      "post": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Process Order Completion",
        "description": "Process rewards and points for order completion",
        "operationId": "create_process_order_completion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCompletionReward"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/loyalty/rewards/analytics/template/{template_id}": {
      "get": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Get Template Analytics",
        "description": "Get analytics for a specific reward template",
        "operationId": "get_get_template_analytics_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Template Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardAnalytics"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/loyalty/rewards/customer/{customer_id}/loyalty-stats": {
      "get": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Get Customer Loyalty Stats",
        "description": "Get loyalty statistics for a customer",
        "operationId": "get_get_customer_loyalty_stats_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerLoyaltyStats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/loyalty/rewards/maintenance/expire-rewards": {
      "post": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Expire Old Rewards",
        "description": "Expire rewards that have passed their expiration date",
        "operationId": "create_expire_old_rewards",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/loyalty/rewards/maintenance/run-campaigns": {
      "post": {
        "tags": [
          "Loyalty & Rewards",
          "loyalty-rewards"
        ],
        "summary": "Run Automated Campaigns",
        "description": "Run automated reward campaigns",
        "operationId": "create_run_automated_campaigns",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/table-layout/floors": {
      "post": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Create Floor",
        "description": "Create a new floor/section\n\nRequires permission: tables.manage_layout",
        "operationId": "create_create_floor",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FloorCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Get Floors",
        "description": "Get all floors for the restaurant",
        "operationId": "list_get_floors",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "include_inactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Inactive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FloorResponse"
                  },
                  "title": "Response Get Floors Api V1 Table Layout Floors Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-layout/floors/{floor_id}": {
      "get": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Get Floor",
        "description": "Get floor details by ID",
        "operationId": "get_get_floor_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "floor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Floor Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Update Floor",
        "description": "Update floor details\n\nRequires permission: tables.manage_layout",
        "operationId": "update_update_floor",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "floor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Floor Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FloorUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Delete Floor",
        "description": "Delete a floor\n\nRequires permission: tables.manage_layout",
        "operationId": "delete_delete_floor",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "floor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Floor Id"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force delete even if tables exist",
              "default": false,
              "title": "Force"
            },
            "description": "Force delete even if tables exist"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-layout/tables": {
      "post": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Create Table",
        "description": "Create a new table\n\nRequires permission: tables.manage_layout",
        "operationId": "create_create_table",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Get Tables",
        "description": "Get all tables with optional filters",
        "operationId": "list_get_tables",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "floor_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Floor Id"
            }
          },
          {
            "name": "section",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Section"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "include_inactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Inactive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TableResponse"
                  },
                  "title": "Response Get Tables Api V1 Table Layout Tables Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-layout/tables/bulk": {
      "put": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Bulk Update Tables",
        "description": "Update multiple tables at once\n\nRequires permission: tables.manage_layout",
        "operationId": "update_bulk_update_tables",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTableUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TableResponse"
                  },
                  "type": "array",
                  "title": "Response Bulk Update Tables Api V1 Table Layout Tables Bulk Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Bulk Create Tables",
        "description": "Create multiple tables at once\n\nRequires permission: tables.manage_layout",
        "operationId": "create_bulk_create_tables",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTableCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TableResponse"
                  },
                  "type": "array",
                  "title": "Response Bulk Create Tables Api V1 Table Layout Tables Bulk Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/table-layout/tables/{table_id}": {
      "get": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Get Table",
        "description": "Get table details by ID",
        "operationId": "get_get_table_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "table_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Table Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Update Table",
        "description": "Update table details\n\nRequires permission: tables.manage_layout",
        "operationId": "update_update_table",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "table_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Table Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Delete Table",
        "description": "Delete a table\n\nRequires permission: tables.manage_layout",
        "operationId": "delete_delete_table",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "table_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Table Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-layout/layouts": {
      "post": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Create Layout",
        "description": "Save a table layout configuration\n\nRequires permission: tables.manage_layout",
        "operationId": "create_create_layout",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableLayoutCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableLayoutResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Get Layouts",
        "description": "Get all saved layouts",
        "operationId": "list_get_layouts",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "include_inactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Inactive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TableLayoutResponse"
                  },
                  "title": "Response Get Layouts Api V1 Table Layout Layouts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-layout/layouts/active": {
      "get": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Get Active Layout",
        "description": "Get currently active layout",
        "operationId": "list_get_active_layout",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableLayoutResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/table-layout/layouts/{layout_id}": {
      "get": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Get Layout",
        "description": "Get layout details by ID",
        "operationId": "get_get_layout_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "layout_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Layout Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableLayoutResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Update Layout",
        "description": "Update layout configuration\n\nRequires permission: tables.manage_layout",
        "operationId": "update_update_layout",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "layout_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Layout Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableLayoutUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableLayoutResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Delete Layout",
        "description": "Delete a layout\n\nRequires permission: tables.manage_layout",
        "operationId": "delete_delete_layout",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "layout_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Layout Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-layout/layouts/{layout_id}/activate": {
      "post": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Activate Layout",
        "description": "Activate a saved layout\n\nRequires permission: tables.manage_layout",
        "operationId": "create_activate_layout",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "layout_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Layout Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableLayoutResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-layout/layouts/{layout_id}/apply": {
      "post": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Apply Layout",
        "description": "Apply a saved layout (update actual table positions)\n\nRequires permission: tables.manage_layout",
        "operationId": "create_apply_layout",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "layout_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Layout Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Apply Layout Api V1 Table Layout Layouts  Layout Id  Apply Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-layout/export": {
      "get": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Export Layout",
        "description": "Export current table layout\n\nRequires permission: tables.manage_layout",
        "operationId": "list_export_layout",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(json|csv)$",
              "default": "json",
              "title": "Format"
            }
          },
          {
            "name": "floor_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Floor Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-layout/import": {
      "post": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Import Layout",
        "description": "Import table layout configuration\n\nRequires permission: tables.manage_layout",
        "operationId": "create_import_layout",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "merge",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Merge with existing tables",
              "default": false,
              "title": "Merge"
            },
            "description": "Merge with existing tables"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Layout Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-layout/generate-qr-codes": {
      "post": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Generate Qr Codes",
        "description": "Generate QR codes for tables\n\nRequires permission: tables.manage_layout",
        "operationId": "create_generate_qr_codes",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "table_ids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Table Ids"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-layout/validate-layout": {
      "get": {
        "tags": [
          "Table Layout Management",
          "Table Layout"
        ],
        "summary": "Validate Layout",
        "description": "Validate current table layout for issues",
        "operationId": "list_validate_layout",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/table-state/sessions": {
      "post": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Start Session",
        "description": "Start a new table session\n\nRequires permission: tables.manage_sessions",
        "operationId": "create_start_session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableSessionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableSessionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/table-state/sessions/{session_id}": {
      "put": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Update Session",
        "description": "Update an active session\n\nRequires permission: tables.manage_sessions",
        "operationId": "update_update_session",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableSessionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableSessionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/sessions/{session_id}/end": {
      "post": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "End Session",
        "description": "End a table session\n\nRequires permission: tables.manage_sessions",
        "operationId": "create_end_session",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableSessionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/sessions/active": {
      "get": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Get Active Sessions",
        "description": "Get all active table sessions",
        "operationId": "list_get_active_sessions",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "floor_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Floor Id"
            }
          },
          {
            "name": "server_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Server Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TableSessionResponse"
                  },
                  "title": "Response Get Active Sessions Api V1 Table State Sessions Active Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/tables/{table_id}/status": {
      "put": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Update Table Status",
        "description": "Update table status\n\nRequires permission: tables.update_status",
        "operationId": "update_update_table_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "table_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Table Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/tables/bulk/status": {
      "put": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Bulk Update Status",
        "description": "Update multiple tables status\n\nRequires permission: tables.update_status",
        "operationId": "update_bulk_update_status",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTableStatusUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/table-state/availability": {
      "get": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Check Availability",
        "description": "Check table availability for a time range",
        "operationId": "list_check_availability",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "datetime_from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Datetime From"
            }
          },
          {
            "name": "datetime_to",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Datetime To"
            }
          },
          {
            "name": "guest_count",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "exclusiveMinimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Guest Count"
            }
          },
          {
            "name": "floor_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Floor Id"
            }
          },
          {
            "name": "section",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Section"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/floor-status": {
      "get": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Get Floor Status",
        "description": "Get current status of all tables on floor(s)",
        "operationId": "list_get_floor_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "floor_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Floor Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/reservations": {
      "post": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Create Reservation",
        "description": "Create a new reservation",
        "operationId": "create_create_reservation",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableReservationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Get Reservations",
        "description": "Get reservations with filters",
        "operationId": "list_get_reservations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date From"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date To"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/modules__tables__models__table_models__ReservationStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customer Id"
            }
          },
          {
            "name": "table_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Table Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TableReservationResponse"
                  },
                  "title": "Response Get Reservations Api V1 Table State Reservations Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/reservations/{reservation_id}": {
      "get": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Get Reservation",
        "description": "Get reservation details",
        "operationId": "get_get_reservation_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Update Reservation",
        "description": "Update reservation details",
        "operationId": "update_update_reservation",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableReservationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/reservations/{reservation_id}/confirm": {
      "post": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Confirm Reservation",
        "description": "Confirm a pending reservation\n\nRequires permission: tables.manage_reservations",
        "operationId": "create_confirm_reservation",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/reservations/{reservation_id}/cancel": {
      "post": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Cancel Reservation",
        "description": "Cancel a reservation",
        "operationId": "create_cancel_reservation",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/reservations/{reservation_id}/seat": {
      "post": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Seat Reservation",
        "description": "Convert reservation to active session\n\nRequires permission: tables.manage_sessions",
        "operationId": "create_seat_reservation",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          },
          {
            "name": "server_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Server Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/reservations/{reservation_id}/no-show": {
      "post": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Mark No Show",
        "description": "Mark reservation as no-show\n\nRequires permission: tables.manage_reservations",
        "operationId": "create_mark_no_show",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reservation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableReservationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/reservations/send-reminders": {
      "post": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Send Reservation Reminders",
        "description": "Send reminders for upcoming reservations\n\nRequires permission: tables.manage_reservations",
        "operationId": "create_send_reservation_reminders",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/table-state/analytics/utilization": {
      "get": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Get Table Utilization",
        "description": "Get table utilization analytics\n\nRequires permission: tables.view_analytics",
        "operationId": "list_get_table_utilization",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "End Date"
            }
          },
          {
            "name": "table_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Table Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table-state/analytics/heatmap": {
      "get": {
        "tags": [
          "Table State Management",
          "Table State Management"
        ],
        "summary": "Get Floor Heatmap",
        "description": "Get floor utilization heatmap data\n\nRequires permission: tables.view_analytics",
        "operationId": "list_get_floor_heatmap",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "period",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(today|week|month)$",
              "default": "today",
              "title": "Period"
            }
          },
          {
            "name": "floor_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Floor Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FloorHeatmapData"
                  },
                  "title": "Response Get Floor Heatmap Api V1 Table State Analytics Heatmap Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/": {
      "post": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Create Promotion",
        "description": "Create a new promotion",
        "operationId": "create_create_promotion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Promotion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/search": {
      "get": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Search Promotions",
        "description": "Search promotions with filters and pagination",
        "operationId": "list_search_promotions",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Query"
            }
          },
          {
            "name": "promotion_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Promotion Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "discount_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Discount Type"
            }
          },
          {
            "name": "is_featured",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Featured"
            }
          },
          {
            "name": "is_public",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Public"
            }
          },
          {
            "name": "start_date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date From"
            }
          },
          {
            "name": "start_date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date To"
            }
          },
          {
            "name": "target_customer_segment",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Target Customer Segment"
            }
          },
          {
            "name": "requires_coupon",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Requires Coupon"
            }
          },
          {
            "name": "stackable",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stackable"
            }
          },
          {
            "name": "min_discount_value",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Discount Value"
            }
          },
          {
            "name": "max_discount_value",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Discount Value"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "created_at",
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "default": "desc",
              "title": "Sort Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/active": {
      "get": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Get Active Promotions",
        "description": "Get currently active promotions",
        "operationId": "list_get_active_promotions",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_tier",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customer Tier"
            }
          },
          {
            "name": "featured_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Featured Only"
            }
          },
          {
            "name": "public_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Public Only"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromotionSummary"
                  },
                  "title": "Response Get Active Promotions Api V1 Promotions Active Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/featured": {
      "get": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Get Featured Promotions",
        "description": "Get featured promotions for public display",
        "operationId": "list_get_featured_promotions",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 20,
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromotionSummary"
                  },
                  "title": "Response Get Featured Promotions Api V1 Promotions Featured Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/{promotion_id}": {
      "get": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Get Promotion",
        "description": "Get a specific promotion by ID",
        "operationId": "get_get_promotion_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Promotion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Update Promotion",
        "description": "Update an existing promotion",
        "operationId": "update_update_promotion",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Promotion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/{promotion_id}/activate": {
      "post": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Activate Promotion",
        "description": "Activate a promotion",
        "operationId": "create_activate_promotion",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/{promotion_id}/pause": {
      "post": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Pause Promotion",
        "description": "Pause a promotion",
        "operationId": "create_pause_promotion",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/{promotion_id}/cancel": {
      "post": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Cancel Promotion",
        "description": "Cancel a promotion",
        "operationId": "create_cancel_promotion",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/{promotion_id}/end": {
      "post": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "End Promotion",
        "description": "End a promotion (natural completion)",
        "operationId": "create_end_promotion",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/{promotion_id}/duplicate": {
      "post": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Duplicate Promotion",
        "description": "Duplicate an existing promotion with new dates",
        "operationId": "create_duplicate_promotion",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          },
          {
            "name": "new_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "New Name"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Promotion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/{promotion_id}/analytics": {
      "get": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Get Promotion Analytics",
        "description": "Get comprehensive analytics for a promotion",
        "operationId": "get_get_promotion_analytics_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/ab-test": {
      "post": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Create Ab Test",
        "description": "Create A/B test promotions",
        "operationId": "create_create_ab_test",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ABTestConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Promotion"
                  },
                  "type": "array",
                  "title": "Response Create Ab Test Api V1 Promotions Ab Test Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/calculate-discount": {
      "post": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Calculate Discount",
        "description": "Calculate discounts for an order",
        "operationId": "create_calculate_discount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountCalculationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountCalculationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/update-statuses": {
      "post": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Update Promotion Statuses",
        "description": "Update promotion statuses based on schedule (admin/cron task)",
        "operationId": "create_update_promotion_statuses",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/{promotion_id}/performance": {
      "get": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Get Promotion Performance",
        "description": "Get performance metrics for a promotion",
        "operationId": "get_get_promotion_performance_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/validate-stackability": {
      "post": {
        "tags": [
          "Promotions",
          "promotions"
        ],
        "summary": "Validate Promotion Stackability",
        "description": "Validate if promotions can be stacked together",
        "operationId": "create_validate_promotion_stackability",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array",
                "title": "Promotion Ids"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/ab-testing/create": {
      "post": {
        "tags": [
          "A/B Testing",
          "A/B Testing"
        ],
        "summary": "Create Ab Test",
        "description": "Create an A/B test with control and variant promotions\n\nTest Config Options:\n- control_traffic_percentage: Percentage of traffic for control (default 50)\n- variant_traffic_percentages: List of traffic percentages for each variant\n- duration_days: Duration of the test in days\n- minimum_sample_size: Minimum sample size before results are meaningful\n- success_metric: Primary metric to optimize (conversion_rate, revenue, etc.)\n- confidence_level: Required confidence level for significance (default 95)",
        "operationId": "create_create_ab_test",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_ab_test_api_v1_promotions_ab_testing_create_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/ab-testing/{test_id}/start": {
      "post": {
        "tags": [
          "A/B Testing",
          "A/B Testing"
        ],
        "summary": "Start Ab Test",
        "description": "Start an A/B test by activating all its promotions",
        "operationId": "create_start_ab_test",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/ab-testing/{test_id}/stop": {
      "post": {
        "tags": [
          "A/B Testing",
          "A/B Testing"
        ],
        "summary": "Stop Ab Test",
        "description": "Stop an A/B test and optionally declare a winner",
        "operationId": "create_stop_ab_test",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Winning Variant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/ab-testing/{test_id}/assign": {
      "post": {
        "tags": [
          "A/B Testing",
          "A/B Testing"
        ],
        "summary": "Assign User To Variant",
        "description": "Assign a user to a variant in an A/B test\n\nThis endpoint is used by the frontend to determine which promotion\nvariant to show to a user. The assignment is deterministic based on\nthe user identifier, ensuring consistent experience.",
        "operationId": "create_assign_user_to_variant",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_assign_user_to_variant_api_v1_promotions_ab_testing__test_id__assign_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/ab-testing/{test_id}/results": {
      "get": {
        "tags": [
          "A/B Testing",
          "A/B Testing"
        ],
        "summary": "Get Ab Test Results",
        "description": "Get comprehensive results for an A/B test",
        "operationId": "get_get_ab_test_results_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/ab-testing/active": {
      "get": {
        "tags": [
          "A/B Testing",
          "A/B Testing"
        ],
        "summary": "Get Active Ab Tests",
        "description": "Get all currently active A/B tests",
        "operationId": "list_get_active_ab_tests",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/ab-testing/all": {
      "get": {
        "tags": [
          "A/B Testing",
          "A/B Testing"
        ],
        "summary": "Get All Ab Tests",
        "description": "Get all A/B tests with optional filtering",
        "operationId": "list_get_all_ab_tests",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(draft|active|stopped|winner|loser)$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Filter"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/ab-testing/{test_id}/summary": {
      "get": {
        "tags": [
          "A/B Testing",
          "A/B Testing"
        ],
        "summary": "Get Ab Test Summary",
        "description": "Get a quick summary of an A/B test",
        "operationId": "get_get_ab_test_summary_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/ab-testing/{test_id}/extend": {
      "post": {
        "tags": [
          "A/B Testing",
          "A/B Testing"
        ],
        "summary": "Extend Ab Test",
        "description": "Extend the duration of an active A/B test",
        "operationId": "create_extend_ab_test",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "integer",
                "maximum": 30,
                "minimum": 1,
                "title": "Additional Days"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/ab-testing/{test_id}/config": {
      "get": {
        "tags": [
          "A/B Testing",
          "A/B Testing"
        ],
        "summary": "Get Ab Test Config",
        "description": "Get the configuration of an A/B test",
        "operationId": "get_get_ab_test_config_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/ab-testing/validate-config": {
      "post": {
        "tags": [
          "A/B Testing",
          "A/B Testing"
        ],
        "summary": "Validate Ab Test Config",
        "description": "Validate A/B test configuration before creating the test",
        "operationId": "create_validate_ab_test_config",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_validate_ab_test_config_api_v1_promotions_ab_testing_validate_config_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/analytics/performance-report": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Get Promotion Performance Report",
        "description": "Get comprehensive promotion performance report",
        "operationId": "list_get_promotion_performance_report",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "promotion_ids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Promotion Ids"
            }
          },
          {
            "name": "include_inactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Inactive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/analytics/executive-summary": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Get Executive Summary",
        "description": "Get executive summary report with key insights and recommendations",
        "operationId": "list_get_executive_summary",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/analytics/coupon-analytics": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Get Coupon Analytics",
        "description": "Get coupon usage analytics report",
        "operationId": "list_get_coupon_analytics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "promotion_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Promotion Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/analytics/referral-analytics": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Get Referral Analytics",
        "description": "Get referral program analytics report",
        "operationId": "list_get_referral_analytics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "program_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Program Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/analytics/daily-aggregates": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Get Daily Analytics Aggregates",
        "description": "Get daily analytics aggregates for a specific date",
        "operationId": "list_get_daily_analytics_aggregates",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "target_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Target Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/analytics/comparison-report": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Get Comparison Report",
        "description": "Get comparison report between two time periods",
        "operationId": "list_get_comparison_report",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "period1_start",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Period1 Start"
            }
          },
          {
            "name": "period1_end",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Period1 End"
            }
          },
          {
            "name": "period2_start",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Period2 Start"
            }
          },
          {
            "name": "period2_end",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Period2 End"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/analytics/scheduled-report": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Get Scheduled Report",
        "description": "Generate a scheduled report",
        "operationId": "list_get_scheduled_report",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(executive|performance|coupons|referrals)$",
              "title": "Report Type"
            }
          },
          {
            "name": "frequency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(daily|weekly|monthly)$",
              "default": "weekly",
              "title": "Frequency"
            }
          },
          {
            "name": "recipients",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Recipients"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/analytics/export/csv": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Export Report Csv",
        "description": "Export report data as CSV",
        "operationId": "list_export_report_csv",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(performance|coupons|referrals)$",
              "title": "Report Type"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "promotion_ids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Promotion Ids"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/analytics/export/json": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Export Report Json",
        "description": "Export report data as JSON",
        "operationId": "list_export_report_json",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(executive|performance|coupons|referrals)$",
              "title": "Report Type"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "promotion_ids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Promotion Ids"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/analytics/metrics/summary": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Get Metrics Summary",
        "description": "Get quick metrics summary for dashboard",
        "operationId": "list_get_metrics_summary",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/analytics/performance/trends": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Get Performance Trends",
        "description": "Get performance trends over time",
        "operationId": "list_get_performance_trends",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 7,
              "default": 30,
              "title": "Days"
            }
          },
          {
            "name": "promotion_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Promotion Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/analytics/customer-segments": {
      "get": {
        "tags": [
          "Promotion Analytics",
          "Promotion Analytics"
        ],
        "summary": "Get Customer Segment Analytics",
        "description": "Get analytics broken down by customer segments",
        "operationId": "list_get_customer_segment_analytics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/automation/create": {
      "post": {
        "tags": [
          "Marketing Automation",
          "Promotion Automation"
        ],
        "summary": "Create Automated Promotion",
        "description": "Create an automated promotion with trigger conditions\n\nTrigger Types:\n- customer_lifecycle: signup, birthday, win_back\n- purchase_behavior: high_value_purchase, category_purchase\n- cart_abandonment: abandoned cart recovery\n- loyalty_milestone: points_threshold, tier_upgrade\n- inventory_level: low_stock, overstock\n- weather_condition: temperature-based triggers\n- competitor_price: price monitoring triggers\n- seasonal_event: holiday and seasonal triggers",
        "operationId": "create_create_automated_promotion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_automated_promotion_api_v1_promotions_automation_create_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/automation/process-triggers": {
      "post": {
        "tags": [
          "Marketing Automation",
          "Promotion Automation"
        ],
        "summary": "Process Automation Triggers",
        "description": "Process automation triggers and activate relevant promotions\nThis is typically run by a background task scheduler",
        "operationId": "create_process_automation_triggers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Trigger Type"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/automation/customer-segment": {
      "post": {
        "tags": [
          "Marketing Automation",
          "Promotion Automation"
        ],
        "summary": "Create Customer Segment Promotion",
        "description": "Create a promotion targeted at specific customer segments\n\nSegment Criteria Types:\n- purchase_frequency: Based on order frequency\n- total_spent: Based on total spending\n- customer_attributes: Based on customer attributes",
        "operationId": "create_create_customer_segment_promotion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_customer_segment_promotion_api_v1_promotions_automation_customer_segment_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/automation/evaluate-segment/{customer_id}": {
      "post": {
        "tags": [
          "Marketing Automation",
          "Promotion Automation"
        ],
        "summary": "Evaluate Customer Segment",
        "description": "Evaluate if a customer belongs to a specific segment",
        "operationId": "create_evaluate_customer_segment",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Segment Criteria"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/automation/performance": {
      "get": {
        "tags": [
          "Marketing Automation",
          "Promotion Automation"
        ],
        "summary": "Get Automation Performance",
        "description": "Get performance metrics for automated promotions",
        "operationId": "list_get_automation_performance",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/automation/triggers/available": {
      "get": {
        "tags": [
          "Marketing Automation",
          "Promotion Automation"
        ],
        "summary": "Get Available Triggers",
        "description": "Get list of available automation triggers with their configuration options",
        "operationId": "list_get_available_triggers",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/automation/automation-rules": {
      "get": {
        "tags": [
          "Marketing Automation",
          "Promotion Automation"
        ],
        "summary": "Get Automation Rules",
        "description": "Get all automation rules with optional filtering",
        "operationId": "list_get_automation_rules",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "trigger_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Trigger Type"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/automation/rules/{rule_id}/toggle": {
      "put": {
        "tags": [
          "Marketing Automation",
          "Promotion Automation"
        ],
        "summary": "Toggle Automation Rule",
        "description": "Toggle an automation rule on/off",
        "operationId": "update_toggle_automation_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/automation/rules/{rule_id}": {
      "delete": {
        "tags": [
          "Marketing Automation",
          "Promotion Automation"
        ],
        "summary": "Delete Automation Rule",
        "description": "Delete an automation rule",
        "operationId": "delete_delete_automation_rule",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/automation/test-trigger": {
      "post": {
        "tags": [
          "Marketing Automation",
          "Promotion Automation"
        ],
        "summary": "Test Automation Trigger",
        "description": "Test an automation trigger without creating a promotion",
        "operationId": "create_test_automation_trigger",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_test_automation_trigger_api_v1_promotions_automation_test_trigger_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/coupons/": {
      "post": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Create Coupon",
        "description": "Create a new coupon",
        "operationId": "create_create_coupon",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/coupons/bulk": {
      "post": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Create Bulk Coupons",
        "description": "Create multiple coupons in bulk",
        "operationId": "create_create_bulk_coupons",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponBulkCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Coupon"
                  },
                  "type": "array",
                  "title": "Response Create Bulk Coupons Api V1 Promotions Coupons Bulk Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/coupons/validate": {
      "post": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Validate Coupon",
        "description": "Validate a coupon code and calculate potential discount",
        "operationId": "create_validate_coupon",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponValidationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/coupons/{coupon_code}/use": {
      "post": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Use Coupon",
        "description": "Mark a coupon as used and record the usage",
        "operationId": "create_use_coupon",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "coupon_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Coupon Code"
            }
          },
          {
            "name": "order_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          },
          {
            "name": "discount_amount",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "title": "Discount Amount"
            }
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customer Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Usage Context"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/coupons/customer/{customer_id}": {
      "get": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Get Customer Coupons",
        "description": "Get coupons available to a specific customer",
        "operationId": "get_get_customer_coupons_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Active Only"
            }
          },
          {
            "name": "include_expired",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Expired"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Coupon"
                  },
                  "title": "Response Get Customer Coupons Api V1 Promotions Coupons Customer  Customer Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/coupons/my-coupons": {
      "get": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Get My Coupons",
        "description": "Get coupons available to the current user",
        "operationId": "list_get_my_coupons",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Active Only"
            }
          },
          {
            "name": "include_expired",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Expired"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Coupon"
                  },
                  "title": "Response Get My Coupons Api V1 Promotions Coupons My Coupons Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/coupons/batch/{batch_id}": {
      "get": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Get Batch Coupons",
        "description": "Get all coupons from a specific batch",
        "operationId": "get_get_batch_coupons_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Batch Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Coupon"
                  },
                  "title": "Response Get Batch Coupons Api V1 Promotions Coupons Batch  Batch Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/coupons/usage-history": {
      "get": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Get Coupon Usage History",
        "description": "Get coupon usage history with filters",
        "operationId": "list_get_coupon_usage_history",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "coupon_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Coupon Id"
            }
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customer Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/coupons/{coupon_id}/deactivate": {
      "post": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Deactivate Coupon",
        "description": "Deactivate a coupon",
        "operationId": "create_deactivate_coupon",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "coupon_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Coupon Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/coupons/analytics": {
      "get": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Get Coupon Analytics",
        "description": "Get coupon usage analytics",
        "operationId": "list_get_coupon_analytics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Promotion Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/coupons/cleanup-expired": {
      "post": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Cleanup Expired Coupons",
        "description": "Remove or deactivate expired coupons (admin/cron task)",
        "operationId": "create_cleanup_expired_coupons",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/coupons/code/{coupon_code}": {
      "get": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Get Coupon By Code",
        "description": "Get coupon details by code (admin only)",
        "operationId": "get_get_coupon_by_code_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "coupon_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Coupon Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/coupons/generate-code": {
      "get": {
        "tags": [
          "Coupons",
          "coupons"
        ],
        "summary": "Generate Coupon Code",
        "description": "Generate a unique coupon code (for preview/testing)",
        "operationId": "list_generate_coupon_code",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 20,
              "minimum": 4,
              "default": 8,
              "title": "Length"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 10
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prefix"
            }
          },
          {
            "name": "suffix",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 10
                },
                {
                  "type": "null"
                }
              ],
              "title": "Suffix"
            }
          },
          {
            "name": "exclude_ambiguous",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Exclude Ambiguous"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/programs": {
      "post": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Create Referral Program",
        "description": "Create a new referral program",
        "operationId": "create_create_referral_program",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferralProgramCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralProgram"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Get Referral Programs",
        "description": "Get all referral programs",
        "operationId": "list_get_referral_programs",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Active Only"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferralProgram"
                  },
                  "title": "Response Get Referral Programs Api V1 Promotions Referrals Programs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/programs/{program_id}": {
      "get": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Get Referral Program",
        "description": "Get a specific referral program",
        "operationId": "get_get_referral_program_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "program_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Program Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralProgram"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/": {
      "post": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Create Referral",
        "description": "Create a new customer referral",
        "operationId": "create_create_referral",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "program_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Program Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerReferralCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerReferral"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/customer/{customer_id}/as-referrer": {
      "get": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Get Customer Referrals As Referrer",
        "description": "Get referrals made by a customer (as referrer)",
        "operationId": "get_get_customer_referrals_as_referrer_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ReferralStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerReferral"
                  },
                  "title": "Response Get Customer Referrals As Referrer Api V1 Promotions Referrals Customer  Customer Id  As Referrer Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/customer/{customer_id}/as-referee": {
      "get": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Get Customer Referrals As Referee",
        "description": "Get referrals received by a customer (as referee)",
        "operationId": "get_get_customer_referrals_as_referee_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ReferralStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerReferral"
                  },
                  "title": "Response Get Customer Referrals As Referee Api V1 Promotions Referrals Customer  Customer Id  As Referee Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/my-referrals": {
      "get": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Get My Referrals",
        "description": "Get referrals for the current user",
        "operationId": "list_get_my_referrals",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "as_referrer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "As Referrer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ReferralStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerReferral"
                  },
                  "title": "Response Get My Referrals Api V1 Promotions Referrals My Referrals Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/code/{referral_code}": {
      "get": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Get Referral By Code",
        "description": "Get referral details by code",
        "operationId": "get_get_referral_by_code_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "referral_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Referral Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerReferral"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/process-signup": {
      "post": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Process Referral Signup",
        "description": "Process when a referred customer signs up (internal API)",
        "operationId": "create_process_referral_signup",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "referee_email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Referee Email"
            }
          },
          {
            "name": "referee_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Referee Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/process-completion": {
      "post": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Process Referral Completion",
        "description": "Process referral completion when referee makes qualifying order (internal API)",
        "operationId": "create_process_referral_completion",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/{referral_id}/issue-rewards": {
      "post": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Issue Referral Rewards",
        "description": "Issue rewards for a completed referral",
        "operationId": "create_issue_referral_rewards",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "referral_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Referral Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/analytics": {
      "get": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Get Referral Analytics",
        "description": "Get referral program analytics",
        "operationId": "list_get_referral_analytics",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "program_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Program Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/expire-old": {
      "post": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Expire Old Referrals",
        "description": "Expire referrals that have passed their expiration date (admin/cron task)",
        "operationId": "create_expire_old_referrals",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/referrals/generate-code/{customer_id}": {
      "post": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Generate Referral Code",
        "description": "Generate a referral code for a customer (for preview/testing)",
        "operationId": "create_generate_referral_code",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Customer Id"
            }
          },
          {
            "name": "length",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 20,
              "minimum": 4,
              "default": 8,
              "title": "Length"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/referrals/programs/{program_id}/analytics": {
      "get": {
        "tags": [
          "Referral Program",
          "referrals"
        ],
        "summary": "Get Program Analytics",
        "description": "Get analytics for a specific referral program",
        "operationId": "get_get_program_analytics_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "program_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Program Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/scheduling/schedule": {
      "post": {
        "tags": [
          "Promotion Scheduling",
          "Promotion Scheduling"
        ],
        "summary": "Schedule Promotion",
        "description": "Schedule a promotion with advanced scheduling options\n\nSchedule Options:\n- recurrence_pattern: 'none', 'daily', 'weekly', 'monthly', 'custom'\n- recurrence_interval: Interval for recurrence (e.g., every 2 weeks)\n- recurrence_days: Days of week/month for recurrence\n- max_occurrences: Maximum number of occurrences\n- auto_activate: Automatically activate when start time is reached\n- auto_deactivate: Automatically deactivate at end time\n- cron_expression: Cron expression for custom scheduling",
        "operationId": "create_schedule_promotion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_schedule_promotion_api_v1_promotions_scheduling_schedule_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/scheduling/process": {
      "post": {
        "tags": [
          "Promotion Scheduling",
          "Promotion Scheduling"
        ],
        "summary": "Process Scheduled Promotions",
        "description": "Manually trigger processing of scheduled promotions\nThis is typically run by a background task scheduler",
        "operationId": "create_process_scheduled_promotions",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/scheduling/time-based": {
      "post": {
        "tags": [
          "Promotion Scheduling",
          "Promotion Scheduling"
        ],
        "summary": "Create Time Based Promotion",
        "description": "Create a promotion with time-based activation rules\n\nTime Rule Types:\n- hour_of_day: Active during specific hours\n- day_of_week: Active on specific days\n- date_range: Active within date range\n- special_event: Active on special event days",
        "operationId": "create_create_time_based_promotion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_time_based_promotion_api_v1_promotions_scheduling_time_based_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/scheduling/process-time-rules": {
      "post": {
        "tags": [
          "Promotion Scheduling",
          "Promotion Scheduling"
        ],
        "summary": "Process Time Based Promotions",
        "description": "Process all promotions with time-based rules",
        "operationId": "create_process_time_based_promotions",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/scheduling/sequence": {
      "post": {
        "tags": [
          "Promotion Scheduling",
          "Promotion Scheduling"
        ],
        "summary": "Create Promotion Sequence",
        "description": "Create a sequence of automated promotions\n\nEach promotion in the sequence should include:\n- data: PromotionCreate data\n- delay_after_previous: Delay in hours after previous promotion\n- depends_on: List of previous promotion positions this depends on",
        "operationId": "create_create_promotion_sequence",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_promotion_sequence_api_v1_promotions_scheduling_sequence_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/promotions/scheduling/scheduled": {
      "get": {
        "tags": [
          "Promotion Scheduling",
          "Promotion Scheduling"
        ],
        "summary": "Get Scheduled Promotions",
        "description": "Get all scheduled promotions within a date range",
        "operationId": "list_get_scheduled_promotions",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "include_recurring",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Recurring"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/scheduling/scheduled/{promotion_id}": {
      "delete": {
        "tags": [
          "Promotion Scheduling",
          "Promotion Scheduling"
        ],
        "summary": "Cancel Scheduled Promotion",
        "description": "Cancel a scheduled promotion",
        "operationId": "delete_cancel_scheduled_promotion",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          },
          {
            "name": "cancel_future_occurrences",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Cancel Future Occurrences"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/scheduling/time-rules/{promotion_id}/evaluate": {
      "get": {
        "tags": [
          "Promotion Scheduling",
          "Promotion Scheduling"
        ],
        "summary": "Evaluate Time Based Rules",
        "description": "Evaluate time-based rules for a specific promotion",
        "operationId": "get_evaluate_time_based_rules_by_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "promotion_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Promotion Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/scheduling/calendar": {
      "get": {
        "tags": [
          "Promotion Scheduling",
          "Promotion Scheduling"
        ],
        "summary": "Get Promotion Calendar",
        "description": "Get promotion calendar view for a specific month or year",
        "operationId": "list_get_promotion_calendar",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "maximum": 2100,
              "minimum": 2020,
              "title": "Year"
            }
          },
          {
            "name": "month",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 12,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Month"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/promotions/scheduling/preview": {
      "post": {
        "tags": [
          "Promotion Scheduling",
          "Promotion Scheduling"
        ],
        "summary": "Preview Schedule",
        "description": "Preview upcoming occurrences for a schedule configuration",
        "operationId": "create_preview_schedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_preview_schedule_api_v1_promotions_scheduling_preview_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/": {
      "get": {
        "summary": "Read Root",
        "operationId": "list_read_root",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/test-token": {
      "get": {
        "summary": "Test Token",
        "description": "Test endpoint to debug token issues - DISABLED IN PRODUCTION",
        "operationId": "list_test_token",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ABTestConfig": {
        "properties": {
          "test_name": {
            "type": "string",
            "title": "Test Name"
          },
          "variants": {
            "items": {
              "$ref": "#/components/schemas/ABTestVariant"
            },
            "type": "array",
            "title": "Variants"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "End Date"
          },
          "success_metric": {
            "type": "string",
            "title": "Success Metric"
          }
        },
        "type": "object",
        "required": [
          "test_name",
          "variants",
          "start_date",
          "end_date",
          "success_metric"
        ],
        "title": "ABTestConfig",
        "description": "A/B test configuration"
      },
      "ABTestVariant": {
        "properties": {
          "variant_name": {
            "type": "string",
            "title": "Variant Name"
          },
          "traffic_split": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Traffic Split"
          },
          "promotion_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Promotion Config"
          }
        },
        "type": "object",
        "required": [
          "variant_name",
          "traffic_split",
          "promotion_config"
        ],
        "title": "ABTestVariant",
        "description": "A/B test variant configuration"
      },
      "AIInsightSummary": {
        "properties": {
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          },
          "analysis_period": {
            "additionalProperties": {
              "type": "string",
              "format": "date"
            },
            "type": "object",
            "title": "Analysis Period"
          },
          "peak_times": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PeakTimeInsight"
              },
              {
                "type": "null"
              }
            ]
          },
          "product_insights": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProductInsight"
              },
              {
                "type": "null"
              }
            ]
          },
          "customer_insights": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerInsight"
              },
              {
                "type": "null"
              }
            ]
          },
          "seasonality": {
            "items": {
              "$ref": "#/components/schemas/SeasonalityPattern"
            },
            "type": "array",
            "title": "Seasonality"
          },
          "anomalies": {
            "items": {
              "$ref": "#/components/schemas/AnomalyDetection"
            },
            "type": "array",
            "title": "Anomalies"
          },
          "overall_recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Overall Recommendations"
          },
          "next_update": {
            "type": "string",
            "format": "date-time",
            "title": "Next Update"
          }
        },
        "type": "object",
        "required": [
          "analysis_period",
          "overall_recommendations",
          "next_update"
        ],
        "title": "AIInsightSummary",
        "description": "Comprehensive AI insights summary",
        "example": {
          "analysis_period": {
            "end": "2025-01-29",
            "start": "2025-01-01"
          },
          "generated_at": "2025-01-29T12:00:00",
          "next_update": "2025-01-30T00:00:00",
          "overall_recommendations": [
            "Optimize staffing for detected peak hours",
            "Stock up on trending products",
            "Launch retention campaign for at-risk segments"
          ]
        }
      },
      "ActiveOrdersResponse": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "tracking_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tracking Code"
          },
          "estimated_completion_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Completion Time"
          },
          "latest_event": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latest Event"
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "status",
          "created_at"
        ],
        "title": "ActiveOrdersResponse",
        "description": "Response schema for active orders list"
      },
      "AdjustmentType": {
        "type": "string",
        "enum": [
          "purchase",
          "sale",
          "waste",
          "transfer",
          "correction",
          "expired",
          "damaged",
          "recount",
          "consumption",
          "return"
        ],
        "title": "AdjustmentType",
        "description": "Inventory adjustment types"
      },
      "AggregationPeriod": {
        "type": "string",
        "enum": [
          "daily",
          "weekly",
          "monthly",
          "quarterly",
          "yearly"
        ],
        "title": "AggregationPeriod",
        "description": "Time period for data aggregation"
      },
      "AlertPriority": {
        "type": "string",
        "enum": [
          "low",
          "medium",
          "high",
          "critical"
        ],
        "title": "AlertPriority",
        "description": "Alert priority levels"
      },
      "AlertResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/InventoryAlert"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "size",
          "pages"
        ],
        "title": "AlertResponse"
      },
      "AlertSeverity": {
        "type": "string",
        "enum": [
          "info",
          "warning",
          "critical"
        ],
        "title": "AlertSeverity",
        "description": "Alert severity levels"
      },
      "AlertStatus": {
        "type": "string",
        "enum": [
          "pending",
          "acknowledged",
          "resolved",
          "dismissed"
        ],
        "title": "AlertStatus",
        "description": "Alert status enumeration"
      },
      "AnomalyDetection": {
        "properties": {
          "anomaly_date": {
            "type": "string",
            "format": "date",
            "title": "Anomaly Date"
          },
          "anomaly_type": {
            "type": "string",
            "title": "Anomaly Type",
            "description": "revenue_spike, order_drop, etc."
          },
          "severity": {
            "type": "string",
            "title": "Severity",
            "description": "high, medium, low"
          },
          "deviation_percentage": {
            "type": "number",
            "title": "Deviation Percentage"
          },
          "potential_causes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Potential Causes"
          },
          "affected_metrics": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Affected Metrics"
          }
        },
        "type": "object",
        "required": [
          "anomaly_date",
          "anomaly_type",
          "severity",
          "deviation_percentage",
          "potential_causes",
          "affected_metrics"
        ],
        "title": "AnomalyDetection",
        "description": "Anomaly detection results"
      },
      "AssignReviewRequest": {
        "properties": {
          "assignee_id": {
            "type": "integer",
            "title": "Assignee Id",
            "description": "User ID to assign the review to"
          }
        },
        "type": "object",
        "required": [
          "assignee_id"
        ],
        "title": "AssignReviewRequest",
        "description": "Request model for assigning a review"
      },
      "AssistantCapabilities": {
        "properties": {
          "supported_queries": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Queries"
          },
          "supported_metrics": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Metrics"
          },
          "supported_time_ranges": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Time Ranges"
          },
          "supported_visualizations": {
            "items": {
              "$ref": "#/components/schemas/ChartType"
            },
            "type": "array",
            "title": "Supported Visualizations"
          },
          "max_results_per_query": {
            "type": "integer",
            "title": "Max Results Per Query"
          },
          "rate_limits": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Rate Limits"
          },
          "available_data_sources": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Available Data Sources"
          }
        },
        "type": "object",
        "required": [
          "supported_queries",
          "supported_metrics",
          "supported_time_ranges",
          "supported_visualizations",
          "max_results_per_query",
          "rate_limits",
          "available_data_sources"
        ],
        "title": "AssistantCapabilities",
        "description": "Capabilities and limitations of the AI assistant"
      },
      "AttachmentResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrderAttachmentOut"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "AttachmentResponse"
      },
      "AuthenticationType": {
        "type": "string",
        "enum": [
          "hmac_sha256",
          "hmac_sha512",
          "api_key",
          "bearer_token",
          "oauth2",
          "custom"
        ],
        "title": "AuthenticationType",
        "description": "Types of webhook authentication"
      },
      "AutoCancellationConfigCreate": {
        "properties": {
          "tenant_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          },
          "team_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Team Id"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "threshold_minutes": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Threshold Minutes",
            "description": "Time threshold in minutes"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": true
          },
          "updated_by": {
            "type": "integer",
            "title": "Updated By"
          }
        },
        "type": "object",
        "required": [
          "status",
          "threshold_minutes",
          "updated_by"
        ],
        "title": "AutoCancellationConfigCreate"
      },
      "AutoCancellationConfigOut": {
        "properties": {
          "tenant_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          },
          "team_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Team Id"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "threshold_minutes": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Threshold Minutes",
            "description": "Time threshold in minutes"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": true
          },
          "updated_by": {
            "type": "integer",
            "title": "Updated By"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "status",
          "threshold_minutes",
          "updated_by",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "AutoCancellationConfigOut"
      },
      "AutoReconcileResponse": {
        "properties": {
          "total_processed": {
            "type": "integer",
            "title": "Total Processed"
          },
          "auto_matched": {
            "type": "integer",
            "title": "Auto Matched"
          },
          "remaining_pending": {
            "type": "integer",
            "title": "Remaining Pending"
          }
        },
        "type": "object",
        "required": [
          "total_processed",
          "auto_matched",
          "remaining_pending"
        ],
        "title": "AutoReconcileResponse"
      },
      "AutomationFrequency": {
        "type": "string",
        "enum": [
          "daily",
          "weekly",
          "monthly",
          "quarterly",
          "on_demand"
        ],
        "title": "AutomationFrequency",
        "description": "Automation frequency options"
      },
      "AvailabilityCreate": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "day_of_week": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DayOfWeek-Input"
              },
              {
                "type": "null"
              }
            ]
          },
          "specific_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Specific Date"
          },
          "start_time": {
            "type": "string",
            "format": "time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "time",
            "title": "End Time"
          },
          "status": {
            "$ref": "#/components/schemas/AvailabilityStatus",
            "default": "available"
          },
          "max_hours_per_day": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Hours Per Day"
          },
          "preferred_shifts": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Shifts"
          },
          "effective_from": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Effective From"
          },
          "effective_until": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Effective Until"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "start_time",
          "end_time"
        ],
        "title": "AvailabilityCreate"
      },
      "AvailabilityResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "staff_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Name"
          },
          "day_of_week": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/modules__staff__enums__scheduling_enums__DayOfWeek"
              },
              {
                "type": "null"
              }
            ]
          },
          "specific_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Specific Date"
          },
          "start_time": {
            "type": "string",
            "format": "time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "time",
            "title": "End Time"
          },
          "status": {
            "$ref": "#/components/schemas/AvailabilityStatus"
          },
          "max_hours_per_day": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Hours Per Day"
          },
          "preferred_shifts": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Shifts"
          },
          "effective_from": {
            "type": "string",
            "format": "date-time",
            "title": "Effective From"
          },
          "effective_until": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Effective Until"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "staff_id",
          "staff_name",
          "day_of_week",
          "specific_date",
          "start_time",
          "end_time",
          "status",
          "max_hours_per_day",
          "preferred_shifts",
          "effective_from",
          "effective_until",
          "notes",
          "created_at",
          "updated_at"
        ],
        "title": "AvailabilityResponse"
      },
      "AvailabilityStatus": {
        "type": "string",
        "enum": [
          "available",
          "unavailable",
          "preferred",
          "limited"
        ],
        "title": "AvailabilityStatus"
      },
      "BatchPredictionRequest": {
        "properties": {
          "predictions": {
            "items": {
              "$ref": "#/components/schemas/PredictionRequest"
            },
            "type": "array",
            "title": "Predictions"
          },
          "priority": {
            "type": "string",
            "title": "Priority",
            "description": "normal, high, low",
            "default": "normal"
          },
          "callback_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Callback Url"
          }
        },
        "type": "object",
        "required": [
          "predictions"
        ],
        "title": "BatchPredictionRequest",
        "description": "Request for batch predictions"
      },
      "BiometricCheckInRequest": {
        "properties": {
          "fingerprint_data": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fingerprint Data"
          },
          "face_data": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Face Data"
          },
          "device_id": {
            "type": "string",
            "title": "Device Id"
          },
          "location_lat": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location Lat"
          },
          "location_lng": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location Lng"
          }
        },
        "type": "object",
        "required": [
          "device_id"
        ],
        "title": "BiometricCheckInRequest"
      },
      "BiometricCheckInResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "staff_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Id"
          },
          "staff_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Name"
          },
          "check_in_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Check In Time"
          },
          "method": {
            "type": "string",
            "title": "Method"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message",
          "staff_id",
          "staff_name",
          "check_in_time",
          "method"
        ],
        "title": "BiometricCheckInResponse"
      },
      "Body_apply_discounts_to_order_api_v1_orders_orders__order_id__apply_discounts_post": {
        "properties": {
          "coupon_codes": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Coupon Codes"
          },
          "promotion_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Promotion Ids"
          }
        },
        "type": "object",
        "title": "Body_apply_discounts_to_order_api_v1_orders_orders__order_id__apply_discounts_post"
      },
      "Body_assign_user_to_variant_api_v1_promotions_ab_testing__test_id__assign_post": {
        "properties": {
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          }
        },
        "type": "object",
        "title": "Body_assign_user_to_variant_api_v1_promotions_ab_testing__test_id__assign_post"
      },
      "Body_broadcast_message_analytics_realtime_websocket_broadcast_post": {
        "properties": {
          "message_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Message Data"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "current_user"
        ],
        "title": "Body_broadcast_message_analytics_realtime_websocket_broadcast_post"
      },
      "Body_bulk_moderate_reviews_api_v1_reviews_bulk_moderate_post": {
        "properties": {
          "review_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Review Ids",
            "description": "List of review IDs"
          },
          "action": {
            "type": "string",
            "pattern": "^(approve|reject|flag|hide)$",
            "title": "Action",
            "description": "Moderation action"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Moderation notes"
          }
        },
        "type": "object",
        "required": [
          "review_ids",
          "action"
        ],
        "title": "Body_bulk_moderate_reviews_api_v1_reviews_bulk_moderate_post"
      },
      "Body_bulk_reject_refund_requests_api_v1_payments_refunds_bulk_reject_post": {
        "properties": {
          "request_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Request Ids"
          },
          "rejection_reason": {
            "type": "string",
            "maxLength": 500,
            "minLength": 10,
            "title": "Rejection Reason"
          }
        },
        "type": "object",
        "required": [
          "request_ids",
          "rejection_reason"
        ],
        "title": "Body_bulk_reject_refund_requests_api_v1_payments_refunds_bulk_reject_post"
      },
      "Body_bulk_update_menu_items_menu_items_bulk_update_post": {
        "properties": {
          "item_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Item Ids"
          },
          "updates": {
            "additionalProperties": true,
            "type": "object",
            "title": "Updates"
          }
        },
        "type": "object",
        "required": [
          "item_ids",
          "updates"
        ],
        "title": "Body_bulk_update_menu_items_menu_items_bulk_update_post"
      },
      "Body_calculate_order_discounts_api_v1_orders_orders__order_id__calculate_discounts_post": {
        "properties": {
          "coupon_codes": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Coupon Codes"
          },
          "promotion_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Promotion Ids"
          }
        },
        "type": "object",
        "title": "Body_calculate_order_discounts_api_v1_orders_orders__order_id__calculate_discounts_post"
      },
      "Body_calculate_tip_api_v1_payments_splits_tips_calculate_post": {
        "properties": {
          "subtotal": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Subtotal"
          },
          "tip_method": {
            "$ref": "#/components/schemas/TipMethod"
          },
          "tip_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Tip Value"
          },
          "current_total": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Total"
          }
        },
        "type": "object",
        "required": [
          "subtotal",
          "tip_method",
          "tip_value"
        ],
        "title": "Body_calculate_tip_api_v1_payments_splits_tips_calculate_post"
      },
      "Body_chat_rest_endpoint_api_v1_analytics_analytics_ai_assistant_chat_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/ChatRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_chat_rest_endpoint_api_v1_analytics_analytics_ai_assistant_chat_post"
      },
      "Body_compare_forecast_to_actuals_api_v1_analytics_analytics_predictive_forecast_comparison_post": {
        "properties": {
          "predictions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Predictions"
          },
          "actuals": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Actuals"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "current_user"
        ],
        "title": "Body_compare_forecast_to_actuals_api_v1_analytics_analytics_predictive_forecast_comparison_post"
      },
      "Body_configure_price_test_ai_recommendations_ai_recommendations_pricing_test_configure_post": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/PriceTestingConfig"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "config",
          "current_user"
        ],
        "title": "Body_configure_price_test_ai_recommendations_ai_recommendations_pricing_test_configure_post"
      },
      "Body_configure_price_test_api_v1_ai_ai_recommendations_pricing_test_configure_post": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/PriceTestingConfig"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "config",
          "current_user"
        ],
        "title": "Body_configure_price_test_api_v1_ai_ai_recommendations_pricing_test_configure_post"
      },
      "Body_create_ab_test_api_v1_promotions_ab_testing_create_post": {
        "properties": {
          "test_name": {
            "type": "string",
            "title": "Test Name"
          },
          "control_promotion": {
            "$ref": "#/components/schemas/PromotionCreate"
          },
          "variant_promotions": {
            "items": {
              "$ref": "#/components/schemas/PromotionCreate"
            },
            "type": "array",
            "title": "Variant Promotions"
          },
          "test_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Test Config"
          }
        },
        "type": "object",
        "required": [
          "test_name",
          "control_promotion",
          "variant_promotions",
          "test_config"
        ],
        "title": "Body_create_ab_test_api_v1_promotions_ab_testing_create_post"
      },
      "Body_create_alert_rule_analytics_alerts_rules_post": {
        "properties": {
          "notification_channels": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Notification Channels"
          },
          "notification_recipients": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Notification Recipients"
          }
        },
        "type": "object",
        "required": [
          "notification_channels",
          "notification_recipients"
        ],
        "title": "Body_create_alert_rule_analytics_alerts_rules_post"
      },
      "Body_create_automated_promotion_api_v1_promotions_automation_create_post": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "trigger_type": {
            "type": "string",
            "pattern": "^(customer_lifecycle|purchase_behavior|cart_abandonment|loyalty_milestone|inventory_level|weather_condition|competitor_price|seasonal_event)$",
            "title": "Trigger Type"
          },
          "trigger_conditions": {
            "additionalProperties": true,
            "type": "object",
            "title": "Trigger Conditions"
          },
          "promotion_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Promotion Config"
          },
          "automation_options": {
            "additionalProperties": true,
            "type": "object",
            "title": "Automation Options",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "name",
          "trigger_type",
          "trigger_conditions",
          "promotion_config"
        ],
        "title": "Body_create_automated_promotion_api_v1_promotions_automation_create_post"
      },
      "Body_create_batch_predictions_api_v1_analytics_analytics_predictive_batch_predictions_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/BatchPredictionRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_create_batch_predictions_api_v1_analytics_analytics_predictive_batch_predictions_post"
      },
      "Body_create_customer_segment_promotion_api_v1_promotions_automation_customer_segment_post": {
        "properties": {
          "segment_criteria": {
            "additionalProperties": true,
            "type": "object",
            "title": "Segment Criteria"
          },
          "promotion_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Promotion Config"
          }
        },
        "type": "object",
        "required": [
          "segment_criteria",
          "promotion_config"
        ],
        "title": "Body_create_customer_segment_promotion_api_v1_promotions_automation_customer_segment_post"
      },
      "Body_create_promotion_sequence_api_v1_promotions_scheduling_sequence_post": {
        "properties": {
          "sequence_name": {
            "type": "string",
            "title": "Sequence Name"
          },
          "promotions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Promotions"
          },
          "trigger_conditions": {
            "additionalProperties": true,
            "type": "object",
            "title": "Trigger Conditions"
          }
        },
        "type": "object",
        "required": [
          "sequence_name",
          "promotions",
          "trigger_conditions"
        ],
        "title": "Body_create_promotion_sequence_api_v1_promotions_scheduling_sequence_post"
      },
      "Body_create_time_based_promotion_api_v1_promotions_scheduling_time_based_post": {
        "properties": {
          "promotion_data": {
            "$ref": "#/components/schemas/PromotionCreate"
          },
          "time_rules": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Time Rules"
          }
        },
        "type": "object",
        "required": [
          "promotion_data",
          "time_rules"
        ],
        "title": "Body_create_time_based_promotion_api_v1_promotions_scheduling_time_based_post"
      },
      "Body_escalate_feedback_api_v1_feedback__feedback_id__escalate_post": {
        "properties": {
          "escalated_to": {
            "type": "integer",
            "title": "Escalated To",
            "description": "Staff member to escalate to"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason",
            "description": "Escalation reason"
          }
        },
        "type": "object",
        "required": [
          "escalated_to"
        ],
        "title": "Body_escalate_feedback_api_v1_feedback__feedback_id__escalate_post"
      },
      "Body_export_predictions_api_v1_analytics_analytics_predictive_export_predictions_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PredictionExportRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_export_predictions_api_v1_analytics_analytics_predictive_export_predictions_post"
      },
      "Body_export_to_csv_analytics_export_csv_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/SalesReportRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_export_to_csv_analytics_export_csv_post"
      },
      "Body_export_to_excel_analytics_export_excel_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/SalesReportRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_export_to_excel_analytics_export_excel_post"
      },
      "Body_export_to_pdf_analytics_export_pdf_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/SalesReportRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_export_to_pdf_analytics_export_pdf_post"
      },
      "Body_forecast_demand_api_v1_analytics_analytics_predictive_demand_forecast_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/DemandForecastRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_forecast_demand_api_v1_analytics_analytics_predictive_demand_forecast_post"
      },
      "Body_generate_ai_insights_ai_insights_generate_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/InsightRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_generate_ai_insights_ai_insights_generate_post"
      },
      "Body_generate_ai_insights_async_ai_insights_generate_async_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/InsightRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_generate_ai_insights_async_ai_insights_generate_async_post"
      },
      "Body_generate_detailed_sales_report_analytics_reports_sales_detailed_post": {
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/SalesFilterRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "filters",
          "current_user"
        ],
        "title": "Body_generate_detailed_sales_report_analytics_reports_sales_detailed_post"
      },
      "Body_generate_pricing_recommendations_ai_recommendations_ai_recommendations_pricing_generate_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/modules__ai_recommendations__schemas__pricing_schemas__BulkPricingRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_generate_pricing_recommendations_ai_recommendations_ai_recommendations_pricing_generate_post"
      },
      "Body_generate_pricing_recommendations_api_v1_ai_ai_recommendations_pricing_generate_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/modules__ai_recommendations__schemas__pricing_schemas__BulkPricingRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_generate_pricing_recommendations_api_v1_ai_ai_recommendations_pricing_generate_post"
      },
      "Body_generate_product_performance_report_analytics_reports_product_performance_post": {
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/SalesFilterRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "filters",
          "current_user"
        ],
        "title": "Body_generate_product_performance_report_analytics_reports_product_performance_post"
      },
      "Body_generate_sales_summary_analytics_reports_sales_summary_post": {
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/SalesFilterRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "filters",
          "current_user"
        ],
        "title": "Body_generate_sales_summary_analytics_reports_sales_summary_post"
      },
      "Body_generate_staff_performance_report_analytics_reports_staff_performance_post": {
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/SalesFilterRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "filters",
          "current_user"
        ],
        "title": "Body_generate_staff_performance_report_analytics_reports_staff_performance_post"
      },
      "Body_get_dashboard_layout_data_analytics_dashboard_layout_data_post": {
        "properties": {
          "layout": {
            "$ref": "#/components/schemas/DashboardLayout"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "layout",
          "current_user"
        ],
        "title": "Body_get_dashboard_layout_data_analytics_dashboard_layout_data_post"
      },
      "Body_get_widget_data_analytics_widgets_data_post": {
        "properties": {
          "widget_config": {
            "$ref": "#/components/schemas/WidgetConfiguration"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "widget_config",
          "current_user"
        ],
        "title": "Body_get_widget_data_analytics_widgets_data_post"
      },
      "Body_login_for_access_token_auth_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "format": "password",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_for_access_token_auth_login_post"
      },
      "Body_optimize_staffing_ai_recommendations_ai_recommendations_staffing_optimize_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/StaffingOptimizationRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_optimize_staffing_ai_recommendations_ai_recommendations_staffing_optimize_post"
      },
      "Body_optimize_staffing_api_v1_ai_ai_recommendations_staffing_optimize_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/StaffingOptimizationRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_optimize_staffing_api_v1_ai_ai_recommendations_staffing_optimize_post"
      },
      "Body_optimize_stock_levels_api_v1_analytics_analytics_predictive_stock_optimization_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/StockOptimizationRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_optimize_stock_levels_api_v1_analytics_analytics_predictive_stock_optimization_post"
      },
      "Body_preview_schedule_api_v1_promotions_scheduling_preview_post": {
        "properties": {
          "schedule_options": {
            "additionalProperties": true,
            "type": "object",
            "title": "Schedule Options"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date"
          },
          "preview_count": {
            "type": "integer",
            "maximum": 50.0,
            "minimum": 1.0,
            "title": "Preview Count",
            "default": 10
          }
        },
        "type": "object",
        "required": [
          "schedule_options",
          "start_date"
        ],
        "title": "Body_preview_schedule_api_v1_promotions_scheduling_preview_post"
      },
      "Body_schedule_promotion_api_v1_promotions_scheduling_schedule_post": {
        "properties": {
          "promotion_data": {
            "$ref": "#/components/schemas/PromotionCreate"
          },
          "schedule_options": {
            "additionalProperties": true,
            "type": "object",
            "title": "Schedule Options"
          }
        },
        "type": "object",
        "required": [
          "promotion_data",
          "schedule_options"
        ],
        "title": "Body_schedule_promotion_api_v1_promotions_scheduling_schedule_post"
      },
      "Body_submit_large_report_analytics_async_large_report_post": {
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/SalesFilterRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "filters",
          "current_user"
        ],
        "title": "Body_submit_large_report_analytics_async_large_report_post"
      },
      "Body_test_automation_trigger_api_v1_promotions_automation_test_trigger_post": {
        "properties": {
          "trigger_type": {
            "type": "string",
            "title": "Trigger Type"
          },
          "trigger_conditions": {
            "additionalProperties": true,
            "type": "object",
            "title": "Trigger Conditions"
          }
        },
        "type": "object",
        "required": [
          "trigger_type",
          "trigger_conditions"
        ],
        "title": "Body_test_automation_trigger_api_v1_promotions_automation_test_trigger_post"
      },
      "Body_train_prediction_models_api_v1_analytics_analytics_predictive_train_models_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/ModelTrainingRequest"
          },
          "current_user": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current User"
          }
        },
        "type": "object",
        "required": [
          "request",
          "current_user"
        ],
        "title": "Body_train_prediction_models_api_v1_analytics_analytics_predictive_train_models_post"
      },
      "Body_update_review_aggregates_api_v1_reviews_aggregates_update_post": {
        "properties": {
          "entity_type": {
            "type": "string",
            "pattern": "^(product|service)$",
            "title": "Entity Type",
            "description": "Entity type"
          },
          "entity_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Ids",
            "description": "Specific entity IDs (optional)"
          },
          "batch_size": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Batch Size",
            "description": "Batch size",
            "default": 50
          }
        },
        "type": "object",
        "required": [
          "entity_type"
        ],
        "title": "Body_update_review_aggregates_api_v1_reviews_aggregates_update_post"
      },
      "Body_upload_attachment_orders__order_id__attachments_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_attachment_orders__order_id__attachments_post"
      },
      "Body_upload_refund_evidence_api_v1_payments_refunds_upload_evidence__request_id__post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "Body_upload_refund_evidence_api_v1_payments_refunds_upload_evidence__request_id__post"
      },
      "Body_validate_ab_test_config_api_v1_promotions_ab_testing_validate_config_post": {
        "properties": {
          "test_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Test Config"
          },
          "variant_count": {
            "type": "integer",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Variant Count"
          }
        },
        "type": "object",
        "required": [
          "test_config",
          "variant_count"
        ],
        "title": "Body_validate_ab_test_config_api_v1_promotions_ab_testing_validate_config_post"
      },
      "BreakType": {
        "type": "string",
        "enum": [
          "meal",
          "rest",
          "paid",
          "unpaid"
        ],
        "title": "BreakType"
      },
      "BulkAdjustmentRequest": {
        "properties": {
          "adjustments": {
            "items": {
              "$ref": "#/components/schemas/InventoryAdjustmentCreate"
            },
            "type": "array",
            "title": "Adjustments"
          },
          "reason": {
            "type": "string",
            "minLength": 1,
            "title": "Reason"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "adjustments",
          "reason"
        ],
        "title": "BulkAdjustmentRequest"
      },
      "BulkApprovalRequest": {
        "properties": {
          "request_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Request Ids"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "process_immediately": {
            "type": "boolean",
            "title": "Process Immediately",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "request_ids"
        ],
        "title": "BulkApprovalRequest"
      },
      "BulkCategoryUpdate": {
        "properties": {
          "category_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Category Ids"
          },
          "updates": {
            "$ref": "#/components/schemas/MenuCategoryUpdate"
          }
        },
        "type": "object",
        "required": [
          "category_ids",
          "updates"
        ],
        "title": "BulkCategoryUpdate"
      },
      "BulkChangeRequest": {
        "properties": {
          "entity_type": {
            "type": "string",
            "title": "Entity Type"
          },
          "entity_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Entity Ids"
          },
          "changes": {
            "additionalProperties": true,
            "type": "object",
            "title": "Changes"
          },
          "change_reason": {
            "type": "string",
            "title": "Change Reason"
          }
        },
        "type": "object",
        "required": [
          "entity_type",
          "entity_ids",
          "changes",
          "change_reason"
        ],
        "title": "BulkChangeRequest"
      },
      "BulkInventoryUpdate": {
        "properties": {
          "inventory_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Inventory Ids"
          },
          "updates": {
            "$ref": "#/components/schemas/core__inventory_schemas__InventoryUpdate"
          }
        },
        "type": "object",
        "required": [
          "inventory_ids",
          "updates"
        ],
        "title": "BulkInventoryUpdate"
      },
      "BulkMenuItemUpdate": {
        "properties": {
          "item_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Item Ids"
          },
          "updates": {
            "$ref": "#/components/schemas/MenuItemUpdate"
          }
        },
        "type": "object",
        "required": [
          "item_ids",
          "updates"
        ],
        "title": "BulkMenuItemUpdate"
      },
      "BulkPricingResponse": {
        "properties": {
          "pricing_results": {
            "items": {
              "$ref": "#/components/schemas/DynamicPricingResponse"
            },
            "type": "array",
            "title": "Pricing Results"
          },
          "total_original_price": {
            "type": "string",
            "title": "Total Original Price"
          },
          "total_calculated_price": {
            "type": "string",
            "title": "Total Calculated Price"
          },
          "total_savings": {
            "type": "string",
            "title": "Total Savings"
          }
        },
        "type": "object",
        "required": [
          "pricing_results",
          "total_original_price",
          "total_calculated_price",
          "total_savings"
        ],
        "title": "BulkPricingResponse"
      },
      "BulkProcessingRequest": {
        "properties": {
          "request_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Request Ids"
          }
        },
        "type": "object",
        "required": [
          "request_ids"
        ],
        "title": "BulkProcessingRequest"
      },
      "BulkRecipeUpdate": {
        "properties": {
          "recipe_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Recipe Ids"
          },
          "updates": {
            "$ref": "#/components/schemas/RecipeUpdate"
          }
        },
        "type": "object",
        "required": [
          "recipe_ids",
          "updates"
        ],
        "title": "BulkRecipeUpdate",
        "description": "Bulk update recipes"
      },
      "BulkRefundRequest": {
        "properties": {
          "refund_requests": {
            "items": {
              "$ref": "#/components/schemas/CreateRefundRequest"
            },
            "type": "array",
            "title": "Refund Requests"
          },
          "batch_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Batch Notes"
          },
          "auto_approve": {
            "type": "boolean",
            "title": "Auto Approve",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "refund_requests"
        ],
        "title": "BulkRefundRequest"
      },
      "BulkRefundResponse": {
        "properties": {
          "batch_id": {
            "type": "string",
            "title": "Batch Id"
          },
          "total_requests": {
            "type": "integer",
            "title": "Total Requests"
          },
          "successful": {
            "type": "integer",
            "title": "Successful"
          },
          "failed": {
            "type": "integer",
            "title": "Failed"
          },
          "results": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Results"
          },
          "errors": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Errors",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "batch_id",
          "total_requests",
          "successful",
          "failed",
          "results"
        ],
        "title": "BulkRefundResponse"
      },
      "BulkRewardIssuance": {
        "properties": {
          "customer_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 1000,
            "minItems": 1,
            "title": "Customer Ids"
          },
          "template_id": {
            "type": "integer",
            "title": "Template Id"
          },
          "custom_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Message"
          },
          "notify_customers": {
            "type": "boolean",
            "title": "Notify Customers",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "customer_ids",
          "template_id"
        ],
        "title": "BulkRewardIssuance",
        "description": "Schema for bulk reward issuance"
      },
      "BulkRewardIssuanceResponse": {
        "properties": {
          "total_customers": {
            "type": "integer",
            "title": "Total Customers"
          },
          "successful_issuances": {
            "type": "integer",
            "title": "Successful Issuances"
          },
          "failed_issuances": {
            "type": "integer",
            "title": "Failed Issuances"
          },
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Errors"
          },
          "issued_reward_codes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Issued Reward Codes"
          }
        },
        "type": "object",
        "required": [
          "total_customers",
          "successful_issuances",
          "failed_issuances",
          "errors",
          "issued_reward_codes"
        ],
        "title": "BulkRewardIssuanceResponse",
        "description": "Response for bulk reward issuance"
      },
      "BulkTableCreate": {
        "properties": {
          "floor_id": {
            "type": "integer",
            "title": "Floor Id"
          },
          "tables": {
            "items": {
              "$ref": "#/components/schemas/TableCreate"
            },
            "type": "array",
            "title": "Tables"
          }
        },
        "type": "object",
        "required": [
          "floor_id",
          "tables"
        ],
        "title": "BulkTableCreate",
        "description": "Bulk create tables"
      },
      "BulkTableStatusUpdate": {
        "properties": {
          "table_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Table Ids"
          },
          "status": {
            "$ref": "#/components/schemas/TableStatus"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "table_ids",
          "status"
        ],
        "title": "BulkTableStatusUpdate",
        "description": "Bulk update table status"
      },
      "BulkTableUpdate": {
        "properties": {
          "table_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Table Ids"
          },
          "update_data": {
            "$ref": "#/components/schemas/TableUpdate"
          }
        },
        "type": "object",
        "required": [
          "table_ids",
          "update_data"
        ],
        "title": "BulkTableUpdate",
        "description": "Bulk update tables"
      },
      "BusinessResponseCreate": {
        "properties": {
          "content": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 10,
            "title": "Content"
          },
          "responder_name": {
            "type": "string",
            "maxLength": 100,
            "title": "Responder Name"
          },
          "responder_title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Responder Title"
          },
          "responder_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Responder Id"
          },
          "is_published": {
            "type": "boolean",
            "title": "Is Published",
            "default": true
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "content",
          "responder_name"
        ],
        "title": "BusinessResponseCreate",
        "description": "Schema for creating business responses"
      },
      "CategoryCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CategoryCreate"
      },
      "CategoryOut": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "CategoryOut"
      },
      "ChangeType": {
        "type": "string",
        "enum": [
          "create",
          "update",
          "delete",
          "activate",
          "deactivate",
          "price_change",
          "availability_change",
          "category_change",
          "modifier_change"
        ],
        "title": "ChangeType"
      },
      "ChartData": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ChartType"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/DataPoint"
            },
            "type": "array",
            "title": "Data"
          },
          "x_axis_label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "X Axis Label"
          },
          "y_axis_label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Y Axis Label"
          },
          "config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config"
          }
        },
        "type": "object",
        "required": [
          "type",
          "title",
          "data"
        ],
        "title": "ChartData",
        "description": "Data structure for chart visualization"
      },
      "ChartType": {
        "type": "string",
        "enum": [
          "line",
          "bar",
          "pie",
          "area",
          "scatter",
          "heatmap",
          "gauge",
          "sparkline"
        ],
        "title": "ChartType",
        "description": "Types of charts for data visualization"
      },
      "ChatMessage": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique message ID"
          },
          "role": {
            "$ref": "#/components/schemas/MessageRole"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "type": {
            "$ref": "#/components/schemas/MessageType",
            "default": "text"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "role",
          "content"
        ],
        "title": "ChatMessage",
        "description": "Individual chat message"
      },
      "ChatRequest": {
        "properties": {
          "message": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Message"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          },
          "context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "ChatRequest",
        "description": "User chat request"
      },
      "ChatResponse": {
        "properties": {
          "message": {
            "$ref": "#/components/schemas/ChatMessage"
          },
          "query_result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QueryResult"
              },
              {
                "type": "null"
              }
            ]
          },
          "suggested_questions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suggested Questions"
          },
          "requires_clarification": {
            "type": "boolean",
            "title": "Requires Clarification",
            "default": false
          },
          "clarification_options": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Clarification Options"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "ChatResponse",
        "description": "AI assistant response"
      },
      "CheckpointType": {
        "type": "string",
        "enum": [
          "volume_check",
          "price_check",
          "timing_check",
          "pattern_check"
        ],
        "title": "CheckpointType"
      },
      "ConfidenceLevel": {
        "type": "string",
        "enum": [
          "high",
          "medium",
          "low"
        ],
        "title": "ConfidenceLevel",
        "description": "Confidence levels for AI predictions"
      },
      "ConflictInfo": {
        "properties": {
          "conflicting_rules": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Conflicting Rules"
          },
          "resolution_method": {
            "$ref": "#/components/schemas/ConflictResolution"
          },
          "selected_rule_id": {
            "type": "integer",
            "title": "Selected Rule Id"
          },
          "reason": {
            "type": "string",
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "conflicting_rules",
          "resolution_method",
          "selected_rule_id",
          "reason"
        ],
        "title": "ConflictInfo",
        "description": "Information about rule conflicts"
      },
      "ConflictResolution": {
        "type": "string",
        "enum": [
          "highest_discount",
          "first_match",
          "combine_additive",
          "combine_multiplicative",
          "priority_based"
        ],
        "title": "ConflictResolution",
        "description": "How to handle conflicting rules"
      },
      "ConflictResolutionMethod": {
        "type": "string",
        "enum": [
          "local_wins",
          "remote_wins",
          "merge",
          "manual",
          "ignore"
        ],
        "title": "ConflictResolutionMethod",
        "description": "Conflict resolution methods"
      },
      "ConflictResolutionRequest": {
        "properties": {
          "resolution_method": {
            "$ref": "#/components/schemas/ConflictResolutionMethod"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "final_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Final Data",
            "description": "Final data to use (for merge resolution)"
          }
        },
        "type": "object",
        "required": [
          "resolution_method"
        ],
        "title": "ConflictResolutionRequest",
        "description": "Request model for resolving conflicts"
      },
      "Coupon": {
        "properties": {
          "coupon_type": {
            "$ref": "#/components/schemas/CouponType",
            "default": "single_use"
          },
          "max_uses": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Uses",
            "default": 1
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "valid_from": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid From"
          },
          "valid_until": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Until"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "promotion_id": {
            "type": "integer",
            "title": "Promotion Id"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "current_uses": {
            "type": "integer",
            "title": "Current Uses"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "batch_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Batch Id"
          },
          "generation_method": {
            "type": "string",
            "title": "Generation Method"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid"
          },
          "remaining_uses": {
            "type": "integer",
            "title": "Remaining Uses"
          },
          "promotion": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PromotionSummary"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "promotion_id",
          "code",
          "current_uses",
          "is_active",
          "batch_id",
          "generation_method",
          "created_at",
          "updated_at",
          "is_valid",
          "remaining_uses"
        ],
        "title": "Coupon",
        "description": "Full coupon schema for responses"
      },
      "CouponBulkCreate": {
        "properties": {
          "promotion_id": {
            "type": "integer",
            "title": "Promotion Id"
          },
          "quantity": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 1.0,
            "title": "Quantity"
          },
          "coupon_type": {
            "$ref": "#/components/schemas/CouponType",
            "default": "multi_use"
          },
          "max_uses": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Uses",
            "default": 1
          },
          "prefix": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 10
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix"
          },
          "suffix": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 10
              },
              {
                "type": "null"
              }
            ],
            "title": "Suffix"
          },
          "length": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 4.0,
            "title": "Length",
            "default": 8
          },
          "valid_from": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid From"
          },
          "valid_until": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Until"
          }
        },
        "type": "object",
        "required": [
          "promotion_id",
          "quantity"
        ],
        "title": "CouponBulkCreate",
        "description": "Schema for bulk coupon creation"
      },
      "CouponCreate": {
        "properties": {
          "coupon_type": {
            "$ref": "#/components/schemas/CouponType",
            "default": "single_use"
          },
          "max_uses": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Uses",
            "default": 1
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "valid_from": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid From"
          },
          "valid_until": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Until"
          },
          "promotion_id": {
            "type": "integer",
            "title": "Promotion Id"
          },
          "code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          },
          "batch_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Batch Id"
          },
          "generation_method": {
            "type": "string",
            "title": "Generation Method",
            "default": "manual"
          }
        },
        "type": "object",
        "required": [
          "promotion_id"
        ],
        "title": "CouponCreate",
        "description": "Schema for creating a coupon"
      },
      "CouponType": {
        "type": "string",
        "enum": [
          "single_use",
          "multi_use",
          "unlimited",
          "customer_specific",
          "bulk_generated"
        ],
        "title": "CouponType",
        "description": "Types of coupons"
      },
      "CouponValidationRequest": {
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 50,
            "title": "Code"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "order_total": {
            "type": "number",
            "minimum": 0.0,
            "title": "Order Total"
          },
          "order_items": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Items"
          }
        },
        "type": "object",
        "required": [
          "code",
          "order_total"
        ],
        "title": "CouponValidationRequest",
        "description": "Schema for coupon validation requests"
      },
      "CouponValidationResponse": {
        "properties": {
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid"
          },
          "coupon": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Coupon"
              },
              {
                "type": "null"
              }
            ]
          },
          "discount_amount": {
            "type": "number",
            "title": "Discount Amount",
            "default": 0.0
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "applicable_items": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Applicable Items"
          }
        },
        "type": "object",
        "required": [
          "is_valid"
        ],
        "title": "CouponValidationResponse",
        "description": "Schema for coupon validation responses"
      },
      "CreatePricingRuleRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "rule_type": {
            "$ref": "#/components/schemas/RuleType"
          },
          "priority": {
            "type": "integer",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Priority",
            "default": 5
          },
          "discount_value": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Discount Value"
          },
          "max_discount_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Discount Amount"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "conditions": {
            "$ref": "#/components/schemas/PricingRuleConditions"
          },
          "valid_from": {
            "type": "string",
            "format": "date-time",
            "title": "Valid From"
          },
          "valid_until": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Until"
          },
          "max_uses_total": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Total"
          },
          "max_uses_per_customer": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Per Customer"
          },
          "stackable": {
            "type": "boolean",
            "title": "Stackable",
            "default": false
          },
          "excluded_rule_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Rule Ids"
          },
          "conflict_resolution": {
            "$ref": "#/components/schemas/ConflictResolution",
            "default": "highest_discount"
          },
          "requires_code": {
            "type": "boolean",
            "title": "Requires Code",
            "default": false
          },
          "promo_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Promo Code"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "rule_type",
          "discount_value"
        ],
        "title": "CreatePricingRuleRequest",
        "description": "Request to create a new pricing rule"
      },
      "CreateRefundRequest": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "payment_id": {
            "type": "integer",
            "title": "Payment Id"
          },
          "requested_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Requested Amount"
          },
          "reason_code": {
            "$ref": "#/components/schemas/RefundReason"
          },
          "reason_details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason Details"
          },
          "refund_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RefundItemRequest"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refund Items"
          },
          "evidence_urls": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Evidence Urls"
          },
          "priority": {
            "type": "string",
            "pattern": "^(urgent|high|normal|low)$",
            "title": "Priority",
            "default": "normal"
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "payment_id",
          "requested_amount",
          "reason_code"
        ],
        "title": "CreateRefundRequest"
      },
      "CreateSplitRequest": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "split_method": {
            "$ref": "#/components/schemas/SplitMethod"
          },
          "participants": {
            "items": {
              "$ref": "#/components/schemas/ParticipantRequest"
            },
            "type": "array",
            "title": "Participants"
          },
          "tip_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TipMethod"
              },
              {
                "type": "null"
              }
            ]
          },
          "tip_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tip Value"
          },
          "split_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Split Config"
          },
          "allow_partial_payments": {
            "type": "boolean",
            "title": "Allow Partial Payments",
            "default": true
          },
          "require_all_acceptance": {
            "type": "boolean",
            "title": "Require All Acceptance",
            "default": false
          },
          "auto_close_on_completion": {
            "type": "boolean",
            "title": "Auto Close On Completion",
            "default": true
          },
          "send_reminders": {
            "type": "boolean",
            "title": "Send Reminders",
            "default": true
          },
          "expires_in_hours": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires In Hours",
            "default": 48
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "split_method",
          "participants"
        ],
        "title": "CreateSplitRequest"
      },
      "CreateVersionRequest": {
        "properties": {
          "version_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "version_type": {
            "$ref": "#/components/schemas/VersionType",
            "default": "manual"
          },
          "include_inactive": {
            "type": "boolean",
            "title": "Include Inactive",
            "default": false
          },
          "scheduled_publish_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled Publish At"
          }
        },
        "type": "object",
        "title": "CreateVersionRequest"
      },
      "Customer": {
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "title": "Last Name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+?[1-9]\\d{1,14}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "date_of_birth": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Of Birth"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "dietary_preferences": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Preferences"
          },
          "allergens": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergens"
          },
          "communication_preferences": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "boolean"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Communication Preferences"
          },
          "marketing_opt_in": {
            "type": "boolean",
            "title": "Marketing Opt In",
            "default": true
          },
          "preferred_location_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Location Id"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "phone_verified": {
            "type": "boolean",
            "title": "Phone Verified"
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified"
          },
          "status": {
            "$ref": "#/components/schemas/CustomerStatus"
          },
          "tier": {
            "$ref": "#/components/schemas/CustomerTier"
          },
          "tier_updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tier Updated At"
          },
          "loyalty_points": {
            "type": "integer",
            "title": "Loyalty Points"
          },
          "lifetime_points": {
            "type": "integer",
            "title": "Lifetime Points"
          },
          "points_expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Points Expiry Date"
          },
          "referral_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referral Code"
          },
          "referred_by_customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referred By Customer Id"
          },
          "acquisition_date": {
            "type": "string",
            "format": "date-time",
            "title": "Acquisition Date"
          },
          "first_order_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Order Date"
          },
          "last_order_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Order Date"
          },
          "total_orders": {
            "type": "integer",
            "title": "Total Orders"
          },
          "total_spent": {
            "type": "number",
            "title": "Total Spent"
          },
          "average_order_value": {
            "type": "number",
            "title": "Average Order Value"
          },
          "last_login": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Login"
          },
          "login_count": {
            "type": "integer",
            "title": "Login Count"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          },
          "full_name": {
            "type": "string",
            "title": "Full Name"
          },
          "is_vip": {
            "type": "boolean",
            "title": "Is Vip"
          }
        },
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "id",
          "phone_verified",
          "email_verified",
          "status",
          "tier",
          "tier_updated_at",
          "loyalty_points",
          "lifetime_points",
          "points_expiry_date",
          "referral_code",
          "referred_by_customer_id",
          "acquisition_date",
          "first_order_date",
          "last_order_date",
          "total_orders",
          "total_spent",
          "average_order_value",
          "last_login",
          "login_count",
          "created_at",
          "updated_at",
          "deleted_at",
          "full_name",
          "is_vip"
        ],
        "title": "Customer",
        "description": "Schema for customer response"
      },
      "CustomerAddress": {
        "properties": {
          "label": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "address_line1": {
            "type": "string",
            "maxLength": 255,
            "title": "Address Line1"
          },
          "address_line2": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line2"
          },
          "city": {
            "type": "string",
            "maxLength": 100,
            "title": "City"
          },
          "state": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "postal_code": {
            "type": "string",
            "maxLength": 20,
            "title": "Postal Code"
          },
          "country": {
            "type": "string",
            "maxLength": 2,
            "pattern": "^[A-Z]{2}$",
            "title": "Country",
            "default": "US"
          },
          "delivery_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Instructions"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "default": false
          },
          "is_billing": {
            "type": "boolean",
            "title": "Is Billing",
            "default": false
          },
          "latitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latitude"
          },
          "longitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Longitude"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified"
          },
          "verified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Verified At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": [
          "address_line1",
          "city",
          "postal_code",
          "id",
          "customer_id",
          "is_verified",
          "verified_at",
          "created_at",
          "updated_at",
          "deleted_at"
        ],
        "title": "CustomerAddress",
        "description": "Schema for customer address response"
      },
      "CustomerAddressCreate": {
        "properties": {
          "label": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "address_line1": {
            "type": "string",
            "maxLength": 255,
            "title": "Address Line1"
          },
          "address_line2": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line2"
          },
          "city": {
            "type": "string",
            "maxLength": 100,
            "title": "City"
          },
          "state": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "postal_code": {
            "type": "string",
            "maxLength": 20,
            "title": "Postal Code"
          },
          "country": {
            "type": "string",
            "maxLength": 2,
            "pattern": "^[A-Z]{2}$",
            "title": "Country",
            "default": "US"
          },
          "delivery_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Instructions"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "default": false
          },
          "is_billing": {
            "type": "boolean",
            "title": "Is Billing",
            "default": false
          },
          "latitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latitude"
          },
          "longitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Longitude"
          }
        },
        "type": "object",
        "required": [
          "address_line1",
          "city",
          "postal_code"
        ],
        "title": "CustomerAddressCreate",
        "description": "Schema for creating a customer address"
      },
      "CustomerAddressUpdate": {
        "properties": {
          "label": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "address_line1": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line1"
          },
          "address_line2": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line2"
          },
          "city": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "state": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "postal_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Postal Code"
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2,
                "pattern": "^[A-Z]{2}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "delivery_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Instructions"
          },
          "is_default": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Default"
          },
          "is_billing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Billing"
          },
          "latitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latitude"
          },
          "longitude": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Longitude"
          }
        },
        "type": "object",
        "title": "CustomerAddressUpdate",
        "description": "Schema for updating a customer address"
      },
      "CustomerAnalytics": {
        "properties": {
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "total_orders": {
            "type": "integer",
            "title": "Total Orders"
          },
          "total_spent": {
            "type": "number",
            "title": "Total Spent"
          },
          "average_order_value": {
            "type": "number",
            "title": "Average Order Value"
          },
          "order_frequency_days": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Frequency Days"
          },
          "favorite_categories": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Favorite Categories"
          },
          "favorite_items": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Favorite Items"
          },
          "preferred_order_times": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Preferred Order Times"
          },
          "preferred_order_days": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Preferred Order Days"
          },
          "lifetime_value": {
            "type": "number",
            "title": "Lifetime Value"
          },
          "churn_risk_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Churn Risk Score"
          },
          "last_order_days_ago": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Order Days Ago"
          }
        },
        "type": "object",
        "required": [
          "customer_id",
          "total_orders",
          "total_spent",
          "average_order_value",
          "order_frequency_days",
          "favorite_categories",
          "favorite_items",
          "preferred_order_times",
          "preferred_order_days",
          "lifetime_value",
          "churn_risk_score",
          "last_order_days_ago"
        ],
        "title": "CustomerAnalytics",
        "description": "Customer analytics and insights"
      },
      "CustomerCreate": {
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "title": "Last Name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+?[1-9]\\d{1,14}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "date_of_birth": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Of Birth"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "dietary_preferences": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Preferences"
          },
          "allergens": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergens"
          },
          "communication_preferences": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "boolean"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Communication Preferences"
          },
          "marketing_opt_in": {
            "type": "boolean",
            "title": "Marketing Opt In",
            "default": true
          },
          "preferred_location_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Location Id"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "password": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 8
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          },
          "referral_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referral Code"
          },
          "acquisition_source": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Acquisition Source"
          }
        },
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email"
        ],
        "title": "CustomerCreate",
        "description": "Schema for creating a customer"
      },
      "CustomerInsight": {
        "properties": {
          "insight_type": {
            "$ref": "#/components/schemas/InsightType",
            "default": "customer_pattern"
          },
          "patterns_detected": {
            "items": {
              "$ref": "#/components/schemas/CustomerPattern"
            },
            "type": "array",
            "title": "Patterns Detected"
          },
          "repeat_customer_rate": {
            "type": "number",
            "title": "Repeat Customer Rate",
            "description": "Percentage of repeat customers"
          },
          "average_order_frequency": {
            "type": "number",
            "title": "Average Order Frequency",
            "description": "Orders per customer per month"
          },
          "churn_risk_segments": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Churn Risk Segments",
            "description": "Customer segments at risk"
          },
          "lifetime_value_trends": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Lifetime Value Trends",
            "description": "CLV by segment"
          },
          "confidence": {
            "$ref": "#/components/schemas/ConfidenceLevel"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations"
          }
        },
        "type": "object",
        "required": [
          "patterns_detected",
          "repeat_customer_rate",
          "average_order_frequency",
          "churn_risk_segments",
          "lifetime_value_trends",
          "confidence",
          "recommendations"
        ],
        "title": "CustomerInsight",
        "description": "AI insights for customer behavior"
      },
      "CustomerLoyaltyStats": {
        "properties": {
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "loyalty_points": {
            "type": "integer",
            "title": "Loyalty Points"
          },
          "lifetime_points": {
            "type": "integer",
            "title": "Lifetime Points"
          },
          "tier": {
            "type": "string",
            "title": "Tier"
          },
          "total_rewards_received": {
            "type": "integer",
            "title": "Total Rewards Received"
          },
          "total_rewards_redeemed": {
            "type": "integer",
            "title": "Total Rewards Redeemed"
          },
          "total_discount_received": {
            "type": "number",
            "title": "Total Discount Received"
          },
          "points_earned_this_month": {
            "type": "integer",
            "title": "Points Earned This Month"
          },
          "points_redeemed_this_month": {
            "type": "integer",
            "title": "Points Redeemed This Month"
          },
          "next_tier_points_needed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Tier Points Needed"
          }
        },
        "type": "object",
        "required": [
          "customer_id",
          "loyalty_points",
          "lifetime_points",
          "tier",
          "total_rewards_received",
          "total_rewards_redeemed",
          "total_discount_received",
          "points_earned_this_month",
          "points_redeemed_this_month",
          "next_tier_points_needed"
        ],
        "title": "CustomerLoyaltyStats",
        "description": "Schema for customer loyalty statistics"
      },
      "CustomerNotesUpdate": {
        "properties": {
          "customer_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Notes"
          }
        },
        "type": "object",
        "title": "CustomerNotesUpdate"
      },
      "CustomerPattern": {
        "properties": {
          "pattern_name": {
            "type": "string",
            "title": "Pattern Name",
            "description": "Name of the pattern"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Pattern description"
          },
          "customer_segment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Segment",
            "description": "Customer segment affected"
          },
          "frequency": {
            "type": "string",
            "title": "Frequency",
            "description": "daily, weekly, monthly"
          },
          "impact_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Impact Score",
            "description": "Business impact (0-1)"
          },
          "examples": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Examples",
            "description": "Example occurrences"
          }
        },
        "type": "object",
        "required": [
          "pattern_name",
          "description",
          "frequency",
          "impact_score",
          "examples"
        ],
        "title": "CustomerPattern",
        "description": "Customer behavior pattern"
      },
      "CustomerPaymentMethod": {
        "properties": {
          "type": {
            "type": "string",
            "maxLength": 50,
            "title": "Type"
          },
          "label": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "card_last4": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Last4"
          },
          "card_brand": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Brand"
          },
          "card_exp_month": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Exp Month"
          },
          "card_exp_year": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Exp Year"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "type",
          "id",
          "customer_id",
          "card_last4",
          "card_brand",
          "card_exp_month",
          "card_exp_year",
          "is_active",
          "created_at",
          "updated_at"
        ],
        "title": "CustomerPaymentMethod",
        "description": "Schema for payment method response"
      },
      "CustomerPreference": {
        "properties": {
          "category": {
            "type": "string",
            "maxLength": 50,
            "title": "Category"
          },
          "preference_key": {
            "type": "string",
            "maxLength": 100,
            "title": "Preference Key"
          },
          "preference_value": {
            "title": "Preference Value"
          },
          "source": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          },
          "confidence_score": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence Score"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "category",
          "preference_key",
          "preference_value",
          "id",
          "customer_id",
          "created_at",
          "updated_at"
        ],
        "title": "CustomerPreference",
        "description": "Schema for preference response"
      },
      "CustomerPreferenceCreate": {
        "properties": {
          "category": {
            "type": "string",
            "maxLength": 50,
            "title": "Category"
          },
          "preference_key": {
            "type": "string",
            "maxLength": 100,
            "title": "Preference Key"
          },
          "preference_value": {
            "title": "Preference Value"
          },
          "source": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          },
          "confidence_score": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence Score"
          }
        },
        "type": "object",
        "required": [
          "category",
          "preference_key",
          "preference_value"
        ],
        "title": "CustomerPreferenceCreate",
        "description": "Schema for creating a preference"
      },
      "CustomerProfile": {
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "title": "Last Name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+?[1-9]\\d{1,14}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "date_of_birth": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Of Birth"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "dietary_preferences": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Preferences"
          },
          "allergens": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergens"
          },
          "communication_preferences": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "boolean"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Communication Preferences"
          },
          "marketing_opt_in": {
            "type": "boolean",
            "title": "Marketing Opt In",
            "default": true
          },
          "preferred_location_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Location Id"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "phone_verified": {
            "type": "boolean",
            "title": "Phone Verified"
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified"
          },
          "status": {
            "$ref": "#/components/schemas/CustomerStatus"
          },
          "tier": {
            "$ref": "#/components/schemas/CustomerTier"
          },
          "tier_updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tier Updated At"
          },
          "loyalty_points": {
            "type": "integer",
            "title": "Loyalty Points"
          },
          "lifetime_points": {
            "type": "integer",
            "title": "Lifetime Points"
          },
          "points_expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Points Expiry Date"
          },
          "referral_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referral Code"
          },
          "referred_by_customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referred By Customer Id"
          },
          "acquisition_date": {
            "type": "string",
            "format": "date-time",
            "title": "Acquisition Date"
          },
          "first_order_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Order Date"
          },
          "last_order_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Order Date"
          },
          "total_orders": {
            "type": "integer",
            "title": "Total Orders"
          },
          "total_spent": {
            "type": "number",
            "title": "Total Spent"
          },
          "average_order_value": {
            "type": "number",
            "title": "Average Order Value"
          },
          "last_login": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Login"
          },
          "login_count": {
            "type": "integer",
            "title": "Login Count"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          },
          "full_name": {
            "type": "string",
            "title": "Full Name"
          },
          "is_vip": {
            "type": "boolean",
            "title": "Is Vip"
          },
          "addresses": {
            "items": {
              "$ref": "#/components/schemas/CustomerAddress"
            },
            "type": "array",
            "title": "Addresses",
            "default": []
          },
          "default_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomerAddress"
              },
              {
                "type": "null"
              }
            ]
          },
          "payment_methods": {
            "items": {
              "$ref": "#/components/schemas/CustomerPaymentMethod"
            },
            "type": "array",
            "title": "Payment Methods",
            "default": []
          },
          "recent_orders": {
            "items": {
              "$ref": "#/components/schemas/OrderSummary"
            },
            "type": "array",
            "title": "Recent Orders",
            "default": []
          },
          "favorite_items": {
            "items": {
              "$ref": "#/components/schemas/MenuItemSummary"
            },
            "type": "array",
            "title": "Favorite Items",
            "default": []
          },
          "active_rewards": {
            "items": {
              "$ref": "#/components/schemas/modules__customers__schemas__customer_schemas__CustomerReward"
            },
            "type": "array",
            "title": "Active Rewards",
            "default": []
          },
          "preferences": {
            "additionalProperties": true,
            "type": "object",
            "title": "Preferences",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "id",
          "phone_verified",
          "email_verified",
          "status",
          "tier",
          "tier_updated_at",
          "loyalty_points",
          "lifetime_points",
          "points_expiry_date",
          "referral_code",
          "referred_by_customer_id",
          "acquisition_date",
          "first_order_date",
          "last_order_date",
          "total_orders",
          "total_spent",
          "average_order_value",
          "last_login",
          "login_count",
          "created_at",
          "updated_at",
          "deleted_at",
          "full_name",
          "is_vip"
        ],
        "title": "CustomerProfile",
        "description": "Complete customer profile with all related data"
      },
      "CustomerReferral": {
        "properties": {
          "referee_email": {
            "type": "string",
            "maxLength": 255,
            "title": "Referee Email"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "program_id": {
            "type": "integer",
            "title": "Program Id"
          },
          "referrer_id": {
            "type": "integer",
            "title": "Referrer Id"
          },
          "referee_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referee Id"
          },
          "referral_code": {
            "type": "string",
            "title": "Referral Code"
          },
          "status": {
            "$ref": "#/components/schemas/ReferralStatus"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "qualifying_order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Qualifying Order Id"
          },
          "referrer_rewarded": {
            "type": "boolean",
            "title": "Referrer Rewarded"
          },
          "referee_rewarded": {
            "type": "boolean",
            "title": "Referee Rewarded"
          },
          "referrer_reward_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referrer Reward Amount"
          },
          "referee_reward_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referee Reward Amount"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "referee_email",
          "id",
          "program_id",
          "referrer_id",
          "referee_id",
          "referral_code",
          "status",
          "completed_at",
          "qualifying_order_id",
          "referrer_rewarded",
          "referee_rewarded",
          "referrer_reward_amount",
          "referee_reward_amount",
          "expires_at",
          "created_at",
          "updated_at"
        ],
        "title": "CustomerReferral",
        "description": "Full customer referral schema"
      },
      "CustomerReferralCreate": {
        "properties": {
          "referee_email": {
            "type": "string",
            "maxLength": 255,
            "title": "Referee Email"
          },
          "program_id": {
            "type": "integer",
            "title": "Program Id"
          },
          "referrer_id": {
            "type": "integer",
            "title": "Referrer Id"
          }
        },
        "type": "object",
        "required": [
          "referee_email",
          "program_id",
          "referrer_id"
        ],
        "title": "CustomerReferralCreate",
        "description": "Schema for creating a referral"
      },
      "CustomerRewardSummary": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "reward_type": {
            "$ref": "#/components/schemas/RewardTypeEnum"
          },
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "percentage": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Percentage"
          },
          "status": {
            "$ref": "#/components/schemas/RewardStatusEnum"
          },
          "valid_until": {
            "type": "string",
            "format": "date-time",
            "title": "Valid Until"
          },
          "days_until_expiry": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Days Until Expiry"
          }
        },
        "type": "object",
        "required": [
          "id",
          "code",
          "title",
          "reward_type",
          "value",
          "percentage",
          "status",
          "valid_until",
          "days_until_expiry"
        ],
        "title": "CustomerRewardSummary",
        "description": "Simplified customer reward for listings"
      },
      "CustomerSearchResponse": {
        "properties": {
          "customers": {
            "items": {
              "$ref": "#/components/schemas/Customer"
            },
            "type": "array",
            "title": "Customers"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          }
        },
        "type": "object",
        "required": [
          "customers",
          "total",
          "page",
          "page_size",
          "total_pages"
        ],
        "title": "CustomerSearchResponse",
        "description": "Response for customer search"
      },
      "CustomerStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "suspended",
          "deleted"
        ],
        "title": "CustomerStatus",
        "description": "Customer account status"
      },
      "CustomerStatusUpdate": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CustomerStatus"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "CustomerStatusUpdate",
        "description": "Schema for updating customer status"
      },
      "CustomerTier": {
        "type": "string",
        "enum": [
          "bronze",
          "silver",
          "gold",
          "platinum",
          "vip"
        ],
        "title": "CustomerTier",
        "description": "Customer loyalty tier levels"
      },
      "CustomerTierUpdate": {
        "properties": {
          "tier": {
            "$ref": "#/components/schemas/CustomerTier"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "tier"
        ],
        "title": "CustomerTierUpdate",
        "description": "Schema for updating customer tier"
      },
      "CustomerTrackingCreate": {
        "properties": {
          "notification_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notification Email"
          },
          "notification_phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notification Phone"
          },
          "enable_notifications": {
            "type": "boolean",
            "title": "Enable Notifications",
            "default": true
          }
        },
        "type": "object",
        "title": "CustomerTrackingCreate",
        "description": "Schema for creating customer tracking"
      },
      "CustomerUpdate": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\+?[1-9]\\d{1,14}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "date_of_birth": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Of Birth"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "profile_image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Image Url"
          },
          "dietary_preferences": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Preferences"
          },
          "allergens": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergens"
          },
          "communication_preferences": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "boolean"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Communication Preferences"
          },
          "marketing_opt_in": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Marketing Opt In"
          },
          "preferred_location_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Location Id"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "custom_fields": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Fields"
          }
        },
        "type": "object",
        "title": "CustomerUpdate",
        "description": "Schema for updating a customer"
      },
      "DashboardLayout": {
        "properties": {
          "layout_id": {
            "type": "string",
            "title": "Layout Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "widgets": {
            "items": {
              "$ref": "#/components/schemas/WidgetConfiguration"
            },
            "type": "array",
            "title": "Widgets"
          },
          "created_by": {
            "type": "integer",
            "title": "Created By"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "default": false
          },
          "is_public": {
            "type": "boolean",
            "title": "Is Public",
            "default": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "layout_id",
          "name",
          "widgets",
          "created_by"
        ],
        "title": "DashboardLayout",
        "description": "Dashboard layout configuration"
      },
      "DashboardMetricsResponse": {
        "properties": {
          "current_period": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current Period",
            "description": "Current period metrics"
          },
          "previous_period": {
            "additionalProperties": true,
            "type": "object",
            "title": "Previous Period",
            "description": "Previous period for comparison"
          },
          "today_revenue": {
            "type": "string",
            "title": "Today Revenue"
          },
          "today_orders": {
            "type": "integer",
            "title": "Today Orders"
          },
          "today_customers": {
            "type": "integer",
            "title": "Today Customers"
          },
          "revenue_growth_percentage": {
            "type": "string",
            "title": "Revenue Growth Percentage"
          },
          "order_growth_percentage": {
            "type": "string",
            "title": "Order Growth Percentage"
          },
          "customer_growth_percentage": {
            "type": "string",
            "title": "Customer Growth Percentage"
          },
          "top_staff": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Top Staff",
            "description": "Top performing staff"
          },
          "top_products": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Top Products",
            "description": "Top selling products"
          },
          "revenue_trend": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Revenue Trend",
            "description": "Revenue trend data"
          },
          "order_trend": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Order Trend",
            "description": "Order count trend data"
          },
          "active_alerts": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Active Alerts",
            "description": "Active alert conditions"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "current_period",
          "previous_period",
          "today_revenue",
          "today_orders",
          "today_customers",
          "revenue_growth_percentage",
          "order_growth_percentage",
          "customer_growth_percentage",
          "top_staff",
          "top_products",
          "revenue_trend",
          "order_trend",
          "active_alerts",
          "last_updated"
        ],
        "title": "DashboardMetricsResponse",
        "description": "Response schema for dashboard metrics"
      },
      "DataPoint": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label"
          },
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "title": "Value"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "label",
          "value"
        ],
        "title": "DataPoint",
        "description": "Single data point for charts/tables"
      },
      "DayOfWeek-Input": {
        "type": "integer",
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "title": "DayOfWeek"
      },
      "DebugTraceEntry": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "event_type": {
            "type": "string",
            "title": "Event Type"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "event_type",
          "message"
        ],
        "title": "DebugTraceEntry",
        "description": "Single debug trace entry"
      },
      "DeductedItem": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "item_name": {
            "type": "string",
            "title": "Item Name"
          },
          "quantity_deducted": {
            "type": "number",
            "title": "Quantity Deducted"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "new_quantity": {
            "type": "number",
            "title": "New Quantity"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "item_name",
          "quantity_deducted",
          "unit",
          "new_quantity"
        ],
        "title": "DeductedItem",
        "description": "Information about a deducted inventory item"
      },
      "DelayFulfillmentRequest": {
        "properties": {
          "scheduled_fulfillment_time": {
            "type": "string",
            "format": "date-time",
            "title": "Scheduled Fulfillment Time"
          },
          "delay_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delay Reason"
          },
          "additional_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Notes"
          }
        },
        "type": "object",
        "required": [
          "scheduled_fulfillment_time"
        ],
        "title": "DelayFulfillmentRequest"
      },
      "DemandForecast": {
        "properties": {
          "entity_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Id"
          },
          "entity_type": {
            "type": "string",
            "title": "Entity Type"
          },
          "entity_name": {
            "type": "string",
            "title": "Entity Name"
          },
          "predictions": {
            "items": {
              "$ref": "#/components/schemas/PredictionPoint"
            },
            "type": "array",
            "title": "Predictions"
          },
          "metadata": {
            "$ref": "#/components/schemas/ForecastMetadata"
          },
          "insights": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Insights"
          },
          "recommended_actions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recommended Actions"
          }
        },
        "type": "object",
        "required": [
          "entity_id",
          "entity_type",
          "entity_name",
          "predictions",
          "metadata",
          "insights",
          "recommended_actions"
        ],
        "title": "DemandForecast",
        "description": "Demand forecast response"
      },
      "DemandForecastRequest": {
        "properties": {
          "entity_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Id",
            "description": "ID of specific entity (product/category)"
          },
          "entity_type": {
            "type": "string",
            "title": "Entity Type",
            "description": "Type of entity: product, category, overall"
          },
          "forecast_type": {
            "$ref": "#/components/schemas/ForecastType"
          },
          "time_granularity": {
            "$ref": "#/components/schemas/TimeGranularity",
            "default": "daily"
          },
          "horizon_days": {
            "type": "integer",
            "maximum": 365.0,
            "minimum": 1.0,
            "title": "Horizon Days",
            "description": "Forecast horizon in days",
            "default": 7
          },
          "include_confidence_intervals": {
            "type": "boolean",
            "title": "Include Confidence Intervals",
            "default": true
          },
          "model_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelType"
              },
              {
                "type": "null"
              }
            ]
          },
          "custom_parameters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Parameters"
          },
          "include_external_factors": {
            "type": "boolean",
            "title": "Include External Factors",
            "default": true
          },
          "external_factors": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Factors",
            "description": "External factors like weather, events, holidays"
          }
        },
        "type": "object",
        "required": [
          "entity_type",
          "forecast_type"
        ],
        "title": "DemandForecastRequest",
        "description": "Request for demand forecasting"
      },
      "DiscountCalculationRequest": {
        "properties": {
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "order_total": {
            "type": "number",
            "minimum": 0.0,
            "title": "Order Total"
          },
          "order_items": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Order Items"
          },
          "coupon_codes": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Coupon Codes"
          },
          "promotion_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Promotion Ids"
          },
          "customer_tier": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tier"
          }
        },
        "type": "object",
        "required": [
          "order_total",
          "order_items"
        ],
        "title": "DiscountCalculationRequest",
        "description": "Request for calculating discounts"
      },
      "DiscountCalculationResponse": {
        "properties": {
          "original_total": {
            "type": "number",
            "title": "Original Total"
          },
          "final_total": {
            "type": "number",
            "title": "Final Total"
          },
          "total_discount": {
            "type": "number",
            "title": "Total Discount"
          },
          "applied_promotions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Applied Promotions"
          },
          "applicable_promotions": {
            "items": {
              "$ref": "#/components/schemas/PromotionSummary"
            },
            "type": "array",
            "title": "Applicable Promotions"
          },
          "invalid_coupons": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Invalid Coupons"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings"
          }
        },
        "type": "object",
        "required": [
          "original_total",
          "final_total",
          "total_discount",
          "applied_promotions",
          "applicable_promotions",
          "invalid_coupons",
          "warnings"
        ],
        "title": "DiscountCalculationResponse",
        "description": "Response for discount calculations"
      },
      "DiscountTarget": {
        "type": "string",
        "enum": [
          "order_total",
          "shipping",
          "specific_items",
          "categories",
          "brands",
          "minimum_quantity"
        ],
        "title": "DiscountTarget",
        "description": "What the discount applies to"
      },
      "DiscrepancyType": {
        "type": "string",
        "enum": [
          "amount_mismatch",
          "missing_payment",
          "duplicate_payment"
        ],
        "title": "DiscrepancyType"
      },
      "DisplayStatus": {
        "type": "string",
        "enum": [
          "pending",
          "in_progress",
          "ready",
          "recalled",
          "completed",
          "cancelled"
        ],
        "title": "DisplayStatus",
        "description": "Order item display status"
      },
      "DomainInsightsResponse": {
        "properties": {
          "domain": {
            "type": "string",
            "title": "Domain"
          },
          "analysis_period": {
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "type": "object",
            "title": "Analysis Period"
          },
          "total_suggestions": {
            "type": "integer",
            "title": "Total Suggestions"
          },
          "unique_users": {
            "type": "integer",
            "title": "Unique Users"
          },
          "suggestions_per_user": {
            "type": "number",
            "title": "Suggestions Per User"
          },
          "peak_usage_hour": {
            "type": "integer",
            "maximum": 23.0,
            "minimum": 0.0,
            "title": "Peak Usage Hour"
          },
          "models_used": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Models Used"
          },
          "primary_model": {
            "type": "string",
            "title": "Primary Model"
          },
          "model_performance": {
            "items": {
              "$ref": "#/components/schemas/ModelPerformanceResponse"
            },
            "type": "array",
            "title": "Model Performance"
          },
          "overall_satisfaction": {
            "type": "number",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Overall Satisfaction"
          },
          "feedback_sentiment": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Feedback Sentiment",
            "description": "Sentiment breakdown (positive, neutral, negative)"
          },
          "top_use_cases": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Top Use Cases"
          },
          "common_issues": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Common Issues"
          },
          "improvement_suggestions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Improvement Suggestions"
          },
          "usage_trend": {
            "type": "string",
            "title": "Usage Trend",
            "description": "increasing, stable, or decreasing"
          },
          "satisfaction_trend": {
            "type": "string",
            "title": "Satisfaction Trend",
            "description": "improving, stable, or declining"
          }
        },
        "type": "object",
        "required": [
          "domain",
          "analysis_period",
          "total_suggestions",
          "unique_users",
          "suggestions_per_user",
          "peak_usage_hour",
          "models_used",
          "primary_model",
          "model_performance",
          "overall_satisfaction",
          "feedback_sentiment",
          "top_use_cases",
          "common_issues",
          "improvement_suggestions",
          "usage_trend",
          "satisfaction_trend"
        ],
        "title": "DomainInsightsResponse",
        "description": "Detailed insights for a specific domain"
      },
      "DynamicPricingRequest": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "base_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Base Price"
          },
          "context": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PricingContext"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "quantity",
          "base_price"
        ],
        "title": "DynamicPricingRequest"
      },
      "DynamicPricingResponse": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "original_price": {
            "type": "string",
            "title": "Original Price"
          },
          "calculated_price": {
            "type": "string",
            "title": "Calculated Price"
          },
          "adjustments": {
            "items": {
              "$ref": "#/components/schemas/PriceAdjustment"
            },
            "type": "array",
            "title": "Adjustments"
          },
          "confidence_score": {
            "type": "number",
            "title": "Confidence Score"
          },
          "pricing_source": {
            "type": "string",
            "title": "Pricing Source"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "original_price",
          "calculated_price",
          "adjustments",
          "confidence_score",
          "pricing_source",
          "timestamp"
        ],
        "title": "DynamicPricingResponse"
      },
      "EnhancedTaxCalculationRequest": {
        "properties": {
          "transaction_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transaction Id"
          },
          "transaction_date": {
            "type": "string",
            "format": "date",
            "title": "Transaction Date"
          },
          "location": {
            "$ref": "#/components/schemas/TaxCalculationLocation"
          },
          "line_items": {
            "items": {
              "$ref": "#/components/schemas/TaxCalculationLineItem"
            },
            "type": "array",
            "title": "Line Items"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "exemption_certificate_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exemption Certificate Id"
          },
          "shipping_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shipping Amount"
          },
          "discount_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Amount"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "transaction_date",
          "location",
          "line_items"
        ],
        "title": "EnhancedTaxCalculationRequest",
        "description": "Enhanced tax calculation request"
      },
      "EnhancedTaxCalculationResponse": {
        "properties": {
          "transaction_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transaction Id"
          },
          "calculation_date": {
            "type": "string",
            "format": "date-time",
            "title": "Calculation Date"
          },
          "subtotal": {
            "type": "string",
            "title": "Subtotal"
          },
          "taxable_amount": {
            "type": "string",
            "title": "Taxable Amount"
          },
          "exempt_amount": {
            "type": "string",
            "title": "Exempt Amount"
          },
          "total_tax": {
            "type": "string",
            "title": "Total Tax"
          },
          "total_amount": {
            "type": "string",
            "title": "Total Amount"
          },
          "line_results": {
            "items": {
              "$ref": "#/components/schemas/TaxCalculationResult"
            },
            "type": "array",
            "title": "Line Results"
          },
          "tax_summary_by_jurisdiction": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Tax Summary By Jurisdiction"
          },
          "applied_exemptions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Applied Exemptions"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "transaction_id",
          "calculation_date",
          "subtotal",
          "taxable_amount",
          "exempt_amount",
          "total_tax",
          "total_amount",
          "line_results",
          "tax_summary_by_jurisdiction",
          "applied_exemptions"
        ],
        "title": "EnhancedTaxCalculationResponse",
        "description": "Enhanced tax calculation response"
      },
      "EntityComparison": {
        "properties": {
          "entity_type": {
            "type": "string",
            "title": "Entity Type"
          },
          "entity_id": {
            "type": "integer",
            "title": "Entity Id"
          },
          "entity_name": {
            "type": "string",
            "title": "Entity Name"
          },
          "change_type": {
            "$ref": "#/components/schemas/ChangeType"
          },
          "field_changes": {
            "items": {
              "$ref": "#/components/schemas/FieldComparison"
            },
            "type": "array",
            "title": "Field Changes",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "entity_type",
          "entity_id",
          "entity_name",
          "change_type"
        ],
        "title": "EntityComparison"
      },
      "Equipment": {
        "properties": {
          "equipment_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Equipment Name",
            "description": "Name of the equipment"
          },
          "equipment_type": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Equipment Type",
            "description": "Type of equipment"
          },
          "manufacturer": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Manufacturer"
          },
          "model_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Number"
          },
          "serial_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Serial Number"
          },
          "purchase_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Purchase Date"
          },
          "warranty_expiry": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Warranty Expiry"
          },
          "location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "maintenance_interval_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintenance Interval Days",
            "description": "Days between preventive maintenance"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "is_critical": {
            "type": "boolean",
            "title": "Is Critical",
            "description": "Is this critical equipment?",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "status": {
            "$ref": "#/components/schemas/EquipmentStatus"
          },
          "last_maintenance_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Maintenance Date"
          },
          "next_due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Due Date"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "updated_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated By"
          }
        },
        "type": "object",
        "required": [
          "equipment_name",
          "equipment_type",
          "id",
          "status",
          "last_maintenance_date",
          "next_due_date",
          "is_active",
          "created_at",
          "updated_at",
          "created_by",
          "updated_by"
        ],
        "title": "Equipment",
        "description": "Schema for equipment response"
      },
      "EquipmentCreate": {
        "properties": {
          "equipment_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Equipment Name",
            "description": "Name of the equipment"
          },
          "equipment_type": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Equipment Type",
            "description": "Type of equipment"
          },
          "manufacturer": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Manufacturer"
          },
          "model_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Number"
          },
          "serial_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Serial Number"
          },
          "purchase_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Purchase Date"
          },
          "warranty_expiry": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Warranty Expiry"
          },
          "location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "maintenance_interval_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintenance Interval Days",
            "description": "Days between preventive maintenance"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "is_critical": {
            "type": "boolean",
            "title": "Is Critical",
            "description": "Is this critical equipment?",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "equipment_name",
          "equipment_type"
        ],
        "title": "EquipmentCreate",
        "description": "Schema for creating equipment"
      },
      "EquipmentListResponse": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Equipment"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": [
          "total",
          "page",
          "size",
          "pages",
          "items"
        ],
        "title": "EquipmentListResponse",
        "description": "Response schema for equipment list"
      },
      "EquipmentStatus": {
        "type": "string",
        "enum": [
          "operational",
          "needs_maintenance",
          "under_maintenance",
          "out_of_service",
          "retired"
        ],
        "title": "EquipmentStatus",
        "description": "Status of equipment"
      },
      "EquipmentUpdate": {
        "properties": {
          "equipment_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Equipment Name"
          },
          "equipment_type": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Equipment Type"
          },
          "manufacturer": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Manufacturer"
          },
          "model_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Number"
          },
          "serial_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Serial Number"
          },
          "purchase_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Purchase Date"
          },
          "warranty_expiry": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Warranty Expiry"
          },
          "location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EquipmentStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "maintenance_interval_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintenance Interval Days"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "is_critical": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Critical"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "EquipmentUpdate",
        "description": "Schema for updating equipment"
      },
      "EquipmentWithMaintenance": {
        "properties": {
          "equipment_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Equipment Name",
            "description": "Name of the equipment"
          },
          "equipment_type": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Equipment Type",
            "description": "Type of equipment"
          },
          "manufacturer": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Manufacturer"
          },
          "model_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Number"
          },
          "serial_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Serial Number"
          },
          "purchase_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Purchase Date"
          },
          "warranty_expiry": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Warranty Expiry"
          },
          "location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "maintenance_interval_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintenance Interval Days",
            "description": "Days between preventive maintenance"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "is_critical": {
            "type": "boolean",
            "title": "Is Critical",
            "description": "Is this critical equipment?",
            "default": false
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "status": {
            "$ref": "#/components/schemas/EquipmentStatus"
          },
          "last_maintenance_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Maintenance Date"
          },
          "next_due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Due Date"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "updated_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated By"
          },
          "maintenance_records": {
            "items": {
              "$ref": "#/components/schemas/MaintenanceRecord"
            },
            "type": "array",
            "title": "Maintenance Records",
            "default": []
          },
          "total_maintenance_count": {
            "type": "integer",
            "title": "Total Maintenance Count",
            "default": 0
          },
          "total_maintenance_cost": {
            "type": "number",
            "title": "Total Maintenance Cost",
            "default": 0.0
          },
          "average_downtime_hours": {
            "type": "number",
            "title": "Average Downtime Hours",
            "default": 0.0
          }
        },
        "type": "object",
        "required": [
          "equipment_name",
          "equipment_type",
          "id",
          "status",
          "last_maintenance_date",
          "next_due_date",
          "is_active",
          "created_at",
          "updated_at",
          "created_by",
          "updated_by"
        ],
        "title": "EquipmentWithMaintenance",
        "description": "Schema for equipment with maintenance history"
      },
      "EscalateReviewRequest": {
        "properties": {
          "escalation_reason": {
            "type": "string",
            "maxLength": 500,
            "minLength": 10,
            "title": "Escalation Reason",
            "description": "Reason for escalating the review"
          }
        },
        "type": "object",
        "required": [
          "escalation_reason"
        ],
        "title": "EscalateReviewRequest",
        "description": "Request model for escalating a review"
      },
      "ExternalPOSProviderCreate": {
        "properties": {
          "provider_code": {
            "type": "string",
            "maxLength": 50,
            "minLength": 2,
            "title": "Provider Code"
          },
          "provider_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 2,
            "title": "Provider Name"
          },
          "webhook_endpoint_id": {
            "type": "string",
            "maxLength": 100,
            "minLength": 2,
            "title": "Webhook Endpoint Id"
          },
          "auth_type": {
            "$ref": "#/components/schemas/AuthenticationType"
          },
          "auth_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Auth Config",
            "description": "Authentication configuration"
          },
          "settings": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Settings"
          },
          "supported_events": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Events"
          },
          "rate_limit_per_minute": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "title": "Rate Limit Per Minute",
            "default": 60
          }
        },
        "type": "object",
        "required": [
          "provider_code",
          "provider_name",
          "webhook_endpoint_id",
          "auth_type",
          "auth_config"
        ],
        "title": "ExternalPOSProviderCreate",
        "description": "Schema for creating an external POS provider"
      },
      "ExternalPOSProviderResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "provider_code": {
            "type": "string",
            "title": "Provider Code"
          },
          "provider_name": {
            "type": "string",
            "title": "Provider Name"
          },
          "webhook_endpoint_id": {
            "type": "string",
            "title": "Webhook Endpoint Id"
          },
          "webhook_url": {
            "type": "string",
            "title": "Webhook Url"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "auth_type": {
            "type": "string",
            "title": "Auth Type"
          },
          "supported_events": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Events"
          },
          "rate_limit_per_minute": {
            "type": "integer",
            "title": "Rate Limit Per Minute"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "provider_code",
          "provider_name",
          "webhook_endpoint_id",
          "webhook_url",
          "is_active",
          "auth_type",
          "supported_events",
          "rate_limit_per_minute",
          "created_at",
          "updated_at"
        ],
        "title": "ExternalPOSProviderResponse",
        "description": "Response schema for external POS provider"
      },
      "ExternalPOSProviderUpdate": {
        "properties": {
          "provider_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Name"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "auth_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auth Config"
          },
          "settings": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Settings"
          },
          "supported_events": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Supported Events"
          },
          "rate_limit_per_minute": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 1000.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Rate Limit Per Minute"
          }
        },
        "type": "object",
        "title": "ExternalPOSProviderUpdate",
        "description": "Schema for updating an external POS provider"
      },
      "FaceEnrollmentRequest": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "face_data": {
            "type": "string",
            "title": "Face Data"
          },
          "device_id": {
            "type": "string",
            "title": "Device Id"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "face_data",
          "device_id"
        ],
        "title": "FaceEnrollmentRequest"
      },
      "FaceEnrollmentResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "enrolled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enrolled At"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message",
          "enrolled_at"
        ],
        "title": "FaceEnrollmentResponse"
      },
      "FeedbackCategoryCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "parent_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Id"
          },
          "sort_order": {
            "type": "integer",
            "title": "Sort Order",
            "default": 0
          },
          "auto_assign_keywords": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auto Assign Keywords"
          },
          "auto_escalate": {
            "type": "boolean",
            "title": "Auto Escalate",
            "default": false
          },
          "escalation_priority": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackPriority"
              },
              {
                "type": "null"
              }
            ]
          },
          "escalation_conditions": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Escalation Conditions"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FeedbackCategoryCreate",
        "description": "Schema for creating feedback categories"
      },
      "FeedbackCreate": {
        "properties": {
          "feedback_type": {
            "$ref": "#/components/schemas/FeedbackType"
          },
          "subject": {
            "type": "string",
            "maxLength": 255,
            "minLength": 5,
            "title": "Subject"
          },
          "message": {
            "type": "string",
            "maxLength": 5000,
            "minLength": 10,
            "title": "Message"
          },
          "category": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "subcategory": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Subcategory"
          },
          "priority": {
            "$ref": "#/components/schemas/FeedbackPriority",
            "default": "medium"
          },
          "source": {
            "$ref": "#/components/schemas/ReviewSource",
            "default": "website"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_phone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Phone"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "product_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Id"
          }
        },
        "type": "object",
        "required": [
          "feedback_type",
          "subject",
          "message"
        ],
        "title": "FeedbackCreate",
        "description": "Schema for creating feedback"
      },
      "FeedbackListResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/FeedbackSummary"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next"
          },
          "has_prev": {
            "type": "boolean",
            "title": "Has Prev"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "per_page",
          "total_pages",
          "has_next",
          "has_prev"
        ],
        "title": "FeedbackListResponse",
        "description": "Schema for paginated feedback responses"
      },
      "FeedbackPriority": {
        "type": "string",
        "enum": [
          "low",
          "medium",
          "high",
          "urgent"
        ],
        "title": "FeedbackPriority",
        "description": "Feedback priority levels"
      },
      "FeedbackRequest": {
        "properties": {
          "message_id": {
            "type": "string",
            "title": "Message Id"
          },
          "session_id": {
            "type": "string",
            "title": "Session Id"
          },
          "rating": {
            "type": "integer",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Rating"
          },
          "feedback_text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Feedback Text"
          },
          "was_helpful": {
            "type": "boolean",
            "title": "Was Helpful"
          },
          "improvement_suggestions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Improvement Suggestions"
          }
        },
        "type": "object",
        "required": [
          "message_id",
          "session_id",
          "rating",
          "was_helpful"
        ],
        "title": "FeedbackRequest",
        "description": "User feedback on assistant response"
      },
      "FeedbackResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "uuid": {
            "type": "string",
            "title": "Uuid"
          },
          "feedback_type": {
            "$ref": "#/components/schemas/FeedbackType"
          },
          "status": {
            "$ref": "#/components/schemas/FeedbackStatus"
          },
          "priority": {
            "$ref": "#/components/schemas/FeedbackPriority"
          },
          "source": {
            "$ref": "#/components/schemas/ReviewSource"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "customer_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Email"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "customer_phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Phone"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "product_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Id"
          },
          "subject": {
            "type": "string",
            "title": "Subject"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "subcategory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subcategory"
          },
          "assigned_to": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assigned To"
          },
          "assigned_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assigned At"
          },
          "resolved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved At"
          },
          "resolution_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution Notes"
          },
          "sentiment_score": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SentimentScore"
              },
              {
                "type": "null"
              }
            ]
          },
          "sentiment_confidence": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sentiment Confidence"
          },
          "follow_up_required": {
            "type": "boolean",
            "title": "Follow Up Required"
          },
          "follow_up_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Follow Up Date"
          },
          "escalated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Escalated At"
          },
          "escalated_to": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Escalated To"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "uuid",
          "feedback_type",
          "status",
          "priority",
          "source",
          "customer_id",
          "customer_email",
          "customer_name",
          "customer_phone",
          "order_id",
          "product_id",
          "subject",
          "message",
          "category",
          "subcategory",
          "assigned_to",
          "assigned_at",
          "resolved_at",
          "resolution_notes",
          "sentiment_score",
          "sentiment_confidence",
          "follow_up_required",
          "follow_up_date",
          "escalated_at",
          "escalated_to",
          "tags",
          "created_at",
          "updated_at"
        ],
        "title": "FeedbackResponse",
        "description": "Schema for feedback responses"
      },
      "FeedbackResponseCreate": {
        "properties": {
          "message": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 5,
            "title": "Message"
          },
          "responder_id": {
            "type": "integer",
            "title": "Responder Id"
          },
          "responder_name": {
            "type": "string",
            "maxLength": 100,
            "title": "Responder Name"
          },
          "is_internal": {
            "type": "boolean",
            "title": "Is Internal",
            "default": false
          },
          "is_resolution": {
            "type": "boolean",
            "title": "Is Resolution",
            "default": false
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "message",
          "responder_id",
          "responder_name"
        ],
        "title": "FeedbackResponseCreate",
        "description": "Schema for creating feedback responses"
      },
      "FeedbackStatus": {
        "type": "string",
        "enum": [
          "new",
          "in_progress",
          "resolved",
          "closed",
          "escalated"
        ],
        "title": "FeedbackStatus",
        "description": "Feedback processing status"
      },
      "FeedbackSummary": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "uuid": {
            "type": "string",
            "title": "Uuid"
          },
          "feedback_type": {
            "$ref": "#/components/schemas/FeedbackType"
          },
          "status": {
            "$ref": "#/components/schemas/FeedbackStatus"
          },
          "priority": {
            "$ref": "#/components/schemas/FeedbackPriority"
          },
          "subject": {
            "type": "string",
            "title": "Subject"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "customer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Name"
          },
          "assigned_to": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assigned To"
          },
          "sentiment_score": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SentimentScore"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "uuid",
          "feedback_type",
          "status",
          "priority",
          "subject",
          "customer_id",
          "customer_name",
          "assigned_to",
          "sentiment_score",
          "created_at"
        ],
        "title": "FeedbackSummary",
        "description": "Summary schema for feedback listings"
      },
      "FeedbackSummaryResponse": {
        "properties": {
          "time_period": {
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "type": "object",
            "title": "Time Period"
          },
          "total_feedback_count": {
            "type": "integer",
            "title": "Total Feedback Count"
          },
          "unique_users": {
            "type": "integer",
            "title": "Unique Users"
          },
          "average_rating": {
            "type": "number",
            "title": "Average Rating"
          },
          "rating_distribution": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Rating Distribution",
            "description": "Count of feedback by rating (1-5)"
          },
          "feedback_by_type": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Feedback By Type",
            "description": "Count by feedback type (positive, negative, suggestion)"
          },
          "top_positive_comments": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Top Positive Comments",
            "description": "Top rated feedback with comments"
          },
          "top_negative_comments": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Top Negative Comments",
            "description": "Lowest rated feedback with comments"
          },
          "model_breakdown": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Model Breakdown",
            "description": "Feedback stats broken down by model"
          },
          "domain_breakdown": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Domain Breakdown",
            "description": "Feedback stats broken down by domain"
          }
        },
        "type": "object",
        "required": [
          "time_period",
          "total_feedback_count",
          "unique_users",
          "average_rating",
          "rating_distribution",
          "feedback_by_type",
          "top_positive_comments",
          "top_negative_comments",
          "model_breakdown",
          "domain_breakdown"
        ],
        "title": "FeedbackSummaryResponse",
        "description": "Summary of feedback across models and domains"
      },
      "FeedbackTrendResponse": {
        "properties": {
          "time_range": {
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "type": "object",
            "title": "Time Range"
          },
          "interval": {
            "type": "string",
            "title": "Interval"
          },
          "trends": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Trends",
            "description": "Time series data points"
          },
          "summary_stats": {
            "additionalProperties": true,
            "type": "object",
            "title": "Summary Stats",
            "description": "Summary statistics for the period"
          },
          "significant_changes": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Significant Changes",
            "description": "Significant changes detected in trends"
          }
        },
        "type": "object",
        "required": [
          "time_range",
          "interval",
          "trends",
          "summary_stats",
          "significant_changes"
        ],
        "title": "FeedbackTrendResponse",
        "description": "Feedback trends over time"
      },
      "FeedbackType": {
        "type": "string",
        "enum": [
          "complaint",
          "suggestion",
          "compliment",
          "bug_report",
          "feature_request",
          "general_inquiry"
        ],
        "title": "FeedbackType",
        "description": "Types of feedback"
      },
      "FeedbackUpdate": {
        "properties": {
          "subject": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 5
              },
              {
                "type": "null"
              }
            ],
            "title": "Subject"
          },
          "message": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 5000,
                "minLength": 10
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "category": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "subcategory": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Subcategory"
          },
          "priority": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackPriority"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "assigned_to": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assigned To"
          },
          "follow_up_required": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Follow Up Required"
          },
          "follow_up_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Follow Up Date"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "title": "FeedbackUpdate",
        "description": "Schema for updating feedback"
      },
      "FieldComparison": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name"
          },
          "old_value": {
            "title": "Old Value"
          },
          "new_value": {
            "title": "New Value"
          },
          "change_type": {
            "type": "string",
            "title": "Change Type"
          }
        },
        "type": "object",
        "required": [
          "field_name",
          "old_value",
          "new_value",
          "change_type"
        ],
        "title": "FieldComparison"
      },
      "FilingStatus": {
        "type": "string",
        "enum": [
          "draft",
          "ready",
          "submitted",
          "accepted",
          "rejected",
          "amended",
          "paid"
        ],
        "title": "FilingStatus",
        "description": "Tax filing status enumeration"
      },
      "FilingType": {
        "type": "string",
        "enum": [
          "sales_tax",
          "income_tax",
          "payroll_tax",
          "property_tax",
          "excise_tax",
          "franchise_tax",
          "other"
        ],
        "title": "FilingType",
        "description": "Tax filing type enumeration"
      },
      "FingerprintEnrollmentRequest": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "fingerprint_data": {
            "type": "string",
            "title": "Fingerprint Data"
          },
          "device_id": {
            "type": "string",
            "title": "Device Id"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "fingerprint_data",
          "device_id"
        ],
        "title": "FingerprintEnrollmentRequest"
      },
      "FingerprintEnrollmentResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "enrolled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enrolled At"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message",
          "enrolled_at"
        ],
        "title": "FingerprintEnrollmentResponse"
      },
      "FloorCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "title": "Name"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "floor_number": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Floor Number",
            "default": 1
          },
          "width": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Width",
            "default": 1000
          },
          "height": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Height",
            "default": 800
          },
          "background_image": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Background Image"
          },
          "grid_size": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Grid Size",
            "default": 20
          },
          "max_capacity": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Capacity"
          },
          "layout_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Layout Config",
            "default": {}
          },
          "status": {
            "$ref": "#/components/schemas/FloorStatus",
            "default": "active"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FloorCreate",
        "description": "Floor creation schema"
      },
      "FloorHeatmapData": {
        "properties": {
          "floor_id": {
            "type": "integer",
            "title": "Floor Id"
          },
          "floor_name": {
            "type": "string",
            "title": "Floor Name"
          },
          "period": {
            "type": "string",
            "title": "Period"
          },
          "heatmap_data": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Heatmap Data"
          }
        },
        "type": "object",
        "required": [
          "floor_id",
          "floor_name",
          "period",
          "heatmap_data"
        ],
        "title": "FloorHeatmapData",
        "description": "Floor heatmap data for visualization"
      },
      "FloorResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "title": "Name"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "floor_number": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Floor Number",
            "default": 1
          },
          "width": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Width",
            "default": 1000
          },
          "height": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Height",
            "default": 800
          },
          "background_image": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Background Image"
          },
          "grid_size": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Grid Size",
            "default": 20
          },
          "max_capacity": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Capacity"
          },
          "layout_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Layout Config",
            "default": {}
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "restaurant_id": {
            "type": "integer",
            "title": "Restaurant Id"
          },
          "status": {
            "$ref": "#/components/schemas/FloorStatus"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default"
          },
          "table_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Table Count",
            "default": 0
          },
          "occupied_tables": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Occupied Tables",
            "default": 0
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "restaurant_id",
          "status",
          "is_default",
          "created_at",
          "updated_at"
        ],
        "title": "FloorResponse",
        "description": "Floor response schema"
      },
      "FloorStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "maintenance"
        ],
        "title": "FloorStatus",
        "description": "Floor/section status"
      },
      "FloorUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "floor_number": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Floor Number"
          },
          "width": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Width"
          },
          "height": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Height"
          },
          "background_image": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Background Image"
          },
          "grid_size": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Grid Size"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FloorStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "is_default": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Default"
          },
          "max_capacity": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Capacity"
          },
          "layout_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Layout Config"
          }
        },
        "type": "object",
        "title": "FloorUpdate",
        "description": "Floor update schema"
      },
      "ForecastAccuracyReport": {
        "properties": {
          "report_id": {
            "type": "string",
            "title": "Report Id"
          },
          "period": {
            "additionalProperties": {
              "type": "string",
              "format": "date"
            },
            "type": "object",
            "title": "Period"
          },
          "overall_accuracy": {
            "type": "number",
            "title": "Overall Accuracy"
          },
          "model_performances": {
            "items": {
              "$ref": "#/components/schemas/ModelPerformance"
            },
            "type": "array",
            "title": "Model Performances"
          },
          "accuracy_by_category": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Accuracy By Category"
          },
          "accuracy_by_product": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Accuracy By Product"
          },
          "improvement_recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Improvement Recommendations"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          }
        },
        "type": "object",
        "required": [
          "report_id",
          "period",
          "overall_accuracy",
          "model_performances",
          "accuracy_by_category",
          "accuracy_by_product",
          "improvement_recommendations"
        ],
        "title": "ForecastAccuracyReport",
        "description": "Report on forecast accuracy"
      },
      "ForecastComparison": {
        "properties": {
          "entity_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Id"
          },
          "entity_name": {
            "type": "string",
            "title": "Entity Name"
          },
          "comparison_period": {
            "additionalProperties": {
              "type": "string",
              "format": "date"
            },
            "type": "object",
            "title": "Comparison Period"
          },
          "predictions": {
            "items": {
              "$ref": "#/components/schemas/PredictionPoint"
            },
            "type": "array",
            "title": "Predictions"
          },
          "actuals": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Actuals"
          },
          "accuracy_metrics": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Accuracy Metrics"
          },
          "deviation_analysis": {
            "additionalProperties": true,
            "type": "object",
            "title": "Deviation Analysis"
          }
        },
        "type": "object",
        "required": [
          "entity_id",
          "entity_name",
          "comparison_period",
          "predictions",
          "actuals",
          "accuracy_metrics",
          "deviation_analysis"
        ],
        "title": "ForecastComparison",
        "description": "Comparison of forecast vs actuals"
      },
      "ForecastMetadata": {
        "properties": {
          "model_used": {
            "$ref": "#/components/schemas/ModelType"
          },
          "training_period": {
            "additionalProperties": {
              "type": "string",
              "format": "date"
            },
            "type": "object",
            "title": "Training Period"
          },
          "seasonality_detected": {
            "items": {
              "$ref": "#/components/schemas/SeasonalityType"
            },
            "type": "array",
            "title": "Seasonality Detected"
          },
          "accuracy_metrics": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Accuracy Metrics"
          },
          "confidence": {
            "$ref": "#/components/schemas/PredictionConfidence"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          }
        },
        "type": "object",
        "required": [
          "model_used",
          "training_period",
          "seasonality_detected",
          "accuracy_metrics",
          "confidence"
        ],
        "title": "ForecastMetadata",
        "description": "Metadata about the forecast"
      },
      "ForecastType": {
        "type": "string",
        "enum": [
          "demand",
          "stock",
          "revenue",
          "footfall",
          "seasonal"
        ],
        "title": "ForecastType",
        "description": "Types of forecasting models"
      },
      "FraudCheckResponse": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "risk_score": {
            "type": "number",
            "title": "Risk Score"
          },
          "risk_level": {
            "$ref": "#/components/schemas/FraudRiskLevel"
          },
          "status": {
            "$ref": "#/components/schemas/FraudCheckStatus"
          },
          "flags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Flags"
          },
          "checked_at": {
            "type": "string",
            "format": "date-time",
            "title": "Checked At"
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "risk_score",
          "risk_level",
          "status",
          "checked_at"
        ],
        "title": "FraudCheckResponse"
      },
      "FraudCheckStatus": {
        "type": "string",
        "enum": [
          "pending",
          "passed",
          "failed",
          "manual_review"
        ],
        "title": "FraudCheckStatus"
      },
      "FraudRiskLevel": {
        "type": "string",
        "enum": [
          "low",
          "medium",
          "high",
          "critical"
        ],
        "title": "FraudRiskLevel"
      },
      "FulfilledItem": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Menu Item Id"
          },
          "fulfilled_quantity": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Fulfilled Quantity"
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "fulfilled_quantity"
        ],
        "title": "FulfilledItem",
        "description": "Item that has been fulfilled"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HourlyTrendPoint": {
        "properties": {
          "hour": {
            "type": "string",
            "title": "Hour",
            "description": "Hour timestamp in ISO format"
          },
          "revenue": {
            "type": "number",
            "title": "Revenue",
            "description": "Revenue for this hour",
            "default": 0.0
          },
          "orders": {
            "type": "integer",
            "title": "Orders",
            "description": "Orders count for this hour",
            "default": 0
          },
          "customers": {
            "type": "integer",
            "title": "Customers",
            "description": "Unique customers for this hour",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "hour"
        ],
        "title": "HourlyTrendPoint",
        "description": "Single point in hourly trend data"
      },
      "InsightRequest": {
        "properties": {
          "insight_types": {
            "items": {
              "$ref": "#/components/schemas/InsightType"
            },
            "type": "array",
            "title": "Insight Types",
            "description": "Types of insights to generate"
          },
          "date_from": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date From"
          },
          "date_to": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date To"
          },
          "min_confidence": {
            "$ref": "#/components/schemas/ConfidenceLevel",
            "description": "Minimum confidence level",
            "default": "medium"
          },
          "include_recommendations": {
            "type": "boolean",
            "title": "Include Recommendations",
            "description": "Include actionable recommendations",
            "default": true
          },
          "force_refresh": {
            "type": "boolean",
            "title": "Force Refresh",
            "description": "Force regeneration of insights",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "insight_types"
        ],
        "title": "InsightRequest",
        "description": "Request for AI insights generation"
      },
      "InsightResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "insights": {
            "$ref": "#/components/schemas/AIInsightSummary"
          },
          "processing_time": {
            "type": "number",
            "title": "Processing Time",
            "description": "Time taken to generate insights (seconds)"
          },
          "cache_hit": {
            "type": "boolean",
            "title": "Cache Hit",
            "description": "Whether insights were served from cache"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings during processing"
          }
        },
        "type": "object",
        "required": [
          "success",
          "insights",
          "processing_time",
          "cache_hit"
        ],
        "title": "InsightResponse",
        "description": "Response containing AI insights"
      },
      "InsightType": {
        "type": "string",
        "enum": [
          "peak_time",
          "product_trend",
          "customer_pattern",
          "revenue_forecast",
          "seasonality",
          "anomaly",
          "recommendation"
        ],
        "title": "InsightType",
        "description": "Types of AI-generated insights"
      },
      "InventoryAdjustment": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "adjustment_type": {
            "$ref": "#/components/schemas/AdjustmentType"
          },
          "quantity_adjusted": {
            "type": "number",
            "title": "Quantity Adjusted"
          },
          "reason": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Reason"
          },
          "unit_cost": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Cost"
          },
          "reference_type": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Reference Type"
          },
          "reference_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Reference Id"
          },
          "batch_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Batch Number"
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "quantity_before": {
            "type": "number",
            "title": "Quantity Before"
          },
          "quantity_after": {
            "type": "number",
            "title": "Quantity After"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "total_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Cost"
          },
          "requires_approval": {
            "type": "boolean",
            "title": "Requires Approval"
          },
          "approved_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved By"
          },
          "approved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved At"
          },
          "approval_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approval Notes"
          },
          "created_by": {
            "type": "integer",
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "adjustment_type",
          "quantity_adjusted",
          "reason",
          "id",
          "quantity_before",
          "quantity_after",
          "unit",
          "requires_approval",
          "created_by",
          "created_at",
          "updated_at",
          "is_active"
        ],
        "title": "InventoryAdjustment"
      },
      "InventoryAdjustmentCreate": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "adjustment_type": {
            "$ref": "#/components/schemas/AdjustmentType"
          },
          "quantity_adjusted": {
            "type": "number",
            "title": "Quantity Adjusted"
          },
          "reason": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Reason"
          },
          "unit_cost": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Cost"
          },
          "reference_type": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Reference Type"
          },
          "reference_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Reference Id"
          },
          "batch_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Batch Number"
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "adjustment_type",
          "quantity_adjusted",
          "reason"
        ],
        "title": "InventoryAdjustmentCreate"
      },
      "InventoryAlert": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "alert_type": {
            "type": "string",
            "maxLength": 50,
            "title": "Alert Type"
          },
          "priority": {
            "$ref": "#/components/schemas/AlertPriority",
            "default": "medium"
          },
          "title": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Title"
          },
          "message": {
            "type": "string",
            "minLength": 1,
            "title": "Message"
          },
          "threshold_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Threshold Value"
          },
          "current_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Value"
          },
          "auto_resolve": {
            "type": "boolean",
            "title": "Auto Resolve",
            "default": false
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "status": {
            "$ref": "#/components/schemas/AlertStatus"
          },
          "acknowledged_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Acknowledged By"
          },
          "acknowledged_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Acknowledged At"
          },
          "resolved_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved By"
          },
          "resolved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved At"
          },
          "resolution_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution Notes"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "alert_type",
          "title",
          "message",
          "id",
          "status",
          "created_at",
          "updated_at",
          "is_active"
        ],
        "title": "InventoryAlert"
      },
      "InventoryAlertWithItem": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "alert_type": {
            "type": "string",
            "maxLength": 50,
            "title": "Alert Type"
          },
          "priority": {
            "$ref": "#/components/schemas/AlertPriority",
            "default": "medium"
          },
          "title": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Title"
          },
          "message": {
            "type": "string",
            "minLength": 1,
            "title": "Message"
          },
          "threshold_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Threshold Value"
          },
          "current_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Value"
          },
          "auto_resolve": {
            "type": "boolean",
            "title": "Auto Resolve",
            "default": false
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "status": {
            "$ref": "#/components/schemas/AlertStatus"
          },
          "acknowledged_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Acknowledged By"
          },
          "acknowledged_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Acknowledged At"
          },
          "resolved_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved By"
          },
          "resolved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved At"
          },
          "resolution_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution Notes"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "inventory_item": {
            "$ref": "#/components/schemas/core__inventory_schemas__Inventory"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "alert_type",
          "title",
          "message",
          "id",
          "status",
          "created_at",
          "updated_at",
          "is_active",
          "inventory_item"
        ],
        "title": "InventoryAlertWithItem"
      },
      "InventoryAnalytics": {
        "properties": {
          "total_usage": {
            "type": "number",
            "title": "Total Usage"
          },
          "total_cost": {
            "type": "number",
            "title": "Total Cost"
          },
          "average_daily_usage": {
            "type": "number",
            "title": "Average Daily Usage"
          },
          "usage_count": {
            "type": "integer",
            "title": "Usage Count"
          }
        },
        "type": "object",
        "required": [
          "total_usage",
          "total_cost",
          "average_daily_usage",
          "usage_count"
        ],
        "title": "InventoryAnalytics"
      },
      "InventoryAvailabilityResponse": {
        "properties": {
          "can_fulfill": {
            "type": "boolean",
            "title": "Can Fulfill"
          },
          "impact_preview": {
            "items": {
              "$ref": "#/components/schemas/InventoryImpactItem"
            },
            "type": "array",
            "title": "Impact Preview"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "can_fulfill",
          "impact_preview",
          "warnings"
        ],
        "title": "InventoryAvailabilityResponse",
        "description": "Response for inventory availability check"
      },
      "InventoryDashboardStats": {
        "properties": {
          "total_items": {
            "type": "integer",
            "title": "Total Items"
          },
          "low_stock_items": {
            "type": "integer",
            "title": "Low Stock Items"
          },
          "pending_alerts": {
            "type": "integer",
            "title": "Pending Alerts"
          },
          "total_inventory_value": {
            "type": "number",
            "title": "Total Inventory Value"
          },
          "stock_percentage": {
            "type": "number",
            "title": "Stock Percentage"
          }
        },
        "type": "object",
        "required": [
          "total_items",
          "low_stock_items",
          "pending_alerts",
          "total_inventory_value",
          "stock_percentage"
        ],
        "title": "InventoryDashboardStats"
      },
      "InventoryDeductionResult": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "deducted_items": {
            "items": {
              "$ref": "#/components/schemas/DeductedItem"
            },
            "type": "array",
            "title": "Deducted Items"
          },
          "low_stock_alerts": {
            "items": {
              "$ref": "#/components/schemas/LowStockAlert"
            },
            "type": "array",
            "title": "Low Stock Alerts"
          },
          "items_without_recipes": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Items Without Recipes"
          },
          "total_items_deducted": {
            "type": "integer",
            "title": "Total Items Deducted"
          }
        },
        "type": "object",
        "required": [
          "success",
          "deducted_items",
          "low_stock_alerts",
          "items_without_recipes",
          "total_items_deducted"
        ],
        "title": "InventoryDeductionResult",
        "description": "Result of inventory deduction operation"
      },
      "InventoryImpactItem": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "item_name": {
            "type": "string",
            "title": "Item Name"
          },
          "current_quantity": {
            "type": "number",
            "title": "Current Quantity"
          },
          "required_quantity": {
            "type": "number",
            "title": "Required Quantity"
          },
          "new_quantity": {
            "type": "number",
            "title": "New Quantity"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "sufficient_stock": {
            "type": "boolean",
            "title": "Sufficient Stock"
          },
          "will_be_low_stock": {
            "type": "boolean",
            "title": "Will Be Low Stock"
          },
          "recipes_using": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recipes Using"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "item_name",
          "current_quantity",
          "required_quantity",
          "new_quantity",
          "unit",
          "sufficient_stock",
          "will_be_low_stock",
          "recipes_using"
        ],
        "title": "InventoryImpactItem",
        "description": "Impact preview for a single inventory item"
      },
      "InventoryOut": {
        "properties": {
          "item_name": {
            "type": "string",
            "title": "Item Name"
          },
          "quantity": {
            "type": "number",
            "title": "Quantity"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "threshold": {
            "type": "number",
            "title": "Threshold"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": [
          "item_name",
          "quantity",
          "unit",
          "threshold",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "InventoryOut"
      },
      "InventoryReversalResult": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "reversed_items": {
            "items": {
              "$ref": "#/components/schemas/ReversedItem"
            },
            "type": "array",
            "title": "Reversed Items"
          },
          "total_items_reversed": {
            "type": "integer",
            "title": "Total Items Reversed"
          }
        },
        "type": "object",
        "required": [
          "success",
          "reversed_items",
          "total_items_reversed"
        ],
        "title": "InventoryReversalResult",
        "description": "Result of inventory reversal operation"
      },
      "InventoryUsageLog": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "menu_item_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Menu Item Id"
          },
          "quantity_used": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Quantity Used"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "order_item_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Item Id"
          },
          "location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "station": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Station"
          },
          "shift": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Shift"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "order_date": {
            "type": "string",
            "format": "date-time",
            "title": "Order Date"
          },
          "unit_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Cost"
          },
          "total_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Cost"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "quantity_used",
          "id",
          "unit",
          "order_date",
          "created_at",
          "updated_at"
        ],
        "title": "InventoryUsageLog"
      },
      "InventoryUsageLogCreate": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "menu_item_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Menu Item Id"
          },
          "quantity_used": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Quantity Used"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "order_item_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Item Id"
          },
          "location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "station": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Station"
          },
          "shift": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Shift"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "quantity_used"
        ],
        "title": "InventoryUsageLogCreate"
      },
      "InventoryWithDetails": {
        "properties": {
          "item_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Item Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "category": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "title": "Quantity"
          },
          "unit": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "title": "Unit"
          },
          "threshold": {
            "type": "number",
            "minimum": 0.0,
            "title": "Threshold"
          },
          "reorder_quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Reorder Quantity"
          },
          "max_quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Quantity"
          },
          "cost_per_unit": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Per Unit"
          },
          "last_purchase_price": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Purchase Price"
          },
          "average_cost": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Cost"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "vendor_item_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Item Code"
          },
          "lead_time_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Lead Time Days"
          },
          "storage_location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Location"
          },
          "storage_temperature": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Temperature"
          },
          "shelf_life_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Shelf Life Days"
          },
          "track_expiration": {
            "type": "boolean",
            "title": "Track Expiration",
            "default": false
          },
          "track_batches": {
            "type": "boolean",
            "title": "Track Batches",
            "default": false
          },
          "perishable": {
            "type": "boolean",
            "title": "Perishable",
            "default": false
          },
          "enable_low_stock_alerts": {
            "type": "boolean",
            "title": "Enable Low Stock Alerts",
            "default": true
          },
          "alert_threshold_percentage": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Alert Threshold Percentage"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "last_counted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Counted At"
          },
          "last_adjusted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Adjusted At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          },
          "is_low_stock": {
            "type": "boolean",
            "title": "Is Low Stock",
            "default": false
          },
          "stock_percentage": {
            "type": "number",
            "title": "Stock Percentage",
            "default": 0.0
          },
          "days_until_empty": {
            "type": "integer",
            "title": "Days Until Empty",
            "default": 0
          },
          "vendor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Vendor"
              },
              {
                "type": "null"
              }
            ]
          },
          "alerts": {
            "items": {
              "$ref": "#/components/schemas/InventoryAlert"
            },
            "type": "array",
            "title": "Alerts",
            "default": []
          },
          "recent_adjustments": {
            "items": {
              "$ref": "#/components/schemas/InventoryAdjustment"
            },
            "type": "array",
            "title": "Recent Adjustments",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "item_name",
          "quantity",
          "unit",
          "threshold",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "InventoryWithDetails"
      },
      "KDSOrderItemResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "order_item_id": {
            "type": "integer",
            "title": "Order Item Id"
          },
          "station_id": {
            "type": "integer",
            "title": "Station Id"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "modifiers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Modifiers"
          },
          "special_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Instructions"
          },
          "status": {
            "$ref": "#/components/schemas/DisplayStatus"
          },
          "sequence_number": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sequence Number"
          },
          "received_at": {
            "type": "string",
            "format": "date-time",
            "title": "Received At"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "target_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Time"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "acknowledged_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Acknowledged At"
          },
          "priority": {
            "type": "integer",
            "title": "Priority"
          },
          "course_number": {
            "type": "integer",
            "title": "Course Number"
          },
          "fire_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fire Time"
          },
          "started_by_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started By Id"
          },
          "completed_by_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed By Id"
          },
          "recall_count": {
            "type": "integer",
            "title": "Recall Count"
          },
          "last_recalled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Recalled At"
          },
          "recall_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recall Reason"
          },
          "wait_time_seconds": {
            "type": "integer",
            "title": "Wait Time Seconds"
          },
          "is_late": {
            "type": "boolean",
            "title": "Is Late"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "table_number": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Table Number"
          },
          "server_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Server Name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "order_item_id",
          "station_id",
          "display_name",
          "quantity",
          "modifiers",
          "special_instructions",
          "status",
          "sequence_number",
          "received_at",
          "started_at",
          "target_time",
          "completed_at",
          "acknowledged_at",
          "priority",
          "course_number",
          "fire_time",
          "started_by_id",
          "completed_by_id",
          "recall_count",
          "last_recalled_at",
          "recall_reason",
          "wait_time_seconds",
          "is_late"
        ],
        "title": "KDSOrderItemResponse",
        "description": "Response schema for KDS order items"
      },
      "KitchenDisplayCreate": {
        "properties": {
          "station_id": {
            "type": "integer",
            "title": "Station Id"
          },
          "display_number": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Display Number",
            "default": 1
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "ip_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip Address"
          },
          "layout_mode": {
            "type": "string",
            "pattern": "^(grid|list|single)$",
            "title": "Layout Mode",
            "default": "grid"
          },
          "items_per_page": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 1.0,
            "title": "Items Per Page",
            "default": 6
          },
          "auto_clear_completed": {
            "type": "boolean",
            "title": "Auto Clear Completed",
            "default": true
          },
          "auto_clear_delay_seconds": {
            "type": "integer",
            "maximum": 300.0,
            "minimum": 10.0,
            "title": "Auto Clear Delay Seconds",
            "default": 30
          }
        },
        "type": "object",
        "required": [
          "station_id"
        ],
        "title": "KitchenDisplayCreate",
        "description": "Schema for creating a kitchen display"
      },
      "KitchenDisplayResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "station_id": {
            "type": "integer",
            "title": "Station Id"
          },
          "display_number": {
            "type": "integer",
            "title": "Display Number"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "ip_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip Address"
          },
          "last_heartbeat": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Heartbeat"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "layout_mode": {
            "type": "string",
            "title": "Layout Mode"
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page"
          },
          "auto_clear_completed": {
            "type": "boolean",
            "title": "Auto Clear Completed"
          },
          "auto_clear_delay_seconds": {
            "type": "integer",
            "title": "Auto Clear Delay Seconds"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "station_id",
          "display_number",
          "name",
          "ip_address",
          "last_heartbeat",
          "is_active",
          "layout_mode",
          "items_per_page",
          "auto_clear_completed",
          "auto_clear_delay_seconds",
          "created_at",
          "updated_at"
        ],
        "title": "KitchenDisplayResponse",
        "description": "Response schema for kitchen display"
      },
      "KitchenDisplayUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "ip_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip Address"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "layout_mode": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(grid|list|single)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Layout Mode"
          },
          "items_per_page": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 20.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Items Per Page"
          },
          "auto_clear_completed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auto Clear Completed"
          },
          "auto_clear_delay_seconds": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 300.0,
                "minimum": 10.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Auto Clear Delay Seconds"
          }
        },
        "type": "object",
        "title": "KitchenDisplayUpdate",
        "description": "Schema for updating a kitchen display"
      },
      "KitchenPrintRequest": {
        "properties": {
          "order_id": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Order Id",
            "description": "Order ID must be positive"
          },
          "printer_options": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Printer Options"
          },
          "station_id": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Station Id",
            "description": "Station ID must be positive"
          },
          "format_options": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Format Options"
          }
        },
        "type": "object",
        "required": [
          "order_id"
        ],
        "title": "KitchenPrintRequest"
      },
      "KitchenPrintResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "ticket_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ticket Id"
          },
          "print_timestamp": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Print Timestamp"
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "KitchenPrintResponse"
      },
      "LocationData": {
        "properties": {
          "latitude": {
            "type": "number",
            "title": "Latitude"
          },
          "longitude": {
            "type": "number",
            "title": "Longitude"
          },
          "accuracy": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accuracy"
          }
        },
        "type": "object",
        "required": [
          "latitude",
          "longitude"
        ],
        "title": "LocationData",
        "description": "Location information for tracking"
      },
      "LogoutRequest": {
        "properties": {
          "logout_all_sessions": {
            "type": "boolean",
            "title": "Logout All Sessions",
            "default": false
          }
        },
        "type": "object",
        "title": "LogoutRequest",
        "description": "Logout request model."
      },
      "LowStockAlert": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "item_name": {
            "type": "string",
            "title": "Item Name"
          },
          "current_quantity": {
            "type": "number",
            "title": "Current Quantity"
          },
          "threshold": {
            "type": "number",
            "title": "Threshold"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "item_name",
          "current_quantity",
          "threshold",
          "unit"
        ],
        "title": "LowStockAlert",
        "description": "Low stock alert information"
      },
      "MaintenanceListResponse": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/MaintenanceRecord"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": [
          "total",
          "page",
          "size",
          "pages",
          "items"
        ],
        "title": "MaintenanceListResponse",
        "description": "Response schema for maintenance list"
      },
      "MaintenanceRecord": {
        "properties": {
          "equipment_id": {
            "type": "integer",
            "title": "Equipment Id"
          },
          "maintenance_type": {
            "$ref": "#/components/schemas/MaintenanceType",
            "default": "preventive"
          },
          "scheduled_date": {
            "type": "string",
            "format": "date-time",
            "title": "Scheduled Date"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description",
            "description": "Description of maintenance work"
          },
          "performed_by": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Performed By"
          },
          "cost": {
            "type": "number",
            "minimum": 0.0,
            "title": "Cost",
            "default": 0.0
          },
          "parts_replaced": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parts Replaced"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "status": {
            "$ref": "#/components/schemas/MaintenanceStatus"
          },
          "date_performed": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Performed"
          },
          "next_due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Due Date"
          },
          "issues_found": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issues Found"
          },
          "resolution": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution"
          },
          "downtime_hours": {
            "type": "number",
            "title": "Downtime Hours"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "completed_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed By"
          },
          "equipment": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Equipment"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "equipment_id",
          "scheduled_date",
          "description",
          "id",
          "status",
          "date_performed",
          "next_due_date",
          "issues_found",
          "resolution",
          "downtime_hours",
          "created_at",
          "updated_at",
          "created_by",
          "completed_by"
        ],
        "title": "MaintenanceRecord",
        "description": "Schema for maintenance record response"
      },
      "MaintenanceRecordComplete": {
        "properties": {
          "date_performed": {
            "type": "string",
            "format": "date-time",
            "title": "Date Performed"
          },
          "performed_by": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Performed By"
          },
          "cost": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost",
            "default": 0.0
          },
          "parts_replaced": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parts Replaced"
          },
          "issues_found": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issues Found"
          },
          "resolution": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution"
          },
          "downtime_hours": {
            "type": "number",
            "minimum": 0.0,
            "title": "Downtime Hours",
            "default": 0.0
          },
          "next_due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Due Date"
          }
        },
        "type": "object",
        "required": [
          "performed_by"
        ],
        "title": "MaintenanceRecordComplete",
        "description": "Schema for completing a maintenance record"
      },
      "MaintenanceRecordCreate": {
        "properties": {
          "equipment_id": {
            "type": "integer",
            "title": "Equipment Id"
          },
          "maintenance_type": {
            "$ref": "#/components/schemas/MaintenanceType",
            "default": "preventive"
          },
          "scheduled_date": {
            "type": "string",
            "format": "date-time",
            "title": "Scheduled Date"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description",
            "description": "Description of maintenance work"
          },
          "performed_by": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Performed By"
          },
          "cost": {
            "type": "number",
            "minimum": 0.0,
            "title": "Cost",
            "default": 0.0
          },
          "parts_replaced": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parts Replaced"
          },
          "status": {
            "$ref": "#/components/schemas/MaintenanceStatus",
            "default": "scheduled"
          }
        },
        "type": "object",
        "required": [
          "equipment_id",
          "scheduled_date",
          "description"
        ],
        "title": "MaintenanceRecordCreate",
        "description": "Schema for creating maintenance records"
      },
      "MaintenanceRecordUpdate": {
        "properties": {
          "maintenance_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MaintenanceType"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MaintenanceStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "scheduled_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled Date"
          },
          "date_performed": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Performed"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "performed_by": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Performed By"
          },
          "cost": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost"
          },
          "parts_replaced": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parts Replaced"
          },
          "issues_found": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issues Found"
          },
          "resolution": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution"
          },
          "downtime_hours": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Downtime Hours"
          }
        },
        "type": "object",
        "title": "MaintenanceRecordUpdate",
        "description": "Schema for updating maintenance records"
      },
      "MaintenanceStatus": {
        "type": "string",
        "enum": [
          "scheduled",
          "in_progress",
          "completed",
          "overdue",
          "cancelled"
        ],
        "title": "MaintenanceStatus",
        "description": "Status of maintenance tasks"
      },
      "MaintenanceSummary": {
        "properties": {
          "total_equipment": {
            "type": "integer",
            "title": "Total Equipment"
          },
          "operational_equipment": {
            "type": "integer",
            "title": "Operational Equipment"
          },
          "needs_maintenance": {
            "type": "integer",
            "title": "Needs Maintenance"
          },
          "under_maintenance": {
            "type": "integer",
            "title": "Under Maintenance"
          },
          "overdue_maintenance": {
            "type": "integer",
            "title": "Overdue Maintenance"
          },
          "scheduled_this_week": {
            "type": "integer",
            "title": "Scheduled This Week"
          },
          "completed_this_month": {
            "type": "integer",
            "title": "Completed This Month"
          },
          "total_cost_this_month": {
            "type": "number",
            "title": "Total Cost This Month"
          },
          "average_downtime_hours": {
            "type": "number",
            "title": "Average Downtime Hours"
          }
        },
        "type": "object",
        "required": [
          "total_equipment",
          "operational_equipment",
          "needs_maintenance",
          "under_maintenance",
          "overdue_maintenance",
          "scheduled_this_week",
          "completed_this_month",
          "total_cost_this_month",
          "average_downtime_hours"
        ],
        "title": "MaintenanceSummary",
        "description": "Summary statistics for maintenance"
      },
      "MaintenanceType": {
        "type": "string",
        "enum": [
          "preventive",
          "corrective",
          "emergency",
          "inspection",
          "calibration"
        ],
        "title": "MaintenanceType",
        "description": "Type of maintenance"
      },
      "ManualReviewListResponse": {
        "properties": {
          "reviews": {
            "items": {
              "$ref": "#/components/schemas/ManualReviewResponse"
            },
            "type": "array",
            "title": "Reviews"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More"
          },
          "high_priority_count": {
            "type": "integer",
            "title": "High Priority Count"
          }
        },
        "type": "object",
        "required": [
          "reviews",
          "total",
          "has_more",
          "high_priority_count"
        ],
        "title": "ManualReviewListResponse",
        "description": "Response model for list of manual reviews"
      },
      "ManualReviewResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "reason": {
            "$ref": "#/components/schemas/ReviewReason"
          },
          "status": {
            "$ref": "#/components/schemas/modules__orders__models__manual_review_models__ReviewStatus"
          },
          "error_details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Details"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "assigned_to": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assigned To"
          },
          "reviewed_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed By"
          },
          "review_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Review Notes"
          },
          "resolution_action": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution Action"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "assigned_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assigned At"
          },
          "reviewed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed At"
          },
          "resolved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved At"
          },
          "priority": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 0.0,
            "title": "Priority"
          },
          "escalated": {
            "type": "boolean",
            "title": "Escalated",
            "default": false
          },
          "escalation_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Escalation Reason"
          }
        },
        "type": "object",
        "required": [
          "id",
          "order_id",
          "reason",
          "status",
          "created_at",
          "priority"
        ],
        "title": "ManualReviewResponse",
        "description": "Response model for manual review details"
      },
      "ManualRewardIssuance": {
        "properties": {
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "template_id": {
            "type": "integer",
            "title": "Template Id"
          },
          "custom_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Message"
          },
          "notify_customer": {
            "type": "boolean",
            "title": "Notify Customer",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "customer_id",
          "template_id"
        ],
        "title": "ManualRewardIssuance",
        "description": "Schema for manually issuing rewards"
      },
      "ManualSyncRequest": {
        "properties": {
          "order_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Ids",
            "description": "Specific order IDs to sync (empty for all pending)"
          },
          "force": {
            "type": "boolean",
            "title": "Force",
            "description": "Force sync even if recently synced",
            "default": false
          }
        },
        "type": "object",
        "title": "ManualSyncRequest",
        "description": "Request model for manual sync"
      },
      "MenuAuditLog": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "entity_type": {
            "type": "string",
            "title": "Entity Type"
          },
          "entity_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Id"
          },
          "entity_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Name"
          },
          "change_type": {
            "$ref": "#/components/schemas/ChangeType"
          },
          "old_values": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Old Values"
          },
          "new_values": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "New Values"
          },
          "changed_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Changed Fields"
          },
          "change_summary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Change Summary"
          },
          "user_role": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Role"
          },
          "ip_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip Address"
          },
          "user_agent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Agent"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "default": []
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "menu_version_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Menu Version Id"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "batch_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Batch Id"
          },
          "parent_log_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Log Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "action",
          "entity_type",
          "change_type",
          "id",
          "menu_version_id",
          "user_id",
          "batch_id",
          "parent_log_id",
          "created_at",
          "updated_at"
        ],
        "title": "MenuAuditLog"
      },
      "MenuCategory": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "parent_category_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Category Id"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "MenuCategory"
      },
      "MenuCategoryCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "parent_category_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Category Id"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "MenuCategoryCreate"
      },
      "MenuCategoryUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "display_order": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Order"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "parent_category_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Category Id"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          }
        },
        "type": "object",
        "title": "MenuCategoryUpdate"
      },
      "MenuCategoryVersion": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "display_order": {
            "type": "integer",
            "title": "Display Order",
            "default": 0
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "parent_category_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Category Id"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "menu_version_id": {
            "type": "integer",
            "title": "Menu Version Id"
          },
          "original_category_id": {
            "type": "integer",
            "title": "Original Category Id"
          },
          "change_type": {
            "$ref": "#/components/schemas/ChangeType"
          },
          "change_summary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Change Summary"
          },
          "changed_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Changed Fields"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "menu_version_id",
          "original_category_id",
          "change_type",
          "change_summary",
          "changed_fields",
          "created_at",
          "updated_at"
        ],
        "title": "MenuCategoryVersion"
      },
      "MenuCategoryWithItems": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "parent_category_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Category Id"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          },
          "subcategories": {
            "items": {
              "$ref": "#/components/schemas/MenuCategory"
            },
            "type": "array",
            "title": "Subcategories",
            "default": []
          },
          "menu_items": {
            "items": {
              "$ref": "#/components/schemas/MenuItem"
            },
            "type": "array",
            "title": "Menu Items",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "MenuCategoryWithItems"
      },
      "MenuItem": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "price": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Price"
          },
          "category_id": {
            "type": "integer",
            "title": "Category Id"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_available": {
            "type": "boolean",
            "title": "Is Available",
            "default": true
          },
          "availability_start_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability Start Time"
          },
          "availability_end_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability End Time"
          },
          "calories": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Calories"
          },
          "allergens": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergens",
            "default": []
          },
          "dietary_tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Tags",
            "default": []
          },
          "prep_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Prep Time Minutes"
          },
          "serving_size": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Serving Size"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "images": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Images",
            "default": []
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "price",
          "category_id",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "MenuItem"
      },
      "MenuItemCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "price": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Price"
          },
          "category_id": {
            "type": "integer",
            "title": "Category Id"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_available": {
            "type": "boolean",
            "title": "Is Available",
            "default": true
          },
          "availability_start_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability Start Time"
          },
          "availability_end_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability End Time"
          },
          "calories": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Calories"
          },
          "allergens": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergens",
            "default": []
          },
          "dietary_tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Tags",
            "default": []
          },
          "prep_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Prep Time Minutes"
          },
          "serving_size": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Serving Size"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "images": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Images",
            "default": []
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "name",
          "price",
          "category_id"
        ],
        "title": "MenuItemCreate"
      },
      "MenuItemInventory": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "quantity_needed": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Quantity Needed"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "inventory_id",
          "quantity_needed",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "MenuItemInventory"
      },
      "MenuItemInventoryCreate": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "quantity_needed": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Quantity Needed"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit"
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "inventory_id",
          "quantity_needed"
        ],
        "title": "MenuItemInventoryCreate"
      },
      "MenuItemModifier": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "modifier_group_id": {
            "type": "integer",
            "title": "Modifier Group Id"
          },
          "is_required": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Required"
          },
          "min_selections": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Selections"
          },
          "max_selections": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Selections"
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "modifier_group_id",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "MenuItemModifier"
      },
      "MenuItemModifierCreate": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "modifier_group_id": {
            "type": "integer",
            "title": "Modifier Group Id"
          },
          "is_required": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Required"
          },
          "min_selections": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Selections"
          },
          "max_selections": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Selections"
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "modifier_group_id"
        ],
        "title": "MenuItemModifierCreate"
      },
      "MenuItemRecipeStatus": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "menu_item_name": {
            "type": "string",
            "title": "Menu Item Name"
          },
          "has_recipe": {
            "type": "boolean",
            "title": "Has Recipe"
          },
          "recipe_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recipe Id"
          },
          "recipe_status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RecipeStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "last_updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "menu_item_name",
          "has_recipe"
        ],
        "title": "MenuItemRecipeStatus",
        "description": "Status of recipe configuration for menu items"
      },
      "MenuItemResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/MenuItem"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "size",
          "pages"
        ],
        "title": "MenuItemResponse"
      },
      "MenuItemStationCreate": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "station_id": {
            "type": "integer",
            "title": "Station Id"
          },
          "is_primary": {
            "type": "boolean",
            "title": "Is Primary",
            "default": true
          },
          "sequence": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 0.0,
            "title": "Sequence",
            "default": 0
          },
          "prep_time_minutes": {
            "type": "integer",
            "maximum": 120.0,
            "minimum": 1.0,
            "title": "Prep Time Minutes"
          },
          "station_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Station Notes"
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "station_id",
          "prep_time_minutes"
        ],
        "title": "MenuItemStationCreate",
        "description": "Schema for assigning menu items to stations"
      },
      "MenuItemStationResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "station_id": {
            "type": "integer",
            "title": "Station Id"
          },
          "is_primary": {
            "type": "boolean",
            "title": "Is Primary"
          },
          "sequence": {
            "type": "integer",
            "title": "Sequence"
          },
          "prep_time_minutes": {
            "type": "integer",
            "title": "Prep Time Minutes"
          },
          "station_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Station Notes"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "menu_item_id",
          "station_id",
          "is_primary",
          "sequence",
          "prep_time_minutes",
          "station_notes",
          "created_at",
          "updated_at"
        ],
        "title": "MenuItemStationResponse",
        "description": "Response schema for menu item station assignment"
      },
      "MenuItemSummary": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "category": {
            "type": "string",
            "title": "Category"
          },
          "price": {
            "type": "number",
            "title": "Price"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "order_count": {
            "type": "integer",
            "title": "Order Count"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "category",
          "price",
          "image_url",
          "order_count"
        ],
        "title": "MenuItemSummary",
        "description": "Simplified menu item for favorites"
      },
      "MenuItemUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "price": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Price"
          },
          "category_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Id"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_available": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Available"
          },
          "availability_start_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability Start Time"
          },
          "availability_end_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability End Time"
          },
          "calories": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Calories"
          },
          "allergens": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergens"
          },
          "dietary_tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Tags"
          },
          "prep_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Prep Time Minutes"
          },
          "serving_size": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Serving Size"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "images": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Images"
          },
          "display_order": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Order"
          }
        },
        "type": "object",
        "title": "MenuItemUpdate"
      },
      "MenuItemVersion": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "price": {
            "type": "number",
            "minimum": 0.0,
            "title": "Price"
          },
          "category_id": {
            "type": "integer",
            "title": "Category Id"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_available": {
            "type": "boolean",
            "title": "Is Available",
            "default": true
          },
          "availability_start_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability Start Time"
          },
          "availability_end_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability End Time"
          },
          "calories": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Calories"
          },
          "dietary_tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Tags",
            "default": []
          },
          "allergen_info": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergen Info",
            "default": []
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "display_order": {
            "type": "integer",
            "title": "Display Order",
            "default": 0
          },
          "prep_time_minutes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prep Time Minutes"
          },
          "cooking_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cooking Instructions"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "menu_version_id": {
            "type": "integer",
            "title": "Menu Version Id"
          },
          "original_item_id": {
            "type": "integer",
            "title": "Original Item Id"
          },
          "change_type": {
            "$ref": "#/components/schemas/ChangeType"
          },
          "change_summary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Change Summary"
          },
          "changed_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Changed Fields"
          },
          "price_history": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Price History"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "price",
          "category_id",
          "id",
          "menu_version_id",
          "original_item_id",
          "change_type",
          "change_summary",
          "changed_fields",
          "price_history",
          "created_at",
          "updated_at"
        ],
        "title": "MenuItemVersion"
      },
      "MenuItemWithDetails": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "price": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Price"
          },
          "category_id": {
            "type": "integer",
            "title": "Category Id"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_available": {
            "type": "boolean",
            "title": "Is Available",
            "default": true
          },
          "availability_start_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability Start Time"
          },
          "availability_end_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability End Time"
          },
          "calories": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Calories"
          },
          "allergens": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergens",
            "default": []
          },
          "dietary_tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Tags",
            "default": []
          },
          "prep_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Prep Time Minutes"
          },
          "serving_size": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Serving Size"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "images": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Images",
            "default": []
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          },
          "category": {
            "$ref": "#/components/schemas/MenuCategory"
          },
          "modifiers": {
            "items": {
              "$ref": "#/components/schemas/MenuItemModifier"
            },
            "type": "array",
            "title": "Modifiers",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "name",
          "price",
          "category_id",
          "id",
          "created_at",
          "updated_at",
          "category"
        ],
        "title": "MenuItemWithDetails"
      },
      "MenuVersion": {
        "properties": {
          "version_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "version_type": {
            "$ref": "#/components/schemas/VersionType",
            "default": "manual"
          },
          "scheduled_publish_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled Publish At"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "version_number": {
            "type": "string",
            "title": "Version Number"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_published": {
            "type": "boolean",
            "title": "Is Published"
          },
          "published_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At"
          },
          "created_by": {
            "type": "integer",
            "title": "Created By"
          },
          "total_items": {
            "type": "integer",
            "title": "Total Items"
          },
          "total_categories": {
            "type": "integer",
            "title": "Total Categories"
          },
          "total_modifiers": {
            "type": "integer",
            "title": "Total Modifiers"
          },
          "changes_summary": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Changes Summary"
          },
          "parent_version_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Version Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "version_number",
          "is_active",
          "is_published",
          "published_at",
          "created_by",
          "total_items",
          "total_categories",
          "total_modifiers",
          "changes_summary",
          "parent_version_id",
          "created_at",
          "updated_at"
        ],
        "title": "MenuVersion"
      },
      "MenuVersionComparison": {
        "properties": {
          "from_version_id": {
            "type": "integer",
            "title": "From Version Id"
          },
          "to_version_id": {
            "type": "integer",
            "title": "To Version Id"
          },
          "from_version_number": {
            "type": "string",
            "title": "From Version Number"
          },
          "to_version_number": {
            "type": "string",
            "title": "To Version Number"
          },
          "summary": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Summary"
          },
          "categories": {
            "items": {
              "$ref": "#/components/schemas/EntityComparison"
            },
            "type": "array",
            "title": "Categories",
            "default": []
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/EntityComparison"
            },
            "type": "array",
            "title": "Items",
            "default": []
          },
          "modifiers": {
            "items": {
              "$ref": "#/components/schemas/EntityComparison"
            },
            "type": "array",
            "title": "Modifiers",
            "default": []
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          }
        },
        "type": "object",
        "required": [
          "from_version_id",
          "to_version_id",
          "from_version_number",
          "to_version_number",
          "summary",
          "generated_at"
        ],
        "title": "MenuVersionComparison"
      },
      "MenuVersionStats": {
        "properties": {
          "total_versions": {
            "type": "integer",
            "title": "Total Versions"
          },
          "active_version": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MenuVersion"
              },
              {
                "type": "null"
              }
            ]
          },
          "published_versions": {
            "type": "integer",
            "title": "Published Versions"
          },
          "draft_versions": {
            "type": "integer",
            "title": "Draft Versions"
          },
          "scheduled_versions": {
            "type": "integer",
            "title": "Scheduled Versions"
          },
          "latest_change": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latest Change"
          },
          "total_changes_today": {
            "type": "integer",
            "title": "Total Changes Today"
          },
          "most_changed_items": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Most Changed Items"
          }
        },
        "type": "object",
        "required": [
          "total_versions",
          "active_version",
          "published_versions",
          "draft_versions",
          "scheduled_versions",
          "latest_change",
          "total_changes_today",
          "most_changed_items"
        ],
        "title": "MenuVersionStats"
      },
      "MenuVersionWithDetails": {
        "properties": {
          "version_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "version_type": {
            "$ref": "#/components/schemas/VersionType",
            "default": "manual"
          },
          "scheduled_publish_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled Publish At"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "version_number": {
            "type": "string",
            "title": "Version Number"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_published": {
            "type": "boolean",
            "title": "Is Published"
          },
          "published_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At"
          },
          "created_by": {
            "type": "integer",
            "title": "Created By"
          },
          "total_items": {
            "type": "integer",
            "title": "Total Items"
          },
          "total_categories": {
            "type": "integer",
            "title": "Total Categories"
          },
          "total_modifiers": {
            "type": "integer",
            "title": "Total Modifiers"
          },
          "changes_summary": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Changes Summary"
          },
          "parent_version_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Version Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "categories": {
            "items": {
              "$ref": "#/components/schemas/MenuCategoryVersion"
            },
            "type": "array",
            "title": "Categories",
            "default": []
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/MenuItemVersion"
            },
            "type": "array",
            "title": "Items",
            "default": []
          },
          "modifiers": {
            "items": {
              "$ref": "#/components/schemas/ModifierGroupVersion"
            },
            "type": "array",
            "title": "Modifiers",
            "default": []
          },
          "audit_entries": {
            "items": {
              "$ref": "#/components/schemas/MenuAuditLog"
            },
            "type": "array",
            "title": "Audit Entries",
            "default": []
          },
          "parent_version": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MenuVersion"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "version_number",
          "is_active",
          "is_published",
          "published_at",
          "created_by",
          "total_items",
          "total_categories",
          "total_modifiers",
          "changes_summary",
          "parent_version_id",
          "created_at",
          "updated_at"
        ],
        "title": "MenuVersionWithDetails"
      },
      "MessageRole": {
        "type": "string",
        "enum": [
          "user",
          "assistant",
          "system",
          "error"
        ],
        "title": "MessageRole",
        "description": "Role of the message sender"
      },
      "MessageType": {
        "type": "string",
        "enum": [
          "text",
          "query_result",
          "chart",
          "table",
          "suggestion",
          "error",
          "loading"
        ],
        "title": "MessageType",
        "description": "Type of message content"
      },
      "ModelPerformance": {
        "properties": {
          "model_type": {
            "$ref": "#/components/schemas/ModelType"
          },
          "entity_type": {
            "type": "string",
            "title": "Entity Type"
          },
          "mae": {
            "type": "number",
            "title": "Mae",
            "description": "Mean Absolute Error"
          },
          "mape": {
            "type": "number",
            "title": "Mape",
            "description": "Mean Absolute Percentage Error"
          },
          "rmse": {
            "type": "number",
            "title": "Rmse",
            "description": "Root Mean Square Error"
          },
          "r_squared": {
            "type": "number",
            "title": "R Squared",
            "description": "R-squared value"
          },
          "training_samples": {
            "type": "integer",
            "title": "Training Samples"
          },
          "evaluation_period": {
            "additionalProperties": {
              "type": "string",
              "format": "date"
            },
            "type": "object",
            "title": "Evaluation Period"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "model_type",
          "entity_type",
          "mae",
          "mape",
          "rmse",
          "r_squared",
          "training_samples",
          "evaluation_period",
          "last_updated"
        ],
        "title": "ModelPerformance",
        "description": "Model performance metrics"
      },
      "ModelPerformanceResponse": {
        "properties": {
          "model_type": {
            "type": "string",
            "title": "Model Type"
          },
          "domain": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Domain"
          },
          "endpoint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Endpoint"
          },
          "total_requests": {
            "type": "integer",
            "title": "Total Requests"
          },
          "successful_requests": {
            "type": "integer",
            "title": "Successful Requests"
          },
          "failed_requests": {
            "type": "integer",
            "title": "Failed Requests"
          },
          "success_rate": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Success Rate"
          },
          "avg_response_time": {
            "type": "number",
            "title": "Avg Response Time",
            "description": "Average response time in seconds"
          },
          "p95_response_time": {
            "type": "number",
            "title": "P95 Response Time",
            "description": "95th percentile response time"
          },
          "avg_confidence_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Avg Confidence Score"
          },
          "feedback_count": {
            "type": "integer",
            "title": "Feedback Count"
          },
          "average_rating": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 5.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Rating"
          },
          "positive_feedback_rate": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Positive Feedback Rate"
          },
          "estimated_value_impact": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Value Impact"
          },
          "adoption_rate": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Adoption Rate"
          }
        },
        "type": "object",
        "required": [
          "model_type",
          "total_requests",
          "successful_requests",
          "failed_requests",
          "success_rate",
          "avg_response_time",
          "p95_response_time",
          "avg_confidence_score",
          "feedback_count"
        ],
        "title": "ModelPerformanceResponse",
        "description": "Performance metrics for AI models"
      },
      "ModelTrainingRequest": {
        "properties": {
          "entity_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Ids"
          },
          "entity_type": {
            "type": "string",
            "title": "Entity Type"
          },
          "model_types": {
            "items": {
              "$ref": "#/components/schemas/ModelType"
            },
            "type": "array",
            "title": "Model Types"
          },
          "training_period": {
            "additionalProperties": {
              "type": "string",
              "format": "date"
            },
            "type": "object",
            "title": "Training Period"
          },
          "validation_split": {
            "type": "number",
            "maximum": 0.3,
            "minimum": 0.1,
            "title": "Validation Split",
            "default": 0.2
          },
          "hyperparameter_tuning": {
            "type": "boolean",
            "title": "Hyperparameter Tuning",
            "default": true
          },
          "custom_parameters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Parameters"
          }
        },
        "type": "object",
        "required": [
          "entity_type",
          "model_types",
          "training_period"
        ],
        "title": "ModelTrainingRequest",
        "description": "Request to train or retrain models"
      },
      "ModelType": {
        "type": "string",
        "enum": [
          "arima",
          "prophet",
          "lstm",
          "ensemble",
          "moving_average",
          "exponential_smoothing"
        ],
        "title": "ModelType",
        "description": "Available prediction models"
      },
      "Modifier": {
        "properties": {
          "modifier_group_id": {
            "type": "integer",
            "title": "Modifier Group Id"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "price_adjustment": {
            "type": "number",
            "title": "Price Adjustment",
            "default": 0.0
          },
          "price_type": {
            "$ref": "#/components/schemas/PriceType",
            "default": "fixed"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_available": {
            "type": "boolean",
            "title": "Is Available",
            "default": true
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": [
          "modifier_group_id",
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "Modifier"
      },
      "ModifierCreate": {
        "properties": {
          "modifier_group_id": {
            "type": "integer",
            "title": "Modifier Group Id"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "price_adjustment": {
            "type": "number",
            "title": "Price Adjustment",
            "default": 0.0
          },
          "price_type": {
            "$ref": "#/components/schemas/PriceType",
            "default": "fixed"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_available": {
            "type": "boolean",
            "title": "Is Available",
            "default": true
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "modifier_group_id",
          "name"
        ],
        "title": "ModifierCreate"
      },
      "ModifierGroup": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "selection_type": {
            "$ref": "#/components/schemas/SelectionType",
            "default": "single"
          },
          "min_selections": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Min Selections",
            "default": 0
          },
          "max_selections": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Selections"
          },
          "is_required": {
            "type": "boolean",
            "title": "Is Required",
            "default": false
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "ModifierGroup"
      },
      "ModifierGroupCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "selection_type": {
            "$ref": "#/components/schemas/SelectionType",
            "default": "single"
          },
          "min_selections": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Min Selections",
            "default": 0
          },
          "max_selections": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Selections"
          },
          "is_required": {
            "type": "boolean",
            "title": "Is Required",
            "default": false
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "ModifierGroupCreate"
      },
      "ModifierGroupUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "selection_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SelectionType"
              },
              {
                "type": "null"
              }
            ]
          },
          "min_selections": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Selections"
          },
          "max_selections": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Selections"
          },
          "is_required": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Required"
          },
          "display_order": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Order"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "ModifierGroupUpdate"
      },
      "ModifierGroupVersion": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "selection_type": {
            "type": "string",
            "pattern": "^(single|multiple)$",
            "title": "Selection Type",
            "default": "single"
          },
          "is_required": {
            "type": "boolean",
            "title": "Is Required",
            "default": false
          },
          "min_selections": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Min Selections",
            "default": 0
          },
          "max_selections": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Selections"
          },
          "display_order": {
            "type": "integer",
            "title": "Display Order",
            "default": 0
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "menu_version_id": {
            "type": "integer",
            "title": "Menu Version Id"
          },
          "original_group_id": {
            "type": "integer",
            "title": "Original Group Id"
          },
          "change_type": {
            "$ref": "#/components/schemas/ChangeType"
          },
          "change_summary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Change Summary"
          },
          "changed_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Changed Fields"
          },
          "modifier_versions": {
            "items": {
              "$ref": "#/components/schemas/ModifierVersion"
            },
            "type": "array",
            "title": "Modifier Versions",
            "default": []
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "menu_version_id",
          "original_group_id",
          "change_type",
          "change_summary",
          "changed_fields",
          "created_at",
          "updated_at"
        ],
        "title": "ModifierGroupVersion"
      },
      "ModifierGroupWithModifiers": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "selection_type": {
            "$ref": "#/components/schemas/SelectionType",
            "default": "single"
          },
          "min_selections": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Min Selections",
            "default": 0
          },
          "max_selections": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Selections"
          },
          "is_required": {
            "type": "boolean",
            "title": "Is Required",
            "default": false
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "default": 0
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          },
          "modifiers": {
            "items": {
              "$ref": "#/components/schemas/Modifier"
            },
            "type": "array",
            "title": "Modifiers",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "ModifierGroupWithModifiers"
      },
      "ModifierUpdate": {
        "properties": {
          "modifier_group_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modifier Group Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "price_adjustment": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Price Adjustment"
          },
          "price_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PriceType"
              },
              {
                "type": "null"
              }
            ]
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_available": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Available"
          },
          "display_order": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Order"
          }
        },
        "type": "object",
        "title": "ModifierUpdate"
      },
      "ModifierVersion": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "price_adjustment": {
            "type": "number",
            "title": "Price Adjustment",
            "default": 0.0
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "display_order": {
            "type": "integer",
            "title": "Display Order",
            "default": 0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "modifier_group_version_id": {
            "type": "integer",
            "title": "Modifier Group Version Id"
          },
          "original_modifier_id": {
            "type": "integer",
            "title": "Original Modifier Id"
          },
          "change_type": {
            "$ref": "#/components/schemas/ChangeType"
          },
          "change_summary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Change Summary"
          },
          "changed_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Changed Fields"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "modifier_group_version_id",
          "original_modifier_id",
          "change_type",
          "change_summary",
          "changed_fields",
          "created_at",
          "updated_at"
        ],
        "title": "ModifierVersion"
      },
      "MultiItemRuleRequest": {
        "properties": {
          "order_items": {
            "items": {
              "$ref": "#/components/schemas/OrderItemUpdate"
            },
            "type": "array",
            "title": "Order Items"
          },
          "rule_types": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/MultiItemRuleType"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Types"
          }
        },
        "type": "object",
        "required": [
          "order_items"
        ],
        "title": "MultiItemRuleRequest"
      },
      "MultiItemRuleType": {
        "type": "string",
        "enum": [
          "combo",
          "bulk_discount",
          "compatibility"
        ],
        "title": "MultiItemRuleType"
      },
      "NotificationChannel": {
        "type": "string",
        "enum": [
          "push",
          "email",
          "sms",
          "in_app",
          "webhook"
        ],
        "title": "NotificationChannel",
        "description": "Channels for sending notifications"
      },
      "NotificationMethod": {
        "type": "string",
        "enum": [
          "email",
          "sms",
          "both",
          "none"
        ],
        "title": "NotificationMethod",
        "description": "Notification method enum for schemas"
      },
      "NotificationPreferencesUpdate": {
        "properties": {
          "access_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Token",
            "description": "Required if not authenticated"
          },
          "enable_push": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enable Push"
          },
          "enable_email": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enable Email"
          },
          "enable_sms": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enable Sms"
          },
          "notification_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notification Email"
          },
          "notification_phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notification Phone"
          },
          "push_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Push Token"
          }
        },
        "type": "object",
        "title": "NotificationPreferencesUpdate",
        "description": "Schema for updating notification preferences"
      },
      "OrderAttachmentOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "file_name": {
            "type": "string",
            "title": "File Name"
          },
          "file_url": {
            "type": "string",
            "title": "File Url"
          },
          "file_type": {
            "type": "string",
            "title": "File Type"
          },
          "file_size": {
            "type": "integer",
            "title": "File Size"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "is_public": {
            "type": "boolean",
            "title": "Is Public",
            "default": false
          },
          "uploaded_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uploaded By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "order_id",
          "file_name",
          "file_url",
          "file_type",
          "file_size",
          "created_at",
          "updated_at"
        ],
        "title": "OrderAttachmentOut"
      },
      "OrderAuditEvent": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Audit log ID"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "action": {
            "type": "string",
            "title": "Action",
            "description": "Type of action performed"
          },
          "previous_status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrderStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "new_status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "order_id",
          "action",
          "new_status",
          "user_id",
          "timestamp"
        ],
        "title": "OrderAuditEvent"
      },
      "OrderAuditResponse": {
        "properties": {
          "events": {
            "items": {
              "$ref": "#/components/schemas/OrderAuditEvent"
            },
            "type": "array",
            "title": "Events"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more records"
          }
        },
        "type": "object",
        "required": [
          "events",
          "total_count",
          "has_more"
        ],
        "title": "OrderAuditResponse"
      },
      "OrderCancelRequest": {
        "properties": {
          "reason": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Reason",
            "description": "Reason for cancellation"
          },
          "reverse_inventory": {
            "type": "boolean",
            "title": "Reverse Inventory",
            "description": "Whether to reverse inventory deductions",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "reason"
        ],
        "title": "OrderCancelRequest",
        "description": "Request to cancel an order"
      },
      "OrderCancelResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "cancelled_at": {
            "type": "string",
            "format": "date-time",
            "title": "Cancelled At"
          },
          "inventory_reversed": {
            "type": "boolean",
            "title": "Inventory Reversed"
          },
          "reversal_result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InventoryReversalResult"
              },
              {
                "type": "null"
              }
            ]
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "order_id",
          "status",
          "cancelled_at",
          "inventory_reversed",
          "reversal_result"
        ],
        "title": "OrderCancelResponse",
        "description": "Response for order cancellation with inventory"
      },
      "OrderCategoryRequest": {
        "properties": {
          "category_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Id"
          }
        },
        "type": "object",
        "title": "OrderCategoryRequest"
      },
      "OrderCompleteRequest": {
        "properties": {
          "skip_inventory": {
            "type": "boolean",
            "title": "Skip Inventory",
            "description": "Skip inventory deduction (for special cases)",
            "default": false
          },
          "force_deduction": {
            "type": "boolean",
            "title": "Force Deduction",
            "description": "Force deduction even if inventory is insufficient",
            "default": false
          },
          "reason": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason",
            "description": "Optional reason for the completion"
          }
        },
        "type": "object",
        "title": "OrderCompleteRequest",
        "description": "Request to complete an order with inventory options"
      },
      "OrderCompleteResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Completed At"
          },
          "inventory_deducted": {
            "type": "boolean",
            "title": "Inventory Deducted"
          },
          "inventory_result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InventoryDeductionResult"
              },
              {
                "type": "null"
              }
            ]
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "order_id",
          "status",
          "completed_at",
          "inventory_deducted",
          "inventory_result"
        ],
        "title": "OrderCompleteResponse",
        "description": "Response for order completion with inventory"
      },
      "OrderCompletionResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "points_earned": {
            "type": "integer",
            "title": "Points Earned"
          },
          "rewards_triggered": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Rewards Triggered"
          },
          "tier_upgrade": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tier Upgrade"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "required": [
          "success",
          "points_earned",
          "rewards_triggered",
          "tier_upgrade",
          "error"
        ],
        "title": "OrderCompletionResponse",
        "description": "Response for order completion processing"
      },
      "OrderCompletionReward": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "process_rewards": {
            "type": "boolean",
            "title": "Process Rewards",
            "default": true
          },
          "process_points": {
            "type": "boolean",
            "title": "Process Points",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "order_id"
        ],
        "title": "OrderCompletionReward",
        "description": "Schema for order completion reward processing"
      },
      "OrderItemCreate": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "price": {
            "type": "number",
            "title": "Price"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "menu_item_id",
          "quantity",
          "price"
        ],
        "title": "OrderItemCreate"
      },
      "OrderItemOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "price": {
            "type": "string",
            "title": "Price"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "special_instructions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/SpecialInstructionBase"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Instructions"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "order_id",
          "menu_item_id",
          "quantity",
          "price",
          "created_at",
          "updated_at"
        ],
        "title": "OrderItemOut"
      },
      "OrderItemUpdate": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "price": {
            "type": "number",
            "title": "Price"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "special_instructions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/SpecialInstructionBase"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Instructions"
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "quantity",
          "price"
        ],
        "title": "OrderItemUpdate"
      },
      "OrderOut": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "table_no": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Table No"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "customer_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Notes"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          },
          "scheduled_fulfillment_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled Fulfillment Time"
          },
          "delay_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delay Reason"
          },
          "delay_requested_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delay Requested At"
          },
          "priority": {
            "$ref": "#/components/schemas/OrderPriority",
            "default": "normal"
          },
          "priority_updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority Updated At"
          },
          "order_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OrderItemOut"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Items",
            "default": []
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/TagOut"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "default": []
          },
          "category": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CategoryOut"
              },
              {
                "type": "null"
              }
            ]
          },
          "attachments": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OrderAttachmentOut"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attachments",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "status",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "OrderOut"
      },
      "OrderPriority": {
        "type": "string",
        "enum": [
          "low",
          "normal",
          "high",
          "urgent"
        ],
        "title": "OrderPriority"
      },
      "OrderPriorityResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "previous_priority": {
            "type": "string",
            "title": "Previous Priority"
          },
          "new_priority": {
            "type": "string",
            "title": "New Priority"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          },
          "data": {
            "$ref": "#/components/schemas/OrderOut"
          }
        },
        "type": "object",
        "required": [
          "message",
          "previous_priority",
          "new_priority",
          "updated_at",
          "data"
        ],
        "title": "OrderPriorityResponse"
      },
      "OrderPriorityUpdate": {
        "properties": {
          "priority": {
            "$ref": "#/components/schemas/OrderPriority",
            "description": "New priority level for the order"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason",
            "description": "Reason for priority change"
          }
        },
        "type": "object",
        "required": [
          "priority"
        ],
        "title": "OrderPriorityUpdate"
      },
      "OrderStatus": {
        "type": "string",
        "enum": [
          "pending",
          "in_progress",
          "in_kitchen",
          "ready",
          "served",
          "completed",
          "cancelled",
          "delayed",
          "scheduled",
          "awaiting_fulfillment",
          "archived",
          "paid"
        ],
        "title": "OrderStatus"
      },
      "OrderSummary": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "order_number": {
            "type": "string",
            "title": "Order Number"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "total_amount": {
            "type": "number",
            "title": "Total Amount"
          },
          "item_count": {
            "type": "integer",
            "title": "Item Count"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "fulfilled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fulfilled At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "order_number",
          "status",
          "total_amount",
          "item_count",
          "created_at",
          "fulfilled_at"
        ],
        "title": "OrderSummary",
        "description": "Simplified order information for customer profile"
      },
      "OrderTagRequest": {
        "properties": {
          "tag_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Tag Ids"
          }
        },
        "type": "object",
        "required": [
          "tag_ids"
        ],
        "title": "OrderTagRequest"
      },
      "OrderTrackingResponse": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "tracking_code": {
            "type": "string",
            "title": "Tracking Code"
          },
          "current_status": {
            "type": "string",
            "title": "Current Status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "estimated_completion_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Completion Time"
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/TrackingEventResponse"
            },
            "type": "array",
            "title": "Events"
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "tracking_code",
          "current_status",
          "created_at",
          "events"
        ],
        "title": "OrderTrackingResponse",
        "description": "Response schema for order tracking info"
      },
      "OrderUpdate": {
        "properties": {
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrderStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "order_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OrderItemUpdate"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Items"
          }
        },
        "type": "object",
        "title": "OrderUpdate"
      },
      "OvertimeRuleCreate": {
        "properties": {
          "location": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Location"
          },
          "daily_overtime_threshold": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Daily Overtime Threshold",
            "default": "8.0"
          },
          "weekly_overtime_threshold": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Weekly Overtime Threshold",
            "default": "40.0"
          },
          "daily_double_time_threshold": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Daily Double Time Threshold",
            "default": "12.0"
          },
          "weekly_double_time_threshold": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Weekly Double Time Threshold",
            "default": "60.0"
          }
        },
        "type": "object",
        "required": [
          "location"
        ],
        "title": "OvertimeRuleCreate",
        "description": "Request model for creating overtime rule"
      },
      "OvertimeRuleResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "location": {
            "type": "string",
            "title": "Location"
          },
          "daily_overtime_threshold": {
            "type": "string",
            "title": "Daily Overtime Threshold"
          },
          "weekly_overtime_threshold": {
            "type": "string",
            "title": "Weekly Overtime Threshold"
          },
          "daily_double_time_threshold": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Daily Double Time Threshold"
          },
          "weekly_double_time_threshold": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Weekly Double Time Threshold"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "location",
          "daily_overtime_threshold",
          "weekly_overtime_threshold",
          "created_at",
          "updated_at"
        ],
        "title": "OvertimeRuleResponse",
        "description": "Response model for overtime rule"
      },
      "POSAlert": {
        "properties": {
          "alert_id": {
            "type": "string",
            "title": "Alert Id"
          },
          "alert_type": {
            "type": "string",
            "title": "Alert Type"
          },
          "severity": {
            "$ref": "#/components/schemas/AlertSeverity"
          },
          "provider_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Id"
          },
          "provider_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Name"
          },
          "terminal_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terminal Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "metric_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metric Value"
          },
          "threshold_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Threshold Value"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "acknowledged": {
            "type": "boolean",
            "title": "Acknowledged"
          },
          "acknowledged_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Acknowledged By"
          },
          "acknowledged_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Acknowledged At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "resolved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved At"
          },
          "context_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Context Data"
          }
        },
        "type": "object",
        "required": [
          "alert_id",
          "alert_type",
          "severity",
          "provider_id",
          "provider_name",
          "terminal_id",
          "title",
          "description",
          "metric_value",
          "threshold_value",
          "is_active",
          "acknowledged",
          "acknowledged_by",
          "acknowledged_at",
          "created_at",
          "resolved_at",
          "context_data"
        ],
        "title": "POSAlert",
        "description": "POS analytics alert"
      },
      "POSComparisonRequest": {
        "properties": {
          "provider_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 5,
            "minItems": 2,
            "title": "Provider Ids"
          },
          "time_range": {
            "$ref": "#/components/schemas/TimeRange",
            "default": "last_7_days"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          },
          "metrics": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Metrics",
            "default": [
              "transactions",
              "success_rate",
              "sync_performance",
              "uptime"
            ]
          }
        },
        "type": "object",
        "required": [
          "provider_ids"
        ],
        "title": "POSComparisonRequest",
        "description": "Request for comparing POS providers"
      },
      "POSComparisonResponse": {
        "properties": {
          "providers": {
            "items": {
              "$ref": "#/components/schemas/POSProviderSummary"
            },
            "type": "array",
            "title": "Providers"
          },
          "comparison_data": {
            "additionalProperties": {
              "items": {
                "additionalProperties": true,
                "type": "object"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Comparison Data"
          },
          "rankings": {
            "additionalProperties": {
              "items": {
                "additionalProperties": true,
                "type": "object"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Rankings"
          },
          "insights": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Insights"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          },
          "time_range": {
            "type": "string",
            "title": "Time Range"
          }
        },
        "type": "object",
        "required": [
          "providers",
          "comparison_data",
          "rankings",
          "insights",
          "generated_at",
          "time_range"
        ],
        "title": "POSComparisonResponse",
        "description": "Response for POS provider comparison"
      },
      "POSDashboardRequest": {
        "properties": {
          "time_range": {
            "$ref": "#/components/schemas/TimeRange",
            "default": "last_24_hours"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          },
          "provider_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Ids"
          },
          "terminal_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terminal Ids"
          },
          "include_offline": {
            "type": "boolean",
            "title": "Include Offline",
            "default": true
          }
        },
        "type": "object",
        "title": "POSDashboardRequest",
        "description": "Request for POS analytics dashboard data"
      },
      "POSDashboardResponse": {
        "properties": {
          "total_providers": {
            "type": "integer",
            "title": "Total Providers"
          },
          "active_providers": {
            "type": "integer",
            "title": "Active Providers"
          },
          "total_terminals": {
            "type": "integer",
            "title": "Total Terminals"
          },
          "online_terminals": {
            "type": "integer",
            "title": "Online Terminals"
          },
          "total_transactions": {
            "type": "integer",
            "title": "Total Transactions"
          },
          "successful_transactions": {
            "type": "integer",
            "title": "Successful Transactions"
          },
          "transaction_success_rate": {
            "type": "number",
            "title": "Transaction Success Rate"
          },
          "total_transaction_value": {
            "type": "string",
            "title": "Total Transaction Value"
          },
          "average_transaction_value": {
            "type": "string",
            "title": "Average Transaction Value"
          },
          "overall_uptime": {
            "type": "number",
            "title": "Overall Uptime"
          },
          "average_sync_time_ms": {
            "type": "number",
            "title": "Average Sync Time Ms"
          },
          "average_webhook_time_ms": {
            "type": "number",
            "title": "Average Webhook Time Ms"
          },
          "providers": {
            "items": {
              "$ref": "#/components/schemas/POSProviderSummary"
            },
            "type": "array",
            "title": "Providers"
          },
          "healthy_terminals": {
            "type": "integer",
            "title": "Healthy Terminals"
          },
          "degraded_terminals": {
            "type": "integer",
            "title": "Degraded Terminals"
          },
          "critical_terminals": {
            "type": "integer",
            "title": "Critical Terminals"
          },
          "offline_terminals": {
            "type": "integer",
            "title": "Offline Terminals"
          },
          "transaction_trends": {
            "items": {
              "$ref": "#/components/schemas/POSTransactionTrend"
            },
            "type": "array",
            "title": "Transaction Trends"
          },
          "active_alerts": {
            "items": {
              "$ref": "#/components/schemas/POSAlert"
            },
            "type": "array",
            "title": "Active Alerts"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          },
          "time_range": {
            "type": "string",
            "title": "Time Range"
          }
        },
        "type": "object",
        "required": [
          "total_providers",
          "active_providers",
          "total_terminals",
          "online_terminals",
          "total_transactions",
          "successful_transactions",
          "transaction_success_rate",
          "total_transaction_value",
          "average_transaction_value",
          "overall_uptime",
          "average_sync_time_ms",
          "average_webhook_time_ms",
          "providers",
          "healthy_terminals",
          "degraded_terminals",
          "critical_terminals",
          "offline_terminals",
          "transaction_trends",
          "active_alerts",
          "generated_at",
          "time_range"
        ],
        "title": "POSDashboardResponse",
        "description": "Response for POS analytics dashboard"
      },
      "POSErrorAnalysis": {
        "properties": {
          "total_errors": {
            "type": "integer",
            "title": "Total Errors"
          },
          "error_rate": {
            "type": "number",
            "title": "Error Rate"
          },
          "error_types": {
            "items": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "type": "object"
            },
            "type": "array",
            "title": "Error Types"
          },
          "trending_errors": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Trending Errors"
          },
          "affected_terminals": {
            "items": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "type": "object"
            },
            "type": "array",
            "title": "Affected Terminals"
          }
        },
        "type": "object",
        "required": [
          "total_errors",
          "error_rate",
          "error_types",
          "trending_errors",
          "affected_terminals"
        ],
        "title": "POSErrorAnalysis",
        "description": "Error analysis for POS operations"
      },
      "POSExportRequest": {
        "properties": {
          "report_type": {
            "type": "string",
            "pattern": "^(summary|detailed|transactions|errors)$",
            "title": "Report Type"
          },
          "format": {
            "type": "string",
            "pattern": "^(csv|xlsx|pdf)$",
            "title": "Format"
          },
          "time_range": {
            "$ref": "#/components/schemas/TimeRange",
            "default": "last_7_days"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          },
          "provider_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Ids"
          },
          "terminal_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terminal Ids"
          },
          "include_charts": {
            "type": "boolean",
            "title": "Include Charts",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "report_type",
          "format"
        ],
        "title": "POSExportRequest",
        "description": "Request for exporting POS analytics data"
      },
      "POSHealthStatus": {
        "type": "string",
        "enum": [
          "healthy",
          "degraded",
          "critical",
          "offline"
        ],
        "title": "POSHealthStatus",
        "description": "Health status for POS terminals"
      },
      "POSIntegrationCreate": {
        "properties": {
          "vendor": {
            "$ref": "#/components/schemas/POSVendor"
          },
          "credentials": {
            "additionalProperties": true,
            "type": "object",
            "title": "Credentials"
          }
        },
        "type": "object",
        "required": [
          "vendor",
          "credentials"
        ],
        "title": "POSIntegrationCreate"
      },
      "POSIntegrationOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "vendor": {
            "type": "string",
            "title": "Vendor"
          },
          "connected_on": {
            "type": "string",
            "format": "date-time",
            "title": "Connected On"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "vendor",
          "connected_on",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "POSIntegrationOut"
      },
      "POSIntegrationStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive"
        ],
        "title": "POSIntegrationStatus"
      },
      "POSOrderSyncRequest": {
        "properties": {
          "integration_id": {
            "type": "integer",
            "title": "Integration Id"
          },
          "since_timestamp": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Since Timestamp"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "default": 100
          }
        },
        "type": "object",
        "required": [
          "integration_id"
        ],
        "title": "POSOrderSyncRequest"
      },
      "POSPerformanceMetrics": {
        "properties": {
          "response_time_p50": {
            "type": "number",
            "title": "Response Time P50"
          },
          "response_time_p95": {
            "type": "number",
            "title": "Response Time P95"
          },
          "response_time_p99": {
            "type": "number",
            "title": "Response Time P99"
          },
          "average_response_time": {
            "type": "number",
            "title": "Average Response Time"
          },
          "transactions_per_minute": {
            "type": "number",
            "title": "Transactions Per Minute"
          },
          "syncs_per_minute": {
            "type": "number",
            "title": "Syncs Per Minute"
          },
          "webhooks_per_minute": {
            "type": "number",
            "title": "Webhooks Per Minute"
          },
          "peak_load_percentage": {
            "type": "number",
            "title": "Peak Load Percentage"
          },
          "capacity_utilization": {
            "type": "number",
            "title": "Capacity Utilization"
          }
        },
        "type": "object",
        "required": [
          "response_time_p50",
          "response_time_p95",
          "response_time_p99",
          "average_response_time",
          "transactions_per_minute",
          "syncs_per_minute",
          "webhooks_per_minute",
          "peak_load_percentage",
          "capacity_utilization"
        ],
        "title": "POSPerformanceMetrics",
        "description": "Performance metrics for POS operations"
      },
      "POSProviderDetailsRequest": {
        "properties": {
          "provider_id": {
            "type": "integer",
            "title": "Provider Id"
          },
          "time_range": {
            "$ref": "#/components/schemas/TimeRange",
            "default": "last_24_hours"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          },
          "include_terminals": {
            "type": "boolean",
            "title": "Include Terminals",
            "default": true
          },
          "include_errors": {
            "type": "boolean",
            "title": "Include Errors",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "provider_id"
        ],
        "title": "POSProviderDetailsRequest",
        "description": "Request for detailed POS provider analytics"
      },
      "POSProviderDetailsResponse": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/POSProviderSummary"
          },
          "sync_metrics": {
            "$ref": "#/components/schemas/POSSyncMetrics"
          },
          "webhook_metrics": {
            "$ref": "#/components/schemas/POSWebhookMetrics"
          },
          "error_analysis": {
            "$ref": "#/components/schemas/POSErrorAnalysis"
          },
          "performance_metrics": {
            "$ref": "#/components/schemas/POSPerformanceMetrics"
          },
          "terminals": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/POSTerminalSummary"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terminals"
          },
          "hourly_trends": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Hourly Trends"
          },
          "daily_trends": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Daily Trends"
          },
          "recent_transactions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Transactions"
          },
          "recent_errors": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Errors"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          },
          "time_range": {
            "type": "string",
            "title": "Time Range"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "sync_metrics",
          "webhook_metrics",
          "error_analysis",
          "performance_metrics",
          "terminals",
          "hourly_trends",
          "daily_trends",
          "recent_transactions",
          "recent_errors",
          "generated_at",
          "time_range"
        ],
        "title": "POSProviderDetailsResponse",
        "description": "Response for detailed POS provider analytics"
      },
      "POSProviderSummary": {
        "properties": {
          "provider_id": {
            "type": "integer",
            "title": "Provider Id"
          },
          "provider_name": {
            "type": "string",
            "title": "Provider Name"
          },
          "provider_code": {
            "type": "string",
            "title": "Provider Code"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "total_terminals": {
            "type": "integer",
            "title": "Total Terminals"
          },
          "active_terminals": {
            "type": "integer",
            "title": "Active Terminals"
          },
          "offline_terminals": {
            "type": "integer",
            "title": "Offline Terminals"
          },
          "total_transactions": {
            "type": "integer",
            "title": "Total Transactions"
          },
          "successful_transactions": {
            "type": "integer",
            "title": "Successful Transactions"
          },
          "failed_transactions": {
            "type": "integer",
            "title": "Failed Transactions"
          },
          "transaction_success_rate": {
            "type": "number",
            "title": "Transaction Success Rate"
          },
          "total_transaction_value": {
            "type": "string",
            "title": "Total Transaction Value"
          },
          "total_syncs": {
            "type": "integer",
            "title": "Total Syncs"
          },
          "sync_success_rate": {
            "type": "number",
            "title": "Sync Success Rate"
          },
          "average_sync_time_ms": {
            "type": "number",
            "title": "Average Sync Time Ms"
          },
          "total_webhooks": {
            "type": "integer",
            "title": "Total Webhooks"
          },
          "webhook_success_rate": {
            "type": "number",
            "title": "Webhook Success Rate"
          },
          "overall_health_status": {
            "$ref": "#/components/schemas/POSHealthStatus"
          },
          "uptime_percentage": {
            "type": "number",
            "title": "Uptime Percentage"
          },
          "active_alerts": {
            "type": "integer",
            "title": "Active Alerts"
          }
        },
        "type": "object",
        "required": [
          "provider_id",
          "provider_name",
          "provider_code",
          "is_active",
          "total_terminals",
          "active_terminals",
          "offline_terminals",
          "total_transactions",
          "successful_transactions",
          "failed_transactions",
          "transaction_success_rate",
          "total_transaction_value",
          "total_syncs",
          "sync_success_rate",
          "average_sync_time_ms",
          "total_webhooks",
          "webhook_success_rate",
          "overall_health_status",
          "uptime_percentage",
          "active_alerts"
        ],
        "title": "POSProviderSummary",
        "description": "Summary metrics for a POS provider"
      },
      "POSSyncLogOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "integration_id": {
            "type": "integer",
            "title": "Integration Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "attempt_count": {
            "type": "integer",
            "title": "Attempt Count"
          },
          "synced_at": {
            "type": "string",
            "format": "date-time",
            "title": "Synced At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "integration_id",
          "type",
          "status",
          "message",
          "order_id",
          "attempt_count",
          "synced_at",
          "created_at"
        ],
        "title": "POSSyncLogOut"
      },
      "POSSyncMetrics": {
        "properties": {
          "total_syncs": {
            "type": "integer",
            "title": "Total Syncs"
          },
          "successful_syncs": {
            "type": "integer",
            "title": "Successful Syncs"
          },
          "failed_syncs": {
            "type": "integer",
            "title": "Failed Syncs"
          },
          "pending_syncs": {
            "type": "integer",
            "title": "Pending Syncs"
          },
          "success_rate": {
            "type": "number",
            "title": "Success Rate"
          },
          "average_sync_time_ms": {
            "type": "number",
            "title": "Average Sync Time Ms"
          },
          "sync_status_breakdown": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Sync Status Breakdown"
          },
          "recent_failures": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Failures"
          }
        },
        "type": "object",
        "required": [
          "total_syncs",
          "successful_syncs",
          "failed_syncs",
          "pending_syncs",
          "success_rate",
          "average_sync_time_ms",
          "sync_status_breakdown",
          "recent_failures"
        ],
        "title": "POSSyncMetrics",
        "description": "Sync performance metrics"
      },
      "POSSyncRequest": {
        "properties": {
          "terminal_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terminal Id",
            "description": "POS terminal identifier"
          },
          "order_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Ids",
            "description": "Specific order IDs to sync"
          },
          "sync_all_pending": {
            "type": "boolean",
            "title": "Sync All Pending",
            "description": "Sync all pending orders if order_ids not provided",
            "default": true
          },
          "include_recent": {
            "type": "boolean",
            "title": "Include Recent",
            "description": "Include recently synced orders (last 24 hours)",
            "default": false
          }
        },
        "type": "object",
        "title": "POSSyncRequest",
        "description": "Request model for POS sync endpoint"
      },
      "POSSyncResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "terminal_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terminal Id"
          },
          "sync_batch_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sync Batch Id"
          },
          "orders_queued": {
            "type": "integer",
            "title": "Orders Queued"
          },
          "orders_synced": {
            "type": "integer",
            "title": "Orders Synced",
            "default": 0
          },
          "orders_failed": {
            "type": "integer",
            "title": "Orders Failed",
            "default": 0
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          }
        },
        "type": "object",
        "required": [
          "status",
          "terminal_id",
          "sync_batch_id",
          "orders_queued",
          "message"
        ],
        "title": "POSSyncResponse",
        "description": "Response model for POS sync endpoint"
      },
      "POSSyncSettingCreate": {
        "properties": {
          "tenant_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          },
          "team_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Team Id"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": true
          },
          "updated_by": {
            "type": "integer",
            "title": "Updated By"
          }
        },
        "type": "object",
        "required": [
          "updated_by"
        ],
        "title": "POSSyncSettingCreate"
      },
      "POSSyncSettingOut": {
        "properties": {
          "tenant_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          },
          "team_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Team Id"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": true
          },
          "updated_by": {
            "type": "integer",
            "title": "Updated By"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "updated_by",
          "id",
          "updated_at"
        ],
        "title": "POSSyncSettingOut"
      },
      "POSTerminalDetailsRequest": {
        "properties": {
          "terminal_id": {
            "type": "string",
            "title": "Terminal Id"
          },
          "time_range": {
            "$ref": "#/components/schemas/TimeRange",
            "default": "last_24_hours"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          }
        },
        "type": "object",
        "required": [
          "terminal_id"
        ],
        "title": "POSTerminalDetailsRequest",
        "description": "Request for detailed terminal analytics"
      },
      "POSTerminalDetailsResponse": {
        "properties": {
          "terminal": {
            "$ref": "#/components/schemas/POSTerminalSummary"
          },
          "transaction_metrics": {
            "additionalProperties": true,
            "type": "object",
            "title": "Transaction Metrics"
          },
          "sync_metrics": {
            "$ref": "#/components/schemas/POSSyncMetrics"
          },
          "error_analysis": {
            "$ref": "#/components/schemas/POSErrorAnalysis"
          },
          "performance_metrics": {
            "$ref": "#/components/schemas/POSPerformanceMetrics"
          },
          "hourly_trends": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Hourly Trends"
          },
          "daily_trends": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Daily Trends"
          },
          "recent_transactions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Transactions"
          },
          "recent_syncs": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Syncs"
          },
          "recent_errors": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Errors"
          },
          "active_alerts": {
            "items": {
              "$ref": "#/components/schemas/POSAlert"
            },
            "type": "array",
            "title": "Active Alerts"
          },
          "alert_history": {
            "items": {
              "$ref": "#/components/schemas/POSAlert"
            },
            "type": "array",
            "title": "Alert History"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          },
          "time_range": {
            "type": "string",
            "title": "Time Range"
          }
        },
        "type": "object",
        "required": [
          "terminal",
          "transaction_metrics",
          "sync_metrics",
          "error_analysis",
          "performance_metrics",
          "hourly_trends",
          "daily_trends",
          "recent_transactions",
          "recent_syncs",
          "recent_errors",
          "active_alerts",
          "alert_history",
          "generated_at",
          "time_range"
        ],
        "title": "POSTerminalDetailsResponse",
        "description": "Response for detailed terminal analytics"
      },
      "POSTerminalSummary": {
        "properties": {
          "terminal_id": {
            "type": "string",
            "title": "Terminal Id"
          },
          "terminal_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terminal Name"
          },
          "terminal_location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terminal Location"
          },
          "provider_id": {
            "type": "integer",
            "title": "Provider Id"
          },
          "provider_name": {
            "type": "string",
            "title": "Provider Name"
          },
          "is_online": {
            "type": "boolean",
            "title": "Is Online"
          },
          "health_status": {
            "$ref": "#/components/schemas/POSHealthStatus"
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Seen At"
          },
          "offline_duration_minutes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Offline Duration Minutes"
          },
          "recent_transactions": {
            "type": "integer",
            "title": "Recent Transactions"
          },
          "recent_errors": {
            "type": "integer",
            "title": "Recent Errors"
          },
          "recent_sync_failures": {
            "type": "integer",
            "title": "Recent Sync Failures"
          },
          "recent_success_rate": {
            "type": "number",
            "title": "Recent Success Rate"
          },
          "average_response_time_ms": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Response Time Ms"
          },
          "has_active_alerts": {
            "type": "boolean",
            "title": "Has Active Alerts"
          },
          "alert_count": {
            "type": "integer",
            "title": "Alert Count"
          }
        },
        "type": "object",
        "required": [
          "terminal_id",
          "terminal_name",
          "terminal_location",
          "provider_id",
          "provider_name",
          "is_online",
          "health_status",
          "last_seen_at",
          "offline_duration_minutes",
          "recent_transactions",
          "recent_errors",
          "recent_sync_failures",
          "recent_success_rate",
          "average_response_time_ms",
          "has_active_alerts",
          "alert_count"
        ],
        "title": "POSTerminalSummary",
        "description": "Summary metrics for a POS terminal"
      },
      "POSTransactionTrend": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "transaction_count": {
            "type": "integer",
            "title": "Transaction Count"
          },
          "transaction_value": {
            "type": "string",
            "title": "Transaction Value"
          },
          "success_rate": {
            "type": "number",
            "title": "Success Rate"
          },
          "average_value": {
            "type": "string",
            "title": "Average Value"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "transaction_count",
          "transaction_value",
          "success_rate",
          "average_value"
        ],
        "title": "POSTransactionTrend",
        "description": "Transaction trend data point"
      },
      "POSVendor": {
        "type": "string",
        "enum": [
          "square",
          "toast",
          "clover"
        ],
        "title": "POSVendor"
      },
      "POSWebhookMetrics": {
        "properties": {
          "total_webhooks": {
            "type": "integer",
            "title": "Total Webhooks"
          },
          "successful_webhooks": {
            "type": "integer",
            "title": "Successful Webhooks"
          },
          "failed_webhooks": {
            "type": "integer",
            "title": "Failed Webhooks"
          },
          "pending_webhooks": {
            "type": "integer",
            "title": "Pending Webhooks"
          },
          "success_rate": {
            "type": "number",
            "title": "Success Rate"
          },
          "average_processing_time_ms": {
            "type": "number",
            "title": "Average Processing Time Ms"
          },
          "event_type_breakdown": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Event Type Breakdown"
          },
          "recent_failures": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Failures"
          }
        },
        "type": "object",
        "required": [
          "total_webhooks",
          "successful_webhooks",
          "failed_webhooks",
          "pending_webhooks",
          "success_rate",
          "average_processing_time_ms",
          "event_type_breakdown",
          "recent_failures"
        ],
        "title": "POSWebhookMetrics",
        "description": "Webhook processing metrics"
      },
      "PaginatedAuditLogs": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/MenuAuditLog"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "size",
          "pages"
        ],
        "title": "PaginatedAuditLogs"
      },
      "PaginatedMenuVersions": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/MenuVersion"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "size",
          "pages"
        ],
        "title": "PaginatedMenuVersions"
      },
      "PaginatedPreviewResponse": {
        "properties": {
          "items": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Items"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_items": {
            "type": "integer",
            "title": "Total Items"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next"
          },
          "has_previous": {
            "type": "boolean",
            "title": "Has Previous"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "page_size",
          "total_items",
          "total_pages",
          "has_next",
          "has_previous"
        ],
        "title": "PaginatedPreviewResponse",
        "description": "Paginated response for schedule preview"
      },
      "PaginatedSalesResponse": {
        "properties": {
          "items": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SalesDetailResponse"
                },
                {
                  "$ref": "#/components/schemas/StaffPerformanceResponse"
                },
                {
                  "$ref": "#/components/schemas/ProductPerformanceResponse"
                }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next"
          },
          "has_prev": {
            "type": "boolean",
            "title": "Has Prev"
          },
          "page_summary": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SalesSummaryResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "per_page",
          "total_pages",
          "has_next",
          "has_prev"
        ],
        "title": "PaginatedSalesResponse",
        "description": "Paginated response for sales data"
      },
      "PaginatedSplitsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/SplitResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "page_size",
          "pages"
        ],
        "title": "PaginatedSplitsResponse"
      },
      "PartialFulfillmentRequest": {
        "properties": {
          "fulfilled_items": {
            "items": {
              "$ref": "#/components/schemas/FulfilledItem"
            },
            "type": "array",
            "minItems": 1,
            "title": "Fulfilled Items",
            "description": "List of items that have been fulfilled"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason",
            "description": "Optional reason for the partial fulfillment"
          }
        },
        "type": "object",
        "required": [
          "fulfilled_items"
        ],
        "title": "PartialFulfillmentRequest",
        "description": "Request for partial order fulfillment"
      },
      "PartialFulfillmentResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "fulfilled_items": {
            "items": {
              "$ref": "#/components/schemas/FulfilledItem"
            },
            "type": "array",
            "title": "Fulfilled Items"
          },
          "inventory_result": {
            "$ref": "#/components/schemas/InventoryDeductionResult"
          }
        },
        "type": "object",
        "required": [
          "success",
          "order_id",
          "fulfilled_items",
          "inventory_result"
        ],
        "title": "PartialFulfillmentResponse",
        "description": "Response for partial fulfillment"
      },
      "ParticipantPaymentRequest": {
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/PaymentGateway"
          },
          "amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount"
          },
          "payment_method_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Method Id"
          },
          "save_payment_method": {
            "type": "boolean",
            "title": "Save Payment Method",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "gateway",
          "amount"
        ],
        "title": "ParticipantPaymentRequest"
      },
      "ParticipantRequest": {
        "properties": {
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "notify_via_email": {
            "type": "boolean",
            "title": "Notify Via Email",
            "default": true
          },
          "notify_via_sms": {
            "type": "boolean",
            "title": "Notify Via Sms",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "ParticipantRequest"
      },
      "ParticipantResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "share_amount": {
            "type": "number",
            "title": "Share Amount"
          },
          "tip_amount": {
            "type": "number",
            "title": "Tip Amount"
          },
          "total_amount": {
            "type": "number",
            "title": "Total Amount"
          },
          "paid_amount": {
            "type": "number",
            "title": "Paid Amount"
          },
          "remaining_amount": {
            "type": "number",
            "title": "Remaining Amount"
          },
          "status": {
            "$ref": "#/components/schemas/ParticipantStatus"
          },
          "access_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Token"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "email",
          "share_amount",
          "tip_amount",
          "total_amount",
          "paid_amount",
          "remaining_amount",
          "status"
        ],
        "title": "ParticipantResponse"
      },
      "ParticipantStatus": {
        "type": "string",
        "enum": [
          "pending",
          "accepted",
          "declined",
          "paid",
          "refunded"
        ],
        "title": "ParticipantStatus",
        "description": "Status of a participant in a split"
      },
      "PaymentCreate": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "gateway": {
            "$ref": "#/components/schemas/PaymentGateway"
          },
          "amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount",
            "description": "Payment amount (defaults to order total)"
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "Currency code",
            "default": "USD"
          },
          "payment_method_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Method Id",
            "description": "Saved payment method ID"
          },
          "save_payment_method": {
            "type": "boolean",
            "title": "Save Payment Method",
            "description": "Save payment method for future use",
            "default": false
          },
          "return_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Return Url",
            "description": "URL to redirect after payment (PayPal)"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "gateway"
        ],
        "title": "PaymentCreate",
        "description": "Schema for creating a payment"
      },
      "PaymentDetail": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "payment_id": {
            "type": "string",
            "title": "Payment Id"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "gateway": {
            "$ref": "#/components/schemas/PaymentGateway"
          },
          "gateway_payment_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gateway Payment Id"
          },
          "amount": {
            "type": "string",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "status": {
            "$ref": "#/components/schemas/modules__payments__models__payment_models__PaymentStatus"
          },
          "payment_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/modules__payments__models__payment_models__PaymentMethod"
              },
              {
                "type": "null"
              }
            ]
          },
          "requires_action": {
            "type": "boolean",
            "title": "Requires Action",
            "default": false
          },
          "action_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Action Url"
          },
          "gateway_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gateway Config"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "payment_method_details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Method Details"
          },
          "fee_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fee Amount"
          },
          "net_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Net Amount"
          },
          "processed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processed At"
          },
          "failure_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Failure Code"
          },
          "failure_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Failure Message"
          },
          "refunds": {
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            },
            "type": "array",
            "title": "Refunds"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "payment_id",
          "order_id",
          "gateway",
          "amount",
          "currency",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "PaymentDetail",
        "description": "Detailed payment response with additional information"
      },
      "PaymentDetailResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "employee_id": {
            "type": "integer",
            "title": "Employee Id"
          },
          "pay_period_start": {
            "type": "string",
            "format": "date",
            "title": "Pay Period Start"
          },
          "pay_period_end": {
            "type": "string",
            "format": "date",
            "title": "Pay Period End"
          },
          "hours": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Hours"
          },
          "earnings": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Earnings"
          },
          "deductions": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Deductions"
          },
          "net_amount": {
            "type": "string",
            "title": "Net Amount"
          },
          "payment_info": {
            "additionalProperties": true,
            "type": "object",
            "title": "Payment Info"
          },
          "tax_applications": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Tax Applications"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "employee_id",
          "pay_period_start",
          "pay_period_end",
          "hours",
          "earnings",
          "deductions",
          "net_amount",
          "payment_info",
          "tax_applications",
          "metadata"
        ],
        "title": "PaymentDetailResponse",
        "description": "Response model for detailed payment information"
      },
      "PaymentExportRequest": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "title": "End Date"
          },
          "employee_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Employee Ids"
          },
          "format": {
            "type": "string",
            "pattern": "^(csv|excel|pdf)$",
            "title": "Format",
            "default": "csv"
          },
          "include_details": {
            "type": "boolean",
            "title": "Include Details",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "start_date",
          "end_date"
        ],
        "title": "PaymentExportRequest",
        "description": "Request model for exporting payment data"
      },
      "PaymentExportResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "export_id": {
            "type": "string",
            "title": "Export Id"
          },
          "format": {
            "type": "string",
            "title": "Format"
          },
          "record_count": {
            "type": "integer",
            "title": "Record Count"
          },
          "download_url": {
            "type": "string",
            "title": "Download Url"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "export_id",
          "format",
          "record_count",
          "download_url"
        ],
        "title": "PaymentExportResponse",
        "description": "Response model for payment export"
      },
      "PaymentGateway": {
        "type": "string",
        "enum": [
          "stripe",
          "square",
          "paypal",
          "cash",
          "manual"
        ],
        "title": "PaymentGateway",
        "description": "Supported payment gateways"
      },
      "PaymentGatewayConfig": {
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/PaymentGateway"
          },
          "config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Config"
          }
        },
        "type": "object",
        "required": [
          "gateway",
          "config"
        ],
        "title": "PaymentGatewayConfig",
        "description": "Public gateway configuration"
      },
      "PaymentHistoryItem": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "pay_period_start": {
            "type": "string",
            "format": "date",
            "title": "Pay Period Start"
          },
          "pay_period_end": {
            "type": "string",
            "format": "date",
            "title": "Pay Period End"
          },
          "gross_amount": {
            "type": "string",
            "title": "Gross Amount"
          },
          "net_amount": {
            "type": "string",
            "title": "Net Amount"
          },
          "regular_hours": {
            "type": "string",
            "title": "Regular Hours"
          },
          "overtime_hours": {
            "type": "string",
            "title": "Overtime Hours"
          },
          "status": {
            "$ref": "#/components/schemas/modules__payroll__enums__payroll_enums__PaymentStatus"
          },
          "processed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processed At"
          },
          "paid_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paid At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "pay_period_start",
          "pay_period_end",
          "gross_amount",
          "net_amount",
          "regular_hours",
          "overtime_hours",
          "status"
        ],
        "title": "PaymentHistoryItem",
        "description": "Response model for payment history item"
      },
      "PaymentHistoryResponse": {
        "properties": {
          "employee_id": {
            "type": "integer",
            "title": "Employee Id"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "offset": {
            "type": "integer",
            "title": "Offset"
          },
          "summary": {
            "additionalProperties": true,
            "type": "object",
            "title": "Summary"
          },
          "payments": {
            "items": {
              "$ref": "#/components/schemas/PaymentHistoryItem"
            },
            "type": "array",
            "title": "Payments"
          }
        },
        "type": "object",
        "required": [
          "employee_id",
          "total_count",
          "limit",
          "offset",
          "summary",
          "payments"
        ],
        "title": "PaymentHistoryResponse",
        "description": "Response model for employee payment history"
      },
      "PaymentMethodCreate": {
        "properties": {
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "gateway": {
            "$ref": "#/components/schemas/PaymentGateway"
          },
          "payment_method_token": {
            "type": "string",
            "title": "Payment Method Token",
            "description": "Token from frontend SDK"
          },
          "set_as_default": {
            "type": "boolean",
            "title": "Set As Default",
            "description": "Set as default payment method",
            "default": false
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "customer_id",
          "gateway",
          "payment_method_token"
        ],
        "title": "PaymentMethodCreate",
        "description": "Schema for saving a payment method"
      },
      "PaymentMethodResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "gateway": {
            "$ref": "#/components/schemas/PaymentGateway"
          },
          "method_type": {
            "$ref": "#/components/schemas/modules__payments__models__payment_models__PaymentMethod"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "card_last4": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Last4"
          },
          "card_brand": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Brand"
          },
          "card_exp_month": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Exp Month"
          },
          "card_exp_year": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Exp Year"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "customer_id",
          "gateway",
          "method_type",
          "is_default",
          "is_active",
          "created_at"
        ],
        "title": "PaymentMethodResponse",
        "description": "Saved payment method response"
      },
      "PaymentReconciliationCreate": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "external_payment_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "External Payment Reference"
          },
          "amount_expected": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Expected"
          },
          "amount_received": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Received"
          },
          "reconciliation_status": {
            "$ref": "#/components/schemas/ReconciliationStatus"
          },
          "discrepancy_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyType"
              },
              {
                "type": "null"
              }
            ]
          },
          "discrepancy_details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discrepancy Details"
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "external_payment_reference",
          "amount_expected",
          "amount_received",
          "reconciliation_status"
        ],
        "title": "PaymentReconciliationCreate"
      },
      "PaymentReconciliationOut": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "external_payment_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "External Payment Reference"
          },
          "amount_expected": {
            "type": "string",
            "title": "Amount Expected"
          },
          "amount_received": {
            "type": "string",
            "title": "Amount Received"
          },
          "reconciliation_status": {
            "$ref": "#/components/schemas/ReconciliationStatus"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "discrepancy_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyType"
              },
              {
                "type": "null"
              }
            ]
          },
          "discrepancy_details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discrepancy Details"
          },
          "reconciliation_action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReconciliationAction"
              },
              {
                "type": "null"
              }
            ]
          },
          "resolution_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution Notes"
          },
          "resolved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved At"
          },
          "resolved_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "external_payment_reference",
          "amount_expected",
          "amount_received",
          "reconciliation_status",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "PaymentReconciliationOut"
      },
      "PaymentReconciliationUpdate": {
        "properties": {
          "reconciliation_status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReconciliationStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "discrepancy_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyType"
              },
              {
                "type": "null"
              }
            ]
          },
          "discrepancy_details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discrepancy Details"
          },
          "reconciliation_action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReconciliationAction"
              },
              {
                "type": "null"
              }
            ]
          },
          "resolution_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution Notes"
          },
          "resolved_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved By"
          }
        },
        "type": "object",
        "title": "PaymentReconciliationUpdate"
      },
      "PaymentResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "payment_id": {
            "type": "string",
            "title": "Payment Id"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "gateway": {
            "$ref": "#/components/schemas/PaymentGateway"
          },
          "gateway_payment_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gateway Payment Id"
          },
          "amount": {
            "type": "string",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "status": {
            "$ref": "#/components/schemas/modules__payments__models__payment_models__PaymentStatus"
          },
          "payment_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/modules__payments__models__payment_models__PaymentMethod"
              },
              {
                "type": "null"
              }
            ]
          },
          "requires_action": {
            "type": "boolean",
            "title": "Requires Action",
            "default": false
          },
          "action_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Action Url"
          },
          "gateway_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gateway Config"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "payment_id",
          "order_id",
          "gateway",
          "amount",
          "currency",
          "status",
          "created_at"
        ],
        "title": "PaymentResponse",
        "description": "Basic payment response"
      },
      "PaymentStatus-Input": {
        "type": "string",
        "enum": [
          "pending",
          "calculated",
          "approved",
          "processed",
          "paid",
          "cancelled",
          "failed"
        ],
        "title": "PaymentStatus"
      },
      "PaymentStatusUpdate": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PaymentStatus-Input"
          },
          "payment_method": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Method"
          },
          "payment_reference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Reference"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "PaymentStatusUpdate",
        "description": "Request model for updating payment status"
      },
      "PaymentSummaryResponse": {
        "properties": {
          "period": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Period"
          },
          "employee_count": {
            "type": "integer",
            "title": "Employee Count"
          },
          "payment_count": {
            "type": "integer",
            "title": "Payment Count"
          },
          "totals": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Totals"
          },
          "taxes": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Taxes"
          },
          "benefits": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Benefits"
          },
          "hours": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Hours"
          }
        },
        "type": "object",
        "required": [
          "period",
          "employee_count",
          "payment_count",
          "totals",
          "taxes",
          "benefits",
          "hours"
        ],
        "title": "PaymentSummaryResponse",
        "description": "Response model for payment summary by period"
      },
      "PaymentUpdateResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "webhook_event_id": {
            "type": "integer",
            "title": "Webhook Event Id"
          },
          "external_transaction_id": {
            "type": "string",
            "title": "External Transaction Id"
          },
          "external_order_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Order Id"
          },
          "external_payment_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Payment Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "payment_status": {
            "$ref": "#/components/schemas/modules__orders__enums__external_pos_enums__PaymentStatus"
          },
          "payment_method": {
            "$ref": "#/components/schemas/modules__orders__enums__external_pos_enums__PaymentMethod"
          },
          "payment_amount": {
            "type": "string",
            "title": "Payment Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "tip_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tip Amount"
          },
          "tax_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Amount"
          },
          "discount_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Amount"
          },
          "card_last_four": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Last Four"
          },
          "card_brand": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Card Brand"
          },
          "is_processed": {
            "type": "boolean",
            "title": "Is Processed"
          },
          "processed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processed At"
          },
          "processing_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processing Notes"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "webhook_event_id",
          "external_transaction_id",
          "external_order_id",
          "external_payment_id",
          "order_id",
          "payment_status",
          "payment_method",
          "payment_amount",
          "currency",
          "tip_amount",
          "tax_amount",
          "discount_amount",
          "card_last_four",
          "card_brand",
          "is_processed",
          "processed_at",
          "processing_notes",
          "created_at"
        ],
        "title": "PaymentUpdateResponse",
        "description": "Response schema for payment updates"
      },
      "PaymentWebhookData": {
        "properties": {
          "reference": {
            "type": "string",
            "minLength": 1,
            "title": "Reference"
          },
          "order_reference": {
            "type": "string",
            "minLength": 1,
            "title": "Order Reference"
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount"
          },
          "payment_method": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Method"
          },
          "timestamp": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timestamp"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          }
        },
        "type": "object",
        "required": [
          "reference",
          "order_reference",
          "amount"
        ],
        "title": "PaymentWebhookData"
      },
      "PaymentWebhookResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "PaymentWebhookResponse",
        "description": "Webhook processing response"
      },
      "PayrollBatchStatus": {
        "properties": {
          "job_id": {
            "type": "string",
            "title": "Job Id",
            "description": "Batch job identifier"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Current job status"
          },
          "progress": {
            "type": "integer",
            "title": "Progress",
            "description": "Progress percentage (0-100)"
          },
          "total_staff": {
            "type": "integer",
            "title": "Total Staff",
            "description": "Total staff to process"
          },
          "completed_staff": {
            "type": "integer",
            "title": "Completed Staff",
            "description": "Number of staff completed"
          },
          "failed_staff": {
            "type": "integer",
            "title": "Failed Staff",
            "description": "Number of staff failed"
          },
          "estimated_completion": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Completion",
            "description": "Estimated completion time"
          },
          "error_summary": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Summary",
            "description": "Summary of errors encountered"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "status",
          "progress",
          "total_staff",
          "completed_staff",
          "failed_staff"
        ],
        "title": "PayrollBatchStatus",
        "description": "Status information for batch payroll processing."
      },
      "PayrollConfigurationCreate": {
        "properties": {
          "tenant_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          },
          "config_key": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Config Key"
          },
          "config_value": {
            "type": "string",
            "minLength": 1,
            "title": "Config Value"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "config_key",
          "config_value"
        ],
        "title": "PayrollConfigurationCreate",
        "description": "Request model for creating payroll configuration"
      },
      "PayrollConfigurationResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          },
          "config_key": {
            "type": "string",
            "title": "Config Key"
          },
          "config_value": {
            "type": "string",
            "title": "Config Value"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "config_key",
          "config_value",
          "created_at",
          "updated_at"
        ],
        "title": "PayrollConfigurationResponse",
        "description": "Response model for payroll configuration"
      },
      "PayrollExportRequest": {
        "properties": {
          "format": {
            "type": "string",
            "pattern": "^(csv|xlsx|pdf)$",
            "title": "Format",
            "description": "Export format",
            "default": "csv"
          },
          "pay_period_start": {
            "type": "string",
            "format": "date",
            "title": "Pay Period Start",
            "description": "Export period start"
          },
          "pay_period_end": {
            "type": "string",
            "format": "date",
            "title": "Pay Period End",
            "description": "Export period end"
          },
          "staff_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Ids",
            "description": "Specific staff IDs to export"
          },
          "include_details": {
            "type": "boolean",
            "title": "Include Details",
            "description": "Include detailed breakdown",
            "default": true
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id",
            "description": "Tenant ID filter"
          }
        },
        "type": "object",
        "required": [
          "pay_period_start",
          "pay_period_end"
        ],
        "title": "PayrollExportRequest",
        "description": "Request schema for payroll data export."
      },
      "PayrollExportResponse": {
        "properties": {
          "export_id": {
            "type": "string",
            "title": "Export Id",
            "description": "Export job identifier"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Export status"
          },
          "download_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Download Url",
            "description": "Download URL when ready"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At",
            "description": "URL expiration time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Export creation time"
          }
        },
        "type": "object",
        "required": [
          "export_id",
          "status",
          "created_at"
        ],
        "title": "PayrollExportResponse",
        "description": "Response schema for payroll export requests."
      },
      "PayrollHistoryResponse": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id",
            "description": "Staff member ID"
          },
          "staff_name": {
            "type": "string",
            "title": "Staff Name",
            "description": "Staff member name"
          },
          "payroll_history": {
            "items": {
              "$ref": "#/components/schemas/PayrollSummary"
            },
            "type": "array",
            "title": "Payroll History",
            "description": "List of payroll records for the staff member"
          },
          "total_records": {
            "type": "integer",
            "title": "Total Records",
            "description": "Total number of payroll records"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "staff_name",
          "payroll_history",
          "total_records"
        ],
        "title": "PayrollHistoryResponse",
        "description": "Response schema for GET /payrolls/{staff_id} endpoint."
      },
      "PayrollJobResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "job_id": {
            "type": "string",
            "title": "Job Id"
          },
          "job_type": {
            "type": "string",
            "title": "Job Type"
          },
          "status": {
            "$ref": "#/components/schemas/PayrollJobStatus"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "job_id",
          "job_type",
          "status",
          "started_at",
          "metadata"
        ],
        "title": "PayrollJobResponse",
        "description": "Response model for payroll job tracking"
      },
      "PayrollJobStatus": {
        "type": "string",
        "enum": [
          "pending",
          "processing",
          "completed",
          "failed",
          "cancelled"
        ],
        "title": "PayrollJobStatus",
        "description": "Status values for payroll job tracking."
      },
      "PayrollRulesResponse": {
        "properties": {
          "location": {
            "type": "string",
            "title": "Location",
            "description": "Location/jurisdiction for the rules"
          },
          "total_rules": {
            "type": "integer",
            "title": "Total Rules",
            "description": "Total number of tax rules"
          },
          "active_rules": {
            "type": "integer",
            "title": "Active Rules",
            "description": "Number of currently active rules"
          },
          "tax_rules": {
            "items": {
              "$ref": "#/components/schemas/TaxRuleInfo"
            },
            "type": "array",
            "title": "Tax Rules",
            "description": "List of tax rules"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "When rules were last updated"
          }
        },
        "type": "object",
        "required": [
          "location",
          "total_rules",
          "active_rules",
          "tax_rules",
          "last_updated"
        ],
        "title": "PayrollRulesResponse",
        "description": "Response schema for GET /payrolls/rules endpoint."
      },
      "PayrollRunRequest": {
        "properties": {
          "staff_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Ids",
            "description": "List of staff IDs to process. If None, processes all active staff"
          },
          "pay_period_start": {
            "type": "string",
            "format": "date",
            "title": "Pay Period Start",
            "description": "Start date of the pay period (YYYY-MM-DD)"
          },
          "pay_period_end": {
            "type": "string",
            "format": "date",
            "title": "Pay Period End",
            "description": "End date of the pay period (YYYY-MM-DD)"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id",
            "description": "Tenant ID for multi-tenant environments"
          },
          "force_recalculate": {
            "type": "boolean",
            "title": "Force Recalculate",
            "description": "Force recalculation even if payroll already exists for the period",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "pay_period_start",
          "pay_period_end"
        ],
        "title": "PayrollRunRequest",
        "description": "Request schema for POST /payrolls/run endpoint."
      },
      "PayrollRunResponse": {
        "properties": {
          "job_id": {
            "type": "string",
            "title": "Job Id",
            "description": "Unique identifier for the payroll run job"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the payroll run"
          },
          "total_staff": {
            "type": "integer",
            "title": "Total Staff",
            "description": "Total number of staff members processed"
          },
          "successful_count": {
            "type": "integer",
            "title": "Successful Count",
            "description": "Number of successfully processed staff"
          },
          "failed_count": {
            "type": "integer",
            "title": "Failed Count",
            "description": "Number of failed staff processing"
          },
          "pay_period_start": {
            "type": "string",
            "format": "date",
            "title": "Pay Period Start",
            "description": "Pay period start date"
          },
          "pay_period_end": {
            "type": "string",
            "format": "date",
            "title": "Pay Period End",
            "description": "Pay period end date"
          },
          "total_gross_pay": {
            "type": "string",
            "title": "Total Gross Pay",
            "description": "Total gross pay for all staff"
          },
          "total_net_pay": {
            "type": "string",
            "title": "Total Net Pay",
            "description": "Total net pay for all staff"
          },
          "total_deductions": {
            "type": "string",
            "title": "Total Deductions",
            "description": "Total deductions for all staff"
          },
          "processing_errors": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Processing Errors",
            "description": "List of processing errors with staff_id and error details"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Timestamp when payroll run was created"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "status",
          "total_staff",
          "successful_count",
          "failed_count",
          "pay_period_start",
          "pay_period_end",
          "total_gross_pay",
          "total_net_pay",
          "total_deductions",
          "created_at"
        ],
        "title": "PayrollRunResponse",
        "description": "Response schema for POST /payrolls/run endpoint."
      },
      "PayrollStatsResponse": {
        "properties": {
          "period_start": {
            "type": "string",
            "format": "date",
            "title": "Period Start",
            "description": "Statistics period start"
          },
          "period_end": {
            "type": "string",
            "format": "date",
            "title": "Period End",
            "description": "Statistics period end"
          },
          "total_employees": {
            "type": "integer",
            "title": "Total Employees",
            "description": "Total employees processed"
          },
          "total_gross_pay": {
            "type": "string",
            "title": "Total Gross Pay",
            "description": "Total gross pay"
          },
          "total_net_pay": {
            "type": "string",
            "title": "Total Net Pay",
            "description": "Total net pay"
          },
          "total_tax_deductions": {
            "type": "string",
            "title": "Total Tax Deductions",
            "description": "Total tax deductions"
          },
          "total_benefit_deductions": {
            "type": "string",
            "title": "Total Benefit Deductions",
            "description": "Total benefit deductions"
          },
          "average_hours_per_employee": {
            "type": "string",
            "title": "Average Hours Per Employee",
            "description": "Average hours per employee"
          },
          "average_gross_pay": {
            "type": "string",
            "title": "Average Gross Pay",
            "description": "Average gross pay per employee"
          },
          "deduction_breakdown": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Deduction Breakdown",
            "description": "Breakdown of deductions by category"
          },
          "earnings_breakdown": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Earnings Breakdown",
            "description": "Breakdown of earnings by type"
          }
        },
        "type": "object",
        "required": [
          "period_start",
          "period_end",
          "total_employees",
          "total_gross_pay",
          "total_net_pay",
          "total_tax_deductions",
          "total_benefit_deductions",
          "average_hours_per_employee",
          "average_gross_pay",
          "deduction_breakdown",
          "earnings_breakdown"
        ],
        "title": "PayrollStatsResponse",
        "description": "Response schema for payroll statistics and analytics."
      },
      "PayrollSummary": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id",
            "description": "Staff member ID"
          },
          "staff_name": {
            "type": "string",
            "title": "Staff Name",
            "description": "Staff member name"
          },
          "period": {
            "type": "string",
            "title": "Period",
            "description": "Pay period (YYYY-MM format)"
          },
          "gross_pay": {
            "type": "string",
            "title": "Gross Pay",
            "description": "Gross pay amount"
          },
          "net_pay": {
            "type": "string",
            "title": "Net Pay",
            "description": "Net pay amount"
          },
          "total_deductions": {
            "type": "string",
            "title": "Total Deductions",
            "description": "Total deductions"
          },
          "total_hours": {
            "type": "string",
            "title": "Total Hours",
            "description": "Total hours worked"
          },
          "processed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Processed At",
            "description": "Processing timestamp"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "staff_name",
          "period",
          "gross_pay",
          "net_pay",
          "total_deductions",
          "total_hours",
          "processed_at"
        ],
        "title": "PayrollSummary",
        "description": "Summary information for payroll retrieval."
      },
      "PayrollTaxCalculationRequest": {
        "properties": {
          "employee_id": {
            "type": "integer",
            "title": "Employee Id",
            "description": "Employee/Staff ID"
          },
          "location": {
            "type": "string",
            "title": "Location",
            "description": "Location/jurisdiction for tax rules"
          },
          "gross_pay": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Gross Pay",
            "description": "Gross pay amount for the period"
          },
          "pay_date": {
            "type": "string",
            "format": "date",
            "title": "Pay Date",
            "description": "Pay date for determining applicable tax rules"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id",
            "description": "Tenant ID for multi-tenant setup"
          }
        },
        "type": "object",
        "required": [
          "employee_id",
          "location",
          "gross_pay",
          "pay_date"
        ],
        "title": "PayrollTaxCalculationRequest",
        "description": "Request schema for payroll tax calculations."
      },
      "PayrollTaxCalculationResponse": {
        "properties": {
          "gross_pay": {
            "type": "string",
            "title": "Gross Pay",
            "description": "Original gross pay amount"
          },
          "total_taxes": {
            "type": "string",
            "title": "Total Taxes",
            "description": "Total calculated taxes"
          },
          "net_pay": {
            "type": "string",
            "title": "Net Pay",
            "description": "Net pay after tax deductions"
          },
          "tax_breakdown": {
            "$ref": "#/components/schemas/TaxBreakdown",
            "description": "Breakdown by tax category"
          },
          "tax_applications": {
            "items": {
              "$ref": "#/components/schemas/TaxApplicationDetail"
            },
            "type": "array",
            "title": "Tax Applications",
            "description": "Detailed tax rule applications"
          },
          "calculation_date": {
            "type": "string",
            "format": "date-time",
            "title": "Calculation Date",
            "description": "When calculation was performed"
          }
        },
        "type": "object",
        "required": [
          "gross_pay",
          "total_taxes",
          "net_pay",
          "tax_breakdown",
          "calculation_date"
        ],
        "title": "PayrollTaxCalculationResponse",
        "description": "Response schema for payroll tax calculations."
      },
      "PayrollTaxServiceRequest": {
        "properties": {
          "employee_payment_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Employee Payment Id",
            "description": "Existing payment record ID"
          },
          "staff_id": {
            "type": "integer",
            "title": "Staff Id",
            "description": "Staff member ID"
          },
          "payroll_policy_id": {
            "type": "integer",
            "title": "Payroll Policy Id",
            "description": "Payroll policy ID"
          },
          "pay_period_start": {
            "type": "string",
            "format": "date",
            "title": "Pay Period Start",
            "description": "Pay period start date"
          },
          "pay_period_end": {
            "type": "string",
            "format": "date",
            "title": "Pay Period End",
            "description": "Pay period end date"
          },
          "gross_pay": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Gross Pay",
            "description": "Calculated gross pay"
          },
          "location": {
            "type": "string",
            "title": "Location",
            "description": "Employee work location"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id",
            "description": "Tenant ID"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "payroll_policy_id",
          "pay_period_start",
          "pay_period_end",
          "gross_pay",
          "location"
        ],
        "title": "PayrollTaxServiceRequest",
        "description": "Internal service request for payroll tax integration."
      },
      "PayrollTaxServiceResponse": {
        "properties": {
          "employee_payment_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Employee Payment Id",
            "description": "Payment record ID"
          },
          "tax_calculation": {
            "$ref": "#/components/schemas/PayrollTaxCalculationResponse",
            "description": "Tax calculation results"
          },
          "applications_saved": {
            "type": "boolean",
            "title": "Applications Saved",
            "description": "Whether tax applications were persisted",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "tax_calculation"
        ],
        "title": "PayrollTaxServiceResponse",
        "description": "Internal service response for payroll tax integration."
      },
      "PeakTimeInsight": {
        "properties": {
          "insight_type": {
            "$ref": "#/components/schemas/InsightType",
            "default": "peak_time"
          },
          "primary_peak": {
            "$ref": "#/components/schemas/TimePattern",
            "description": "Busiest time period"
          },
          "secondary_peak": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TimePattern"
              },
              {
                "type": "null"
              }
            ],
            "description": "Second busiest period"
          },
          "quiet_periods": {
            "items": {
              "$ref": "#/components/schemas/TimePattern"
            },
            "type": "array",
            "title": "Quiet Periods",
            "description": "Low activity periods"
          },
          "weekly_pattern": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/TimePattern"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Weekly Pattern",
            "description": "Peak times by day of week"
          },
          "confidence": {
            "$ref": "#/components/schemas/ConfidenceLevel",
            "description": "Confidence in analysis"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations",
            "description": "Actionable recommendations"
          }
        },
        "type": "object",
        "required": [
          "primary_peak",
          "weekly_pattern",
          "confidence",
          "recommendations"
        ],
        "title": "PeakTimeInsight",
        "description": "Insights about peak business hours",
        "example": {
          "confidence": "high",
          "insight_type": "peak_time",
          "primary_peak": {
            "customer_count": 38,
            "hour": 12,
            "intensity": 0.95,
            "order_count": 45,
            "revenue": "2500.00"
          },
          "recommendations": [
            "Schedule more staff during 12:00-13:00",
            "Prepare inventory for lunch rush"
          ]
        }
      },
      "PinCheckInRequest": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "pin": {
            "type": "string",
            "title": "Pin"
          },
          "device_id": {
            "type": "string",
            "title": "Device Id"
          },
          "location_lat": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location Lat"
          },
          "location_lng": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location Lng"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "pin",
          "device_id"
        ],
        "title": "PinCheckInRequest"
      },
      "PinSetupRequest": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "pin": {
            "type": "string",
            "maxLength": 6,
            "minLength": 4,
            "pattern": "^[0-9]+$",
            "title": "Pin"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "pin"
        ],
        "title": "PinSetupRequest"
      },
      "PredictionAlert": {
        "properties": {
          "alert_id": {
            "type": "string",
            "title": "Alert Id"
          },
          "alert_type": {
            "type": "string",
            "title": "Alert Type",
            "description": "stockout_risk, demand_spike, anomaly"
          },
          "severity": {
            "type": "string",
            "title": "Severity",
            "description": "low, medium, high, critical"
          },
          "entity_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Id"
          },
          "entity_name": {
            "type": "string",
            "title": "Entity Name"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "predicted_impact": {
            "additionalProperties": true,
            "type": "object",
            "title": "Predicted Impact"
          },
          "recommended_actions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommended Actions"
          },
          "alert_time": {
            "type": "string",
            "format": "date-time",
            "title": "Alert Time"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "alert_id",
          "alert_type",
          "severity",
          "entity_id",
          "entity_name",
          "message",
          "predicted_impact",
          "recommended_actions"
        ],
        "title": "PredictionAlert",
        "description": "Alert for significant predictions"
      },
      "PredictionConfidence": {
        "type": "string",
        "enum": [
          "low",
          "medium",
          "high",
          "very_high"
        ],
        "title": "PredictionConfidence",
        "description": "Confidence levels for predictions"
      },
      "PredictionExportRequest": {
        "properties": {
          "forecast_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Forecast Ids"
          },
          "format": {
            "type": "string",
            "title": "Format",
            "description": "csv, excel, json",
            "default": "csv"
          },
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "default": true
          },
          "include_charts": {
            "type": "boolean",
            "title": "Include Charts",
            "default": false
          },
          "date_range": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string",
                  "format": "date"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Range"
          }
        },
        "type": "object",
        "required": [
          "forecast_ids"
        ],
        "title": "PredictionExportRequest",
        "description": "Request to export predictions"
      },
      "PredictionPoint": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "predicted_value": {
            "type": "number",
            "title": "Predicted Value"
          },
          "lower_bound": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lower Bound"
          },
          "upper_bound": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Upper Bound"
          },
          "confidence_level": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence Level"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "predicted_value"
        ],
        "title": "PredictionPoint",
        "description": "Single prediction point"
      },
      "PredictionRequest": {
        "properties": {
          "entity_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Id",
            "description": "ID of specific entity (product/category)"
          },
          "entity_type": {
            "type": "string",
            "title": "Entity Type",
            "description": "Type of entity: product, category, overall"
          },
          "forecast_type": {
            "$ref": "#/components/schemas/ForecastType"
          },
          "time_granularity": {
            "$ref": "#/components/schemas/TimeGranularity",
            "default": "daily"
          },
          "horizon_days": {
            "type": "integer",
            "maximum": 365.0,
            "minimum": 1.0,
            "title": "Horizon Days",
            "description": "Forecast horizon in days",
            "default": 7
          },
          "include_confidence_intervals": {
            "type": "boolean",
            "title": "Include Confidence Intervals",
            "default": true
          },
          "model_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelType"
              },
              {
                "type": "null"
              }
            ]
          },
          "custom_parameters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Parameters"
          }
        },
        "type": "object",
        "required": [
          "entity_type",
          "forecast_type"
        ],
        "title": "PredictionRequest",
        "description": "Base request for predictions"
      },
      "PredictiveInsight": {
        "properties": {
          "insight_id": {
            "type": "string",
            "title": "Insight Id"
          },
          "insight_type": {
            "type": "string",
            "title": "Insight Type",
            "description": "demand_trend, stock_risk, revenue_opportunity, anomaly"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "impact_score": {
            "type": "number",
            "maximum": 10.0,
            "minimum": 0.0,
            "title": "Impact Score"
          },
          "affected_entities": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Affected Entities"
          },
          "recommended_actions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recommended Actions"
          },
          "confidence": {
            "$ref": "#/components/schemas/PredictionConfidence"
          },
          "valid_until": {
            "type": "string",
            "format": "date-time",
            "title": "Valid Until"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "insight_id",
          "insight_type",
          "title",
          "description",
          "impact_score",
          "affected_entities",
          "recommended_actions",
          "confidence",
          "valid_until"
        ],
        "title": "PredictiveInsight",
        "description": "Actionable predictive insight"
      },
      "PriceAdjustment": {
        "properties": {
          "adjustment_type": {
            "type": "string",
            "title": "Adjustment Type"
          },
          "adjustment_amount": {
            "type": "string",
            "title": "Adjustment Amount"
          },
          "adjustment_percentage": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Adjustment Percentage"
          },
          "reason": {
            "type": "string",
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "adjustment_type",
          "adjustment_amount",
          "reason"
        ],
        "title": "PriceAdjustment"
      },
      "PriceOptimizationGoal": {
        "type": "string",
        "enum": [
          "maximize_revenue",
          "maximize_profit",
          "maximize_volume",
          "clear_inventory",
          "match_competition"
        ],
        "title": "PriceOptimizationGoal",
        "description": "Goals for price optimization"
      },
      "PriceTestingConfig": {
        "properties": {
          "test_name": {
            "type": "string",
            "title": "Test Name"
          },
          "menu_item_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Menu Item Ids"
          },
          "control_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Control Price"
          },
          "test_prices": {
            "items": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "array",
            "title": "Test Prices"
          },
          "test_duration_days": {
            "type": "integer",
            "maximum": 30.0,
            "minimum": 7.0,
            "title": "Test Duration Days",
            "default": 14
          },
          "min_sample_size_per_variant": {
            "type": "integer",
            "minimum": 50.0,
            "title": "Min Sample Size Per Variant",
            "default": 100
          },
          "traffic_allocation": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Traffic Allocation",
            "description": "Traffic allocation between variants"
          },
          "primary_metric": {
            "type": "string",
            "title": "Primary Metric",
            "default": "revenue_per_customer"
          },
          "secondary_metrics": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Secondary Metrics"
          }
        },
        "type": "object",
        "required": [
          "test_name",
          "menu_item_ids",
          "control_price",
          "test_prices"
        ],
        "title": "PriceTestingConfig",
        "description": "Configuration for A/B price testing"
      },
      "PriceTestingResult": {
        "properties": {
          "test_name": {
            "type": "string",
            "title": "Test Name"
          },
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "test_duration_actual": {
            "type": "integer",
            "title": "Test Duration Actual"
          },
          "variant_results": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "Variant Results"
          },
          "winner": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Winner"
          },
          "confidence_level": {
            "type": "number",
            "title": "Confidence Level"
          },
          "statistical_significance": {
            "type": "boolean",
            "title": "Statistical Significance"
          },
          "recommended_price": {
            "type": "string",
            "title": "Recommended Price"
          },
          "expected_improvement": {
            "type": "number",
            "title": "Expected Improvement"
          },
          "implementation_confidence": {
            "type": "number",
            "title": "Implementation Confidence"
          }
        },
        "type": "object",
        "required": [
          "test_name",
          "menu_item_id",
          "test_duration_actual",
          "variant_results",
          "confidence_level",
          "statistical_significance",
          "recommended_price",
          "expected_improvement",
          "implementation_confidence"
        ],
        "title": "PriceTestingResult",
        "description": "Results from price testing",
        "example": {
          "confidence_level": 0.95,
          "expected_improvement": 8.5,
          "menu_item_id": 101,
          "recommended_price": "21.99",
          "statistical_significance": true,
          "test_duration_actual": 14,
          "test_name": "Salmon Pricing Test",
          "winner": "variant_a"
        }
      },
      "PriceType": {
        "type": "string",
        "enum": [
          "fixed",
          "percentage"
        ],
        "title": "PriceType"
      },
      "PricingContext": {
        "properties": {
          "time_of_day": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Of Day"
          },
          "day_of_week": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Day Of Week"
          },
          "demand_level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Demand Level"
          },
          "inventory_level": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Inventory Level"
          },
          "weather": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Weather"
          },
          "special_events": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Events"
          }
        },
        "type": "object",
        "title": "PricingContext"
      },
      "PricingRecommendation": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "item_name": {
            "type": "string",
            "title": "Item Name"
          },
          "current_price": {
            "type": "string",
            "title": "Current Price"
          },
          "recommended_price": {
            "type": "string",
            "title": "Recommended Price"
          },
          "min_recommended_price": {
            "type": "string",
            "title": "Min Recommended Price"
          },
          "max_recommended_price": {
            "type": "string",
            "title": "Max Recommended Price"
          },
          "price_change_percentage": {
            "type": "number",
            "title": "Price Change Percentage"
          },
          "expected_demand_change": {
            "type": "number",
            "title": "Expected Demand Change"
          },
          "expected_revenue_impact": {
            "type": "number",
            "title": "Expected Revenue Impact"
          },
          "expected_profit_impact": {
            "type": "number",
            "title": "Expected Profit Impact"
          },
          "confidence_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Confidence Score"
          },
          "strategy_used": {
            "$ref": "#/components/schemas/PricingStrategy"
          },
          "factors_considered": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Factors Considered"
          },
          "primary_reason": {
            "type": "string",
            "title": "Primary Reason"
          },
          "detailed_reasoning": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Detailed Reasoning"
          },
          "risks": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Risks"
          },
          "implementation_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Implementation Notes"
          },
          "recommended_duration_days": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recommended Duration Days"
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "item_name",
          "current_price",
          "recommended_price",
          "min_recommended_price",
          "max_recommended_price",
          "price_change_percentage",
          "expected_demand_change",
          "expected_revenue_impact",
          "expected_profit_impact",
          "confidence_score",
          "strategy_used",
          "factors_considered",
          "primary_reason",
          "detailed_reasoning",
          "risks"
        ],
        "title": "PricingRecommendation",
        "description": "Individual pricing recommendation for a menu item",
        "example": {
          "confidence_score": 0.85,
          "current_price": "18.99",
          "expected_demand_change": -5.2,
          "expected_profit_impact": 12.3,
          "expected_revenue_impact": 9.8,
          "item_name": "Grilled Salmon",
          "max_recommended_price": "23.99",
          "menu_item_id": 101,
          "min_recommended_price": "19.99",
          "price_change_percentage": 15.8,
          "primary_reason": "High demand and low inventory warrant price increase",
          "recommended_price": "21.99",
          "strategy_used": "demand_based"
        }
      },
      "PricingRecommendationSet": {
        "properties": {
          "request_id": {
            "type": "string",
            "title": "Request Id",
            "description": "Unique request identifier"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          },
          "valid_until": {
            "type": "string",
            "format": "date-time",
            "title": "Valid Until"
          },
          "recommendations": {
            "items": {
              "$ref": "#/components/schemas/PricingRecommendation"
            },
            "type": "array",
            "title": "Recommendations"
          },
          "total_items_analyzed": {
            "type": "integer",
            "title": "Total Items Analyzed"
          },
          "total_recommendations": {
            "type": "integer",
            "title": "Total Recommendations"
          },
          "avg_price_change_percent": {
            "type": "number",
            "title": "Avg Price Change Percent"
          },
          "expected_total_revenue_impact": {
            "type": "number",
            "title": "Expected Total Revenue Impact"
          },
          "expected_total_profit_impact": {
            "type": "number",
            "title": "Expected Total Profit Impact"
          },
          "strategies_used": {
            "additionalProperties": {
              "type": "integer"
            },
            "propertyNames": {
              "$ref": "#/components/schemas/PricingStrategy"
            },
            "type": "object",
            "title": "Strategies Used"
          },
          "optimization_goal": {
            "$ref": "#/components/schemas/PriceOptimizationGoal"
          },
          "implementation_phases": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Implementation Phases",
            "description": "Phased implementation plan"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings"
          },
          "notes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "request_id",
          "generated_at",
          "valid_until",
          "recommendations",
          "total_items_analyzed",
          "total_recommendations",
          "avg_price_change_percent",
          "expected_total_revenue_impact",
          "expected_total_profit_impact",
          "strategies_used",
          "optimization_goal"
        ],
        "title": "PricingRecommendationSet",
        "description": "Set of pricing recommendations",
        "example": {
          "avg_price_change_percent": 8.5,
          "expected_total_profit_impact": 15.7,
          "expected_total_revenue_impact": 12.3,
          "generated_at": "2025-01-29T10:00:00Z",
          "request_id": "price-rec-2025-01-29-001",
          "total_items_analyzed": 50,
          "total_recommendations": 15,
          "valid_until": "2025-02-05T10:00:00Z"
        }
      },
      "PricingRuleApplicationResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "rule_id": {
            "type": "integer",
            "title": "Rule Id"
          },
          "rule_name": {
            "type": "string",
            "title": "Rule Name"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "discount_amount": {
            "type": "number",
            "title": "Discount Amount"
          },
          "original_amount": {
            "type": "number",
            "title": "Original Amount"
          },
          "final_amount": {
            "type": "number",
            "title": "Final Amount"
          },
          "applied_at": {
            "type": "string",
            "format": "date-time",
            "title": "Applied At"
          },
          "conditions_met": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object",
            "title": "Conditions Met"
          }
        },
        "type": "object",
        "required": [
          "id",
          "rule_id",
          "rule_name",
          "order_id",
          "discount_amount",
          "original_amount",
          "final_amount",
          "applied_at",
          "conditions_met"
        ],
        "title": "PricingRuleApplicationResponse",
        "description": "Response for a pricing rule application"
      },
      "PricingRuleConditions": {
        "properties": {
          "time": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time"
          },
          "items": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Items"
          },
          "customer": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer"
          },
          "order": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order"
          }
        },
        "type": "object",
        "title": "PricingRuleConditions",
        "description": "Flexible conditions for pricing rules"
      },
      "PricingRuleDebugInfo": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "evaluation_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Evaluation Timestamp"
          },
          "rules_evaluated": {
            "type": "integer",
            "title": "Rules Evaluated"
          },
          "rules_applied": {
            "type": "integer",
            "title": "Rules Applied"
          },
          "rules_skipped": {
            "type": "integer",
            "title": "Rules Skipped",
            "default": 0
          },
          "conflicts_resolved": {
            "type": "integer",
            "title": "Conflicts Resolved",
            "default": 0
          },
          "total_discount": {
            "type": "string",
            "title": "Total Discount"
          },
          "original_amount": {
            "type": "string",
            "title": "Original Amount",
            "default": "0"
          },
          "final_amount": {
            "type": "string",
            "title": "Final Amount",
            "default": "0"
          },
          "evaluation_results": {
            "items": {
              "$ref": "#/components/schemas/RuleEvaluationResult"
            },
            "type": "array",
            "title": "Evaluation Results"
          },
          "applied_rules": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Applied Rules"
          },
          "skipped_rules": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Skipped Rules"
          },
          "conflicts": {
            "items": {
              "$ref": "#/components/schemas/ConflictInfo"
            },
            "type": "array",
            "title": "Conflicts"
          },
          "debug_traces": {
            "items": {
              "$ref": "#/components/schemas/DebugTraceEntry"
            },
            "type": "array",
            "title": "Debug Traces"
          },
          "total_evaluation_time_ms": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Evaluation Time Ms"
          },
          "metrics": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Metrics"
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "rules_evaluated",
          "rules_applied",
          "total_discount",
          "evaluation_results",
          "debug_traces"
        ],
        "title": "PricingRuleDebugInfo",
        "description": "Complete debug information for pricing rule evaluation"
      },
      "PricingRuleMetricsResponse": {
        "properties": {
          "rule_id": {
            "type": "integer",
            "title": "Rule Id"
          },
          "rule_name": {
            "type": "string",
            "title": "Rule Name"
          },
          "date_range": {
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "type": "object",
            "title": "Date Range"
          },
          "total_applications": {
            "type": "integer",
            "title": "Total Applications"
          },
          "unique_customers": {
            "type": "integer",
            "title": "Unique Customers"
          },
          "total_discount_amount": {
            "type": "number",
            "title": "Total Discount Amount"
          },
          "average_discount": {
            "type": "number",
            "title": "Average Discount"
          },
          "conversion_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conversion Rate"
          },
          "average_order_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Order Value"
          },
          "conflicts_skipped": {
            "type": "integer",
            "title": "Conflicts Skipped"
          },
          "stacking_count": {
            "type": "integer",
            "title": "Stacking Count"
          },
          "daily_applications": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Daily Applications"
          }
        },
        "type": "object",
        "required": [
          "rule_id",
          "rule_name",
          "date_range",
          "total_applications",
          "unique_customers",
          "total_discount_amount",
          "average_discount",
          "conversion_rate",
          "average_order_value",
          "conflicts_skipped",
          "stacking_count",
          "daily_applications"
        ],
        "title": "PricingRuleMetricsResponse",
        "description": "Metrics for a pricing rule"
      },
      "PricingRuleResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "rule_id": {
            "type": "string",
            "title": "Rule Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "rule_type": {
            "$ref": "#/components/schemas/RuleType"
          },
          "status": {
            "$ref": "#/components/schemas/RuleStatus"
          },
          "priority": {
            "type": "integer",
            "title": "Priority"
          },
          "restaurant_id": {
            "type": "integer",
            "title": "Restaurant Id"
          },
          "discount_value": {
            "type": "number",
            "title": "Discount Value"
          },
          "max_discount_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Discount Amount"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "conditions": {
            "additionalProperties": true,
            "type": "object",
            "title": "Conditions"
          },
          "valid_from": {
            "type": "string",
            "format": "date-time",
            "title": "Valid From"
          },
          "valid_until": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Until"
          },
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid"
          },
          "max_uses_total": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Total"
          },
          "max_uses_per_customer": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Per Customer"
          },
          "current_uses": {
            "type": "integer",
            "title": "Current Uses"
          },
          "stackable": {
            "type": "boolean",
            "title": "Stackable"
          },
          "excluded_rule_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Rule Ids"
          },
          "conflict_resolution": {
            "$ref": "#/components/schemas/ConflictResolution"
          },
          "requires_code": {
            "type": "boolean",
            "title": "Requires Code"
          },
          "promo_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Promo Code"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "rule_id",
          "name",
          "description",
          "rule_type",
          "status",
          "priority",
          "restaurant_id",
          "discount_value",
          "max_discount_amount",
          "min_order_amount",
          "conditions",
          "valid_from",
          "valid_until",
          "is_valid",
          "max_uses_total",
          "max_uses_per_customer",
          "current_uses",
          "stackable",
          "excluded_rule_ids",
          "conflict_resolution",
          "requires_code",
          "promo_code",
          "tags",
          "created_at",
          "updated_at"
        ],
        "title": "PricingRuleResponse",
        "description": "Response with pricing rule details"
      },
      "PricingStrategy": {
        "type": "string",
        "enum": [
          "demand_based",
          "competition_based",
          "cost_plus",
          "value_based",
          "psychological",
          "dynamic",
          "seasonal"
        ],
        "title": "PricingStrategy",
        "description": "Available pricing strategies"
      },
      "PrintQueueItem": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "ticket_type": {
            "$ref": "#/components/schemas/TicketType"
          },
          "status": {
            "$ref": "#/components/schemas/PrintStatus"
          },
          "station_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Station Id"
          },
          "priority": {
            "type": "integer",
            "title": "Priority"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "retry_count": {
            "type": "integer",
            "title": "Retry Count",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "id",
          "order_id",
          "ticket_type",
          "status",
          "priority",
          "created_at"
        ],
        "title": "PrintQueueItem"
      },
      "PrintQueueStatus": {
        "properties": {
          "total_items": {
            "type": "integer",
            "title": "Total Items"
          },
          "pending_items": {
            "type": "integer",
            "title": "Pending Items"
          },
          "printing_items": {
            "type": "integer",
            "title": "Printing Items"
          },
          "failed_items": {
            "type": "integer",
            "title": "Failed Items"
          },
          "queue_items": {
            "items": {
              "$ref": "#/components/schemas/PrintQueueItem"
            },
            "type": "array",
            "title": "Queue Items"
          }
        },
        "type": "object",
        "required": [
          "total_items",
          "pending_items",
          "printing_items",
          "failed_items",
          "queue_items"
        ],
        "title": "PrintQueueStatus"
      },
      "PrintStatus": {
        "type": "string",
        "enum": [
          "pending",
          "printing",
          "printed",
          "failed"
        ],
        "title": "PrintStatus"
      },
      "PrintTicketRequest": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "ticket_type": {
            "$ref": "#/components/schemas/TicketType"
          },
          "station_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Station Id"
          },
          "priority": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Priority",
            "default": 1
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "ticket_type"
        ],
        "title": "PrintTicketRequest"
      },
      "PrintTicketResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "ticket_type": {
            "$ref": "#/components/schemas/TicketType"
          },
          "status": {
            "$ref": "#/components/schemas/PrintStatus"
          },
          "station_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Station Id"
          },
          "priority": {
            "type": "integer",
            "title": "Priority"
          },
          "ticket_content": {
            "type": "string",
            "title": "Ticket Content"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "printed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Printed At"
          },
          "failed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Failed At"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          }
        },
        "type": "object",
        "required": [
          "id",
          "order_id",
          "ticket_type",
          "status",
          "priority",
          "ticket_content",
          "created_at"
        ],
        "title": "PrintTicketResponse"
      },
      "PrintTicketStatusUpdate": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PrintStatus"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "PrintTicketStatusUpdate"
      },
      "ProcessTipDistributionRequest": {
        "properties": {
          "distribution_method": {
            "type": "string",
            "title": "Distribution Method",
            "default": "pool"
          },
          "distribution_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Distribution Config"
          }
        },
        "type": "object",
        "title": "ProcessTipDistributionRequest"
      },
      "ProductInsight": {
        "properties": {
          "insight_type": {
            "$ref": "#/components/schemas/InsightType",
            "default": "product_trend"
          },
          "top_rising": {
            "items": {
              "$ref": "#/components/schemas/ProductTrend"
            },
            "type": "array",
            "title": "Top Rising",
            "description": "Products gaining popularity"
          },
          "top_falling": {
            "items": {
              "$ref": "#/components/schemas/ProductTrend"
            },
            "type": "array",
            "title": "Top Falling",
            "description": "Products losing popularity"
          },
          "stable_performers": {
            "items": {
              "$ref": "#/components/schemas/ProductTrend"
            },
            "type": "array",
            "title": "Stable Performers",
            "description": "Consistently popular products"
          },
          "new_trending": {
            "items": {
              "$ref": "#/components/schemas/ProductTrend"
            },
            "type": "array",
            "title": "New Trending",
            "description": "Newly introduced trending items"
          },
          "confidence": {
            "$ref": "#/components/schemas/ConfidenceLevel"
          },
          "analysis_period": {
            "additionalProperties": {
              "type": "string",
              "format": "date"
            },
            "type": "object",
            "title": "Analysis Period",
            "description": "Period analyzed"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations"
          }
        },
        "type": "object",
        "required": [
          "top_rising",
          "top_falling",
          "stable_performers",
          "new_trending",
          "confidence",
          "analysis_period",
          "recommendations"
        ],
        "title": "ProductInsight",
        "description": "AI insights for product performance",
        "example": {
          "confidence": "high",
          "insight_type": "product_trend",
          "recommendations": [
            "Increase inventory for Seasonal Salad",
            "Consider promotional pricing for declining items"
          ],
          "top_rising": [
            {
              "current_rank": 3,
              "predicted_demand": 150,
              "previous_rank": 8,
              "product_id": 101,
              "product_name": "Seasonal Salad",
              "trend_direction": "rising",
              "trend_strength": 0.85,
              "velocity": 0.45
            }
          ]
        }
      },
      "ProductPerformanceResponse": {
        "properties": {
          "product_id": {
            "type": "integer",
            "title": "Product Id"
          },
          "product_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Name"
          },
          "category_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Id"
          },
          "category_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Name"
          },
          "quantity_sold": {
            "type": "integer",
            "title": "Quantity Sold"
          },
          "revenue_generated": {
            "type": "string",
            "title": "Revenue Generated"
          },
          "average_price": {
            "type": "string",
            "title": "Average Price"
          },
          "order_frequency": {
            "type": "integer",
            "title": "Order Frequency"
          },
          "popularity_rank": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Popularity Rank"
          },
          "revenue_rank": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revenue Rank"
          },
          "growth_rank": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Growth Rank"
          },
          "quantity_growth": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity Growth"
          },
          "revenue_growth": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revenue Growth"
          },
          "revenue_share": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revenue Share"
          },
          "quantity_share": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity Share"
          },
          "period_start": {
            "type": "string",
            "format": "date",
            "title": "Period Start"
          },
          "period_end": {
            "type": "string",
            "format": "date",
            "title": "Period End"
          }
        },
        "type": "object",
        "required": [
          "product_id",
          "quantity_sold",
          "revenue_generated",
          "average_price",
          "order_frequency",
          "period_start",
          "period_end"
        ],
        "title": "ProductPerformanceResponse",
        "description": "Response schema for product performance analytics"
      },
      "ProductTrend": {
        "properties": {
          "product_id": {
            "type": "integer",
            "title": "Product Id"
          },
          "product_name": {
            "type": "string",
            "title": "Product Name"
          },
          "trend_direction": {
            "type": "string",
            "title": "Trend Direction",
            "description": "rising, falling, stable"
          },
          "trend_strength": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Trend Strength",
            "description": "Trend strength (0-1)"
          },
          "current_rank": {
            "type": "integer",
            "title": "Current Rank",
            "description": "Current popularity rank"
          },
          "previous_rank": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Rank",
            "description": "Previous period rank"
          },
          "velocity": {
            "type": "number",
            "title": "Velocity",
            "description": "Rate of change"
          },
          "predicted_demand": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Predicted Demand",
            "description": "Predicted units for next period"
          },
          "seasonality_factor": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seasonality Factor",
            "description": "Seasonal influence (0-1)"
          }
        },
        "type": "object",
        "required": [
          "product_id",
          "product_name",
          "trend_direction",
          "trend_strength",
          "current_rank",
          "velocity"
        ],
        "title": "ProductTrend",
        "description": "Product popularity and trend information"
      },
      "Promotion": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "promotion_type": {
            "$ref": "#/components/schemas/PromotionType"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "End Date"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "default": "UTC"
          },
          "discount_type": {
            "type": "string",
            "title": "Discount Type"
          },
          "discount_value": {
            "type": "number",
            "minimum": 0.0,
            "title": "Discount Value"
          },
          "max_discount_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Discount Amount"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "target_type": {
            "$ref": "#/components/schemas/DiscountTarget",
            "default": "order_total"
          },
          "target_items": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Items"
          },
          "target_customer_segments": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Customer Segments"
          },
          "target_tiers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Tiers"
          },
          "max_uses_total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Total"
          },
          "max_uses_per_customer": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Uses Per Customer",
            "default": 1
          },
          "conditions": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conditions"
          },
          "stackable": {
            "type": "boolean",
            "title": "Stackable",
            "default": false
          },
          "requires_coupon": {
            "type": "boolean",
            "title": "Requires Coupon",
            "default": false
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "subtitle": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtitle"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "banner_text": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Banner Text"
          },
          "terms_and_conditions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terms And Conditions"
          },
          "priority": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Priority",
            "default": 0
          },
          "auto_apply": {
            "type": "boolean",
            "title": "Auto Apply",
            "default": false
          },
          "is_featured": {
            "type": "boolean",
            "title": "Is Featured",
            "default": false
          },
          "is_public": {
            "type": "boolean",
            "title": "Is Public",
            "default": true
          },
          "ab_test_variant": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ab Test Variant"
          },
          "ab_test_traffic_split": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Ab Test Traffic Split",
            "default": 100.0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "uuid": {
            "type": "string",
            "format": "uuid4",
            "title": "Uuid"
          },
          "status": {
            "$ref": "#/components/schemas/PromotionStatus"
          },
          "current_uses": {
            "type": "integer",
            "title": "Current Uses"
          },
          "impressions": {
            "type": "integer",
            "title": "Impressions"
          },
          "clicks": {
            "type": "integer",
            "title": "Clicks"
          },
          "conversions": {
            "type": "integer",
            "title": "Conversions"
          },
          "revenue_generated": {
            "type": "number",
            "title": "Revenue Generated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "usage_percentage": {
            "type": "number",
            "title": "Usage Percentage"
          },
          "days_remaining": {
            "type": "integer",
            "title": "Days Remaining"
          }
        },
        "type": "object",
        "required": [
          "name",
          "promotion_type",
          "start_date",
          "end_date",
          "discount_type",
          "discount_value",
          "id",
          "uuid",
          "status",
          "current_uses",
          "impressions",
          "clicks",
          "conversions",
          "revenue_generated",
          "created_at",
          "updated_at",
          "is_active",
          "usage_percentage",
          "days_remaining"
        ],
        "title": "Promotion",
        "description": "Full promotion schema for responses"
      },
      "PromotionCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "promotion_type": {
            "$ref": "#/components/schemas/PromotionType"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "End Date"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "default": "UTC"
          },
          "discount_type": {
            "type": "string",
            "title": "Discount Type"
          },
          "discount_value": {
            "type": "number",
            "minimum": 0.0,
            "title": "Discount Value"
          },
          "max_discount_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Discount Amount"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "target_type": {
            "$ref": "#/components/schemas/DiscountTarget",
            "default": "order_total"
          },
          "target_items": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Items"
          },
          "target_customer_segments": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Customer Segments"
          },
          "target_tiers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Tiers"
          },
          "max_uses_total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Total"
          },
          "max_uses_per_customer": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Uses Per Customer",
            "default": 1
          },
          "conditions": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conditions"
          },
          "stackable": {
            "type": "boolean",
            "title": "Stackable",
            "default": false
          },
          "requires_coupon": {
            "type": "boolean",
            "title": "Requires Coupon",
            "default": false
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "subtitle": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtitle"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "banner_text": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Banner Text"
          },
          "terms_and_conditions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terms And Conditions"
          },
          "priority": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Priority",
            "default": 0
          },
          "auto_apply": {
            "type": "boolean",
            "title": "Auto Apply",
            "default": false
          },
          "is_featured": {
            "type": "boolean",
            "title": "Is Featured",
            "default": false
          },
          "is_public": {
            "type": "boolean",
            "title": "Is Public",
            "default": true
          },
          "ab_test_variant": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ab Test Variant"
          },
          "ab_test_traffic_split": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Ab Test Traffic Split",
            "default": 100.0
          }
        },
        "type": "object",
        "required": [
          "name",
          "promotion_type",
          "start_date",
          "end_date",
          "discount_type",
          "discount_value"
        ],
        "title": "PromotionCreate",
        "description": "Schema for creating a promotion"
      },
      "PromotionSearchResponse": {
        "properties": {
          "promotions": {
            "items": {
              "$ref": "#/components/schemas/PromotionSummary"
            },
            "type": "array",
            "title": "Promotions"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          }
        },
        "type": "object",
        "required": [
          "promotions",
          "total",
          "page",
          "page_size",
          "total_pages"
        ],
        "title": "PromotionSearchResponse",
        "description": "Response for promotion search"
      },
      "PromotionStatus": {
        "type": "string",
        "enum": [
          "draft",
          "scheduled",
          "active",
          "paused",
          "expired",
          "cancelled",
          "ended"
        ],
        "title": "PromotionStatus",
        "description": "Promotion status states"
      },
      "PromotionSummary": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "uuid": {
            "type": "string",
            "format": "uuid4",
            "title": "Uuid"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "promotion_type": {
            "$ref": "#/components/schemas/PromotionType"
          },
          "status": {
            "$ref": "#/components/schemas/PromotionStatus"
          },
          "discount_type": {
            "type": "string",
            "title": "Discount Type"
          },
          "discount_value": {
            "type": "number",
            "title": "Discount Value"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "End Date"
          },
          "current_uses": {
            "type": "integer",
            "title": "Current Uses"
          },
          "max_uses_total": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Total"
          },
          "is_featured": {
            "type": "boolean",
            "title": "Is Featured"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "days_remaining": {
            "type": "integer",
            "title": "Days Remaining"
          }
        },
        "type": "object",
        "required": [
          "id",
          "uuid",
          "name",
          "promotion_type",
          "status",
          "discount_type",
          "discount_value",
          "start_date",
          "end_date",
          "current_uses",
          "max_uses_total",
          "is_featured",
          "is_active",
          "days_remaining"
        ],
        "title": "PromotionSummary",
        "description": "Summary promotion schema for lists"
      },
      "PromotionType": {
        "type": "string",
        "enum": [
          "percentage_discount",
          "fixed_discount",
          "buy_one_get_one",
          "free_shipping",
          "bundle_discount",
          "tiered_discount",
          "cashback",
          "loyalty_multiplier",
          "referral_bonus",
          "seasonal",
          "flash_sale",
          "membership_discount"
        ],
        "title": "PromotionType",
        "description": "Types of promotions"
      },
      "PromotionUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PromotionStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          },
          "discount_value": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Value"
          },
          "max_discount_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Discount Amount"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "max_uses_total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Total"
          },
          "max_uses_per_customer": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Per Customer"
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "subtitle": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtitle"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority"
          },
          "is_featured": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Featured"
          },
          "is_public": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Public"
          }
        },
        "type": "object",
        "title": "PromotionUpdate",
        "description": "Schema for updating a promotion"
      },
      "PublishVersionRequest": {
        "properties": {
          "scheduled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled At"
          },
          "force": {
            "type": "boolean",
            "title": "Force",
            "default": false
          }
        },
        "type": "object",
        "title": "PublishVersionRequest"
      },
      "PurchaseOrder": {
        "properties": {
          "vendor_id": {
            "type": "integer",
            "title": "Vendor Id"
          },
          "po_number": {
            "type": "string",
            "title": "Po Number"
          },
          "expected_delivery_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expected Delivery Date"
          },
          "subtotal": {
            "type": "number",
            "minimum": 0.0,
            "title": "Subtotal",
            "default": 0.0
          },
          "tax_amount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Tax Amount",
            "default": 0.0
          },
          "shipping_cost": {
            "type": "number",
            "minimum": 0.0,
            "title": "Shipping Cost",
            "default": 0.0
          },
          "delivery_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Address"
          },
          "delivery_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Instructions"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "order_date": {
            "type": "string",
            "format": "date-time",
            "title": "Order Date"
          },
          "actual_delivery_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Actual Delivery Date"
          },
          "total_amount": {
            "type": "number",
            "title": "Total Amount"
          },
          "tracking_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tracking Number"
          },
          "internal_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Internal Notes"
          },
          "created_by": {
            "type": "integer",
            "title": "Created By"
          },
          "approved_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved By"
          },
          "approved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          }
        },
        "type": "object",
        "required": [
          "vendor_id",
          "po_number",
          "id",
          "status",
          "order_date",
          "total_amount",
          "created_by",
          "created_at",
          "updated_at",
          "is_active"
        ],
        "title": "PurchaseOrder"
      },
      "PurchaseOrderCreate": {
        "properties": {
          "vendor_id": {
            "type": "integer",
            "title": "Vendor Id"
          },
          "po_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Po Number"
          },
          "expected_delivery_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expected Delivery Date"
          },
          "subtotal": {
            "type": "number",
            "minimum": 0.0,
            "title": "Subtotal",
            "default": 0.0
          },
          "tax_amount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Tax Amount",
            "default": 0.0
          },
          "shipping_cost": {
            "type": "number",
            "minimum": 0.0,
            "title": "Shipping Cost",
            "default": 0.0
          },
          "delivery_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Address"
          },
          "delivery_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Instructions"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "vendor_id"
        ],
        "title": "PurchaseOrderCreate"
      },
      "PurchaseOrderItem": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "quantity_ordered": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Quantity Ordered"
          },
          "unit_cost": {
            "type": "number",
            "minimum": 0.0,
            "title": "Unit Cost"
          },
          "batch_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Batch Number"
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "purchase_order_id": {
            "type": "integer",
            "title": "Purchase Order Id"
          },
          "quantity_received": {
            "type": "number",
            "title": "Quantity Received"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "total_cost": {
            "type": "number",
            "title": "Total Cost"
          },
          "quality_rating": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quality Rating"
          },
          "condition_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Condition Notes"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "quantity_ordered",
          "unit_cost",
          "id",
          "purchase_order_id",
          "quantity_received",
          "unit",
          "total_cost",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "PurchaseOrderItem"
      },
      "PurchaseOrderItemCreate": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "quantity_ordered": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Quantity Ordered"
          },
          "unit_cost": {
            "type": "number",
            "minimum": 0.0,
            "title": "Unit Cost"
          },
          "batch_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Batch Number"
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "quantity_ordered",
          "unit_cost"
        ],
        "title": "PurchaseOrderItemCreate"
      },
      "PurchaseOrderUpdate": {
        "properties": {
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          },
          "expected_delivery_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expected Delivery Date"
          },
          "actual_delivery_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Actual Delivery Date"
          },
          "subtotal": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtotal"
          },
          "tax_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Amount"
          },
          "shipping_cost": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Shipping Cost"
          },
          "delivery_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Address"
          },
          "delivery_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Instructions"
          },
          "tracking_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tracking Number"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "internal_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Internal Notes"
          }
        },
        "type": "object",
        "title": "PurchaseOrderUpdate"
      },
      "PurchaseOrderWithItems": {
        "properties": {
          "vendor_id": {
            "type": "integer",
            "title": "Vendor Id"
          },
          "po_number": {
            "type": "string",
            "title": "Po Number"
          },
          "expected_delivery_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expected Delivery Date"
          },
          "subtotal": {
            "type": "number",
            "minimum": 0.0,
            "title": "Subtotal",
            "default": 0.0
          },
          "tax_amount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Tax Amount",
            "default": 0.0
          },
          "shipping_cost": {
            "type": "number",
            "minimum": 0.0,
            "title": "Shipping Cost",
            "default": 0.0
          },
          "delivery_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Address"
          },
          "delivery_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Instructions"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "order_date": {
            "type": "string",
            "format": "date-time",
            "title": "Order Date"
          },
          "actual_delivery_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Actual Delivery Date"
          },
          "total_amount": {
            "type": "number",
            "title": "Total Amount"
          },
          "tracking_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tracking Number"
          },
          "internal_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Internal Notes"
          },
          "created_by": {
            "type": "integer",
            "title": "Created By"
          },
          "approved_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved By"
          },
          "approved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "vendor": {
            "$ref": "#/components/schemas/Vendor"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderItem"
            },
            "type": "array",
            "title": "Items",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "vendor_id",
          "po_number",
          "id",
          "status",
          "order_date",
          "total_amount",
          "created_by",
          "created_at",
          "updated_at",
          "is_active",
          "vendor"
        ],
        "title": "PurchaseOrderWithItems"
      },
      "QueryResult": {
        "properties": {
          "query_id": {
            "type": "string",
            "title": "Query Id"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "success"
          },
          "summary": {
            "type": "string",
            "title": "Summary"
          },
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChartData"
              },
              {
                "$ref": "#/components/schemas/TableData"
              },
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "insights": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Insights"
          },
          "suggestions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suggestions"
          },
          "execution_time_ms": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Execution Time Ms"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          }
        },
        "type": "object",
        "required": [
          "query_id",
          "summary"
        ],
        "title": "QueryResult",
        "description": "Result of an analytics query"
      },
      "RealtimeDashboardResponse": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "revenue_today": {
            "type": "number",
            "title": "Revenue Today"
          },
          "orders_today": {
            "type": "integer",
            "title": "Orders Today"
          },
          "customers_today": {
            "type": "integer",
            "title": "Customers Today"
          },
          "average_order_value": {
            "type": "number",
            "title": "Average Order Value"
          },
          "revenue_growth": {
            "type": "number",
            "title": "Revenue Growth"
          },
          "order_growth": {
            "type": "number",
            "title": "Order Growth"
          },
          "customer_growth": {
            "type": "number",
            "title": "Customer Growth"
          },
          "top_staff": {
            "items": {
              "$ref": "#/components/schemas/TopPerformerResponse"
            },
            "type": "array",
            "title": "Top Staff"
          },
          "top_products": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Top Products"
          },
          "hourly_trends": {
            "items": {
              "$ref": "#/components/schemas/HourlyTrendPoint"
            },
            "type": "array",
            "title": "Hourly Trends"
          },
          "active_alerts": {
            "type": "integer",
            "title": "Active Alerts",
            "description": "Number of active alerts",
            "default": 0
          },
          "critical_metrics": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Critical Metrics",
            "description": "Metrics requiring attention"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated"
          },
          "update_frequency": {
            "type": "integer",
            "title": "Update Frequency",
            "description": "Update frequency in seconds",
            "default": 30
          },
          "data_freshness": {
            "type": "string",
            "title": "Data Freshness",
            "description": "Data freshness indicator",
            "default": "real-time"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "revenue_today",
          "orders_today",
          "customers_today",
          "average_order_value",
          "revenue_growth",
          "order_growth",
          "customer_growth",
          "last_updated"
        ],
        "title": "RealtimeDashboardResponse",
        "description": "Enhanced dashboard response with real-time capabilities"
      },
      "RecipeCloneRequest": {
        "properties": {
          "source_recipe_id": {
            "type": "integer",
            "title": "Source Recipe Id"
          },
          "target_menu_item_id": {
            "type": "integer",
            "title": "Target Menu Item Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "adjust_portions": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Adjust Portions"
          }
        },
        "type": "object",
        "required": [
          "source_recipe_id",
          "target_menu_item_id"
        ],
        "title": "RecipeCloneRequest",
        "description": "Request to clone a recipe"
      },
      "RecipeComplexity": {
        "type": "string",
        "enum": [
          "simple",
          "moderate",
          "complex",
          "expert"
        ],
        "title": "RecipeComplexity"
      },
      "RecipeComplianceReport": {
        "properties": {
          "total_menu_items": {
            "type": "integer",
            "title": "Total Menu Items"
          },
          "items_with_recipes": {
            "type": "integer",
            "title": "Items With Recipes"
          },
          "items_without_recipes": {
            "type": "integer",
            "title": "Items Without Recipes"
          },
          "compliance_percentage": {
            "type": "number",
            "title": "Compliance Percentage"
          },
          "missing_recipes": {
            "items": {
              "$ref": "#/components/schemas/MenuItemRecipeStatus"
            },
            "type": "array",
            "title": "Missing Recipes"
          },
          "draft_recipes": {
            "items": {
              "$ref": "#/components/schemas/MenuItemRecipeStatus"
            },
            "type": "array",
            "title": "Draft Recipes"
          },
          "inactive_recipes": {
            "items": {
              "$ref": "#/components/schemas/MenuItemRecipeStatus"
            },
            "type": "array",
            "title": "Inactive Recipes"
          },
          "compliance_by_category": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "Compliance By Category"
          },
          "cached": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cached",
            "default": false
          },
          "generated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Generated At"
          }
        },
        "type": "object",
        "required": [
          "total_menu_items",
          "items_with_recipes",
          "items_without_recipes",
          "compliance_percentage",
          "missing_recipes",
          "draft_recipes",
          "inactive_recipes",
          "compliance_by_category"
        ],
        "title": "RecipeComplianceReport",
        "description": "Report on menu items without recipes"
      },
      "RecipeCostAnalysis": {
        "properties": {
          "recipe_id": {
            "type": "integer",
            "title": "Recipe Id"
          },
          "recipe_name": {
            "type": "string",
            "title": "Recipe Name"
          },
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "menu_item_name": {
            "type": "string",
            "title": "Menu Item Name"
          },
          "menu_item_price": {
            "type": "number",
            "title": "Menu Item Price"
          },
          "total_ingredient_cost": {
            "type": "number",
            "title": "Total Ingredient Cost"
          },
          "total_sub_recipe_cost": {
            "type": "number",
            "title": "Total Sub Recipe Cost"
          },
          "total_cost": {
            "type": "number",
            "title": "Total Cost"
          },
          "food_cost_percentage": {
            "type": "number",
            "title": "Food Cost Percentage"
          },
          "profit_margin": {
            "type": "number",
            "title": "Profit Margin"
          },
          "profit_amount": {
            "type": "number",
            "title": "Profit Amount"
          },
          "ingredient_costs": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Ingredient Costs"
          },
          "sub_recipe_costs": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Sub Recipe Costs"
          },
          "cost_optimization_suggestions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Optimization Suggestions"
          }
        },
        "type": "object",
        "required": [
          "recipe_id",
          "recipe_name",
          "menu_item_id",
          "menu_item_name",
          "menu_item_price",
          "total_ingredient_cost",
          "total_sub_recipe_cost",
          "total_cost",
          "food_cost_percentage",
          "profit_margin",
          "profit_amount",
          "ingredient_costs",
          "sub_recipe_costs"
        ],
        "title": "RecipeCostAnalysis",
        "description": "Detailed cost breakdown for a recipe"
      },
      "RecipeCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "status": {
            "$ref": "#/components/schemas/RecipeStatus",
            "default": "draft"
          },
          "yield_quantity": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Yield Quantity",
            "default": 1.0
          },
          "yield_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Yield Unit"
          },
          "portion_size": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Portion Size"
          },
          "portion_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Portion Unit"
          },
          "prep_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Prep Time Minutes"
          },
          "cook_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cook Time Minutes"
          },
          "total_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Time Minutes"
          },
          "complexity": {
            "$ref": "#/components/schemas/RecipeComplexity",
            "default": "simple"
          },
          "instructions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instructions"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "allergen_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergen Notes"
          },
          "quality_standards": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quality Standards"
          },
          "plating_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plating Instructions"
          },
          "image_urls": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Urls"
          },
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "ingredients": {
            "items": {
              "$ref": "#/components/schemas/RecipeIngredientCreate"
            },
            "type": "array",
            "title": "Ingredients"
          },
          "sub_recipes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RecipeSubRecipeCreate"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub Recipes",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "name",
          "menu_item_id",
          "ingredients"
        ],
        "title": "RecipeCreate"
      },
      "RecipeHistoryResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "recipe_id": {
            "type": "integer",
            "title": "Recipe Id"
          },
          "version": {
            "type": "integer",
            "title": "Version"
          },
          "change_type": {
            "type": "string",
            "title": "Change Type"
          },
          "change_summary": {
            "type": "string",
            "title": "Change Summary"
          },
          "total_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Cost"
          },
          "food_cost_percentage": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Food Cost Percentage"
          },
          "changed_by": {
            "type": "integer",
            "title": "Changed By"
          },
          "change_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Change Reason"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "recipe_id",
          "version",
          "change_type",
          "change_summary",
          "changed_by",
          "created_at"
        ],
        "title": "RecipeHistoryResponse",
        "description": "Recipe version history"
      },
      "RecipeIngredientCreate": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "quantity": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Quantity",
            "description": "Quantity must be positive"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitType"
          },
          "custom_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Unit"
          },
          "preparation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Preparation"
          },
          "is_optional": {
            "type": "boolean",
            "title": "Is Optional",
            "default": false
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "display_order": {
            "type": "integer",
            "title": "Display Order",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "quantity",
          "unit"
        ],
        "title": "RecipeIngredientCreate"
      },
      "RecipeIngredientResponse": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "quantity": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Quantity",
            "description": "Quantity must be positive"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitType"
          },
          "custom_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Unit"
          },
          "preparation": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Preparation"
          },
          "is_optional": {
            "type": "boolean",
            "title": "Is Optional",
            "default": false
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "display_order": {
            "type": "integer",
            "title": "Display Order",
            "default": 0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "recipe_id": {
            "type": "integer",
            "title": "Recipe Id"
          },
          "unit_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Cost"
          },
          "total_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Cost"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "inventory_item": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Inventory Item"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "quantity",
          "unit",
          "id",
          "recipe_id",
          "created_at",
          "updated_at"
        ],
        "title": "RecipeIngredientResponse"
      },
      "RecipeResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "status": {
            "$ref": "#/components/schemas/RecipeStatus",
            "default": "draft"
          },
          "yield_quantity": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Yield Quantity",
            "default": 1.0
          },
          "yield_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Yield Unit"
          },
          "portion_size": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Portion Size"
          },
          "portion_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Portion Unit"
          },
          "prep_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Prep Time Minutes"
          },
          "cook_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cook Time Minutes"
          },
          "total_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Time Minutes"
          },
          "complexity": {
            "$ref": "#/components/schemas/RecipeComplexity",
            "default": "simple"
          },
          "instructions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instructions"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "allergen_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergen Notes"
          },
          "quality_standards": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quality Standards"
          },
          "plating_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plating Instructions"
          },
          "image_urls": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Urls"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "version": {
            "type": "integer",
            "title": "Version"
          },
          "total_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Cost"
          },
          "food_cost_percentage": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Food Cost Percentage"
          },
          "last_cost_update": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Cost Update"
          },
          "created_by": {
            "type": "integer",
            "title": "Created By"
          },
          "approved_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved By"
          },
          "approved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved At"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "ingredients": {
            "items": {
              "$ref": "#/components/schemas/RecipeIngredientResponse"
            },
            "type": "array",
            "title": "Ingredients",
            "default": []
          },
          "sub_recipes": {
            "items": {
              "$ref": "#/components/schemas/RecipeSubRecipeResponse"
            },
            "type": "array",
            "title": "Sub Recipes",
            "default": []
          },
          "menu_item": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Menu Item"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "menu_item_id",
          "version",
          "created_by",
          "is_active",
          "created_at",
          "updated_at"
        ],
        "title": "RecipeResponse"
      },
      "RecipeStatus": {
        "type": "string",
        "enum": [
          "draft",
          "active",
          "inactive",
          "archived"
        ],
        "title": "RecipeStatus"
      },
      "RecipeSubRecipeCreate": {
        "properties": {
          "sub_recipe_id": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Sub Recipe Id",
            "description": "ID of the sub-recipe to link"
          },
          "quantity": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Quantity",
            "description": "Quantity of sub-recipe to use",
            "default": 1.0
          },
          "unit": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit",
            "description": "Unit for quantity (optional)"
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "description": "Display order in recipe",
            "default": 0
          },
          "notes": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Notes about this sub-recipe usage"
          }
        },
        "type": "object",
        "required": [
          "sub_recipe_id"
        ],
        "title": "RecipeSubRecipeCreate"
      },
      "RecipeSubRecipeResponse": {
        "properties": {
          "sub_recipe_id": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Sub Recipe Id",
            "description": "ID of the sub-recipe to link"
          },
          "quantity": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Quantity",
            "description": "Quantity of sub-recipe to use",
            "default": 1.0
          },
          "unit": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit",
            "description": "Unit for quantity (optional)"
          },
          "display_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Display Order",
            "description": "Display order in recipe",
            "default": 0
          },
          "notes": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Notes about this sub-recipe usage"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "parent_recipe_id": {
            "type": "integer",
            "title": "Parent Recipe Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "sub_recipe": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sub Recipe"
          }
        },
        "type": "object",
        "required": [
          "sub_recipe_id",
          "id",
          "parent_recipe_id",
          "created_at",
          "updated_at"
        ],
        "title": "RecipeSubRecipeResponse"
      },
      "RecipeUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RecipeStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "yield_quantity": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Yield Quantity"
          },
          "yield_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Yield Unit"
          },
          "portion_size": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Portion Size"
          },
          "portion_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Portion Unit"
          },
          "prep_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Prep Time Minutes"
          },
          "cook_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cook Time Minutes"
          },
          "total_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Time Minutes"
          },
          "complexity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RecipeComplexity"
              },
              {
                "type": "null"
              }
            ]
          },
          "instructions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instructions"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "allergen_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergen Notes"
          },
          "quality_standards": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quality Standards"
          },
          "plating_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plating Instructions"
          },
          "image_urls": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Urls"
          }
        },
        "type": "object",
        "title": "RecipeUpdate"
      },
      "RecipeValidation": {
        "properties": {
          "recipe_id": {
            "type": "integer",
            "title": "Recipe Id"
          },
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid"
          },
          "validation_errors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Validation Errors",
            "default": []
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings",
            "default": []
          },
          "has_ingredients": {
            "type": "boolean",
            "title": "Has Ingredients"
          },
          "all_ingredients_available": {
            "type": "boolean",
            "title": "All Ingredients Available"
          },
          "cost_calculated": {
            "type": "boolean",
            "title": "Cost Calculated"
          },
          "within_target_cost": {
            "type": "boolean",
            "title": "Within Target Cost"
          },
          "instructions_complete": {
            "type": "boolean",
            "title": "Instructions Complete"
          }
        },
        "type": "object",
        "required": [
          "recipe_id",
          "is_valid",
          "has_ingredients",
          "all_ingredients_available",
          "cost_calculated",
          "within_target_cost",
          "instructions_complete"
        ],
        "title": "RecipeValidation",
        "description": "Recipe validation results"
      },
      "ReconciliationAction": {
        "type": "string",
        "enum": [
          "auto_matched",
          "manual_review",
          "exception_handled"
        ],
        "title": "ReconciliationAction"
      },
      "ReconciliationMetrics": {
        "properties": {
          "total_reconciled": {
            "type": "integer",
            "title": "Total Reconciled"
          },
          "matched_count": {
            "type": "integer",
            "title": "Matched Count"
          },
          "discrepancy_count": {
            "type": "integer",
            "title": "Discrepancy Count"
          },
          "resolved_count": {
            "type": "integer",
            "title": "Resolved Count"
          },
          "success_rate": {
            "type": "number",
            "title": "Success Rate"
          },
          "common_discrepancy_types": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Common Discrepancy Types"
          }
        },
        "type": "object",
        "required": [
          "total_reconciled",
          "matched_count",
          "discrepancy_count",
          "resolved_count",
          "success_rate",
          "common_discrepancy_types"
        ],
        "title": "ReconciliationMetrics"
      },
      "ReconciliationRequest": {
        "properties": {
          "order_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Ids"
          },
          "external_payment_references": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Payment References"
          },
          "amount_threshold": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount Threshold",
            "default": "0.01"
          }
        },
        "type": "object",
        "title": "ReconciliationRequest"
      },
      "ReconciliationResponse": {
        "properties": {
          "total_processed": {
            "type": "integer",
            "title": "Total Processed"
          },
          "matched_count": {
            "type": "integer",
            "title": "Matched Count"
          },
          "discrepancy_count": {
            "type": "integer",
            "title": "Discrepancy Count"
          },
          "reconciliations": {
            "items": {
              "$ref": "#/components/schemas/PaymentReconciliationOut"
            },
            "type": "array",
            "title": "Reconciliations"
          }
        },
        "type": "object",
        "required": [
          "total_processed",
          "matched_count",
          "discrepancy_count",
          "reconciliations"
        ],
        "title": "ReconciliationResponse"
      },
      "ReconciliationStatus": {
        "type": "string",
        "enum": [
          "pending",
          "matched",
          "discrepancy",
          "resolved"
        ],
        "title": "ReconciliationStatus"
      },
      "RecurrenceType": {
        "type": "string",
        "enum": [
          "none",
          "daily",
          "weekly",
          "biweekly",
          "monthly"
        ],
        "title": "RecurrenceType"
      },
      "ReferralProgram": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "referrer_reward_type": {
            "type": "string",
            "title": "Referrer Reward Type"
          },
          "referrer_reward_value": {
            "type": "number",
            "minimum": 0.0,
            "title": "Referrer Reward Value"
          },
          "referee_reward_type": {
            "type": "string",
            "title": "Referee Reward Type"
          },
          "referee_reward_value": {
            "type": "number",
            "minimum": 0.0,
            "title": "Referee Reward Value"
          },
          "min_referee_order_amount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Min Referee Order Amount",
            "default": 0.0
          },
          "max_referrals_per_customer": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Referrals Per Customer"
          },
          "referral_validity_days": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Referral Validity Days",
            "default": 30
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "total_referrals": {
            "type": "integer",
            "title": "Total Referrals"
          },
          "successful_referrals": {
            "type": "integer",
            "title": "Successful Referrals"
          },
          "total_rewards_issued": {
            "type": "number",
            "title": "Total Rewards Issued"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "referrer_reward_type",
          "referrer_reward_value",
          "referee_reward_type",
          "referee_reward_value",
          "start_date",
          "id",
          "is_active",
          "total_referrals",
          "successful_referrals",
          "total_rewards_issued",
          "created_at",
          "updated_at"
        ],
        "title": "ReferralProgram",
        "description": "Full referral program schema"
      },
      "ReferralProgramCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "referrer_reward_type": {
            "type": "string",
            "title": "Referrer Reward Type"
          },
          "referrer_reward_value": {
            "type": "number",
            "minimum": 0.0,
            "title": "Referrer Reward Value"
          },
          "referee_reward_type": {
            "type": "string",
            "title": "Referee Reward Type"
          },
          "referee_reward_value": {
            "type": "number",
            "minimum": 0.0,
            "title": "Referee Reward Value"
          },
          "min_referee_order_amount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Min Referee Order Amount",
            "default": 0.0
          },
          "max_referrals_per_customer": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Referrals Per Customer"
          },
          "referral_validity_days": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Referral Validity Days",
            "default": 30
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          }
        },
        "type": "object",
        "required": [
          "name",
          "referrer_reward_type",
          "referrer_reward_value",
          "referee_reward_type",
          "referee_reward_value",
          "start_date"
        ],
        "title": "ReferralProgramCreate",
        "description": "Schema for creating a referral program"
      },
      "ReferralStatus": {
        "type": "string",
        "enum": [
          "pending",
          "completed",
          "rewarded",
          "expired",
          "cancelled"
        ],
        "title": "ReferralStatus",
        "description": "Referral program status"
      },
      "RefreshTokenRequest": {
        "properties": {
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token"
          }
        },
        "type": "object",
        "required": [
          "refresh_token"
        ],
        "title": "RefreshTokenRequest",
        "description": "Refresh token request model."
      },
      "RefundApprovalRequest": {
        "properties": {
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "process_immediately": {
            "type": "boolean",
            "title": "Process Immediately",
            "default": true
          }
        },
        "type": "object",
        "title": "RefundApprovalRequest"
      },
      "RefundApprovalStatus": {
        "type": "string",
        "enum": [
          "pending_approval",
          "approved",
          "rejected",
          "auto_approved"
        ],
        "title": "RefundApprovalStatus",
        "description": "Refund approval workflow states"
      },
      "RefundCategory": {
        "type": "string",
        "enum": [
          "order_issue",
          "quality_issue",
          "service_issue",
          "payment_issue",
          "other"
        ],
        "title": "RefundCategory",
        "description": "Refund categories for reporting"
      },
      "RefundCreate": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount",
            "description": "Refund amount (None for full refund)"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason",
            "description": "Refund reason"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "title": "RefundCreate",
        "description": "Schema for creating a refund"
      },
      "RefundItemRequest": {
        "properties": {
          "item_id": {
            "type": "integer",
            "title": "Item Id"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "item_id",
          "quantity",
          "amount"
        ],
        "title": "RefundItemRequest"
      },
      "RefundPolicyRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "auto_approve_enabled": {
            "type": "boolean",
            "title": "Auto Approve Enabled",
            "default": false
          },
          "auto_approve_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Auto Approve Threshold",
            "default": "50.00"
          },
          "refund_window_hours": {
            "type": "integer",
            "title": "Refund Window Hours",
            "default": 168
          },
          "allow_partial_refunds": {
            "type": "boolean",
            "title": "Allow Partial Refunds",
            "default": true
          },
          "require_reason": {
            "type": "boolean",
            "title": "Require Reason",
            "default": true
          },
          "notify_customer": {
            "type": "boolean",
            "title": "Notify Customer",
            "default": true
          },
          "notify_manager": {
            "type": "boolean",
            "title": "Notify Manager",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "RefundPolicyRequest"
      },
      "RefundReason": {
        "type": "string",
        "enum": [
          "order_cancelled",
          "order_mistake",
          "wrong_items",
          "missing_items",
          "food_quality",
          "cold_food",
          "incorrect_preparation",
          "long_wait",
          "poor_service",
          "duplicate_charge",
          "overcharge",
          "price_dispute",
          "customer_request",
          "goodwill",
          "test_refund",
          "other"
        ],
        "title": "RefundReason",
        "description": "Standard refund reason codes"
      },
      "RefundRejectionRequest": {
        "properties": {
          "reason": {
            "type": "string",
            "maxLength": 500,
            "minLength": 10,
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "reason"
        ],
        "title": "RefundRejectionRequest"
      },
      "RefundRequestResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "request_number": {
            "type": "string",
            "title": "Request Number"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "payment_id": {
            "type": "integer",
            "title": "Payment Id"
          },
          "requested_amount": {
            "type": "number",
            "title": "Requested Amount"
          },
          "reason_code": {
            "$ref": "#/components/schemas/RefundReason"
          },
          "category": {
            "$ref": "#/components/schemas/RefundCategory"
          },
          "reason_details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason Details"
          },
          "approval_status": {
            "$ref": "#/components/schemas/RefundApprovalStatus"
          },
          "customer_name": {
            "type": "string",
            "title": "Customer Name"
          },
          "customer_email": {
            "type": "string",
            "title": "Customer Email"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "approved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved At"
          },
          "processed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processed At"
          },
          "refund_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refund Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "request_number",
          "order_id",
          "payment_id",
          "requested_amount",
          "reason_code",
          "category",
          "reason_details",
          "approval_status",
          "customer_name",
          "customer_email",
          "created_at",
          "approved_at",
          "processed_at",
          "refund_id"
        ],
        "title": "RefundRequestResponse"
      },
      "RefundResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "refund_id": {
            "type": "string",
            "title": "Refund Id"
          },
          "payment_id": {
            "type": "integer",
            "title": "Payment Id"
          },
          "gateway_refund_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gateway Refund Id"
          },
          "amount": {
            "type": "string",
            "title": "Amount"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          },
          "processed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processed At"
          },
          "failure_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Failure Code"
          },
          "failure_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Failure Message"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "refund_id",
          "payment_id",
          "amount",
          "currency",
          "status",
          "created_at"
        ],
        "title": "RefundResponse",
        "description": "Refund response schema"
      },
      "RefundStatisticsResponse": {
        "properties": {
          "total_requests": {
            "type": "integer",
            "title": "Total Requests"
          },
          "total_amount": {
            "type": "number",
            "title": "Total Amount"
          },
          "avg_amount": {
            "type": "number",
            "title": "Avg Amount"
          },
          "by_category": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "By Category"
          },
          "by_status": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "By Status"
          },
          "by_reason": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "By Reason"
          }
        },
        "type": "object",
        "required": [
          "total_requests",
          "total_amount",
          "avg_amount",
          "by_category",
          "by_status",
          "by_reason"
        ],
        "title": "RefundStatisticsResponse"
      },
      "RefundStatus": {
        "type": "string",
        "enum": [
          "pending",
          "processing",
          "completed",
          "failed",
          "cancelled"
        ],
        "title": "RefundStatus",
        "description": "Refund status states"
      },
      "ReportType": {
        "type": "string",
        "enum": [
          "sales_summary",
          "sales_detailed",
          "staff_performance",
          "product_performance",
          "revenue_analysis",
          "customer_analytics",
          "trend_analysis"
        ],
        "title": "ReportType",
        "description": "Types of analytics reports"
      },
      "ReservationAvailability": {
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          },
          "party_size": {
            "type": "integer",
            "title": "Party Size"
          },
          "time_slots": {
            "items": {
              "$ref": "#/components/schemas/TimeSlot"
            },
            "type": "array",
            "title": "Time Slots"
          },
          "available_tables": {
            "items": {
              "$ref": "#/components/schemas/TableAvailability"
            },
            "type": "array",
            "title": "Available Tables",
            "default": []
          },
          "is_fully_booked": {
            "type": "boolean",
            "title": "Is Fully Booked",
            "default": false
          },
          "waitlist_available": {
            "type": "boolean",
            "title": "Waitlist Available",
            "default": true
          },
          "special_date_info": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Date Info"
          }
        },
        "type": "object",
        "required": [
          "date",
          "party_size",
          "time_slots"
        ],
        "title": "ReservationAvailability",
        "description": "Schema for checking reservation availability"
      },
      "ReservationCancellation": {
        "properties": {
          "reason": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Reason"
          },
          "cancelled_by": {
            "type": "string",
            "title": "Cancelled By",
            "default": "customer"
          }
        },
        "type": "object",
        "required": [
          "reason"
        ],
        "title": "ReservationCancellation",
        "description": "Schema for cancelling a reservation"
      },
      "ReservationConfirmation": {
        "properties": {
          "confirmed": {
            "type": "boolean",
            "title": "Confirmed",
            "default": true
          },
          "special_requests_update": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Requests Update"
          }
        },
        "type": "object",
        "title": "ReservationConfirmation",
        "description": "Schema for confirming a reservation"
      },
      "ReservationCreate": {
        "properties": {
          "reservation_date": {
            "type": "string",
            "format": "date",
            "title": "Reservation Date"
          },
          "reservation_time": {
            "type": "string",
            "format": "time",
            "title": "Reservation Time"
          },
          "party_size": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 1.0,
            "title": "Party Size"
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 240.0,
                "minimum": 30.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes",
            "default": 90
          },
          "special_requests": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Requests"
          },
          "dietary_restrictions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Restrictions",
            "default": []
          },
          "occasion": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Occasion"
          },
          "notification_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NotificationMethod"
              },
              {
                "type": "null"
              }
            ],
            "default": "email"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "default": "website"
          }
        },
        "type": "object",
        "required": [
          "reservation_date",
          "reservation_time",
          "party_size"
        ],
        "title": "ReservationCreate",
        "description": "Schema for creating a new reservation"
      },
      "ReservationListResponse": {
        "properties": {
          "reservations": {
            "items": {
              "$ref": "#/components/schemas/ReservationResponse"
            },
            "type": "array",
            "title": "Reservations"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next"
          },
          "has_previous": {
            "type": "boolean",
            "title": "Has Previous"
          }
        },
        "type": "object",
        "required": [
          "reservations",
          "total",
          "page",
          "page_size",
          "has_next",
          "has_previous"
        ],
        "title": "ReservationListResponse",
        "description": "Schema for list of reservations"
      },
      "ReservationResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "reservation_date": {
            "type": "string",
            "format": "date",
            "title": "Reservation Date"
          },
          "reservation_time": {
            "type": "string",
            "format": "time",
            "title": "Reservation Time"
          },
          "party_size": {
            "type": "integer",
            "title": "Party Size"
          },
          "duration_minutes": {
            "type": "integer",
            "title": "Duration Minutes"
          },
          "status": {
            "$ref": "#/components/schemas/modules__reservations__schemas__reservation_schemas__ReservationStatus"
          },
          "confirmation_code": {
            "type": "string",
            "title": "Confirmation Code"
          },
          "source": {
            "type": "string",
            "title": "Source"
          },
          "table_numbers": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Table Numbers"
          },
          "customer_name": {
            "type": "string",
            "title": "Customer Name"
          },
          "customer_email": {
            "type": "string",
            "title": "Customer Email"
          },
          "customer_phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Phone"
          },
          "special_requests": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Requests"
          },
          "dietary_restrictions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Dietary Restrictions",
            "default": []
          },
          "occasion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Occasion"
          },
          "notification_method": {
            "$ref": "#/components/schemas/NotificationMethod"
          },
          "reminder_sent": {
            "type": "boolean",
            "title": "Reminder Sent",
            "default": false
          },
          "converted_from_waitlist": {
            "type": "boolean",
            "title": "Converted From Waitlist",
            "default": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "confirmed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confirmed At"
          },
          "seated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seated At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "cancelled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cancelled At"
          },
          "cancellation_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cancellation Reason"
          },
          "cancelled_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cancelled By"
          }
        },
        "type": "object",
        "required": [
          "id",
          "customer_id",
          "reservation_date",
          "reservation_time",
          "party_size",
          "duration_minutes",
          "status",
          "confirmation_code",
          "source",
          "customer_name",
          "customer_email",
          "notification_method",
          "created_at"
        ],
        "title": "ReservationResponse",
        "description": "Schema for reservation response"
      },
      "ReservationSettingsResponse": {
        "properties": {
          "advance_booking_days": {
            "type": "integer",
            "title": "Advance Booking Days"
          },
          "min_advance_hours": {
            "type": "integer",
            "title": "Min Advance Hours"
          },
          "max_party_size": {
            "type": "integer",
            "title": "Max Party Size"
          },
          "min_party_size": {
            "type": "integer",
            "title": "Min Party Size"
          },
          "slot_duration_minutes": {
            "type": "integer",
            "title": "Slot Duration Minutes"
          },
          "default_reservation_duration": {
            "type": "integer",
            "title": "Default Reservation Duration"
          },
          "operating_hours": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Operating Hours"
          },
          "total_capacity": {
            "type": "integer",
            "title": "Total Capacity"
          },
          "waitlist_enabled": {
            "type": "boolean",
            "title": "Waitlist Enabled"
          },
          "require_confirmation": {
            "type": "boolean",
            "title": "Require Confirmation"
          },
          "send_reminders": {
            "type": "boolean",
            "title": "Send Reminders"
          }
        },
        "type": "object",
        "required": [
          "advance_booking_days",
          "min_advance_hours",
          "max_party_size",
          "min_party_size",
          "slot_duration_minutes",
          "default_reservation_duration",
          "operating_hours",
          "total_capacity",
          "waitlist_enabled",
          "require_confirmation",
          "send_reminders"
        ],
        "title": "ReservationSettingsResponse",
        "description": "Schema for reservation settings"
      },
      "ReservationUpdate": {
        "properties": {
          "reservation_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reservation Date"
          },
          "reservation_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reservation Time"
          },
          "party_size": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 20.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Party Size"
          },
          "special_requests": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Requests"
          },
          "dietary_restrictions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Restrictions"
          },
          "occasion": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Occasion"
          },
          "notification_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NotificationMethod"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "ReservationUpdate",
        "description": "Schema for updating a reservation"
      },
      "ResolutionRequest": {
        "properties": {
          "reconciliation_action": {
            "$ref": "#/components/schemas/ReconciliationAction"
          },
          "resolution_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution Notes"
          },
          "resolved_by": {
            "type": "integer",
            "title": "Resolved By"
          }
        },
        "type": "object",
        "required": [
          "reconciliation_action",
          "resolved_by"
        ],
        "title": "ResolutionRequest"
      },
      "ResolveReviewRequest": {
        "properties": {
          "resolution_action": {
            "type": "string",
            "maxLength": 255,
            "minLength": 3,
            "title": "Resolution Action",
            "description": "Action taken to resolve the issue"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes about the resolution"
          },
          "mark_order_completed": {
            "type": "boolean",
            "title": "Mark Order Completed",
            "description": "Whether to mark the associated order as completed",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "resolution_action"
        ],
        "title": "ResolveReviewRequest",
        "description": "Request model for resolving a review"
      },
      "ReversedItem": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "item_name": {
            "type": "string",
            "title": "Item Name"
          },
          "quantity_restored": {
            "type": "number",
            "title": "Quantity Restored"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "new_quantity": {
            "type": "number",
            "title": "New Quantity"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "item_name",
          "quantity_restored",
          "unit",
          "new_quantity"
        ],
        "title": "ReversedItem",
        "description": "Information about a reversed inventory item"
      },
      "ReviewCreate": {
        "properties": {
          "review_type": {
            "$ref": "#/components/schemas/ReviewType"
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "content": {
            "type": "string",
            "maxLength": 5000,
            "minLength": 10,
            "title": "Content"
          },
          "rating": {
            "type": "number",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Rating"
          },
          "is_anonymous": {
            "type": "boolean",
            "title": "Is Anonymous",
            "default": false
          },
          "reviewer_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewer Name"
          },
          "product_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Id"
          },
          "service_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Id"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "source": {
            "$ref": "#/components/schemas/ReviewSource",
            "default": "website"
          }
        },
        "type": "object",
        "required": [
          "review_type",
          "content",
          "rating",
          "customer_id"
        ],
        "title": "ReviewCreate",
        "description": "Schema for creating a review"
      },
      "ReviewListResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ReviewSummary"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next"
          },
          "has_prev": {
            "type": "boolean",
            "title": "Has Prev"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "per_page",
          "total_pages",
          "has_next",
          "has_prev"
        ],
        "title": "ReviewListResponse",
        "description": "Schema for paginated review responses"
      },
      "ReviewMediaCreate": {
        "properties": {
          "media_type": {
            "type": "string",
            "pattern": "^(image|video)$",
            "title": "Media Type"
          },
          "file_path": {
            "type": "string",
            "title": "File Path"
          },
          "file_name": {
            "type": "string",
            "title": "File Name"
          },
          "file_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Size"
          },
          "mime_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mime Type"
          },
          "width": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Width"
          },
          "height": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Height"
          },
          "duration": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration"
          }
        },
        "type": "object",
        "required": [
          "media_type",
          "file_path",
          "file_name"
        ],
        "title": "ReviewMediaCreate",
        "description": "Schema for review media creation"
      },
      "ReviewModeration": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/modules__feedback__models__feedback_models__ReviewStatus"
          },
          "moderation_notes": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Moderation Notes"
          },
          "is_featured": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Featured",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ReviewModeration",
        "description": "Schema for review moderation"
      },
      "ReviewReason": {
        "type": "string",
        "enum": [
          "missing_recipe",
          "insufficient_stock",
          "inventory_not_found",
          "recipe_circular_dependency",
          "sync_conflict",
          "concurrent_modification",
          "other"
        ],
        "title": "ReviewReason",
        "description": "Reasons for manual review"
      },
      "ReviewResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "uuid": {
            "type": "string",
            "title": "Uuid"
          },
          "review_type": {
            "$ref": "#/components/schemas/ReviewType"
          },
          "status": {
            "$ref": "#/components/schemas/modules__feedback__models__feedback_models__ReviewStatus"
          },
          "source": {
            "$ref": "#/components/schemas/ReviewSource"
          },
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "product_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Id"
          },
          "service_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Id"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "rating": {
            "type": "number",
            "title": "Rating"
          },
          "is_verified_purchase": {
            "type": "boolean",
            "title": "Is Verified Purchase"
          },
          "is_anonymous": {
            "type": "boolean",
            "title": "Is Anonymous"
          },
          "reviewer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewer Name"
          },
          "helpful_votes": {
            "type": "integer",
            "title": "Helpful Votes"
          },
          "not_helpful_votes": {
            "type": "integer",
            "title": "Not Helpful Votes"
          },
          "total_votes": {
            "type": "integer",
            "title": "Total Votes"
          },
          "helpful_percentage": {
            "type": "number",
            "title": "Helpful Percentage"
          },
          "sentiment_score": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SentimentScore"
              },
              {
                "type": "null"
              }
            ]
          },
          "sentiment_confidence": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sentiment Confidence"
          },
          "is_featured": {
            "type": "boolean",
            "title": "Is Featured"
          },
          "has_images": {
            "type": "boolean",
            "title": "Has Images"
          },
          "has_videos": {
            "type": "boolean",
            "title": "Has Videos"
          },
          "media_count": {
            "type": "integer",
            "title": "Media Count"
          },
          "has_business_response": {
            "type": "boolean",
            "title": "Has Business Response"
          },
          "business_response_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Business Response At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "uuid",
          "review_type",
          "status",
          "source",
          "customer_id",
          "order_id",
          "product_id",
          "service_id",
          "title",
          "content",
          "rating",
          "is_verified_purchase",
          "is_anonymous",
          "reviewer_name",
          "helpful_votes",
          "not_helpful_votes",
          "total_votes",
          "helpful_percentage",
          "sentiment_score",
          "sentiment_confidence",
          "is_featured",
          "has_images",
          "has_videos",
          "media_count",
          "has_business_response",
          "business_response_at",
          "created_at",
          "updated_at"
        ],
        "title": "ReviewResponse",
        "description": "Schema for review responses"
      },
      "ReviewSource": {
        "type": "string",
        "enum": [
          "website",
          "mobile_app",
          "email",
          "sms",
          "phone",
          "social_media",
          "third_party"
        ],
        "title": "ReviewSource",
        "description": "Source of the review"
      },
      "ReviewStatisticsResponse": {
        "properties": {
          "total_reviews": {
            "type": "integer",
            "title": "Total Reviews"
          },
          "status_breakdown": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Status Breakdown"
          },
          "reason_breakdown": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Reason Breakdown"
          },
          "average_resolution_time_hours": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Resolution Time Hours"
          },
          "escalation_rate": {
            "type": "number",
            "title": "Escalation Rate"
          }
        },
        "type": "object",
        "required": [
          "total_reviews",
          "status_breakdown",
          "reason_breakdown",
          "average_resolution_time_hours",
          "escalation_rate"
        ],
        "title": "ReviewStatisticsResponse",
        "description": "Response model for review statistics"
      },
      "ReviewSummary": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "uuid": {
            "type": "string",
            "title": "Uuid"
          },
          "review_type": {
            "$ref": "#/components/schemas/ReviewType"
          },
          "status": {
            "$ref": "#/components/schemas/modules__feedback__models__feedback_models__ReviewStatus"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "rating": {
            "type": "number",
            "title": "Rating"
          },
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "product_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Id"
          },
          "is_verified_purchase": {
            "type": "boolean",
            "title": "Is Verified Purchase"
          },
          "helpful_votes": {
            "type": "integer",
            "title": "Helpful Votes"
          },
          "sentiment_score": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SentimentScore"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "uuid",
          "review_type",
          "status",
          "title",
          "rating",
          "customer_id",
          "product_id",
          "is_verified_purchase",
          "helpful_votes",
          "sentiment_score",
          "created_at"
        ],
        "title": "ReviewSummary",
        "description": "Summary schema for review listings"
      },
      "ReviewType": {
        "type": "string",
        "enum": [
          "product",
          "service",
          "order",
          "delivery",
          "support",
          "general"
        ],
        "title": "ReviewType",
        "description": "Types of reviews"
      },
      "ReviewUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "content": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 5000,
                "minLength": 10
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "rating": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 5.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Rating"
          },
          "is_anonymous": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Anonymous"
          },
          "reviewer_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewer Name"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "title": "ReviewUpdate",
        "description": "Schema for updating a review"
      },
      "ReviewVoteCreate": {
        "properties": {
          "is_helpful": {
            "type": "boolean",
            "title": "Is Helpful"
          }
        },
        "type": "object",
        "required": [
          "is_helpful"
        ],
        "title": "ReviewVoteCreate",
        "description": "Schema for voting on review helpfulness"
      },
      "RewardAnalytics": {
        "properties": {
          "total_issued": {
            "type": "integer",
            "title": "Total Issued"
          },
          "total_redeemed": {
            "type": "integer",
            "title": "Total Redeemed"
          },
          "total_expired": {
            "type": "integer",
            "title": "Total Expired"
          },
          "redemption_rate": {
            "type": "number",
            "title": "Redemption Rate"
          },
          "total_discount_value": {
            "type": "number",
            "title": "Total Discount Value"
          },
          "average_discount_per_redemption": {
            "type": "number",
            "title": "Average Discount Per Redemption"
          }
        },
        "type": "object",
        "required": [
          "total_issued",
          "total_redeemed",
          "total_expired",
          "redemption_rate",
          "total_discount_value",
          "average_discount_per_redemption"
        ],
        "title": "RewardAnalytics",
        "description": "Schema for reward analytics"
      },
      "RewardRedemptionRequest": {
        "properties": {
          "reward_code": {
            "type": "string",
            "maxLength": 20,
            "title": "Reward Code"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "staff_member_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Member Id"
          }
        },
        "type": "object",
        "required": [
          "reward_code",
          "order_id"
        ],
        "title": "RewardRedemptionRequest",
        "description": "Schema for reward redemption request"
      },
      "RewardRedemptionResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "discount_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Amount"
          },
          "reward_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reward Title"
          },
          "points_deducted": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Points Deducted"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "RewardRedemptionResponse",
        "description": "Schema for reward redemption response"
      },
      "RewardSearchResponse": {
        "properties": {
          "rewards": {
            "items": {
              "$ref": "#/components/schemas/CustomerRewardSummary"
            },
            "type": "array",
            "title": "Rewards"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          }
        },
        "type": "object",
        "required": [
          "rewards",
          "total",
          "page",
          "page_size",
          "total_pages"
        ],
        "title": "RewardSearchResponse",
        "description": "Response for reward search"
      },
      "RewardStatusEnum": {
        "type": "string",
        "enum": [
          "available",
          "reserved",
          "redeemed",
          "expired",
          "revoked",
          "pending"
        ],
        "title": "RewardStatusEnum"
      },
      "RewardTemplate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "reward_type": {
            "$ref": "#/components/schemas/RewardTypeEnum"
          },
          "value": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "percentage": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Percentage"
          },
          "points_cost": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Points Cost"
          },
          "item_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Item Id"
          },
          "category_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Ids"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "max_discount_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Discount Amount"
          },
          "max_uses_per_customer": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Per Customer"
          },
          "max_uses_total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Total"
          },
          "valid_days": {
            "type": "integer",
            "maximum": 365.0,
            "minimum": 1.0,
            "title": "Valid Days",
            "default": 30
          },
          "valid_from_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid From Date"
          },
          "valid_until_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Until Date"
          },
          "eligible_tiers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Eligible Tiers"
          },
          "trigger_type": {
            "$ref": "#/components/schemas/TriggerTypeEnum"
          },
          "trigger_conditions": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trigger Conditions"
          },
          "auto_apply": {
            "type": "boolean",
            "title": "Auto Apply",
            "default": false
          },
          "title": {
            "type": "string",
            "maxLength": 200,
            "title": "Title"
          },
          "subtitle": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtitle"
          },
          "terms_and_conditions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terms And Conditions"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_featured": {
            "type": "boolean",
            "title": "Is Featured",
            "default": false
          },
          "priority": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Priority",
            "default": 0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "total_issued": {
            "type": "integer",
            "title": "Total Issued"
          },
          "total_redeemed": {
            "type": "integer",
            "title": "Total Redeemed"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "reward_type",
          "trigger_type",
          "title",
          "id",
          "total_issued",
          "total_redeemed",
          "created_at",
          "updated_at"
        ],
        "title": "RewardTemplate",
        "description": "Schema for reward template response"
      },
      "RewardTemplateCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "reward_type": {
            "$ref": "#/components/schemas/RewardTypeEnum"
          },
          "value": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "percentage": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Percentage"
          },
          "points_cost": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Points Cost"
          },
          "item_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Item Id"
          },
          "category_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Ids"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "max_discount_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Discount Amount"
          },
          "max_uses_per_customer": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Per Customer"
          },
          "max_uses_total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Total"
          },
          "valid_days": {
            "type": "integer",
            "maximum": 365.0,
            "minimum": 1.0,
            "title": "Valid Days",
            "default": 30
          },
          "valid_from_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid From Date"
          },
          "valid_until_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Until Date"
          },
          "eligible_tiers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Eligible Tiers"
          },
          "trigger_type": {
            "$ref": "#/components/schemas/TriggerTypeEnum"
          },
          "trigger_conditions": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trigger Conditions"
          },
          "auto_apply": {
            "type": "boolean",
            "title": "Auto Apply",
            "default": false
          },
          "title": {
            "type": "string",
            "maxLength": 200,
            "title": "Title"
          },
          "subtitle": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtitle"
          },
          "terms_and_conditions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terms And Conditions"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_featured": {
            "type": "boolean",
            "title": "Is Featured",
            "default": false
          },
          "priority": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Priority",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "name",
          "reward_type",
          "trigger_type",
          "title"
        ],
        "title": "RewardTemplateCreate",
        "description": "Schema for creating reward templates"
      },
      "RewardTemplateUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "value": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "percentage": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Percentage"
          },
          "points_cost": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Points Cost"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "max_discount_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Discount Amount"
          },
          "max_uses_per_customer": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Per Customer"
          },
          "max_uses_total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Total"
          },
          "valid_days": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 365.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Days"
          },
          "eligible_tiers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Eligible Tiers"
          },
          "trigger_conditions": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trigger Conditions"
          },
          "auto_apply": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auto Apply"
          },
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "subtitle": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 300
              },
              {
                "type": "null"
              }
            ],
            "title": "Subtitle"
          },
          "terms_and_conditions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terms And Conditions"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_featured": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Featured"
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority"
          }
        },
        "type": "object",
        "title": "RewardTemplateUpdate",
        "description": "Schema for updating reward templates"
      },
      "RewardTypeEnum": {
        "type": "string",
        "enum": [
          "points_discount",
          "percentage_discount",
          "fixed_discount",
          "free_item",
          "free_delivery",
          "bonus_points",
          "cashback",
          "gift_card",
          "tier_upgrade",
          "custom"
        ],
        "title": "RewardTypeEnum"
      },
      "RoleBasedPayRateCreate": {
        "properties": {
          "role_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Role Name"
          },
          "location": {
            "type": "string",
            "title": "Location",
            "default": "default"
          },
          "base_hourly_rate": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Base Hourly Rate"
          },
          "overtime_multiplier": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 1.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Overtime Multiplier",
            "default": "1.5"
          },
          "effective_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Effective Date"
          },
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          }
        },
        "type": "object",
        "required": [
          "role_name",
          "base_hourly_rate"
        ],
        "title": "RoleBasedPayRateCreate",
        "description": "Request model for creating role-based pay rate"
      },
      "RoleBasedPayRateResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "role_name": {
            "type": "string",
            "title": "Role Name"
          },
          "location": {
            "type": "string",
            "title": "Location",
            "default": "default"
          },
          "base_hourly_rate": {
            "type": "string",
            "title": "Base Hourly Rate"
          },
          "overtime_multiplier": {
            "type": "string",
            "title": "Overtime Multiplier",
            "default": "1.5"
          },
          "effective_date": {
            "type": "string",
            "format": "date-time",
            "title": "Effective Date"
          },
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "role_name",
          "base_hourly_rate",
          "effective_date",
          "created_at",
          "updated_at"
        ],
        "title": "RoleBasedPayRateResponse",
        "description": "Response model for role-based pay rate"
      },
      "RollbackVersionRequest": {
        "properties": {
          "target_version_id": {
            "type": "integer",
            "title": "Target Version Id"
          },
          "create_backup": {
            "type": "boolean",
            "title": "Create Backup",
            "default": true
          },
          "rollback_reason": {
            "type": "string",
            "title": "Rollback Reason"
          }
        },
        "type": "object",
        "required": [
          "target_version_id",
          "rollback_reason"
        ],
        "title": "RollbackVersionRequest"
      },
      "RuleEvaluationResult": {
        "properties": {
          "rule_id": {
            "type": "integer",
            "title": "Rule Id"
          },
          "rule_name": {
            "type": "string",
            "title": "Rule Name"
          },
          "rule_type": {
            "$ref": "#/components/schemas/RuleType"
          },
          "priority": {
            "type": "integer",
            "title": "Priority"
          },
          "applicable": {
            "type": "boolean",
            "title": "Applicable"
          },
          "skip_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Skip Reason"
          },
          "conditions_met": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object",
            "title": "Conditions Met"
          },
          "discount_amount": {
            "type": "string",
            "title": "Discount Amount",
            "default": "0"
          },
          "evaluation_time_ms": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Evaluation Time Ms"
          }
        },
        "type": "object",
        "required": [
          "rule_id",
          "rule_name",
          "rule_type",
          "priority",
          "applicable"
        ],
        "title": "RuleEvaluationResult",
        "description": "Result of evaluating a single rule"
      },
      "RuleStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "scheduled",
          "expired",
          "testing"
        ],
        "title": "RuleStatus",
        "description": "Status of pricing rules"
      },
      "RuleType": {
        "type": "string",
        "enum": [
          "percentage_discount",
          "fixed_discount",
          "bundle_discount",
          "bogo",
          "happy_hour",
          "loyalty_discount",
          "quantity_discount",
          "category_discount",
          "time_based",
          "custom"
        ],
        "title": "RuleType",
        "description": "Types of pricing rules"
      },
      "RuleValidationResult": {
        "properties": {
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "modified_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OrderItemOut"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified Items"
          }
        },
        "type": "object",
        "required": [
          "is_valid"
        ],
        "title": "RuleValidationResult"
      },
      "SalesDetailResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "snapshot_date": {
            "type": "string",
            "format": "date",
            "title": "Snapshot Date"
          },
          "period_type": {
            "$ref": "#/components/schemas/AggregationPeriod"
          },
          "staff_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Id"
          },
          "staff_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Name"
          },
          "product_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Id"
          },
          "product_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Name"
          },
          "category_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Id"
          },
          "category_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Name"
          },
          "total_orders": {
            "type": "integer",
            "title": "Total Orders"
          },
          "total_revenue": {
            "type": "string",
            "title": "Total Revenue"
          },
          "total_items_sold": {
            "type": "integer",
            "title": "Total Items Sold"
          },
          "average_order_value": {
            "type": "string",
            "title": "Average Order Value"
          },
          "total_discounts": {
            "type": "string",
            "title": "Total Discounts"
          },
          "total_tax": {
            "type": "string",
            "title": "Total Tax"
          },
          "net_revenue": {
            "type": "string",
            "title": "Net Revenue"
          },
          "unique_customers": {
            "type": "integer",
            "title": "Unique Customers"
          },
          "orders_handled": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Orders Handled"
          },
          "average_processing_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Processing Time"
          },
          "product_quantity_sold": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Quantity Sold"
          },
          "product_revenue": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Revenue"
          },
          "product_popularity_rank": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Popularity Rank"
          },
          "calculated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Calculated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "snapshot_date",
          "period_type",
          "total_orders",
          "total_revenue",
          "total_items_sold",
          "average_order_value",
          "total_discounts",
          "total_tax",
          "net_revenue",
          "unique_customers",
          "calculated_at"
        ],
        "title": "SalesDetailResponse",
        "description": "Response schema for detailed sales data"
      },
      "SalesFilterRequest": {
        "properties": {
          "date_from": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date From",
            "description": "Start date for the report"
          },
          "date_to": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date To",
            "description": "End date for the report"
          },
          "staff_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Ids",
            "description": "Filter by specific staff members"
          },
          "product_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Ids",
            "description": "Filter by specific products/menu items"
          },
          "category_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Ids",
            "description": "Filter by product categories"
          },
          "customer_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Ids",
            "description": "Filter by specific customers"
          },
          "period_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AggregationPeriod"
              },
              {
                "type": "null"
              }
            ],
            "description": "Time period for data aggregation",
            "default": "daily"
          },
          "include_discounts": {
            "type": "boolean",
            "title": "Include Discounts",
            "description": "Include discount information",
            "default": true
          },
          "include_tax": {
            "type": "boolean",
            "title": "Include Tax",
            "description": "Include tax information",
            "default": true
          },
          "only_completed_orders": {
            "type": "boolean",
            "title": "Only Completed Orders",
            "description": "Only include completed orders",
            "default": true
          },
          "min_order_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Value",
            "description": "Minimum order value"
          },
          "max_order_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Order Value",
            "description": "Maximum order value"
          }
        },
        "type": "object",
        "title": "SalesFilterRequest",
        "description": "Request schema for filtering sales data"
      },
      "SalesReportRequest": {
        "properties": {
          "report_type": {
            "$ref": "#/components/schemas/ReportType",
            "description": "Type of report to generate"
          },
          "filters": {
            "$ref": "#/components/schemas/SalesFilterRequest",
            "description": "Filters to apply to the report"
          },
          "include_charts": {
            "type": "boolean",
            "title": "Include Charts",
            "description": "Include visualization charts",
            "default": true
          },
          "export_format": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Export Format",
            "description": "Export format (pdf, csv, xlsx)"
          },
          "template_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template Id",
            "description": "Use saved report template"
          },
          "sort_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sort By",
            "description": "Field to sort by",
            "default": "total_revenue"
          },
          "sort_order": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sort Order",
            "description": "Sort order (asc/desc)",
            "default": "desc"
          },
          "page": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Page",
            "description": "Page number for pagination",
            "default": 1
          },
          "per_page": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "title": "Per Page",
            "description": "Items per page",
            "default": 50
          }
        },
        "type": "object",
        "required": [
          "report_type",
          "filters"
        ],
        "title": "SalesReportRequest",
        "description": "Request schema for generating sales reports"
      },
      "SalesSummaryResponse": {
        "properties": {
          "period_start": {
            "type": "string",
            "format": "date",
            "title": "Period Start"
          },
          "period_end": {
            "type": "string",
            "format": "date",
            "title": "Period End"
          },
          "period_type": {
            "$ref": "#/components/schemas/AggregationPeriod"
          },
          "total_orders": {
            "type": "integer",
            "title": "Total Orders",
            "description": "Total number of orders"
          },
          "total_revenue": {
            "type": "string",
            "title": "Total Revenue",
            "description": "Total revenue amount"
          },
          "total_items_sold": {
            "type": "integer",
            "title": "Total Items Sold",
            "description": "Total number of items sold"
          },
          "average_order_value": {
            "type": "string",
            "title": "Average Order Value",
            "description": "Average order value"
          },
          "gross_revenue": {
            "type": "string",
            "title": "Gross Revenue",
            "description": "Revenue before discounts"
          },
          "total_discounts": {
            "type": "string",
            "title": "Total Discounts",
            "description": "Total discount amount"
          },
          "total_tax": {
            "type": "string",
            "title": "Total Tax",
            "description": "Total tax amount"
          },
          "net_revenue": {
            "type": "string",
            "title": "Net Revenue",
            "description": "Net revenue after discounts"
          },
          "unique_customers": {
            "type": "integer",
            "title": "Unique Customers",
            "description": "Number of unique customers"
          },
          "new_customers": {
            "type": "integer",
            "title": "New Customers",
            "description": "Number of new customers"
          },
          "returning_customers": {
            "type": "integer",
            "title": "Returning Customers",
            "description": "Number of returning customers"
          },
          "customer_retention_rate": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Retention Rate",
            "description": "Customer retention percentage"
          },
          "revenue_growth": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revenue Growth",
            "description": "Revenue growth vs previous period"
          },
          "order_growth": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Growth",
            "description": "Order count growth vs previous period"
          }
        },
        "type": "object",
        "required": [
          "period_start",
          "period_end",
          "period_type",
          "total_orders",
          "total_revenue",
          "total_items_sold",
          "average_order_value",
          "gross_revenue",
          "total_discounts",
          "total_tax",
          "net_revenue",
          "unique_customers",
          "new_customers",
          "returning_customers",
          "customer_retention_rate",
          "revenue_growth",
          "order_growth"
        ],
        "title": "SalesSummaryResponse",
        "description": "Response schema for sales summary data"
      },
      "ScheduleConflict": {
        "properties": {
          "conflict_type": {
            "type": "string",
            "title": "Conflict Type"
          },
          "severity": {
            "type": "string",
            "title": "Severity"
          },
          "shift_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Shift Ids"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "resolution_suggestions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Resolution Suggestions"
          }
        },
        "type": "object",
        "required": [
          "conflict_type",
          "severity",
          "shift_ids",
          "description",
          "resolution_suggestions"
        ],
        "title": "ScheduleConflict"
      },
      "ScheduleCreateRequest": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          },
          "start_time": {
            "type": "string",
            "format": "time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "time",
            "title": "End Time"
          },
          "break_duration": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Break Duration",
            "description": "Break duration in minutes",
            "default": 0
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "date",
          "start_time",
          "end_time"
        ],
        "title": "ScheduleCreateRequest",
        "description": "Request schema for creating a schedule/shift"
      },
      "ScheduleGenerationRequest": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "title": "End Date"
          },
          "location_id": {
            "type": "integer",
            "title": "Location Id"
          },
          "use_templates": {
            "type": "boolean",
            "title": "Use Templates",
            "default": true
          },
          "auto_assign": {
            "type": "boolean",
            "title": "Auto Assign",
            "default": false
          },
          "respect_availability": {
            "type": "boolean",
            "title": "Respect Availability",
            "default": true
          },
          "max_hours_per_week": {
            "type": "number",
            "title": "Max Hours Per Week",
            "default": 40
          },
          "min_hours_between_shifts": {
            "type": "integer",
            "title": "Min Hours Between Shifts",
            "default": 8
          }
        },
        "type": "object",
        "required": [
          "start_date",
          "end_date",
          "location_id"
        ],
        "title": "ScheduleGenerationRequest"
      },
      "SchedulePreviewResponse": {
        "properties": {
          "date_range": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Date Range"
          },
          "total_shifts": {
            "type": "integer",
            "title": "Total Shifts"
          },
          "by_date": {
            "additionalProperties": {
              "items": {
                "additionalProperties": true,
                "type": "object"
              },
              "type": "array"
            },
            "type": "object",
            "title": "By Date"
          },
          "by_staff": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "By Staff"
          },
          "summary": {
            "additionalProperties": true,
            "type": "object",
            "title": "Summary"
          }
        },
        "type": "object",
        "required": [
          "date_range",
          "total_shifts",
          "by_date",
          "by_staff",
          "summary"
        ],
        "title": "SchedulePreviewResponse",
        "description": "Response schema for schedule preview"
      },
      "SchedulePublishResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "title": "End Date"
          },
          "published_by_id": {
            "type": "integer",
            "title": "Published By Id"
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "title": "Published At"
          },
          "notifications_sent": {
            "type": "boolean",
            "title": "Notifications Sent"
          },
          "notification_count": {
            "type": "integer",
            "title": "Notification Count"
          },
          "total_shifts": {
            "type": "integer",
            "title": "Total Shifts"
          },
          "total_hours": {
            "type": "number",
            "title": "Total Hours"
          },
          "estimated_labor_cost": {
            "type": "number",
            "title": "Estimated Labor Cost"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "start_date",
          "end_date",
          "published_by_id",
          "published_at",
          "notifications_sent",
          "notification_count",
          "total_shifts",
          "total_hours",
          "estimated_labor_cost",
          "notes"
        ],
        "title": "SchedulePublishResponse"
      },
      "ScheduleUpdateRequest": {
        "properties": {
          "start_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time"
          },
          "break_duration": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Break Duration"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "title": "ScheduleUpdateRequest",
        "description": "Request schema for updating a schedule/shift"
      },
      "SeasonalPattern": {
        "properties": {
          "pattern_type": {
            "$ref": "#/components/schemas/SeasonalityType"
          },
          "strength": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Strength",
            "description": "Pattern strength"
          },
          "period": {
            "type": "integer",
            "title": "Period",
            "description": "Period in time units"
          },
          "peak_periods": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Peak Periods"
          },
          "low_periods": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Low Periods"
          },
          "impact_percentage": {
            "type": "number",
            "title": "Impact Percentage"
          }
        },
        "type": "object",
        "required": [
          "pattern_type",
          "strength",
          "period",
          "peak_periods",
          "low_periods",
          "impact_percentage"
        ],
        "title": "SeasonalPattern",
        "description": "Detected seasonal pattern"
      },
      "SeasonalityPattern": {
        "properties": {
          "season_name": {
            "type": "string",
            "title": "Season Name",
            "description": "Season or period name"
          },
          "start_month": {
            "type": "integer",
            "maximum": 12.0,
            "minimum": 1.0,
            "title": "Start Month"
          },
          "end_month": {
            "type": "integer",
            "maximum": 12.0,
            "minimum": 1.0,
            "title": "End Month"
          },
          "impact_multiplier": {
            "type": "number",
            "title": "Impact Multiplier",
            "description": "Revenue impact multiplier"
          },
          "affected_products": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Affected Products",
            "description": "Product IDs affected"
          },
          "historical_accuracy": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Historical Accuracy",
            "description": "Historical prediction accuracy"
          }
        },
        "type": "object",
        "required": [
          "season_name",
          "start_month",
          "end_month",
          "impact_multiplier",
          "affected_products",
          "historical_accuracy"
        ],
        "title": "SeasonalityPattern",
        "description": "Seasonal pattern detection"
      },
      "SeasonalityType": {
        "type": "string",
        "enum": [
          "daily",
          "weekly",
          "monthly",
          "yearly",
          "holiday",
          "custom"
        ],
        "title": "SeasonalityType",
        "description": "Types of seasonality patterns"
      },
      "SelectionType": {
        "type": "string",
        "enum": [
          "single",
          "multiple"
        ],
        "title": "SelectionType"
      },
      "SentimentScore": {
        "type": "string",
        "enum": [
          "very_negative",
          "negative",
          "neutral",
          "positive",
          "very_positive"
        ],
        "title": "SentimentScore",
        "description": "Sentiment analysis results"
      },
      "ShiftBreakCreate": {
        "properties": {
          "shift_id": {
            "type": "integer",
            "title": "Shift Id"
          },
          "break_type": {
            "$ref": "#/components/schemas/BreakType"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time"
          },
          "is_paid": {
            "type": "boolean",
            "title": "Is Paid",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "shift_id",
          "break_type",
          "start_time",
          "end_time"
        ],
        "title": "ShiftBreakCreate"
      },
      "ShiftBreakResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "shift_id": {
            "type": "integer",
            "title": "Shift Id"
          },
          "break_type": {
            "$ref": "#/components/schemas/BreakType"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time"
          },
          "duration_minutes": {
            "type": "integer",
            "title": "Duration Minutes"
          },
          "is_paid": {
            "type": "boolean",
            "title": "Is Paid"
          }
        },
        "type": "object",
        "required": [
          "id",
          "shift_id",
          "break_type",
          "start_time",
          "end_time",
          "duration_minutes",
          "is_paid"
        ],
        "title": "ShiftBreakResponse"
      },
      "ShiftCreate": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "role_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role Id"
          },
          "location_id": {
            "type": "integer",
            "title": "Location Id"
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time"
          },
          "shift_type": {
            "$ref": "#/components/schemas/ShiftType-Input",
            "default": "regular"
          },
          "template_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template Id"
          },
          "hourly_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hourly Rate"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "location_id",
          "date",
          "start_time",
          "end_time"
        ],
        "title": "ShiftCreate"
      },
      "ShiftRecommendation": {
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          },
          "start_time": {
            "type": "string",
            "format": "time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "time",
            "title": "End Time"
          },
          "shift_type": {
            "$ref": "#/components/schemas/modules__ai_recommendations__schemas__staffing_schemas__ShiftType"
          },
          "staff_requirements": {
            "items": {
              "$ref": "#/components/schemas/StaffRequirement"
            },
            "type": "array",
            "title": "Staff Requirements"
          },
          "predicted_workload": {
            "additionalProperties": true,
            "type": "object",
            "title": "Predicted Workload"
          },
          "peak_hours": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Peak Hours"
          },
          "estimated_labor_cost": {
            "type": "string",
            "title": "Estimated Labor Cost"
          },
          "cost_per_order": {
            "type": "string",
            "title": "Cost Per Order"
          },
          "labor_percentage": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Labor Percentage"
          },
          "current_scheduled": {
            "additionalProperties": {
              "type": "integer"
            },
            "propertyNames": {
              "$ref": "#/components/schemas/StaffRole"
            },
            "type": "object",
            "title": "Current Scheduled"
          },
          "staffing_gap": {
            "additionalProperties": {
              "type": "integer"
            },
            "propertyNames": {
              "$ref": "#/components/schemas/StaffRole"
            },
            "type": "object",
            "title": "Staffing Gap"
          },
          "staffing_level": {
            "$ref": "#/components/schemas/StaffingLevel"
          },
          "priority_roles_to_fill": {
            "items": {
              "$ref": "#/components/schemas/StaffRole"
            },
            "type": "array",
            "title": "Priority Roles To Fill"
          },
          "flexibility_notes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Flexibility Notes"
          }
        },
        "type": "object",
        "required": [
          "date",
          "start_time",
          "end_time",
          "shift_type",
          "staff_requirements",
          "predicted_workload",
          "peak_hours",
          "estimated_labor_cost",
          "cost_per_order",
          "labor_percentage",
          "current_scheduled",
          "staffing_gap",
          "staffing_level",
          "priority_roles_to_fill",
          "flexibility_notes"
        ],
        "title": "ShiftRecommendation",
        "description": "Recommended shift for staffing",
        "example": {
          "cost_per_order": "8.50",
          "date": "2025-02-01",
          "end_time": "22:00:00",
          "estimated_labor_cost": "1250.00",
          "labor_percentage": 28.5,
          "priority_roles_to_fill": [
            "server",
            "line_cook"
          ],
          "shift_type": "full_day",
          "staffing_level": "understaffed",
          "start_time": "10:00:00"
        }
      },
      "ShiftResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "staff_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Name"
          },
          "role_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role Id"
          },
          "role_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role Name"
          },
          "location_id": {
            "type": "integer",
            "title": "Location Id"
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time"
          },
          "shift_type": {
            "$ref": "#/components/schemas/modules__staff__enums__scheduling_enums__ShiftType"
          },
          "status": {
            "$ref": "#/components/schemas/ShiftStatus"
          },
          "template_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template Id"
          },
          "hourly_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hourly Rate"
          },
          "estimated_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Cost"
          },
          "actual_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Actual Cost"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "published_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At"
          },
          "breaks": {
            "items": {
              "$ref": "#/components/schemas/ShiftBreakResponse"
            },
            "type": "array",
            "title": "Breaks",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "staff_id",
          "staff_name",
          "role_id",
          "role_name",
          "location_id",
          "date",
          "start_time",
          "end_time",
          "shift_type",
          "status",
          "template_id",
          "hourly_rate",
          "estimated_cost",
          "actual_cost",
          "notes",
          "color",
          "created_at",
          "updated_at",
          "published_at"
        ],
        "title": "ShiftResponse"
      },
      "ShiftStatus": {
        "type": "string",
        "enum": [
          "draft",
          "published",
          "in_progress",
          "completed",
          "cancelled"
        ],
        "title": "ShiftStatus"
      },
      "ShiftSwapApproval": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/SwapStatus"
          },
          "manager_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Manager Notes"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ShiftSwapApproval"
      },
      "ShiftSwapRequest": {
        "properties": {
          "from_shift_id": {
            "type": "integer",
            "title": "From Shift Id"
          },
          "to_shift_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "To Shift Id"
          },
          "to_staff_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "To Staff Id"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "from_shift_id"
        ],
        "title": "ShiftSwapRequest"
      },
      "ShiftSwapResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "requester_id": {
            "type": "integer",
            "title": "Requester Id"
          },
          "requester_name": {
            "type": "string",
            "title": "Requester Name"
          },
          "from_shift_id": {
            "type": "integer",
            "title": "From Shift Id"
          },
          "from_shift_details": {
            "additionalProperties": true,
            "type": "object",
            "title": "From Shift Details"
          },
          "to_shift_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "To Shift Id"
          },
          "to_shift_details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "To Shift Details"
          },
          "to_staff_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "To Staff Id"
          },
          "to_staff_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To Staff Name"
          },
          "status": {
            "$ref": "#/components/schemas/SwapStatus"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          },
          "manager_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Manager Notes"
          },
          "approved_by_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved By Id"
          },
          "approved_by_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved By Name"
          },
          "approved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "requester_id",
          "requester_name",
          "from_shift_id",
          "from_shift_details",
          "to_shift_id",
          "to_shift_details",
          "to_staff_id",
          "to_staff_name",
          "status",
          "reason",
          "manager_notes",
          "approved_by_id",
          "approved_by_name",
          "approved_at",
          "created_at"
        ],
        "title": "ShiftSwapResponse"
      },
      "ShiftTemplateCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "role_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role Id"
          },
          "location_id": {
            "type": "integer",
            "title": "Location Id"
          },
          "start_time": {
            "type": "string",
            "format": "time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "time",
            "title": "End Time"
          },
          "recurrence_type": {
            "$ref": "#/components/schemas/RecurrenceType",
            "default": "none"
          },
          "recurrence_days": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DayOfWeek-Input"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recurrence Days"
          },
          "min_staff": {
            "type": "integer",
            "title": "Min Staff",
            "default": 1
          },
          "max_staff": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Staff"
          },
          "preferred_staff": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Staff"
          },
          "estimated_hourly_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Hourly Rate"
          }
        },
        "type": "object",
        "required": [
          "name",
          "location_id",
          "start_time",
          "end_time"
        ],
        "title": "ShiftTemplateCreate"
      },
      "ShiftTemplateResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "role_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role Id"
          },
          "location_id": {
            "type": "integer",
            "title": "Location Id"
          },
          "start_time": {
            "type": "string",
            "format": "time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "time",
            "title": "End Time"
          },
          "recurrence_type": {
            "$ref": "#/components/schemas/RecurrenceType"
          },
          "recurrence_days": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/modules__staff__enums__scheduling_enums__DayOfWeek"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recurrence Days"
          },
          "min_staff": {
            "type": "integer",
            "title": "Min Staff"
          },
          "max_staff": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Staff"
          },
          "preferred_staff": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Staff"
          },
          "estimated_hourly_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Hourly Rate"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "role_id",
          "location_id",
          "start_time",
          "end_time",
          "recurrence_type",
          "recurrence_days",
          "min_staff",
          "max_staff",
          "preferred_staff",
          "estimated_hourly_rate",
          "is_active",
          "created_at",
          "updated_at"
        ],
        "title": "ShiftTemplateResponse"
      },
      "ShiftTemplateUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "role_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role Id"
          },
          "location_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location Id"
          },
          "start_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time"
          },
          "recurrence_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RecurrenceType"
              },
              {
                "type": "null"
              }
            ]
          },
          "recurrence_days": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DayOfWeek-Input"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recurrence Days"
          },
          "min_staff": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Staff"
          },
          "max_staff": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Staff"
          },
          "preferred_staff": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Staff"
          },
          "estimated_hourly_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Hourly Rate"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "ShiftTemplateUpdate"
      },
      "ShiftType-Input": {
        "type": "string",
        "enum": [
          "regular",
          "overtime",
          "holiday",
          "training",
          "meeting"
        ],
        "title": "ShiftType"
      },
      "ShiftUpdate": {
        "properties": {
          "staff_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Id"
          },
          "role_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role Id"
          },
          "location_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location Id"
          },
          "date": {
            "type": "null",
            "title": "Date"
          },
          "start_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time"
          },
          "shift_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ShiftType-Input"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ShiftStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "hourly_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hourly Rate"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color"
          }
        },
        "type": "object",
        "title": "ShiftUpdate"
      },
      "SpecialInstructionBase": {
        "properties": {
          "instruction_type": {
            "$ref": "#/components/schemas/SpecialInstructionType"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority"
          },
          "target_station": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Station"
          }
        },
        "type": "object",
        "required": [
          "instruction_type",
          "description"
        ],
        "title": "SpecialInstructionBase"
      },
      "SpecialInstructionType": {
        "type": "string",
        "enum": [
          "allergen",
          "preparation",
          "timing",
          "temperature",
          "presentation",
          "general"
        ],
        "title": "SpecialInstructionType"
      },
      "SplitDetailResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "split_id": {
            "type": "string",
            "title": "Split Id"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "split_method": {
            "$ref": "#/components/schemas/SplitMethod"
          },
          "status": {
            "$ref": "#/components/schemas/SplitStatus"
          },
          "subtotal": {
            "type": "number",
            "title": "Subtotal"
          },
          "tax_amount": {
            "type": "number",
            "title": "Tax Amount"
          },
          "service_charge": {
            "type": "number",
            "title": "Service Charge"
          },
          "tip_amount": {
            "type": "number",
            "title": "Tip Amount"
          },
          "total_amount": {
            "type": "number",
            "title": "Total Amount"
          },
          "organizer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organizer Name"
          },
          "participants_count": {
            "type": "integer",
            "title": "Participants Count"
          },
          "paid_count": {
            "type": "integer",
            "title": "Paid Count"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "participants": {
            "items": {
              "$ref": "#/components/schemas/ParticipantResponse"
            },
            "type": "array",
            "title": "Participants"
          },
          "split_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Split Config"
          }
        },
        "type": "object",
        "required": [
          "id",
          "split_id",
          "order_id",
          "split_method",
          "status",
          "subtotal",
          "tax_amount",
          "service_charge",
          "tip_amount",
          "total_amount",
          "organizer_name",
          "participants_count",
          "paid_count",
          "expires_at",
          "created_at",
          "participants",
          "split_config"
        ],
        "title": "SplitDetailResponse"
      },
      "SplitMethod": {
        "type": "string",
        "enum": [
          "equal",
          "percentage",
          "amount",
          "item",
          "custom"
        ],
        "title": "SplitMethod",
        "description": "Methods for splitting bills"
      },
      "SplitResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "split_id": {
            "type": "string",
            "title": "Split Id"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "split_method": {
            "$ref": "#/components/schemas/SplitMethod"
          },
          "status": {
            "$ref": "#/components/schemas/SplitStatus"
          },
          "subtotal": {
            "type": "number",
            "title": "Subtotal"
          },
          "tax_amount": {
            "type": "number",
            "title": "Tax Amount"
          },
          "service_charge": {
            "type": "number",
            "title": "Service Charge"
          },
          "tip_amount": {
            "type": "number",
            "title": "Tip Amount"
          },
          "total_amount": {
            "type": "number",
            "title": "Total Amount"
          },
          "organizer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organizer Name"
          },
          "participants_count": {
            "type": "integer",
            "title": "Participants Count"
          },
          "paid_count": {
            "type": "integer",
            "title": "Paid Count"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "split_id",
          "order_id",
          "split_method",
          "status",
          "subtotal",
          "tax_amount",
          "service_charge",
          "tip_amount",
          "total_amount",
          "organizer_name",
          "participants_count",
          "paid_count",
          "expires_at",
          "created_at"
        ],
        "title": "SplitResponse"
      },
      "SplitStatus": {
        "type": "string",
        "enum": [
          "pending",
          "active",
          "partially_paid",
          "completed",
          "cancelled"
        ],
        "title": "SplitStatus",
        "description": "Status of a split bill"
      },
      "StaffPayPolicyCreate": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "base_hourly_rate": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Base Hourly Rate"
          },
          "overtime_multiplier": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 1.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Overtime Multiplier",
            "default": "1.5"
          },
          "double_time_multiplier": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 1.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Double Time Multiplier",
            "default": "2.0"
          },
          "location": {
            "type": "string",
            "title": "Location",
            "default": "default"
          },
          "health_insurance": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Health Insurance",
            "default": "0.00"
          },
          "dental_insurance": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Dental Insurance",
            "default": "0.00"
          },
          "vision_insurance": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Vision Insurance",
            "default": "0.00"
          },
          "retirement_401k_percentage": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Retirement 401K Percentage",
            "default": "0.00"
          },
          "life_insurance": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Life Insurance",
            "default": "0.00"
          },
          "disability_insurance": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Disability Insurance",
            "default": "0.00"
          },
          "parking_fee": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Parking Fee",
            "default": "0.00"
          },
          "other_deductions": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Other Deductions",
            "default": "0.00"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "base_hourly_rate"
        ],
        "title": "StaffPayPolicyCreate",
        "description": "Request model for creating staff pay policy"
      },
      "StaffPayPolicyResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "base_hourly_rate": {
            "type": "string",
            "title": "Base Hourly Rate"
          },
          "overtime_multiplier": {
            "type": "string",
            "title": "Overtime Multiplier",
            "default": "1.5"
          },
          "double_time_multiplier": {
            "type": "string",
            "title": "Double Time Multiplier",
            "default": "2.0"
          },
          "location": {
            "type": "string",
            "title": "Location",
            "default": "default"
          },
          "health_insurance": {
            "type": "string",
            "title": "Health Insurance",
            "default": "0.00"
          },
          "dental_insurance": {
            "type": "string",
            "title": "Dental Insurance",
            "default": "0.00"
          },
          "vision_insurance": {
            "type": "string",
            "title": "Vision Insurance",
            "default": "0.00"
          },
          "retirement_401k_percentage": {
            "type": "string",
            "title": "Retirement 401K Percentage",
            "default": "0.00"
          },
          "life_insurance": {
            "type": "string",
            "title": "Life Insurance",
            "default": "0.00"
          },
          "disability_insurance": {
            "type": "string",
            "title": "Disability Insurance",
            "default": "0.00"
          },
          "parking_fee": {
            "type": "string",
            "title": "Parking Fee",
            "default": "0.00"
          },
          "other_deductions": {
            "type": "string",
            "title": "Other Deductions",
            "default": "0.00"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "staff_id",
          "base_hourly_rate",
          "created_at",
          "updated_at"
        ],
        "title": "StaffPayPolicyResponse",
        "description": "Response model for staff pay policy"
      },
      "StaffPayrollDetail": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id",
            "description": "Staff member ID"
          },
          "staff_name": {
            "type": "string",
            "title": "Staff Name",
            "description": "Staff member name"
          },
          "staff_role": {
            "type": "string",
            "title": "Staff Role",
            "description": "Staff member role"
          },
          "pay_period_start": {
            "type": "string",
            "format": "date",
            "title": "Pay Period Start",
            "description": "Pay period start date"
          },
          "pay_period_end": {
            "type": "string",
            "format": "date",
            "title": "Pay Period End",
            "description": "Pay period end date"
          },
          "regular_hours": {
            "type": "string",
            "title": "Regular Hours",
            "description": "Regular hours worked"
          },
          "overtime_hours": {
            "type": "string",
            "title": "Overtime Hours",
            "description": "Overtime hours worked"
          },
          "double_time_hours": {
            "type": "string",
            "title": "Double Time Hours",
            "description": "Double-time hours worked",
            "default": 0.0
          },
          "holiday_hours": {
            "type": "string",
            "title": "Holiday Hours",
            "description": "Holiday hours worked",
            "default": 0.0
          },
          "sick_hours": {
            "type": "string",
            "title": "Sick Hours",
            "description": "Sick hours used",
            "default": 0.0
          },
          "vacation_hours": {
            "type": "string",
            "title": "Vacation Hours",
            "description": "Vacation hours used",
            "default": 0.0
          },
          "total_hours": {
            "type": "string",
            "title": "Total Hours",
            "description": "Total hours for the pay period"
          },
          "base_hourly_rate": {
            "type": "string",
            "title": "Base Hourly Rate",
            "description": "Base hourly rate"
          },
          "overtime_rate": {
            "type": "string",
            "title": "Overtime Rate",
            "description": "Overtime hourly rate"
          },
          "regular_pay": {
            "type": "string",
            "title": "Regular Pay",
            "description": "Regular pay amount"
          },
          "overtime_pay": {
            "type": "string",
            "title": "Overtime Pay",
            "description": "Overtime pay amount"
          },
          "double_time_pay": {
            "type": "string",
            "title": "Double Time Pay",
            "description": "Double-time pay amount",
            "default": 0.0
          },
          "holiday_pay": {
            "type": "string",
            "title": "Holiday Pay",
            "description": "Holiday pay amount",
            "default": 0.0
          },
          "sick_pay": {
            "type": "string",
            "title": "Sick Pay",
            "description": "Sick pay amount",
            "default": 0.0
          },
          "vacation_pay": {
            "type": "string",
            "title": "Vacation Pay",
            "description": "Vacation pay amount",
            "default": 0.0
          },
          "bonus": {
            "type": "string",
            "title": "Bonus",
            "description": "Bonus amount",
            "default": 0.0
          },
          "commission": {
            "type": "string",
            "title": "Commission",
            "description": "Commission amount",
            "default": 0.0
          },
          "gross_pay": {
            "type": "string",
            "title": "Gross Pay",
            "description": "Total gross pay"
          },
          "federal_tax": {
            "type": "string",
            "title": "Federal Tax",
            "description": "Federal tax deduction"
          },
          "state_tax": {
            "type": "string",
            "title": "State Tax",
            "description": "State tax deduction"
          },
          "local_tax": {
            "type": "string",
            "title": "Local Tax",
            "description": "Local tax deduction",
            "default": 0.0
          },
          "social_security": {
            "type": "string",
            "title": "Social Security",
            "description": "Social Security deduction"
          },
          "medicare": {
            "type": "string",
            "title": "Medicare",
            "description": "Medicare deduction"
          },
          "unemployment": {
            "type": "string",
            "title": "Unemployment",
            "description": "Unemployment tax deduction",
            "default": 0.0
          },
          "total_tax_deductions": {
            "type": "string",
            "title": "Total Tax Deductions",
            "description": "Total tax deductions"
          },
          "health_insurance": {
            "type": "string",
            "title": "Health Insurance",
            "description": "Health insurance deduction",
            "default": 0.0
          },
          "dental_insurance": {
            "type": "string",
            "title": "Dental Insurance",
            "description": "Dental insurance deduction",
            "default": 0.0
          },
          "retirement_contribution": {
            "type": "string",
            "title": "Retirement Contribution",
            "description": "Retirement contribution",
            "default": 0.0
          },
          "parking_fee": {
            "type": "string",
            "title": "Parking Fee",
            "description": "Parking fee deduction",
            "default": 0.0
          },
          "total_benefit_deductions": {
            "type": "string",
            "title": "Total Benefit Deductions",
            "description": "Total benefit deductions"
          },
          "garnishments": {
            "type": "string",
            "title": "Garnishments",
            "description": "Garnishment deductions",
            "default": 0.0
          },
          "loan_repayments": {
            "type": "string",
            "title": "Loan Repayments",
            "description": "Loan repayment deductions",
            "default": 0.0
          },
          "total_other_deductions": {
            "type": "string",
            "title": "Total Other Deductions",
            "description": "Total other deductions"
          },
          "total_deductions": {
            "type": "string",
            "title": "Total Deductions",
            "description": "Total all deductions"
          },
          "net_pay": {
            "type": "string",
            "title": "Net Pay",
            "description": "Net pay amount"
          },
          "processed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Processed At",
            "description": "When the payroll was processed"
          },
          "payment_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Id",
            "description": "Associated EmployeePayment record ID"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "staff_name",
          "staff_role",
          "pay_period_start",
          "pay_period_end",
          "regular_hours",
          "overtime_hours",
          "total_hours",
          "base_hourly_rate",
          "overtime_rate",
          "regular_pay",
          "overtime_pay",
          "gross_pay",
          "federal_tax",
          "state_tax",
          "social_security",
          "medicare",
          "total_tax_deductions",
          "total_benefit_deductions",
          "total_other_deductions",
          "total_deductions",
          "net_pay",
          "processed_at"
        ],
        "title": "StaffPayrollDetail",
        "description": "Detailed payroll information for a single staff member."
      },
      "StaffPerformanceResponse": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "staff_name": {
            "type": "string",
            "title": "Staff Name"
          },
          "total_orders_handled": {
            "type": "integer",
            "title": "Total Orders Handled"
          },
          "total_revenue_generated": {
            "type": "string",
            "title": "Total Revenue Generated"
          },
          "average_order_value": {
            "type": "string",
            "title": "Average Order Value"
          },
          "orders_per_hour": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Orders Per Hour"
          },
          "average_processing_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Processing Time"
          },
          "revenue_rank": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revenue Rank"
          },
          "order_count_rank": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Count Rank"
          },
          "efficiency_rank": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Efficiency Rank"
          },
          "revenue_growth": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revenue Growth"
          },
          "order_growth": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Growth"
          },
          "period_start": {
            "type": "string",
            "format": "date",
            "title": "Period Start"
          },
          "period_end": {
            "type": "string",
            "format": "date",
            "title": "Period End"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "staff_name",
          "total_orders_handled",
          "total_revenue_generated",
          "average_order_value",
          "period_start",
          "period_end"
        ],
        "title": "StaffPerformanceResponse",
        "description": "Response schema for staff performance analytics"
      },
      "StaffRequirement": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/StaffRole"
          },
          "min_required": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Min Required"
          },
          "optimal": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Optimal"
          },
          "max_useful": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Max Useful"
          },
          "required_skills": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Required Skills"
          },
          "preferred_skills": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Preferred Skills"
          }
        },
        "type": "object",
        "required": [
          "role",
          "min_required",
          "optimal",
          "max_useful"
        ],
        "title": "StaffRequirement",
        "description": "Staff requirements for a specific role and time"
      },
      "StaffReservationUpdate": {
        "properties": {
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/modules__reservations__schemas__reservation_schemas__ReservationStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "table_numbers": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Table Numbers"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "title": "StaffReservationUpdate",
        "description": "Schema for staff updating reservations"
      },
      "StaffRole": {
        "type": "string",
        "enum": [
          "manager",
          "chef",
          "line_cook",
          "prep_cook",
          "server",
          "host",
          "bartender",
          "busser",
          "dishwasher",
          "cashier",
          "delivery"
        ],
        "title": "StaffRole",
        "description": "Staff role categories"
      },
      "StaffScheduleSummary": {
        "properties": {
          "staff_id": {
            "type": "integer",
            "title": "Staff Id"
          },
          "staff_name": {
            "type": "string",
            "title": "Staff Name"
          },
          "week_start": {
            "type": "string",
            "format": "date",
            "title": "Week Start"
          },
          "total_shifts": {
            "type": "integer",
            "title": "Total Shifts"
          },
          "total_hours": {
            "type": "number",
            "title": "Total Hours"
          },
          "overtime_hours": {
            "type": "number",
            "title": "Overtime Hours"
          },
          "availability_compliance": {
            "type": "number",
            "title": "Availability Compliance"
          },
          "estimated_earnings": {
            "type": "number",
            "title": "Estimated Earnings"
          }
        },
        "type": "object",
        "required": [
          "staff_id",
          "staff_name",
          "week_start",
          "total_shifts",
          "total_hours",
          "overtime_hours",
          "availability_compliance",
          "estimated_earnings"
        ],
        "title": "StaffScheduleSummary"
      },
      "StaffingAnalytics": {
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          },
          "location_id": {
            "type": "integer",
            "title": "Location Id"
          },
          "scheduled_staff": {
            "type": "integer",
            "title": "Scheduled Staff"
          },
          "required_staff": {
            "type": "integer",
            "title": "Required Staff"
          },
          "coverage_percentage": {
            "type": "number",
            "title": "Coverage Percentage"
          },
          "estimated_labor_cost": {
            "type": "number",
            "title": "Estimated Labor Cost"
          },
          "shifts_by_role": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Shifts By Role"
          }
        },
        "type": "object",
        "required": [
          "date",
          "location_id",
          "scheduled_staff",
          "required_staff",
          "coverage_percentage",
          "estimated_labor_cost",
          "shifts_by_role"
        ],
        "title": "StaffingAnalytics"
      },
      "StaffingLevel": {
        "type": "string",
        "enum": [
          "severely_understaffed",
          "understaffed",
          "optimal",
          "overstaffed",
          "severely_overstaffed"
        ],
        "title": "StaffingLevel",
        "description": "Staffing level categories"
      },
      "StaffingOptimizationRequest": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "title": "End Date"
          },
          "primary_goal": {
            "type": "string",
            "title": "Primary Goal",
            "description": "Primary optimization goal",
            "default": "minimize_cost"
          },
          "service_level_target": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Service Level Target",
            "default": 0.9
          },
          "max_weekly_hours_per_staff": {
            "type": "integer",
            "maximum": 60.0,
            "minimum": 1.0,
            "title": "Max Weekly Hours Per Staff",
            "default": 40
          },
          "min_shift_length_hours": {
            "type": "number",
            "minimum": 2.0,
            "title": "Min Shift Length Hours",
            "default": 4.0
          },
          "max_shift_length_hours": {
            "type": "number",
            "maximum": 12.0,
            "title": "Max Shift Length Hours",
            "default": 10.0
          },
          "target_labor_percentage": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 40.0,
                "minimum": 10.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Labor Percentage"
          },
          "max_daily_labor_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Daily Labor Cost"
          },
          "available_staff": {
            "anyOf": [
              {
                "additionalProperties": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Available Staff"
          },
          "staff_preferences": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Preferences"
          },
          "include_breaks": {
            "type": "boolean",
            "title": "Include Breaks",
            "default": true
          },
          "account_for_training": {
            "type": "boolean",
            "title": "Account For Training",
            "default": true
          },
          "buffer_percentage": {
            "type": "number",
            "maximum": 30.0,
            "minimum": 0.0,
            "title": "Buffer Percentage",
            "default": 10.0
          }
        },
        "type": "object",
        "required": [
          "start_date",
          "end_date"
        ],
        "title": "StaffingOptimizationRequest",
        "description": "Request for staffing optimization"
      },
      "StaffingPattern": {
        "properties": {
          "pattern_name": {
            "type": "string",
            "title": "Pattern Name"
          },
          "applicable_days": {
            "items": {
              "$ref": "#/components/schemas/modules__ai_recommendations__schemas__staffing_schemas__DayOfWeek"
            },
            "type": "array",
            "title": "Applicable Days"
          },
          "applicable_dates": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "date"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Applicable Dates"
          },
          "hourly_requirements": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "integer"
              },
              "propertyNames": {
                "$ref": "#/components/schemas/StaffRole"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Hourly Requirements"
          },
          "recommended_shifts": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recommended Shifts"
          },
          "total_labor_hours": {
            "type": "number",
            "title": "Total Labor Hours"
          },
          "average_hourly_cost": {
            "type": "string",
            "title": "Average Hourly Cost"
          },
          "expected_service_level": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Expected Service Level"
          },
          "min_staff_threshold": {
            "additionalProperties": {
              "type": "integer"
            },
            "propertyNames": {
              "$ref": "#/components/schemas/StaffRole"
            },
            "type": "object",
            "title": "Min Staff Threshold"
          },
          "surge_capacity": {
            "additionalProperties": {
              "type": "integer"
            },
            "propertyNames": {
              "$ref": "#/components/schemas/StaffRole"
            },
            "type": "object",
            "title": "Surge Capacity"
          }
        },
        "type": "object",
        "required": [
          "pattern_name",
          "applicable_days",
          "hourly_requirements",
          "recommended_shifts",
          "total_labor_hours",
          "average_hourly_cost",
          "expected_service_level",
          "min_staff_threshold",
          "surge_capacity"
        ],
        "title": "StaffingPattern",
        "description": "Optimal staffing pattern for a typical period",
        "example": {
          "applicable_days": [
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday"
          ],
          "average_hourly_cost": "18.50",
          "expected_service_level": 0.95,
          "pattern_name": "Weekday Standard",
          "total_labor_hours": 120.0
        }
      },
      "StaffingRecommendationSet": {
        "properties": {
          "request_id": {
            "type": "string",
            "title": "Request Id"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          },
          "period_start": {
            "type": "string",
            "format": "date",
            "title": "Period Start"
          },
          "period_end": {
            "type": "string",
            "format": "date",
            "title": "Period End"
          },
          "daily_recommendations": {
            "items": {
              "$ref": "#/components/schemas/ShiftRecommendation"
            },
            "type": "array",
            "title": "Daily Recommendations"
          },
          "patterns_identified": {
            "items": {
              "$ref": "#/components/schemas/StaffingPattern"
            },
            "type": "array",
            "title": "Patterns Identified"
          },
          "total_recommended_hours": {
            "type": "number",
            "title": "Total Recommended Hours"
          },
          "total_estimated_cost": {
            "type": "string",
            "title": "Total Estimated Cost"
          },
          "average_labor_percentage": {
            "type": "number",
            "title": "Average Labor Percentage"
          },
          "expected_service_level": {
            "type": "number",
            "title": "Expected Service Level"
          },
          "cost_savings_vs_current": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Savings Vs Current"
          },
          "efficiency_improvement": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Efficiency Improvement"
          },
          "understaffing_risks": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Understaffing Risks"
          },
          "overstaffing_risks": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Overstaffing Risks"
          },
          "implementation_priority": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Implementation Priority"
          },
          "scheduling_conflicts": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Scheduling Conflicts"
          },
          "training_requirements": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Training Requirements"
          },
          "alerts": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Alerts"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings"
          }
        },
        "type": "object",
        "required": [
          "request_id",
          "generated_at",
          "period_start",
          "period_end",
          "daily_recommendations",
          "patterns_identified",
          "total_recommended_hours",
          "total_estimated_cost",
          "average_labor_percentage",
          "expected_service_level",
          "understaffing_risks",
          "overstaffing_risks",
          "implementation_priority",
          "scheduling_conflicts",
          "training_requirements"
        ],
        "title": "StaffingRecommendationSet",
        "description": "Complete set of staffing recommendations",
        "example": {
          "average_labor_percentage": 26.5,
          "expected_service_level": 0.93,
          "generated_at": "2025-01-29T10:00:00Z",
          "period_end": "2025-02-07",
          "period_start": "2025-02-01",
          "request_id": "staff-opt-2025-01-29-001",
          "total_estimated_cost": "15750.00",
          "total_recommended_hours": 840.0
        }
      },
      "StaleCancellationResponse": {
        "properties": {
          "cancelled_count": {
            "type": "integer",
            "title": "Cancelled Count"
          },
          "cancelled_orders": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Cancelled Orders"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "cancelled_count",
          "cancelled_orders",
          "message"
        ],
        "title": "StaleCancellationResponse"
      },
      "StationAssignmentCreate": {
        "properties": {
          "station_id": {
            "type": "integer",
            "title": "Station Id"
          },
          "category_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Name"
          },
          "tag_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tag Name"
          },
          "priority": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Priority",
            "default": 0
          },
          "is_primary": {
            "type": "boolean",
            "title": "Is Primary",
            "default": true
          },
          "prep_time_override": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 120.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Prep Time Override"
          },
          "conditions": {
            "additionalProperties": true,
            "type": "object",
            "title": "Conditions"
          }
        },
        "type": "object",
        "required": [
          "station_id"
        ],
        "title": "StationAssignmentCreate",
        "description": "Schema for creating station assignments"
      },
      "StationAssignmentResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "station_id": {
            "type": "integer",
            "title": "Station Id"
          },
          "category_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Name"
          },
          "tag_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tag Name"
          },
          "priority": {
            "type": "integer",
            "title": "Priority"
          },
          "is_primary": {
            "type": "boolean",
            "title": "Is Primary"
          },
          "prep_time_override": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prep Time Override"
          },
          "conditions": {
            "additionalProperties": true,
            "type": "object",
            "title": "Conditions"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "station_id",
          "category_name",
          "tag_name",
          "priority",
          "is_primary",
          "prep_time_override",
          "conditions",
          "created_at",
          "updated_at"
        ],
        "title": "StationAssignmentResponse",
        "description": "Response schema for station assignment"
      },
      "StationCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "station_type": {
            "$ref": "#/components/schemas/StationType"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "color_code": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^#[0-9A-Fa-f]{6}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color Code"
          },
          "priority": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Priority",
            "default": 0
          },
          "max_active_items": {
            "type": "integer",
            "maximum": 50.0,
            "minimum": 1.0,
            "title": "Max Active Items",
            "default": 10
          },
          "prep_time_multiplier": {
            "type": "number",
            "maximum": 5.0,
            "minimum": 0.1,
            "title": "Prep Time Multiplier",
            "default": 1.0
          },
          "warning_time_minutes": {
            "type": "integer",
            "maximum": 30.0,
            "minimum": 1.0,
            "title": "Warning Time Minutes",
            "default": 5
          },
          "critical_time_minutes": {
            "type": "integer",
            "maximum": 60.0,
            "minimum": 1.0,
            "title": "Critical Time Minutes",
            "default": 10
          },
          "features": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Features"
          },
          "printer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Printer Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "station_type"
        ],
        "title": "StationCreate",
        "description": "Schema for creating a kitchen station"
      },
      "StationResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "station_type": {
            "$ref": "#/components/schemas/StationType"
          },
          "status": {
            "$ref": "#/components/schemas/StationStatus"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "color_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color Code"
          },
          "priority": {
            "type": "integer",
            "title": "Priority"
          },
          "max_active_items": {
            "type": "integer",
            "title": "Max Active Items"
          },
          "prep_time_multiplier": {
            "type": "number",
            "title": "Prep Time Multiplier"
          },
          "warning_time_minutes": {
            "type": "integer",
            "title": "Warning Time Minutes"
          },
          "critical_time_minutes": {
            "type": "integer",
            "title": "Critical Time Minutes"
          },
          "features": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Features"
          },
          "printer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Printer Id"
          },
          "current_staff_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Staff Id"
          },
          "staff_assigned_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Assigned At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "active_items_count": {
            "type": "integer",
            "title": "Active Items Count",
            "default": 0
          },
          "pending_items_count": {
            "type": "integer",
            "title": "Pending Items Count",
            "default": 0
          },
          "average_wait_time": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Wait Time"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "station_type",
          "status",
          "display_name",
          "color_code",
          "priority",
          "max_active_items",
          "prep_time_multiplier",
          "warning_time_minutes",
          "critical_time_minutes",
          "features",
          "printer_id",
          "current_staff_id",
          "staff_assigned_at",
          "created_at",
          "updated_at"
        ],
        "title": "StationResponse",
        "description": "Response schema for kitchen station"
      },
      "StationStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "busy",
          "offline",
          "maintenance"
        ],
        "title": "StationStatus",
        "description": "Kitchen station status"
      },
      "StationSummary": {
        "properties": {
          "station_id": {
            "type": "integer",
            "title": "Station Id"
          },
          "station_name": {
            "type": "string",
            "title": "Station Name"
          },
          "station_type": {
            "$ref": "#/components/schemas/StationType"
          },
          "status": {
            "$ref": "#/components/schemas/StationStatus"
          },
          "active_items": {
            "type": "integer",
            "title": "Active Items"
          },
          "pending_items": {
            "type": "integer",
            "title": "Pending Items"
          },
          "completed_today": {
            "type": "integer",
            "title": "Completed Today"
          },
          "average_wait_time": {
            "type": "number",
            "title": "Average Wait Time"
          },
          "late_items": {
            "type": "integer",
            "title": "Late Items"
          },
          "staff_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Staff Name"
          },
          "last_activity": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Activity"
          }
        },
        "type": "object",
        "required": [
          "station_id",
          "station_name",
          "station_type",
          "status",
          "active_items",
          "pending_items",
          "completed_today",
          "average_wait_time",
          "late_items",
          "staff_name",
          "last_activity"
        ],
        "title": "StationSummary",
        "description": "Summary statistics for a station"
      },
      "StationType": {
        "type": "string",
        "enum": [
          "grill",
          "fry",
          "saute",
          "salad",
          "dessert",
          "beverage",
          "expo",
          "prep",
          "pizza",
          "sandwich",
          "sushi",
          "bar"
        ],
        "title": "StationType",
        "description": "Types of kitchen stations"
      },
      "StationUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "station_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StationType"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StationStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "color_code": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^#[0-9A-Fa-f]{6}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color Code"
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority"
          },
          "max_active_items": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 50.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Active Items"
          },
          "prep_time_multiplier": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 5.0,
                "minimum": 0.1
              },
              {
                "type": "null"
              }
            ],
            "title": "Prep Time Multiplier"
          },
          "warning_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 30.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Warning Time Minutes"
          },
          "critical_time_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 60.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Critical Time Minutes"
          },
          "features": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Features"
          },
          "printer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Printer Id"
          },
          "current_staff_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Staff Id"
          }
        },
        "type": "object",
        "title": "StationUpdate",
        "description": "Schema for updating a kitchen station"
      },
      "StockOptimizationRequest": {
        "properties": {
          "product_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Ids"
          },
          "category_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Ids"
          },
          "optimization_objective": {
            "type": "string",
            "title": "Optimization Objective",
            "description": "minimize_waste, maximize_availability, balanced",
            "default": "minimize_waste"
          },
          "service_level": {
            "type": "number",
            "maximum": 0.99,
            "minimum": 0.5,
            "title": "Service Level",
            "description": "Target service level",
            "default": 0.95
          },
          "lead_time_days": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Lead Time Days",
            "description": "Supplier lead time",
            "default": 2
          },
          "include_safety_stock": {
            "type": "boolean",
            "title": "Include Safety Stock",
            "default": true
          },
          "budget_constraint": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Budget Constraint"
          }
        },
        "type": "object",
        "title": "StockOptimizationRequest",
        "description": "Request for stock optimization"
      },
      "StockOptimizationResult": {
        "properties": {
          "optimization_id": {
            "type": "string",
            "title": "Optimization Id"
          },
          "recommendations": {
            "items": {
              "$ref": "#/components/schemas/StockRecommendation"
            },
            "type": "array",
            "title": "Recommendations"
          },
          "total_investment_required": {
            "type": "string",
            "title": "Total Investment Required"
          },
          "expected_service_level": {
            "type": "number",
            "title": "Expected Service Level"
          }
        },
        "type": "object",
        "required": [
          "optimization_id",
          "recommendations",
          "total_investment_required",
          "expected_service_level"
        ],
        "title": "StockOptimizationResult",
        "description": "Result of stock optimization"
      },
      "StockRecommendation": {
        "properties": {
          "product_id": {
            "type": "integer",
            "title": "Product Id"
          },
          "product_name": {
            "type": "string",
            "title": "Product Name"
          },
          "current_stock": {
            "type": "number",
            "title": "Current Stock"
          },
          "recommended_stock": {
            "type": "number",
            "title": "Recommended Stock"
          },
          "reorder_point": {
            "type": "number",
            "title": "Reorder Point"
          },
          "reorder_quantity": {
            "type": "number",
            "title": "Reorder Quantity"
          },
          "safety_stock": {
            "type": "number",
            "title": "Safety Stock"
          },
          "expected_stockout_risk": {
            "type": "number",
            "title": "Expected Stockout Risk"
          },
          "estimated_holding_cost": {
            "type": "string",
            "title": "Estimated Holding Cost"
          },
          "estimated_stockout_cost": {
            "type": "string",
            "title": "Estimated Stockout Cost"
          }
        },
        "type": "object",
        "required": [
          "product_id",
          "product_name",
          "current_stock",
          "recommended_stock",
          "reorder_point",
          "reorder_quantity",
          "safety_stock",
          "expected_stockout_risk",
          "estimated_holding_cost",
          "estimated_stockout_cost"
        ],
        "title": "StockRecommendation",
        "description": "Stock level recommendation"
      },
      "SuggestedQuery": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "category": {
            "type": "string",
            "title": "Category"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          }
        },
        "type": "object",
        "required": [
          "text",
          "category"
        ],
        "title": "SuggestedQuery",
        "description": "Suggested query for quick access"
      },
      "SwapStatus": {
        "type": "string",
        "enum": [
          "pending",
          "approved",
          "rejected",
          "cancelled"
        ],
        "title": "SwapStatus"
      },
      "SyncBatchResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "batch_id": {
            "type": "string",
            "title": "Batch Id"
          },
          "batch_type": {
            "type": "string",
            "title": "Batch Type"
          },
          "batch_size": {
            "type": "integer",
            "title": "Batch Size"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "duration_ms": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Ms"
          },
          "total_orders": {
            "type": "integer",
            "title": "Total Orders",
            "default": 0
          },
          "successful_syncs": {
            "type": "integer",
            "title": "Successful Syncs",
            "default": 0
          },
          "failed_syncs": {
            "type": "integer",
            "title": "Failed Syncs",
            "default": 0
          },
          "conflict_count": {
            "type": "integer",
            "title": "Conflict Count",
            "default": 0
          },
          "avg_sync_time_ms": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avg Sync Time Ms"
          },
          "error_summary": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Summary"
          }
        },
        "type": "object",
        "required": [
          "id",
          "batch_id",
          "batch_type",
          "batch_size",
          "started_at"
        ],
        "title": "SyncBatchResponse",
        "description": "Response model for sync batch"
      },
      "SyncConfigurationUpdate": {
        "properties": {
          "sync_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sync Enabled",
            "description": "Enable/disable automatic sync"
          },
          "sync_interval_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 1440.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Sync Interval Minutes",
            "description": "Sync interval in minutes (1-1440)"
          },
          "conflict_resolution_mode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conflict Resolution Mode",
            "description": "Conflict resolution mode (auto/manual)"
          }
        },
        "type": "object",
        "title": "SyncConfigurationUpdate",
        "description": "Request model for updating sync configuration"
      },
      "SyncConflictResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "conflict_type": {
            "type": "string",
            "title": "Conflict Type"
          },
          "detected_at": {
            "type": "string",
            "format": "date-time",
            "title": "Detected At"
          },
          "local_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Local Data"
          },
          "remote_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Remote Data"
          },
          "differences": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Differences"
          },
          "resolution_status": {
            "type": "string",
            "title": "Resolution Status"
          },
          "resolution_method": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution Method"
          },
          "resolved_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved At"
          },
          "resolved_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolved By"
          },
          "resolution_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resolution Notes"
          }
        },
        "type": "object",
        "required": [
          "id",
          "order_id",
          "conflict_type",
          "detected_at",
          "local_data",
          "remote_data",
          "resolution_status"
        ],
        "title": "SyncConflictResponse",
        "description": "Response model for sync conflict"
      },
      "SyncHealthCheckResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "healthy, warning, or critical"
          },
          "issues": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Issues"
          },
          "last_check": {
            "type": "string",
            "format": "date-time",
            "title": "Last Check"
          },
          "metrics": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metrics"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations"
          }
        },
        "type": "object",
        "required": [
          "status",
          "last_check",
          "metrics"
        ],
        "title": "SyncHealthCheckResponse",
        "description": "Response model for sync health check"
      },
      "SyncMetricsResponse": {
        "properties": {
          "total_synced_today": {
            "type": "integer",
            "title": "Total Synced Today"
          },
          "total_failed_today": {
            "type": "integer",
            "title": "Total Failed Today"
          },
          "average_sync_time_ms": {
            "type": "number",
            "title": "Average Sync Time Ms"
          },
          "sync_success_rate": {
            "type": "number",
            "title": "Sync Success Rate"
          },
          "pending_orders": {
            "type": "integer",
            "title": "Pending Orders"
          },
          "retry_queue_size": {
            "type": "integer",
            "title": "Retry Queue Size"
          },
          "conflict_rate": {
            "type": "number",
            "title": "Conflict Rate"
          },
          "last_successful_batch": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Successful Batch"
          },
          "next_scheduled_sync": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Scheduled Sync"
          }
        },
        "type": "object",
        "required": [
          "total_synced_today",
          "total_failed_today",
          "average_sync_time_ms",
          "sync_success_rate",
          "pending_orders",
          "retry_queue_size",
          "conflict_rate"
        ],
        "title": "SyncMetricsResponse",
        "description": "Response model for sync metrics"
      },
      "SyncRequest": {
        "properties": {
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "integration_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Integration Id"
          }
        },
        "type": "object",
        "title": "SyncRequest"
      },
      "SyncResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "sync_log_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sync Log Id"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "SyncResponse"
      },
      "SyncStatusResponse": {
        "properties": {
          "sync_status_counts": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Sync Status Counts"
          },
          "unsynced_orders": {
            "type": "integer",
            "title": "Unsynced Orders"
          },
          "pending_conflicts": {
            "type": "integer",
            "title": "Pending Conflicts"
          },
          "last_batch": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Batch"
          },
          "scheduler": {
            "additionalProperties": true,
            "type": "object",
            "title": "Scheduler"
          },
          "configuration": {
            "additionalProperties": true,
            "type": "object",
            "title": "Configuration"
          }
        },
        "type": "object",
        "required": [
          "sync_status_counts",
          "unsynced_orders",
          "pending_conflicts",
          "scheduler",
          "configuration"
        ],
        "title": "SyncStatusResponse",
        "description": "Response model for sync status overview"
      },
      "TableAvailability": {
        "properties": {
          "table_number": {
            "type": "string",
            "title": "Table Number"
          },
          "section": {
            "type": "string",
            "title": "Section"
          },
          "capacity": {
            "type": "integer",
            "title": "Capacity"
          },
          "features": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Features",
            "default": []
          },
          "is_available": {
            "type": "boolean",
            "title": "Is Available"
          }
        },
        "type": "object",
        "required": [
          "table_number",
          "section",
          "capacity",
          "is_available"
        ],
        "title": "TableAvailability",
        "description": "Table availability for a time slot"
      },
      "TableCreate": {
        "properties": {
          "has_power_outlet": {
            "type": "boolean",
            "title": "Has Power Outlet",
            "default": false
          },
          "is_wheelchair_accessible": {
            "type": "boolean",
            "title": "Is Wheelchair Accessible",
            "default": false
          },
          "is_by_window": {
            "type": "boolean",
            "title": "Is By Window",
            "default": false
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private",
            "default": false
          },
          "is_combinable": {
            "type": "boolean",
            "title": "Is Combinable",
            "default": true
          },
          "position_x": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Position X",
            "default": 0
          },
          "position_y": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Position Y",
            "default": 0
          },
          "width": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Width",
            "default": 100
          },
          "height": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Height",
            "default": 100
          },
          "rotation": {
            "type": "integer",
            "exclusiveMaximum": 360.0,
            "minimum": 0.0,
            "title": "Rotation",
            "default": 0
          },
          "shape": {
            "$ref": "#/components/schemas/TableShape",
            "default": "rectangle"
          },
          "color": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^#[0-9A-Fa-f]{6}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color"
          },
          "table_number": {
            "type": "string",
            "maxLength": 20,
            "title": "Table Number"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "min_capacity": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Min Capacity",
            "default": 1
          },
          "max_capacity": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Capacity"
          },
          "preferred_capacity": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Capacity"
          },
          "floor_id": {
            "type": "integer",
            "title": "Floor Id"
          },
          "section": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Section"
          },
          "zone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Zone"
          },
          "server_station": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Server Station"
          },
          "properties": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "table_number",
          "max_capacity",
          "floor_id"
        ],
        "title": "TableCreate",
        "description": "Table creation schema"
      },
      "TableData": {
        "properties": {
          "columns": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Columns"
          },
          "rows": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Rows"
          },
          "total_rows": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Rows"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page",
            "default": 1
          },
          "per_page": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Per Page",
            "default": 10
          }
        },
        "type": "object",
        "required": [
          "columns",
          "rows"
        ],
        "title": "TableData",
        "description": "Data structure for table visualization"
      },
      "TableLayoutCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "layout_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Layout Data"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": false
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "default": false
          },
          "active_days": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active Days"
          },
          "active_from_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active From Time"
          },
          "active_to_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active To Time"
          },
          "event_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Date"
          },
          "event_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Name"
          }
        },
        "type": "object",
        "required": [
          "name",
          "layout_data"
        ],
        "title": "TableLayoutCreate",
        "description": "Create table layout"
      },
      "TableLayoutResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "restaurant_id": {
            "type": "integer",
            "title": "Restaurant Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "layout_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Layout Data"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default"
          },
          "active_days": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active Days"
          },
          "active_from_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active From Time"
          },
          "active_to_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active To Time"
          },
          "event_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Date"
          },
          "event_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Name"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "restaurant_id",
          "name",
          "description",
          "layout_data",
          "is_active",
          "is_default",
          "active_days",
          "active_from_time",
          "active_to_time",
          "event_date",
          "event_name",
          "created_at",
          "updated_at"
        ],
        "title": "TableLayoutResponse",
        "description": "Layout response"
      },
      "TableLayoutUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "layout_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Layout Data"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_default": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Default"
          },
          "active_days": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active Days"
          },
          "active_from_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active From Time"
          },
          "active_to_time": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active To Time"
          },
          "event_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Date"
          },
          "event_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Name"
          }
        },
        "type": "object",
        "title": "TableLayoutUpdate",
        "description": "Update table layout"
      },
      "TableReservationCreate": {
        "properties": {
          "reservation_date": {
            "type": "string",
            "format": "date-time",
            "title": "Reservation Date"
          },
          "guest_count": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Guest Count"
          },
          "guest_name": {
            "type": "string",
            "maxLength": 100,
            "title": "Guest Name"
          },
          "guest_phone": {
            "type": "string",
            "maxLength": 20,
            "title": "Guest Phone"
          },
          "guest_email": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Email"
          },
          "duration_minutes": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Duration Minutes",
            "default": 120
          },
          "table_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Table Id"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "special_requests": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Requests"
          },
          "occasion": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Occasion"
          },
          "table_preferences": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Table Preferences",
            "default": {}
          },
          "deposit_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deposit Amount"
          },
          "source": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "default": "website"
          }
        },
        "type": "object",
        "required": [
          "reservation_date",
          "guest_count",
          "guest_name",
          "guest_phone"
        ],
        "title": "TableReservationCreate",
        "description": "Create reservation"
      },
      "TableReservationResponse": {
        "properties": {
          "reservation_date": {
            "type": "string",
            "format": "date-time",
            "title": "Reservation Date"
          },
          "guest_count": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Guest Count"
          },
          "guest_name": {
            "type": "string",
            "maxLength": 100,
            "title": "Guest Name"
          },
          "guest_phone": {
            "type": "string",
            "maxLength": 20,
            "title": "Guest Phone"
          },
          "guest_email": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Email"
          },
          "duration_minutes": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Duration Minutes",
            "default": 120
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "restaurant_id": {
            "type": "integer",
            "title": "Restaurant Id"
          },
          "table_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Table Id"
          },
          "customer_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Id"
          },
          "reservation_code": {
            "type": "string",
            "title": "Reservation Code"
          },
          "special_requests": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Requests"
          },
          "occasion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Occasion"
          },
          "status": {
            "$ref": "#/components/schemas/modules__tables__models__table_models__ReservationStatus"
          },
          "confirmed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confirmed At"
          },
          "seated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seated At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "cancelled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cancelled At"
          },
          "cancellation_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cancellation Reason"
          },
          "table_preferences": {
            "additionalProperties": true,
            "type": "object",
            "title": "Table Preferences"
          },
          "deposit_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deposit Amount"
          },
          "deposit_paid": {
            "type": "boolean",
            "title": "Deposit Paid"
          },
          "reminder_sent": {
            "type": "boolean",
            "title": "Reminder Sent"
          },
          "reminder_sent_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reminder Sent At"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          },
          "table_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Table Number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "reservation_date",
          "guest_count",
          "guest_name",
          "guest_phone",
          "id",
          "restaurant_id",
          "table_id",
          "customer_id",
          "reservation_code",
          "special_requests",
          "occasion",
          "status",
          "confirmed_at",
          "seated_at",
          "completed_at",
          "cancelled_at",
          "cancellation_reason",
          "table_preferences",
          "deposit_amount",
          "deposit_paid",
          "reminder_sent",
          "reminder_sent_at",
          "source",
          "created_at",
          "updated_at"
        ],
        "title": "TableReservationResponse",
        "description": "Reservation response"
      },
      "TableReservationUpdate": {
        "properties": {
          "table_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Table Id"
          },
          "reservation_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reservation Date"
          },
          "guest_count": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Count"
          },
          "guest_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Name"
          },
          "guest_phone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Phone"
          },
          "guest_email": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Email"
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes"
          },
          "special_requests": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Requests"
          },
          "occasion": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Occasion"
          },
          "table_preferences": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Table Preferences"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/modules__tables__models__table_models__ReservationStatus"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "TableReservationUpdate",
        "description": "Update reservation"
      },
      "TableResponse": {
        "properties": {
          "has_power_outlet": {
            "type": "boolean",
            "title": "Has Power Outlet",
            "default": false
          },
          "is_wheelchair_accessible": {
            "type": "boolean",
            "title": "Is Wheelchair Accessible",
            "default": false
          },
          "is_by_window": {
            "type": "boolean",
            "title": "Is By Window",
            "default": false
          },
          "is_private": {
            "type": "boolean",
            "title": "Is Private",
            "default": false
          },
          "is_combinable": {
            "type": "boolean",
            "title": "Is Combinable",
            "default": true
          },
          "position_x": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Position X",
            "default": 0
          },
          "position_y": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Position Y",
            "default": 0
          },
          "width": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Width",
            "default": 100
          },
          "height": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Height",
            "default": 100
          },
          "rotation": {
            "type": "integer",
            "exclusiveMaximum": 360.0,
            "minimum": 0.0,
            "title": "Rotation",
            "default": 0
          },
          "shape": {
            "$ref": "#/components/schemas/TableShape",
            "default": "rectangle"
          },
          "color": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^#[0-9A-Fa-f]{6}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color"
          },
          "table_number": {
            "type": "string",
            "maxLength": 20,
            "title": "Table Number"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "min_capacity": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Min Capacity",
            "default": 1
          },
          "max_capacity": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Capacity"
          },
          "preferred_capacity": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Capacity"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "restaurant_id": {
            "type": "integer",
            "title": "Restaurant Id"
          },
          "floor_id": {
            "type": "integer",
            "title": "Floor Id"
          },
          "status": {
            "$ref": "#/components/schemas/TableStatus"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "section": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Section"
          },
          "zone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zone"
          },
          "server_station": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Server Station"
          },
          "qr_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Qr Code"
          },
          "properties": {
            "additionalProperties": true,
            "type": "object",
            "title": "Properties"
          },
          "current_session": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TableSessionResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "floor_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Floor Name"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "table_number",
          "max_capacity",
          "id",
          "restaurant_id",
          "floor_id",
          "status",
          "is_active",
          "section",
          "zone",
          "server_station",
          "qr_code",
          "properties",
          "created_at",
          "updated_at"
        ],
        "title": "TableResponse",
        "description": "Table response schema"
      },
      "TableSessionCreate": {
        "properties": {
          "table_id": {
            "type": "integer",
            "title": "Table Id"
          },
          "guest_count": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Guest Count"
          },
          "guest_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Name"
          },
          "guest_phone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Phone"
          },
          "server_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Server Id"
          },
          "combined_table_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Combined Table Ids",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "table_id",
          "guest_count"
        ],
        "title": "TableSessionCreate",
        "description": "Create table session"
      },
      "TableSessionResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "restaurant_id": {
            "type": "integer",
            "title": "Restaurant Id"
          },
          "table_id": {
            "type": "integer",
            "title": "Table Id"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time"
          },
          "guest_count": {
            "type": "integer",
            "title": "Guest Count"
          },
          "guest_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Name"
          },
          "guest_phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Phone"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "server_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Server Id"
          },
          "server_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Server Name"
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes"
          },
          "combined_tables": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Combined Tables",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "restaurant_id",
          "table_id",
          "start_time",
          "end_time",
          "guest_count",
          "guest_name",
          "guest_phone",
          "order_id",
          "server_id"
        ],
        "title": "TableSessionResponse",
        "description": "Table session response"
      },
      "TableSessionUpdate": {
        "properties": {
          "guest_count": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Count"
          },
          "guest_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Name"
          },
          "guest_phone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Guest Phone"
          },
          "server_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Server Id"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          }
        },
        "type": "object",
        "title": "TableSessionUpdate",
        "description": "Update table session"
      },
      "TableShape": {
        "type": "string",
        "enum": [
          "square",
          "rectangle",
          "circle",
          "oval",
          "hexagon",
          "custom"
        ],
        "title": "TableShape",
        "description": "Table shape for visual representation"
      },
      "TableStatus": {
        "type": "string",
        "enum": [
          "available",
          "occupied",
          "reserved",
          "blocked",
          "cleaning",
          "maintenance"
        ],
        "title": "TableStatus",
        "description": "Table availability status"
      },
      "TableStatusUpdate": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/TableStatus"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "TableStatusUpdate",
        "description": "Update table status"
      },
      "TableUpdate": {
        "properties": {
          "table_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Table Number"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "floor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Floor Id"
          },
          "min_capacity": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Capacity"
          },
          "max_capacity": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Capacity"
          },
          "preferred_capacity": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Capacity"
          },
          "position_x": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Position X"
          },
          "position_y": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Position Y"
          },
          "width": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Width"
          },
          "height": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Height"
          },
          "rotation": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": 360.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Rotation"
          },
          "shape": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TableShape"
              },
              {
                "type": "null"
              }
            ]
          },
          "color": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^#[0-9A-Fa-f]{6}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TableStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "has_power_outlet": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Has Power Outlet"
          },
          "is_wheelchair_accessible": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Wheelchair Accessible"
          },
          "is_by_window": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is By Window"
          },
          "is_private": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Private"
          },
          "is_combinable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Combinable"
          },
          "section": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Section"
          },
          "zone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Zone"
          },
          "server_station": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Server Station"
          },
          "properties": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties"
          }
        },
        "type": "object",
        "title": "TableUpdate",
        "description": "Table update schema"
      },
      "TagCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "TagCreate"
      },
      "TagOut": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "TagOut"
      },
      "TaskStatus": {
        "type": "string",
        "enum": [
          "pending",
          "running",
          "completed",
          "failed",
          "cancelled"
        ],
        "title": "TaskStatus",
        "description": "Status of async tasks"
      },
      "TaxApplicationDetail": {
        "properties": {
          "tax_rule_id": {
            "type": "integer",
            "title": "Tax Rule Id",
            "description": "ID of the applied tax rule"
          },
          "rule_name": {
            "type": "string",
            "title": "Rule Name",
            "description": "Name of the tax rule"
          },
          "tax_type": {
            "$ref": "#/components/schemas/TaxType",
            "description": "Type of tax (federal, state, local, etc.)"
          },
          "location": {
            "type": "string",
            "title": "Location",
            "description": "Jurisdiction location"
          },
          "taxable_amount": {
            "type": "string",
            "title": "Taxable Amount",
            "description": "Amount subject to this tax"
          },
          "calculated_tax": {
            "type": "string",
            "title": "Calculated Tax",
            "description": "Calculated tax amount"
          },
          "effective_rate": {
            "type": "string",
            "title": "Effective Rate",
            "description": "Effective tax rate applied"
          },
          "calculation_method": {
            "type": "string",
            "title": "Calculation Method",
            "description": "Method used for calculation"
          }
        },
        "type": "object",
        "required": [
          "tax_rule_id",
          "rule_name",
          "tax_type",
          "location",
          "taxable_amount",
          "calculated_tax",
          "effective_rate",
          "calculation_method"
        ],
        "title": "TaxApplicationDetail",
        "description": "Detailed information about a specific tax rule application."
      },
      "TaxBreakdown": {
        "properties": {
          "federal_tax": {
            "type": "string",
            "title": "Federal Tax",
            "default": "0.00"
          },
          "state_tax": {
            "type": "string",
            "title": "State Tax",
            "default": "0.00"
          },
          "local_tax": {
            "type": "string",
            "title": "Local Tax",
            "default": "0.00"
          },
          "social_security_tax": {
            "type": "string",
            "title": "Social Security Tax",
            "default": "0.00"
          },
          "medicare_tax": {
            "type": "string",
            "title": "Medicare Tax",
            "default": "0.00"
          },
          "other_taxes": {
            "type": "string",
            "title": "Other Taxes",
            "default": "0.00"
          }
        },
        "type": "object",
        "title": "TaxBreakdown",
        "description": "Breakdown of taxes by category."
      },
      "TaxBreakdownItem": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "subtotal": {
            "type": "string",
            "title": "Subtotal"
          },
          "tax_amount": {
            "type": "string",
            "title": "Tax Amount"
          },
          "tax_rate": {
            "type": "string",
            "title": "Tax Rate"
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "subtotal",
          "tax_amount",
          "tax_rate"
        ],
        "title": "TaxBreakdownItem"
      },
      "TaxCalculationItem": {
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "title": "Menu Item Id"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Price"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "menu_item_id",
          "quantity",
          "price"
        ],
        "title": "TaxCalculationItem"
      },
      "TaxCalculationLineItem": {
        "properties": {
          "line_id": {
            "type": "string",
            "title": "Line Id"
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Quantity",
            "default": 1
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "tax_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Code"
          },
          "is_exempt": {
            "type": "boolean",
            "title": "Is Exempt",
            "default": false
          },
          "exemption_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exemption Reason"
          }
        },
        "type": "object",
        "required": [
          "line_id",
          "amount"
        ],
        "title": "TaxCalculationLineItem",
        "description": "Line item for tax calculation"
      },
      "TaxCalculationLocation": {
        "properties": {
          "country_code": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "title": "Country Code"
          },
          "state_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State Code"
          },
          "county_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "County Name"
          },
          "city_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City Name"
          },
          "zip_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zip Code"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          }
        },
        "type": "object",
        "required": [
          "country_code"
        ],
        "title": "TaxCalculationLocation",
        "description": "Location details for tax calculation"
      },
      "TaxCalculationRequest": {
        "properties": {
          "location": {
            "type": "string",
            "title": "Location"
          },
          "order_items": {
            "items": {
              "$ref": "#/components/schemas/TaxCalculationItem"
            },
            "type": "array",
            "title": "Order Items"
          },
          "customer_exemptions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Exemptions",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "location",
          "order_items"
        ],
        "title": "TaxCalculationRequest"
      },
      "TaxCalculationResponse": {
        "properties": {
          "subtotal": {
            "type": "string",
            "title": "Subtotal"
          },
          "total_tax": {
            "type": "string",
            "title": "Total Tax"
          },
          "total_amount": {
            "type": "string",
            "title": "Total Amount"
          },
          "breakdown": {
            "items": {
              "$ref": "#/components/schemas/TaxBreakdownItem"
            },
            "type": "array",
            "title": "Breakdown"
          },
          "applied_rules": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Applied Rules"
          }
        },
        "type": "object",
        "required": [
          "subtotal",
          "total_tax",
          "total_amount",
          "breakdown",
          "applied_rules"
        ],
        "title": "TaxCalculationResponse"
      },
      "TaxCalculationResult": {
        "properties": {
          "line_id": {
            "type": "string",
            "title": "Line Id"
          },
          "taxable_amount": {
            "type": "string",
            "title": "Taxable Amount"
          },
          "tax_details": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Tax Details"
          },
          "total_tax": {
            "type": "string",
            "title": "Total Tax"
          },
          "effective_rate": {
            "type": "string",
            "title": "Effective Rate"
          }
        },
        "type": "object",
        "required": [
          "line_id",
          "taxable_amount",
          "tax_details",
          "total_tax",
          "effective_rate"
        ],
        "title": "TaxCalculationResult",
        "description": "Result of tax calculation"
      },
      "TaxComplianceDashboard": {
        "properties": {
          "as_of_date": {
            "type": "string",
            "format": "date-time",
            "title": "As Of Date"
          },
          "overall_compliance_score": {
            "type": "number",
            "title": "Overall Compliance Score"
          },
          "overall_risk_level": {
            "type": "string",
            "title": "Overall Risk Level"
          },
          "total_jurisdictions": {
            "type": "integer",
            "title": "Total Jurisdictions"
          },
          "compliant_jurisdictions": {
            "type": "integer",
            "title": "Compliant Jurisdictions"
          },
          "at_risk_jurisdictions": {
            "type": "integer",
            "title": "At Risk Jurisdictions"
          },
          "upcoming_deadlines": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Upcoming Deadlines"
          },
          "overdue_filings": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Overdue Filings"
          },
          "recent_filings": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Filings"
          },
          "total_tax_liability": {
            "type": "string",
            "title": "Total Tax Liability"
          },
          "total_tax_paid": {
            "type": "string",
            "title": "Total Tax Paid"
          },
          "outstanding_balance": {
            "type": "string",
            "title": "Outstanding Balance"
          },
          "compliance_by_jurisdiction": {
            "items": {
              "$ref": "#/components/schemas/TaxComplianceStatus"
            },
            "type": "array",
            "title": "Compliance By Jurisdiction"
          },
          "alerts": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Alerts"
          },
          "recommendations": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recommendations"
          }
        },
        "type": "object",
        "required": [
          "as_of_date",
          "overall_compliance_score",
          "overall_risk_level",
          "total_jurisdictions",
          "compliant_jurisdictions",
          "at_risk_jurisdictions",
          "upcoming_deadlines",
          "overdue_filings",
          "recent_filings",
          "total_tax_liability",
          "total_tax_paid",
          "outstanding_balance",
          "compliance_by_jurisdiction",
          "alerts",
          "recommendations"
        ],
        "title": "TaxComplianceDashboard",
        "description": "Tax compliance dashboard response"
      },
      "TaxComplianceStatus": {
        "properties": {
          "jurisdiction_id": {
            "type": "integer",
            "title": "Jurisdiction Id"
          },
          "jurisdiction_name": {
            "type": "string",
            "title": "Jurisdiction Name"
          },
          "filing_type": {
            "$ref": "#/components/schemas/FilingType"
          },
          "current_period_status": {
            "type": "string",
            "title": "Current Period Status"
          },
          "last_filing_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Filing Date"
          },
          "next_filing_due": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Filing Due"
          },
          "filings_pending": {
            "type": "integer",
            "title": "Filings Pending"
          },
          "filings_overdue": {
            "type": "integer",
            "title": "Filings Overdue"
          },
          "total_liability": {
            "type": "string",
            "title": "Total Liability"
          },
          "total_paid": {
            "type": "string",
            "title": "Total Paid"
          },
          "outstanding_balance": {
            "type": "string",
            "title": "Outstanding Balance"
          },
          "compliance_score": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Compliance Score"
          },
          "risk_level": {
            "type": "string",
            "pattern": "^(low|medium|high|critical)$",
            "title": "Risk Level"
          },
          "alerts": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Alerts",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "jurisdiction_id",
          "jurisdiction_name",
          "filing_type",
          "current_period_status",
          "last_filing_date",
          "next_filing_due",
          "filings_pending",
          "filings_overdue",
          "total_liability",
          "total_paid",
          "outstanding_balance",
          "compliance_score",
          "risk_level"
        ],
        "title": "TaxComplianceStatus",
        "description": "Tax compliance status summary"
      },
      "TaxExemptionCertificateCreate": {
        "properties": {
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "customer_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Customer Name"
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "certificate_number": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Certificate Number"
          },
          "exemption_type": {
            "type": "string",
            "pattern": "^(resale|nonprofit|government|other)$",
            "title": "Exemption Type"
          },
          "exemption_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exemption Reason"
          },
          "jurisdiction_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Jurisdiction Ids"
          },
          "tax_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tax Types"
          },
          "issue_date": {
            "type": "string",
            "format": "date",
            "title": "Issue Date"
          },
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          },
          "document_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Url"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "customer_id",
          "customer_name",
          "certificate_number",
          "exemption_type",
          "jurisdiction_ids",
          "tax_types",
          "issue_date"
        ],
        "title": "TaxExemptionCertificateCreate",
        "description": "Schema for creating tax exemption certificate"
      },
      "TaxExemptionCertificateResponse": {
        "properties": {
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "customer_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Customer Name"
          },
          "customer_tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Tax Id"
          },
          "certificate_number": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Certificate Number"
          },
          "exemption_type": {
            "type": "string",
            "pattern": "^(resale|nonprofit|government|other)$",
            "title": "Exemption Type"
          },
          "exemption_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exemption Reason"
          },
          "jurisdiction_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Jurisdiction Ids"
          },
          "tax_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tax Types"
          },
          "issue_date": {
            "type": "string",
            "format": "date",
            "title": "Issue Date"
          },
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "certificate_id": {
            "type": "string",
            "format": "uuid",
            "title": "Certificate Id"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified"
          },
          "verified_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Verified Date"
          },
          "verified_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Verified By"
          },
          "document_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Url"
          },
          "last_used_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Used Date"
          },
          "usage_count": {
            "type": "integer",
            "title": "Usage Count"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "customer_id",
          "customer_name",
          "certificate_number",
          "exemption_type",
          "jurisdiction_ids",
          "tax_types",
          "issue_date",
          "id",
          "certificate_id",
          "is_active",
          "is_verified",
          "verified_date",
          "verified_by",
          "document_url",
          "last_used_date",
          "usage_count",
          "created_at",
          "updated_at"
        ],
        "title": "TaxExemptionCertificateResponse",
        "description": "Schema for tax exemption certificate response"
      },
      "TaxExemptionCertificateVerify": {
        "properties": {
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified"
          },
          "verified_by": {
            "type": "string",
            "title": "Verified By"
          },
          "verification_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Verification Notes"
          }
        },
        "type": "object",
        "required": [
          "is_verified",
          "verified_by"
        ],
        "title": "TaxExemptionCertificateVerify",
        "description": "Schema for verifying tax exemption certificate"
      },
      "TaxFilingCreate": {
        "properties": {
          "jurisdiction_id": {
            "type": "integer",
            "title": "Jurisdiction Id"
          },
          "filing_type": {
            "$ref": "#/components/schemas/FilingType"
          },
          "period_start": {
            "type": "string",
            "format": "date",
            "title": "Period Start"
          },
          "period_end": {
            "type": "string",
            "format": "date",
            "title": "Period End"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "title": "Due Date"
          },
          "gross_sales": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gross Sales"
          },
          "taxable_sales": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Taxable Sales"
          },
          "exempt_sales": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exempt Sales"
          },
          "tax_collected": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Collected"
          },
          "form_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Form Type"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "internal_reference": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Internal Reference"
          },
          "line_items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/TaxFilingLineItemCreate"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Line Items",
            "default": []
          },
          "attachments": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attachments",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "jurisdiction_id",
          "filing_type",
          "period_start",
          "period_end",
          "due_date",
          "internal_reference"
        ],
        "title": "TaxFilingCreate",
        "description": "Schema for creating tax filing"
      },
      "TaxFilingLineItemCreate": {
        "properties": {
          "line_number": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "title": "Line Number"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Description"
          },
          "tax_category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Category"
          },
          "gross_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Gross Amount"
          },
          "deductions": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Deductions",
            "default": "0"
          },
          "exemptions": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Exemptions",
            "default": "0"
          },
          "taxable_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Taxable Amount"
          },
          "tax_rate": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Tax Rate"
          },
          "tax_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Tax Amount"
          },
          "location_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location Code"
          },
          "product_category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Category"
          },
          "transaction_count": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Transaction Count"
          }
        },
        "type": "object",
        "required": [
          "line_number",
          "description",
          "gross_amount",
          "taxable_amount",
          "tax_rate",
          "tax_amount"
        ],
        "title": "TaxFilingLineItemCreate",
        "description": "Schema for creating tax filing line item"
      },
      "TaxFilingLineItemResponse": {
        "properties": {
          "line_number": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "title": "Line Number"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Description"
          },
          "tax_category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Category"
          },
          "gross_amount": {
            "type": "string",
            "title": "Gross Amount"
          },
          "deductions": {
            "type": "string",
            "title": "Deductions",
            "default": "0"
          },
          "exemptions": {
            "type": "string",
            "title": "Exemptions",
            "default": "0"
          },
          "taxable_amount": {
            "type": "string",
            "title": "Taxable Amount"
          },
          "tax_rate": {
            "type": "string",
            "title": "Tax Rate"
          },
          "tax_amount": {
            "type": "string",
            "title": "Tax Amount"
          },
          "location_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location Code"
          },
          "product_category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Category"
          },
          "transaction_count": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Transaction Count"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "filing_id": {
            "type": "integer",
            "title": "Filing Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "line_number",
          "description",
          "gross_amount",
          "taxable_amount",
          "tax_rate",
          "tax_amount",
          "id",
          "filing_id",
          "created_at",
          "updated_at"
        ],
        "title": "TaxFilingLineItemResponse",
        "description": "Schema for tax filing line item response"
      },
      "TaxFilingResponse": {
        "properties": {
          "jurisdiction_id": {
            "type": "integer",
            "title": "Jurisdiction Id"
          },
          "filing_type": {
            "$ref": "#/components/schemas/FilingType"
          },
          "period_start": {
            "type": "string",
            "format": "date",
            "title": "Period Start"
          },
          "period_end": {
            "type": "string",
            "format": "date",
            "title": "Period End"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "title": "Due Date"
          },
          "gross_sales": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gross Sales"
          },
          "taxable_sales": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Taxable Sales"
          },
          "exempt_sales": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exempt Sales"
          },
          "tax_collected": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Collected"
          },
          "form_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Form Type"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "filing_id": {
            "type": "string",
            "format": "uuid",
            "title": "Filing Id"
          },
          "filing_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filing Number"
          },
          "internal_reference": {
            "type": "string",
            "title": "Internal Reference"
          },
          "status": {
            "$ref": "#/components/schemas/FilingStatus"
          },
          "filed_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filed Date"
          },
          "tax_due": {
            "type": "string",
            "title": "Tax Due"
          },
          "penalties": {
            "type": "string",
            "title": "Penalties"
          },
          "interest": {
            "type": "string",
            "title": "Interest"
          },
          "total_due": {
            "type": "string",
            "title": "Total Due"
          },
          "payment_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Status"
          },
          "payment_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Date"
          },
          "payment_reference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Reference"
          },
          "confirmation_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confirmation Number"
          },
          "prepared_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prepared By"
          },
          "prepared_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prepared Date"
          },
          "reviewed_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed By"
          },
          "reviewed_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed Date"
          },
          "approved_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved By"
          },
          "approved_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved Date"
          },
          "is_amended": {
            "type": "boolean",
            "title": "Is Amended"
          },
          "amendment_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amendment Reason"
          },
          "original_filing_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Original Filing Id"
          },
          "attachments": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attachments"
          },
          "line_items": {
            "items": {
              "$ref": "#/components/schemas/TaxFilingLineItemResponse"
            },
            "type": "array",
            "title": "Line Items",
            "default": []
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "jurisdiction_id",
          "filing_type",
          "period_start",
          "period_end",
          "due_date",
          "id",
          "filing_id",
          "filing_number",
          "internal_reference",
          "status",
          "filed_date",
          "tax_due",
          "penalties",
          "interest",
          "total_due",
          "payment_status",
          "payment_date",
          "payment_reference",
          "confirmation_number",
          "prepared_by",
          "prepared_date",
          "reviewed_by",
          "reviewed_date",
          "approved_by",
          "approved_date",
          "is_amended",
          "amendment_reason",
          "original_filing_id",
          "attachments",
          "created_at",
          "updated_at"
        ],
        "title": "TaxFilingResponse",
        "description": "Schema for tax filing response"
      },
      "TaxFilingSubmit": {
        "properties": {
          "prepared_by": {
            "type": "string",
            "minLength": 1,
            "title": "Prepared By"
          },
          "reviewed_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed By"
          },
          "approved_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved By"
          },
          "submission_method": {
            "type": "string",
            "title": "Submission Method",
            "default": "electronic"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "prepared_by"
        ],
        "title": "TaxFilingSubmit",
        "description": "Schema for submitting tax filing"
      },
      "TaxFilingUpdate": {
        "properties": {
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FilingStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "filing_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filing Number"
          },
          "filed_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filed Date"
          },
          "gross_sales": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gross Sales"
          },
          "taxable_sales": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Taxable Sales"
          },
          "exempt_sales": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exempt Sales"
          },
          "tax_collected": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Collected"
          },
          "tax_due": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Due"
          },
          "penalties": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Penalties"
          },
          "interest": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Interest"
          },
          "confirmation_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confirmation Number"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "TaxFilingUpdate",
        "description": "Schema for updating tax filing"
      },
      "TaxJurisdictionCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "code": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Code"
          },
          "jurisdiction_type": {
            "type": "string",
            "pattern": "^(federal|state|county|city|special)$",
            "title": "Jurisdiction Type"
          },
          "parent_jurisdiction_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Jurisdiction Id"
          },
          "country_code": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "title": "Country Code"
          },
          "state_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 10
              },
              {
                "type": "null"
              }
            ],
            "title": "State Code"
          },
          "county_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "County Name"
          },
          "city_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "City Name"
          },
          "zip_codes": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zip Codes"
          },
          "filing_frequency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(monthly|quarterly|annually)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filing Frequency"
          },
          "filing_due_day": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 31.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Filing Due Day"
          },
          "registration_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Registration Number"
          },
          "tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "tax_authority_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Authority Name"
          },
          "tax_authority_website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Authority Website"
          },
          "tax_authority_phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Authority Phone"
          },
          "tax_authority_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Authority Email"
          },
          "tax_authority_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Authority Address"
          },
          "effective_date": {
            "type": "string",
            "format": "date",
            "title": "Effective Date"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "jurisdiction_type",
          "country_code"
        ],
        "title": "TaxJurisdictionCreate",
        "description": "Schema for creating tax jurisdiction"
      },
      "TaxJurisdictionResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "code": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Code"
          },
          "jurisdiction_type": {
            "type": "string",
            "pattern": "^(federal|state|county|city|special)$",
            "title": "Jurisdiction Type"
          },
          "parent_jurisdiction_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Jurisdiction Id"
          },
          "country_code": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "title": "Country Code"
          },
          "state_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 10
              },
              {
                "type": "null"
              }
            ],
            "title": "State Code"
          },
          "county_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "County Name"
          },
          "city_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "City Name"
          },
          "zip_codes": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zip Codes"
          },
          "filing_frequency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(monthly|quarterly|annually)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filing Frequency"
          },
          "filing_due_day": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 31.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Filing Due Day"
          },
          "registration_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Registration Number"
          },
          "tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "tax_authority_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Authority Name"
          },
          "tax_authority_website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Authority Website"
          },
          "tax_authority_phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Authority Phone"
          },
          "tax_authority_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Authority Email"
          },
          "tax_authority_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Authority Address"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "jurisdiction_id": {
            "type": "string",
            "format": "uuid",
            "title": "Jurisdiction Id"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "effective_date": {
            "type": "string",
            "format": "date",
            "title": "Effective Date"
          },
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "jurisdiction_type",
          "country_code",
          "id",
          "jurisdiction_id",
          "is_active",
          "effective_date",
          "expiry_date",
          "created_at",
          "updated_at"
        ],
        "title": "TaxJurisdictionResponse",
        "description": "Schema for tax jurisdiction response"
      },
      "TaxJurisdictionUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "filing_frequency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filing Frequency"
          },
          "filing_due_day": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 31.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Filing Due Day"
          },
          "registration_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Registration Number"
          },
          "tax_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "TaxJurisdictionUpdate",
        "description": "Schema for updating tax jurisdiction"
      },
      "TaxNexusCreate": {
        "properties": {
          "nexus_type": {
            "type": "string",
            "pattern": "^(physical|economic|affiliate|click_through)$",
            "title": "Nexus Type"
          },
          "establishment_date": {
            "type": "string",
            "format": "date",
            "title": "Establishment Date"
          },
          "registration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Registration Date"
          },
          "registration_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Registration Number"
          },
          "sales_threshold": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sales Threshold"
          },
          "transaction_threshold": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Transaction Threshold"
          },
          "threshold_period": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(annual|quarterly|monthly)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Threshold Period"
          },
          "filing_frequency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(monthly|quarterly|annually)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filing Frequency"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "jurisdiction_id": {
            "type": "integer",
            "title": "Jurisdiction Id"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "requires_filing": {
            "type": "boolean",
            "title": "Requires Filing",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "nexus_type",
          "establishment_date",
          "jurisdiction_id"
        ],
        "title": "TaxNexusCreate",
        "description": "Schema for creating tax nexus"
      },
      "TaxNexusResponse": {
        "properties": {
          "nexus_type": {
            "type": "string",
            "pattern": "^(physical|economic|affiliate|click_through)$",
            "title": "Nexus Type"
          },
          "establishment_date": {
            "type": "string",
            "format": "date",
            "title": "Establishment Date"
          },
          "registration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Registration Date"
          },
          "registration_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Registration Number"
          },
          "sales_threshold": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sales Threshold"
          },
          "transaction_threshold": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Transaction Threshold"
          },
          "threshold_period": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(annual|quarterly|monthly)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Threshold Period"
          },
          "filing_frequency": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(monthly|quarterly|annually)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filing Frequency"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "nexus_id": {
            "type": "string",
            "format": "uuid",
            "title": "Nexus Id"
          },
          "jurisdiction_id": {
            "type": "integer",
            "title": "Jurisdiction Id"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "requires_filing": {
            "type": "boolean",
            "title": "Requires Filing"
          },
          "last_filing_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Filing Date"
          },
          "next_filing_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Filing Date"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "nexus_type",
          "establishment_date",
          "id",
          "nexus_id",
          "jurisdiction_id",
          "is_active",
          "requires_filing",
          "last_filing_date",
          "next_filing_date",
          "created_at",
          "updated_at"
        ],
        "title": "TaxNexusResponse",
        "description": "Schema for tax nexus response"
      },
      "TaxNexusUpdate": {
        "properties": {
          "registration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Registration Date"
          },
          "registration_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Registration Number"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "requires_filing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Requires Filing"
          },
          "last_filing_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Filing Date"
          },
          "next_filing_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Filing Date"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "TaxNexusUpdate",
        "description": "Schema for updating tax nexus"
      },
      "TaxRateCreate": {
        "properties": {
          "tax_type": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Tax Type"
          },
          "tax_subtype": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Subtype"
          },
          "tax_category": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Category"
          },
          "rate_percent": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Rate Percent"
          },
          "flat_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Flat Amount"
          },
          "min_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Amount"
          },
          "max_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Amount"
          },
          "bracket_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bracket Name"
          },
          "applies_to": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Applies To"
          },
          "exemption_categories": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exemption Categories"
          },
          "compound_on": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Compound On"
          },
          "ordering": {
            "type": "integer",
            "title": "Ordering",
            "default": 0
          },
          "calculation_method": {
            "type": "string",
            "pattern": "^(percentage|flat|tiered)$",
            "title": "Calculation Method",
            "default": "percentage"
          },
          "jurisdiction_id": {
            "type": "integer",
            "title": "Jurisdiction Id"
          },
          "effective_date": {
            "type": "string",
            "format": "date",
            "title": "Effective Date"
          },
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "tax_type",
          "rate_percent",
          "jurisdiction_id",
          "effective_date"
        ],
        "title": "TaxRateCreate",
        "description": "Schema for creating tax rate"
      },
      "TaxRateResponse": {
        "properties": {
          "tax_type": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Tax Type"
          },
          "tax_subtype": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Subtype"
          },
          "tax_category": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Category"
          },
          "rate_percent": {
            "type": "string",
            "title": "Rate Percent"
          },
          "flat_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Flat Amount"
          },
          "min_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Amount"
          },
          "max_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Amount"
          },
          "bracket_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bracket Name"
          },
          "applies_to": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Applies To"
          },
          "exemption_categories": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exemption Categories"
          },
          "compound_on": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Compound On"
          },
          "ordering": {
            "type": "integer",
            "title": "Ordering",
            "default": 0
          },
          "calculation_method": {
            "type": "string",
            "pattern": "^(percentage|flat|tiered)$",
            "title": "Calculation Method",
            "default": "percentage"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "rate_id": {
            "type": "string",
            "format": "uuid",
            "title": "Rate Id"
          },
          "jurisdiction_id": {
            "type": "integer",
            "title": "Jurisdiction Id"
          },
          "effective_date": {
            "type": "string",
            "format": "date",
            "title": "Effective Date"
          },
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "tax_type",
          "rate_percent",
          "id",
          "rate_id",
          "jurisdiction_id",
          "effective_date",
          "expiry_date",
          "is_active",
          "created_at",
          "updated_at"
        ],
        "title": "TaxRateResponse",
        "description": "Schema for tax rate response"
      },
      "TaxRateUpdate": {
        "properties": {
          "rate_percent": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rate Percent"
          },
          "flat_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Flat Amount"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "TaxRateUpdate",
        "description": "Schema for updating tax rate"
      },
      "TaxRemittanceCreate": {
        "properties": {
          "payment_date": {
            "type": "string",
            "format": "date",
            "title": "Payment Date"
          },
          "payment_method": {
            "type": "string",
            "pattern": "^(ach|wire|check|credit_card)$",
            "title": "Payment Method"
          },
          "payment_reference": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Payment Reference"
          },
          "payment_amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Payment Amount"
          },
          "currency": {
            "type": "string",
            "maxLength": 3,
            "minLength": 3,
            "title": "Currency",
            "default": "USD"
          },
          "filing_references": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Filing References"
          },
          "bank_account_last4": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 4,
                "minLength": 4
              },
              {
                "type": "null"
              }
            ],
            "title": "Bank Account Last4"
          },
          "bank_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bank Name"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "payment_date",
          "payment_method",
          "payment_reference",
          "payment_amount",
          "filing_references"
        ],
        "title": "TaxRemittanceCreate",
        "description": "Schema for creating tax remittance"
      },
      "TaxReportRequest": {
        "properties": {
          "report_type": {
            "type": "string",
            "title": "Report Type"
          },
          "template_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template Id"
          },
          "jurisdiction_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Jurisdiction Ids"
          },
          "filing_types": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FilingType"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filing Types"
          },
          "period_start": {
            "type": "string",
            "format": "date",
            "title": "Period Start"
          },
          "period_end": {
            "type": "string",
            "format": "date",
            "title": "Period End"
          },
          "include_details": {
            "type": "boolean",
            "title": "Include Details",
            "default": true
          },
          "include_summary": {
            "type": "boolean",
            "title": "Include Summary",
            "default": true
          },
          "include_trends": {
            "type": "boolean",
            "title": "Include Trends",
            "default": false
          },
          "output_format": {
            "type": "string",
            "pattern": "^(json|pdf|excel|csv)$",
            "title": "Output Format",
            "default": "json"
          },
          "filters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "grouping": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grouping"
          },
          "sorting": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sorting"
          }
        },
        "type": "object",
        "required": [
          "report_type",
          "period_start",
          "period_end"
        ],
        "title": "TaxReportRequest",
        "description": "Request schema for generating tax reports"
      },
      "TaxReportResponse": {
        "properties": {
          "report_id": {
            "type": "string",
            "format": "uuid",
            "title": "Report Id"
          },
          "report_type": {
            "type": "string",
            "title": "Report Type"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          },
          "generated_by": {
            "type": "string",
            "title": "Generated By"
          },
          "period_start": {
            "type": "string",
            "format": "date",
            "title": "Period Start"
          },
          "period_end": {
            "type": "string",
            "format": "date",
            "title": "Period End"
          },
          "summary": {
            "additionalProperties": true,
            "type": "object",
            "title": "Summary"
          },
          "details": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          },
          "trends": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trends"
          },
          "total_records": {
            "type": "integer",
            "title": "Total Records"
          },
          "filters_applied": {
            "additionalProperties": true,
            "type": "object",
            "title": "Filters Applied"
          },
          "download_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Download Url"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "report_id",
          "report_type",
          "generated_at",
          "generated_by",
          "period_start",
          "period_end",
          "summary",
          "total_records",
          "filters_applied"
        ],
        "title": "TaxReportResponse",
        "description": "Response schema for tax reports"
      },
      "TaxRuleInfo": {
        "properties": {
          "rule_id": {
            "type": "integer",
            "title": "Rule Id",
            "description": "Tax rule ID"
          },
          "tax_type": {
            "type": "string",
            "title": "Tax Type",
            "description": "Type of tax (federal, state, local, etc.)"
          },
          "jurisdiction": {
            "type": "string",
            "title": "Jurisdiction",
            "description": "Tax jurisdiction"
          },
          "rate": {
            "type": "string",
            "title": "Rate",
            "description": "Tax rate (as decimal, e.g., 0.0825 for 8.25%)"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Human-readable description of the rule"
          },
          "effective_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Effective Date",
            "description": "Date when rule becomes effective"
          },
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date",
            "description": "Date when rule expires"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Whether the rule is currently active"
          }
        },
        "type": "object",
        "required": [
          "rule_id",
          "tax_type",
          "jurisdiction",
          "rate",
          "description",
          "is_active"
        ],
        "title": "TaxRuleInfo",
        "description": "Tax rule information for API responses."
      },
      "TaxRuleResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Tax rule ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Tax rule name"
          },
          "tax_type": {
            "$ref": "#/components/schemas/TaxType",
            "description": "Type of tax"
          },
          "location": {
            "type": "string",
            "title": "Location",
            "description": "Jurisdiction location"
          },
          "rate": {
            "type": "string",
            "title": "Rate",
            "description": "Tax rate"
          },
          "fixed_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fixed Amount",
            "description": "Fixed tax amount if applicable"
          },
          "threshold_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Threshold Amount",
            "description": "Income threshold"
          },
          "cap_amount": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cap Amount",
            "description": "Maximum tax cap"
          },
          "effective_date": {
            "type": "string",
            "format": "date",
            "title": "Effective Date",
            "description": "When rule becomes effective"
          },
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date",
            "description": "When rule expires"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Whether rule is currently active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "tax_type",
          "location",
          "rate",
          "effective_date"
        ],
        "title": "TaxRuleResponse",
        "description": "Response schema for tax rule information."
      },
      "TaxRuleStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "pending",
          "expired"
        ],
        "title": "TaxRuleStatus",
        "description": "Status of tax rules."
      },
      "TaxRuleType": {
        "type": "string",
        "enum": [
          "percentage",
          "fixed_amount",
          "bracketed",
          "tiered"
        ],
        "title": "TaxRuleType",
        "description": "Types of tax rules."
      },
      "TaxType": {
        "type": "string",
        "enum": [
          "federal",
          "state",
          "local",
          "social_security",
          "medicare",
          "unemployment",
          "disability",
          "workers_comp"
        ],
        "title": "TaxType"
      },
      "TicketType": {
        "type": "string",
        "enum": [
          "kitchen",
          "bar",
          "grill",
          "cold_prep",
          "hot_prep"
        ],
        "title": "TicketType"
      },
      "TimeGranularity": {
        "type": "string",
        "enum": [
          "hourly",
          "daily",
          "weekly",
          "monthly"
        ],
        "title": "TimeGranularity",
        "description": "Time granularity for predictions"
      },
      "TimePattern": {
        "properties": {
          "hour": {
            "type": "integer",
            "maximum": 23.0,
            "minimum": 0.0,
            "title": "Hour",
            "description": "Hour of day (0-23)"
          },
          "day_of_week": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 6.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Day Of Week",
            "description": "Day of week (0=Monday)"
          },
          "intensity": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Intensity",
            "description": "Activity intensity (0-1)"
          },
          "order_count": {
            "type": "integer",
            "title": "Order Count",
            "description": "Average orders in this period"
          },
          "revenue": {
            "type": "string",
            "title": "Revenue",
            "description": "Average revenue in this period"
          },
          "customer_count": {
            "type": "integer",
            "title": "Customer Count",
            "description": "Average unique customers"
          }
        },
        "type": "object",
        "required": [
          "hour",
          "intensity",
          "order_count",
          "revenue",
          "customer_count"
        ],
        "title": "TimePattern",
        "description": "Time-based pattern analysis"
      },
      "TimeRange": {
        "type": "string",
        "enum": [
          "last_hour",
          "last_24_hours",
          "last_7_days",
          "last_30_days",
          "custom"
        ],
        "title": "TimeRange",
        "description": "Predefined time ranges for analytics"
      },
      "TimeSlot": {
        "properties": {
          "time": {
            "type": "string",
            "format": "time",
            "title": "Time"
          },
          "available": {
            "type": "boolean",
            "title": "Available"
          },
          "capacity_remaining": {
            "type": "integer",
            "title": "Capacity Remaining"
          },
          "waitlist_count": {
            "type": "integer",
            "title": "Waitlist Count",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "time",
          "available",
          "capacity_remaining"
        ],
        "title": "TimeSlot",
        "description": "Time slot for availability"
      },
      "TipMethod": {
        "type": "string",
        "enum": [
          "percentage",
          "amount",
          "round_up"
        ],
        "title": "TipMethod",
        "description": "Methods for calculating tips"
      },
      "TipSuggestionRequest": {
        "properties": {
          "subtotal": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Subtotal"
          },
          "percentages": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Percentages"
          }
        },
        "type": "object",
        "required": [
          "subtotal"
        ],
        "title": "TipSuggestionRequest"
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          },
          "access_expires_in": {
            "type": "integer",
            "title": "Access Expires In"
          },
          "refresh_expires_in": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Expires In"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          },
          "user_info": {
            "additionalProperties": true,
            "type": "object",
            "title": "User Info"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type",
          "access_expires_in",
          "user_info"
        ],
        "title": "Token",
        "description": "Enhanced token response model."
      },
      "TopPerformerResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "revenue": {
            "type": "number",
            "title": "Revenue"
          },
          "orders": {
            "type": "integer",
            "title": "Orders"
          },
          "rank": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rank"
          },
          "change_from_previous": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Change From Previous"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "revenue",
          "orders"
        ],
        "title": "TopPerformerResponse",
        "description": "Response schema for top performer data"
      },
      "TrackingEventResponse": {
        "properties": {
          "event_id": {
            "type": "integer",
            "title": "Event Id"
          },
          "event_type": {
            "type": "string",
            "title": "Event Type"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "old_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Old Status"
          },
          "new_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "New Status"
          },
          "estimated_completion_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Completion Time"
          },
          "location": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LocationData"
              },
              {
                "type": "null"
              }
            ]
          },
          "triggered_by": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Triggered By"
          }
        },
        "type": "object",
        "required": [
          "event_id",
          "event_type",
          "created_at"
        ],
        "title": "TrackingEventResponse",
        "description": "Response schema for tracking events"
      },
      "TrendAnalysis": {
        "properties": {
          "entity_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Id"
          },
          "entity_name": {
            "type": "string",
            "title": "Entity Name"
          },
          "trend_direction": {
            "type": "string",
            "title": "Trend Direction",
            "description": "increasing, decreasing, stable"
          },
          "trend_strength": {
            "type": "number",
            "maximum": 1.0,
            "minimum": -1.0,
            "title": "Trend Strength"
          },
          "change_points": {
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "type": "array",
            "title": "Change Points"
          },
          "seasonal_patterns": {
            "items": {
              "$ref": "#/components/schemas/SeasonalPattern"
            },
            "type": "array",
            "title": "Seasonal Patterns"
          },
          "growth_rate": {
            "type": "number",
            "title": "Growth Rate"
          },
          "volatility": {
            "type": "number",
            "title": "Volatility"
          }
        },
        "type": "object",
        "required": [
          "entity_id",
          "entity_name",
          "trend_direction",
          "trend_strength",
          "change_points",
          "seasonal_patterns",
          "growth_rate",
          "volatility"
        ],
        "title": "TrendAnalysis",
        "description": "Trend analysis results"
      },
      "TriggerTypeEnum": {
        "type": "string",
        "enum": [
          "order_complete",
          "points_earned",
          "tier_upgrade",
          "birthday",
          "anniversary",
          "referral_success",
          "milestone",
          "manual",
          "scheduled",
          "conditional"
        ],
        "title": "TriggerTypeEnum"
      },
      "UnitType": {
        "type": "string",
        "enum": [
          "g",
          "kg",
          "oz",
          "lb",
          "ml",
          "l",
          "tsp",
          "tbsp",
          "cup",
          "fl_oz",
          "pt",
          "qt",
          "gal",
          "piece",
          "dozen",
          "custom"
        ],
        "title": "UnitType"
      },
      "UpdateParticipantStatusRequest": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ParticipantStatus"
          },
          "decline_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Decline Reason"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "UpdateParticipantStatusRequest"
      },
      "UpdatePricingRuleRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 5.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority"
          },
          "discount_value": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Value"
          },
          "max_discount_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Discount Amount"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "conditions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PricingRuleConditions"
              },
              {
                "type": "null"
              }
            ]
          },
          "valid_until": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Until"
          },
          "max_uses_total": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Total"
          },
          "max_uses_per_customer": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Uses Per Customer"
          },
          "stackable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stackable"
          },
          "excluded_rule_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Excluded Rule Ids"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "title": "UpdatePricingRuleRequest",
        "description": "Request to update a pricing rule"
      },
      "UserInfo": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "roles": {
            "items": {},
            "type": "array",
            "title": "Roles"
          },
          "tenant_ids": {
            "items": {},
            "type": "array",
            "title": "Tenant Ids"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          }
        },
        "type": "object",
        "required": [
          "id",
          "username",
          "email",
          "roles",
          "tenant_ids",
          "is_active"
        ],
        "title": "UserInfo",
        "description": "User information response model."
      },
      "ValidatePricingRuleRequest": {
        "properties": {
          "conditions": {
            "additionalProperties": true,
            "type": "object",
            "title": "Conditions"
          },
          "rule_type": {
            "$ref": "#/components/schemas/RuleType"
          },
          "test_order_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Test Order Data"
          }
        },
        "type": "object",
        "required": [
          "conditions",
          "rule_type"
        ],
        "title": "ValidatePricingRuleRequest",
        "description": "Request to validate rule conditions"
      },
      "ValidatePricingRuleResponse": {
        "properties": {
          "valid": {
            "type": "boolean",
            "title": "Valid"
          },
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Errors"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings"
          },
          "normalized_conditions": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Normalized Conditions"
          }
        },
        "type": "object",
        "required": [
          "valid"
        ],
        "title": "ValidatePricingRuleResponse",
        "description": "Response from rule validation"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "Vendor": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "contact_person": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Person"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "address_line1": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line1"
          },
          "address_line2": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line2"
          },
          "city": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "state": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "postal_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Postal Code"
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "tax_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "payment_terms": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Terms"
          },
          "delivery_lead_time": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Lead Time"
          },
          "minimum_order_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Order Amount"
          },
          "status": {
            "$ref": "#/components/schemas/VendorStatus",
            "default": "active"
          },
          "rating": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 5.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Rating"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "Vendor"
      },
      "VendorCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "contact_person": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Person"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "address_line1": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line1"
          },
          "address_line2": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line2"
          },
          "city": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "state": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "postal_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Postal Code"
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "tax_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "payment_terms": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Terms"
          },
          "delivery_lead_time": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Lead Time"
          },
          "minimum_order_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Order Amount"
          },
          "status": {
            "$ref": "#/components/schemas/VendorStatus",
            "default": "active"
          },
          "rating": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 5.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Rating"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "VendorCreate"
      },
      "VendorStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "suspended",
          "pending_approval"
        ],
        "title": "VendorStatus",
        "description": "Vendor status enumeration"
      },
      "VendorUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "contact_person": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Person"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "address_line1": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line1"
          },
          "address_line2": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line2"
          },
          "city": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "state": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "postal_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Postal Code"
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "tax_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Tax Id"
          },
          "payment_terms": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Terms"
          },
          "delivery_lead_time": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Lead Time"
          },
          "minimum_order_amount": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Minimum Order Amount"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VendorStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "rating": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 5.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Rating"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "VendorUpdate"
      },
      "VersionComparisonRequest": {
        "properties": {
          "from_version_id": {
            "type": "integer",
            "title": "From Version Id"
          },
          "to_version_id": {
            "type": "integer",
            "title": "To Version Id"
          },
          "include_details": {
            "type": "boolean",
            "title": "Include Details",
            "default": true
          },
          "entity_types": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Types"
          }
        },
        "type": "object",
        "required": [
          "from_version_id",
          "to_version_id"
        ],
        "title": "VersionComparisonRequest"
      },
      "VersionExportRequest": {
        "properties": {
          "version_id": {
            "type": "integer",
            "title": "Version Id"
          },
          "format": {
            "type": "string",
            "pattern": "^(json|csv|excel)$",
            "title": "Format",
            "default": "json"
          },
          "include_audit_trail": {
            "type": "boolean",
            "title": "Include Audit Trail",
            "default": false
          },
          "include_inactive": {
            "type": "boolean",
            "title": "Include Inactive",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "version_id"
        ],
        "title": "VersionExportRequest"
      },
      "VersionImportRequest": {
        "properties": {
          "import_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Import Data"
          },
          "import_mode": {
            "type": "string",
            "pattern": "^(merge|replace|append)$",
            "title": "Import Mode",
            "default": "merge"
          },
          "create_version": {
            "type": "boolean",
            "title": "Create Version",
            "default": true
          },
          "version_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version Name"
          }
        },
        "type": "object",
        "required": [
          "import_data"
        ],
        "title": "VersionImportRequest"
      },
      "VersionType": {
        "type": "string",
        "enum": [
          "manual",
          "scheduled",
          "rollback",
          "migration",
          "auto_save"
        ],
        "title": "VersionType"
      },
      "WaitlistCreate": {
        "properties": {
          "requested_date": {
            "type": "string",
            "format": "date",
            "title": "Requested Date"
          },
          "requested_time_start": {
            "type": "string",
            "format": "time",
            "title": "Requested Time Start"
          },
          "requested_time_end": {
            "type": "string",
            "format": "time",
            "title": "Requested Time End"
          },
          "party_size": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 1.0,
            "title": "Party Size"
          },
          "flexible_date": {
            "type": "boolean",
            "title": "Flexible Date",
            "default": false
          },
          "flexible_time": {
            "type": "boolean",
            "title": "Flexible Time",
            "default": false
          },
          "alternative_dates": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "date"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Alternative Dates",
            "default": []
          },
          "special_requests": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Requests"
          },
          "notification_method": {
            "$ref": "#/components/schemas/NotificationMethod",
            "default": "email"
          }
        },
        "type": "object",
        "required": [
          "requested_date",
          "requested_time_start",
          "requested_time_end",
          "party_size"
        ],
        "title": "WaitlistCreate",
        "description": "Schema for creating waitlist entry"
      },
      "WaitlistListResponse": {
        "properties": {
          "waitlist_entries": {
            "items": {
              "$ref": "#/components/schemas/WaitlistResponse"
            },
            "type": "array",
            "title": "Waitlist Entries"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next"
          },
          "has_previous": {
            "type": "boolean",
            "title": "Has Previous"
          }
        },
        "type": "object",
        "required": [
          "waitlist_entries",
          "total",
          "page",
          "page_size",
          "has_next",
          "has_previous"
        ],
        "title": "WaitlistListResponse",
        "description": "Schema for list of waitlist entries"
      },
      "WaitlistResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "requested_date": {
            "type": "string",
            "format": "date",
            "title": "Requested Date"
          },
          "requested_time_start": {
            "type": "string",
            "format": "time",
            "title": "Requested Time Start"
          },
          "requested_time_end": {
            "type": "string",
            "format": "time",
            "title": "Requested Time End"
          },
          "party_size": {
            "type": "integer",
            "title": "Party Size"
          },
          "flexible_date": {
            "type": "boolean",
            "title": "Flexible Date"
          },
          "flexible_time": {
            "type": "boolean",
            "title": "Flexible Time"
          },
          "alternative_dates": {
            "items": {
              "type": "string",
              "format": "date"
            },
            "type": "array",
            "title": "Alternative Dates"
          },
          "status": {
            "$ref": "#/components/schemas/WaitlistStatus"
          },
          "position": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Position"
          },
          "estimated_wait_time": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Wait Time"
          },
          "customer_name": {
            "type": "string",
            "title": "Customer Name"
          },
          "customer_email": {
            "type": "string",
            "title": "Customer Email"
          },
          "customer_phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Phone"
          },
          "notification_method": {
            "$ref": "#/components/schemas/NotificationMethod"
          },
          "notified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notified At"
          },
          "notification_expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notification Expires At"
          },
          "special_requests": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Special Requests"
          },
          "priority": {
            "type": "integer",
            "title": "Priority",
            "default": 0
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "customer_id",
          "requested_date",
          "requested_time_start",
          "requested_time_end",
          "party_size",
          "flexible_date",
          "flexible_time",
          "alternative_dates",
          "status",
          "customer_name",
          "customer_email",
          "notification_method",
          "created_at"
        ],
        "title": "WaitlistResponse",
        "description": "Schema for waitlist response"
      },
      "WaitlistStatus": {
        "type": "string",
        "enum": [
          "waiting",
          "notified",
          "confirmed",
          "converted",
          "expired",
          "cancelled"
        ],
        "title": "WaitlistStatus",
        "description": "Waitlist status enum for schemas"
      },
      "WasteEventCreate": {
        "properties": {
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "quantity": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Quantity",
            "description": "Quantity wasted (must be positive)"
          },
          "waste_reason": {
            "$ref": "#/components/schemas/WasteReason",
            "description": "Predefined waste reason"
          },
          "custom_reason": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500,
                "minLength": 10
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Reason",
            "description": "Additional details if waste_reason is OTHER"
          },
          "batch_number": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Batch Number"
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date"
          },
          "location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "temperature_at_waste": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature At Waste",
            "description": "Temperature when waste occurred (\u00b0F)"
          },
          "witnessed_by": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Witnessed By",
            "description": "Staff member who witnessed the waste"
          }
        },
        "type": "object",
        "required": [
          "inventory_id",
          "quantity",
          "waste_reason"
        ],
        "title": "WasteEventCreate",
        "description": "Schema for creating a waste event with enhanced validation"
      },
      "WasteEventResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "inventory_id": {
            "type": "integer",
            "title": "Inventory Id"
          },
          "inventory_name": {
            "type": "string",
            "title": "Inventory Name"
          },
          "quantity_wasted": {
            "type": "number",
            "title": "Quantity Wasted"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "waste_reason": {
            "$ref": "#/components/schemas/WasteReason"
          },
          "custom_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Reason"
          },
          "total_cost": {
            "type": "number",
            "title": "Total Cost"
          },
          "created_by": {
            "type": "integer",
            "title": "Created By"
          },
          "created_by_name": {
            "type": "string",
            "title": "Created By Name"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "witnessed_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Witnessed By"
          }
        },
        "type": "object",
        "required": [
          "id",
          "inventory_id",
          "inventory_name",
          "quantity_wasted",
          "unit",
          "waste_reason",
          "custom_reason",
          "total_cost",
          "created_by",
          "created_by_name",
          "created_at",
          "location",
          "witnessed_by"
        ],
        "title": "WasteEventResponse",
        "description": "Response schema for waste events"
      },
      "WasteReason": {
        "type": "string",
        "enum": [
          "expired",
          "damaged",
          "spillage",
          "overcooking",
          "contaminated",
          "preparation_loss",
          "customer_return",
          "quality_issue",
          "equipment_failure",
          "temperature_abuse",
          "inventory_error",
          "other"
        ],
        "title": "WasteReason",
        "description": "Predefined waste reasons for better tracking"
      },
      "WebhookConfigurationCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Url"
          },
          "event_types": {
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            },
            "type": "array",
            "title": "Event Types"
          },
          "secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Secret"
          },
          "headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Headers"
          },
          "timeout_seconds": {
            "type": "integer",
            "maximum": 300.0,
            "minimum": 1.0,
            "title": "Timeout Seconds",
            "default": 30
          }
        },
        "type": "object",
        "required": [
          "name",
          "url",
          "event_types"
        ],
        "title": "WebhookConfigurationCreate"
      },
      "WebhookConfigurationOut": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Url"
          },
          "event_types": {
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            },
            "type": "array",
            "title": "Event Types"
          },
          "secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Secret"
          },
          "headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Headers"
          },
          "timeout_seconds": {
            "type": "integer",
            "maximum": 300.0,
            "minimum": 1.0,
            "title": "Timeout Seconds",
            "default": 30
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "url",
          "event_types",
          "id",
          "is_active",
          "created_at",
          "updated_at"
        ],
        "title": "WebhookConfigurationOut"
      },
      "WebhookConfigurationUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "event_types": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/WebhookEventType"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Types"
          },
          "secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Secret"
          },
          "headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Headers"
          },
          "timeout_seconds": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 300.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout Seconds"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "WebhookConfigurationUpdate"
      },
      "WebhookDeliveryLogOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "webhook_config_id": {
            "type": "integer",
            "title": "Webhook Config Id"
          },
          "order_id": {
            "type": "integer",
            "title": "Order Id"
          },
          "event_type": {
            "$ref": "#/components/schemas/WebhookEventType"
          },
          "status": {
            "$ref": "#/components/schemas/WebhookStatus"
          },
          "delivery_status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WebhookDeliveryStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "payload": {
            "additionalProperties": true,
            "type": "object",
            "title": "Payload"
          },
          "response_status_code": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Status Code"
          },
          "response_body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Body"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "attempt_count": {
            "type": "integer",
            "title": "Attempt Count"
          },
          "max_retries": {
            "type": "integer",
            "title": "Max Retries"
          },
          "next_retry_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Retry At"
          },
          "delivered_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivered At"
          },
          "failed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Failed At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "webhook_config_id",
          "order_id",
          "event_type",
          "status",
          "delivery_status",
          "payload",
          "response_status_code",
          "response_body",
          "error_message",
          "attempt_count",
          "max_retries",
          "next_retry_at",
          "delivered_at",
          "failed_at",
          "created_at",
          "updated_at"
        ],
        "title": "WebhookDeliveryLogOut"
      },
      "WebhookDeliveryStatus": {
        "type": "string",
        "enum": [
          "success",
          "failure",
          "timeout",
          "invalid_response"
        ],
        "title": "WebhookDeliveryStatus"
      },
      "WebhookEventDetailResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "event_id": {
            "type": "string",
            "format": "uuid",
            "title": "Event Id"
          },
          "provider_code": {
            "type": "string",
            "title": "Provider Code"
          },
          "event_type": {
            "type": "string",
            "title": "Event Type"
          },
          "event_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Event Timestamp"
          },
          "processing_status": {
            "$ref": "#/components/schemas/WebhookProcessingStatus"
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified"
          },
          "processed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processed At"
          },
          "processing_attempts": {
            "type": "integer",
            "title": "Processing Attempts"
          },
          "last_error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Error"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "request_headers": {
            "additionalProperties": true,
            "type": "object",
            "title": "Request Headers"
          },
          "request_body": {
            "additionalProperties": true,
            "type": "object",
            "title": "Request Body"
          },
          "verification_details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Verification Details"
          },
          "payment_updates": {
            "items": {
              "$ref": "#/components/schemas/PaymentUpdateResponse"
            },
            "type": "array",
            "title": "Payment Updates"
          }
        },
        "type": "object",
        "required": [
          "id",
          "event_id",
          "provider_code",
          "event_type",
          "event_timestamp",
          "processing_status",
          "is_verified",
          "processed_at",
          "processing_attempts",
          "last_error",
          "created_at",
          "request_headers",
          "request_body",
          "verification_details",
          "payment_updates"
        ],
        "title": "WebhookEventDetailResponse",
        "description": "Detailed response for webhook event including payload"
      },
      "WebhookEventResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "event_id": {
            "type": "string",
            "format": "uuid",
            "title": "Event Id"
          },
          "provider_code": {
            "type": "string",
            "title": "Provider Code"
          },
          "event_type": {
            "type": "string",
            "title": "Event Type"
          },
          "event_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Event Timestamp"
          },
          "processing_status": {
            "$ref": "#/components/schemas/WebhookProcessingStatus"
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified"
          },
          "processed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processed At"
          },
          "processing_attempts": {
            "type": "integer",
            "title": "Processing Attempts"
          },
          "last_error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Error"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "event_id",
          "provider_code",
          "event_type",
          "event_timestamp",
          "processing_status",
          "is_verified",
          "processed_at",
          "processing_attempts",
          "last_error",
          "created_at"
        ],
        "title": "WebhookEventResponse",
        "description": "Response schema for webhook events"
      },
      "WebhookEventType": {
        "type": "string",
        "enum": [
          "order.created",
          "order.updated",
          "order.status_changed",
          "order.cancelled",
          "order.completed"
        ],
        "title": "WebhookEventType"
      },
      "WebhookHealthStatus": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "providers": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Providers"
          },
          "retry_scheduler_status": {
            "additionalProperties": true,
            "type": "object",
            "title": "Retry Scheduler Status"
          },
          "recent_errors": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Errors"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations"
          }
        },
        "type": "object",
        "required": [
          "status",
          "providers",
          "retry_scheduler_status",
          "recent_errors",
          "recommendations"
        ],
        "title": "WebhookHealthStatus",
        "description": "Health status for webhook system"
      },
      "WebhookLogResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "webhook_event_id": {
            "type": "integer",
            "title": "Webhook Event Id"
          },
          "log_level": {
            "type": "string",
            "title": "Log Level"
          },
          "log_type": {
            "type": "string",
            "title": "Log Type"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "title": "Occurred At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "webhook_event_id",
          "log_level",
          "log_type",
          "message",
          "details",
          "occurred_at"
        ],
        "title": "WebhookLogResponse",
        "description": "Response schema for webhook logs"
      },
      "WebhookProcessingStatus": {
        "type": "string",
        "enum": [
          "pending",
          "processing",
          "processed",
          "failed",
          "retry",
          "ignored",
          "duplicate"
        ],
        "title": "WebhookProcessingStatus",
        "description": "Status of webhook event processing"
      },
      "WebhookResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "reconciliation_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reconciliation Id"
          },
          "reconciliation_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reconciliation Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "WebhookResponse"
      },
      "WebhookStatistics": {
        "properties": {
          "provider_code": {
            "type": "string",
            "title": "Provider Code"
          },
          "total_events": {
            "type": "integer",
            "title": "Total Events"
          },
          "processed_events": {
            "type": "integer",
            "title": "Processed Events"
          },
          "failed_events": {
            "type": "integer",
            "title": "Failed Events"
          },
          "pending_events": {
            "type": "integer",
            "title": "Pending Events"
          },
          "duplicate_events": {
            "type": "integer",
            "title": "Duplicate Events"
          },
          "success_rate": {
            "type": "number",
            "title": "Success Rate"
          },
          "average_processing_time_ms": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Processing Time Ms"
          },
          "last_event_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Event At"
          }
        },
        "type": "object",
        "required": [
          "provider_code",
          "total_events",
          "processed_events",
          "failed_events",
          "pending_events",
          "duplicate_events",
          "success_rate",
          "average_processing_time_ms",
          "last_event_at"
        ],
        "title": "WebhookStatistics",
        "description": "Statistics for webhook processing"
      },
      "WebhookStatus": {
        "type": "string",
        "enum": [
          "pending",
          "delivered",
          "failed",
          "retry"
        ],
        "title": "WebhookStatus"
      },
      "WebhookTestResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "status_code": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Code"
          },
          "response_body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Body"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "WebhookTestResponse"
      },
      "WidgetConfiguration": {
        "properties": {
          "widget_id": {
            "type": "string",
            "title": "Widget Id"
          },
          "widget_type": {
            "type": "string",
            "title": "Widget Type",
            "description": "Type of widget (chart, metric, table, etc.)"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "position": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Position",
            "description": "Widget position (x, y, width, height)"
          },
          "refresh_interval": {
            "type": "integer",
            "maximum": 300.0,
            "minimum": 5.0,
            "title": "Refresh Interval",
            "description": "Refresh interval in seconds",
            "default": 30
          },
          "data_source": {
            "type": "string",
            "title": "Data Source",
            "description": "Data source for the widget"
          },
          "config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Config",
            "description": "Widget-specific configuration"
          }
        },
        "type": "object",
        "required": [
          "widget_id",
          "widget_type",
          "title",
          "position",
          "data_source"
        ],
        "title": "WidgetConfiguration",
        "description": "Configuration for dashboard widgets"
      },
      "core__inventory_schemas__Inventory": {
        "properties": {
          "item_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Item Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "category": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "title": "Quantity"
          },
          "unit": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "title": "Unit"
          },
          "threshold": {
            "type": "number",
            "minimum": 0.0,
            "title": "Threshold"
          },
          "reorder_quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Reorder Quantity"
          },
          "max_quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Quantity"
          },
          "cost_per_unit": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Per Unit"
          },
          "last_purchase_price": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Purchase Price"
          },
          "average_cost": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Cost"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "vendor_item_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Item Code"
          },
          "lead_time_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Lead Time Days"
          },
          "storage_location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Location"
          },
          "storage_temperature": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Temperature"
          },
          "shelf_life_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Shelf Life Days"
          },
          "track_expiration": {
            "type": "boolean",
            "title": "Track Expiration",
            "default": false
          },
          "track_batches": {
            "type": "boolean",
            "title": "Track Batches",
            "default": false
          },
          "perishable": {
            "type": "boolean",
            "title": "Perishable",
            "default": false
          },
          "enable_low_stock_alerts": {
            "type": "boolean",
            "title": "Enable Low Stock Alerts",
            "default": true
          },
          "alert_threshold_percentage": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Alert Threshold Percentage"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "last_counted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Counted At"
          },
          "last_adjusted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Adjusted At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          },
          "is_low_stock": {
            "type": "boolean",
            "title": "Is Low Stock",
            "default": false
          },
          "stock_percentage": {
            "type": "number",
            "title": "Stock Percentage",
            "default": 0.0
          },
          "days_until_empty": {
            "type": "integer",
            "title": "Days Until Empty",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "item_name",
          "quantity",
          "unit",
          "threshold",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "Inventory"
      },
      "core__inventory_schemas__InventoryCreate": {
        "properties": {
          "item_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Item Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "category": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "title": "Quantity"
          },
          "unit": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "title": "Unit"
          },
          "threshold": {
            "type": "number",
            "minimum": 0.0,
            "title": "Threshold"
          },
          "reorder_quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Reorder Quantity"
          },
          "max_quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Quantity"
          },
          "cost_per_unit": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Per Unit"
          },
          "last_purchase_price": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Purchase Price"
          },
          "average_cost": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Cost"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "vendor_item_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Item Code"
          },
          "lead_time_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Lead Time Days"
          },
          "storage_location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Location"
          },
          "storage_temperature": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Temperature"
          },
          "shelf_life_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Shelf Life Days"
          },
          "track_expiration": {
            "type": "boolean",
            "title": "Track Expiration",
            "default": false
          },
          "track_batches": {
            "type": "boolean",
            "title": "Track Batches",
            "default": false
          },
          "perishable": {
            "type": "boolean",
            "title": "Perishable",
            "default": false
          },
          "enable_low_stock_alerts": {
            "type": "boolean",
            "title": "Enable Low Stock Alerts",
            "default": true
          },
          "alert_threshold_percentage": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Alert Threshold Percentage"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "item_name",
          "quantity",
          "unit",
          "threshold"
        ],
        "title": "InventoryCreate"
      },
      "core__inventory_schemas__InventoryResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/core__inventory_schemas__Inventory"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "size",
          "pages"
        ],
        "title": "InventoryResponse"
      },
      "core__inventory_schemas__InventoryUpdate": {
        "properties": {
          "item_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Item Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "category": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit"
          },
          "threshold": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Threshold"
          },
          "reorder_quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Reorder Quantity"
          },
          "max_quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Quantity"
          },
          "cost_per_unit": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Per Unit"
          },
          "last_purchase_price": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Purchase Price"
          },
          "average_cost": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Cost"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "vendor_item_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Item Code"
          },
          "lead_time_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Lead Time Days"
          },
          "storage_location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Location"
          },
          "storage_temperature": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Temperature"
          },
          "shelf_life_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Shelf Life Days"
          },
          "track_expiration": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Track Expiration"
          },
          "track_batches": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Track Batches"
          },
          "perishable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Perishable"
          },
          "enable_low_stock_alerts": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enable Low Stock Alerts"
          },
          "alert_threshold_percentage": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Alert Threshold Percentage"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "InventoryUpdate"
      },
      "core__menu_schemas__Inventory": {
        "properties": {
          "item_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Item Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "title": "Quantity"
          },
          "unit": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "title": "Unit"
          },
          "threshold": {
            "type": "number",
            "minimum": 0.0,
            "title": "Threshold"
          },
          "reorder_quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Reorder Quantity"
          },
          "cost_per_unit": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Per Unit"
          },
          "last_purchase_price": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Purchase Price"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "vendor_item_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Item Code"
          },
          "storage_location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Location"
          },
          "expiration_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Days"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": [
          "item_name",
          "quantity",
          "unit",
          "threshold",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "Inventory"
      },
      "core__menu_schemas__InventoryCreate": {
        "properties": {
          "item_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Item Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "title": "Quantity"
          },
          "unit": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "title": "Unit"
          },
          "threshold": {
            "type": "number",
            "minimum": 0.0,
            "title": "Threshold"
          },
          "reorder_quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Reorder Quantity"
          },
          "cost_per_unit": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Per Unit"
          },
          "last_purchase_price": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Purchase Price"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "vendor_item_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Item Code"
          },
          "storage_location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Location"
          },
          "expiration_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Days"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "item_name",
          "quantity",
          "unit",
          "threshold"
        ],
        "title": "InventoryCreate"
      },
      "core__menu_schemas__InventoryResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/core__menu_schemas__Inventory"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "size",
          "pages"
        ],
        "title": "InventoryResponse"
      },
      "core__menu_schemas__InventoryUpdate": {
        "properties": {
          "item_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Item Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "sku": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Sku"
          },
          "quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit"
          },
          "threshold": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Threshold"
          },
          "reorder_quantity": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Reorder Quantity"
          },
          "cost_per_unit": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Per Unit"
          },
          "last_purchase_price": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Purchase Price"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          },
          "vendor_item_code": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Item Code"
          },
          "storage_location": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Location"
          },
          "expiration_days": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Days"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "InventoryUpdate"
      },
      "modules__ai_recommendations__schemas__pricing_schemas__BulkPricingRequest": {
        "properties": {
          "category_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Ids",
            "description": "Filter by categories"
          },
          "menu_item_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Menu Item Ids",
            "description": "Specific items to price"
          },
          "optimization_goal": {
            "$ref": "#/components/schemas/PriceOptimizationGoal",
            "default": "maximize_profit"
          },
          "strategies_to_use": {
            "items": {
              "$ref": "#/components/schemas/PricingStrategy"
            },
            "type": "array",
            "title": "Strategies To Use",
            "default": [
              "dynamic"
            ]
          },
          "max_price_increase_percent": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Max Price Increase Percent",
            "default": 20.0
          },
          "max_price_decrease_percent": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Max Price Decrease Percent",
            "default": 15.0
          },
          "maintain_price_relationships": {
            "type": "boolean",
            "title": "Maintain Price Relationships",
            "description": "Maintain relative pricing between items",
            "default": true
          },
          "round_to_nearest": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Round To Nearest",
            "description": "Round prices to nearest value",
            "default": "0.05"
          },
          "time_horizon_days": {
            "type": "integer",
            "maximum": 90.0,
            "minimum": 1.0,
            "title": "Time Horizon Days",
            "default": 7
          },
          "include_competitors": {
            "type": "boolean",
            "title": "Include Competitors",
            "default": true
          }
        },
        "type": "object",
        "title": "BulkPricingRequest",
        "description": "Request for bulk pricing recommendations"
      },
      "modules__ai_recommendations__schemas__staffing_schemas__DayOfWeek": {
        "type": "string",
        "enum": [
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday",
          "sunday"
        ],
        "title": "DayOfWeek",
        "description": "Days of the week"
      },
      "modules__ai_recommendations__schemas__staffing_schemas__ShiftType": {
        "type": "string",
        "enum": [
          "morning",
          "lunch",
          "afternoon",
          "dinner",
          "late_night",
          "full_day",
          "split"
        ],
        "title": "ShiftType",
        "description": "Types of shifts"
      },
      "modules__customers__schemas__customer_schemas__CustomerReward": {
        "properties": {
          "type": {
            "type": "string",
            "maxLength": 50,
            "title": "Type"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "points_cost": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Points Cost"
          },
          "discount_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Amount"
          },
          "discount_percentage": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discount Percentage"
          },
          "item_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Item Id"
          },
          "valid_until": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Valid Until"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "applicable_categories": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Applicable Categories"
          },
          "applicable_items": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Applicable Items"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          },
          "valid_from": {
            "type": "string",
            "format": "date-time",
            "title": "Valid From"
          },
          "redeemed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Redeemed At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "type",
          "name",
          "id",
          "customer_id",
          "status",
          "code",
          "valid_from",
          "redeemed_at",
          "created_at",
          "updated_at"
        ],
        "title": "CustomerReward",
        "description": "Schema for reward response"
      },
      "modules__feedback__models__feedback_models__ReviewStatus": {
        "type": "string",
        "enum": [
          "pending",
          "approved",
          "rejected",
          "flagged",
          "hidden",
          "archived"
        ],
        "title": "ReviewStatus",
        "description": "Review status for moderation"
      },
      "modules__loyalty__schemas__rewards_schemas__CustomerReward": {
        "properties": {
          "reward_type": {
            "$ref": "#/components/schemas/RewardTypeEnum"
          },
          "title": {
            "type": "string",
            "maxLength": 200,
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "percentage": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Percentage"
          },
          "points_cost": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Points Cost"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "customer_id": {
            "type": "integer",
            "title": "Customer Id"
          },
          "template_id": {
            "type": "integer",
            "title": "Template Id"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "status": {
            "$ref": "#/components/schemas/RewardStatusEnum"
          },
          "valid_from": {
            "type": "string",
            "format": "date-time",
            "title": "Valid From"
          },
          "valid_until": {
            "type": "string",
            "format": "date-time",
            "title": "Valid Until"
          },
          "redeemed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Redeemed At"
          },
          "redeemed_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Redeemed Amount"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid"
          },
          "is_expired": {
            "type": "boolean",
            "title": "Is Expired"
          },
          "days_until_expiry": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Days Until Expiry"
          }
        },
        "type": "object",
        "required": [
          "reward_type",
          "title",
          "id",
          "customer_id",
          "template_id",
          "code",
          "status",
          "valid_from",
          "valid_until",
          "redeemed_at",
          "redeemed_amount",
          "order_id",
          "created_at",
          "is_valid",
          "is_expired",
          "days_until_expiry"
        ],
        "title": "CustomerReward",
        "description": "Schema for customer reward response"
      },
      "modules__orders__enums__external_pos_enums__PaymentMethod": {
        "type": "string",
        "enum": [
          "credit_card",
          "debit_card",
          "cash",
          "check",
          "gift_card",
          "mobile_wallet",
          "bank_transfer",
          "cryptocurrency",
          "other"
        ],
        "title": "PaymentMethod",
        "description": "Payment methods from external systems"
      },
      "modules__orders__enums__external_pos_enums__PaymentStatus": {
        "type": "string",
        "enum": [
          "completed",
          "pending",
          "failed",
          "cancelled",
          "refunded",
          "partially_refunded",
          "voided",
          "expired"
        ],
        "title": "PaymentStatus",
        "description": "External payment status"
      },
      "modules__orders__models__manual_review_models__ReviewStatus": {
        "type": "string",
        "enum": [
          "pending",
          "in_review",
          "resolved",
          "escalated",
          "cancelled"
        ],
        "title": "ReviewStatus",
        "description": "Status of manual review"
      },
      "modules__orders__schemas__dynamic_pricing_schemas__BulkPricingRequest": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DynamicPricingRequest"
            },
            "type": "array",
            "title": "Items"
          },
          "context": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PricingContext"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "BulkPricingRequest"
      },
      "modules__orders__schemas__inventory_schemas__InventoryUpdate": {
        "properties": {
          "item_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Item Name"
          },
          "quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit"
          },
          "threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Threshold"
          },
          "vendor_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor Id"
          }
        },
        "type": "object",
        "title": "InventoryUpdate"
      },
      "modules__payments__models__payment_models__PaymentMethod": {
        "type": "string",
        "enum": [
          "card",
          "bank_transfer",
          "wallet",
          "paypal",
          "cash",
          "check",
          "gift_card",
          "store_credit"
        ],
        "title": "PaymentMethod",
        "description": "Payment method types"
      },
      "modules__payments__models__payment_models__PaymentStatus": {
        "type": "string",
        "enum": [
          "pending",
          "processing",
          "completed",
          "failed",
          "cancelled",
          "refunded",
          "partially_refunded",
          "disputed",
          "requires_action"
        ],
        "title": "PaymentStatus",
        "description": "Payment status states"
      },
      "modules__payroll__enums__payroll_enums__PaymentStatus": {
        "type": "string",
        "enum": [
          "pending",
          "calculated",
          "approved",
          "processed",
          "paid",
          "cancelled",
          "failed"
        ],
        "title": "PaymentStatus"
      },
      "modules__reservations__schemas__reservation_schemas__ReservationStatus": {
        "type": "string",
        "enum": [
          "pending",
          "confirmed",
          "seated",
          "completed",
          "cancelled",
          "no_show",
          "waitlist_converted"
        ],
        "title": "ReservationStatus",
        "description": "Reservation status enum for schemas"
      },
      "modules__staff__enums__scheduling_enums__DayOfWeek": {
        "type": "integer",
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "title": "DayOfWeek"
      },
      "modules__staff__enums__scheduling_enums__ShiftType": {
        "type": "string",
        "enum": [
          "regular",
          "overtime",
          "holiday",
          "training",
          "meeting"
        ],
        "title": "ShiftType"
      },
      "modules__staff__schemas__schedule_schemas__SchedulePublishRequest": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "title": "End Date"
          },
          "send_notifications": {
            "type": "boolean",
            "title": "Send Notifications",
            "default": true
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "notification_channels": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notification Channels",
            "default": [
              "email",
              "in_app"
            ]
          }
        },
        "type": "object",
        "required": [
          "start_date",
          "end_date"
        ],
        "title": "SchedulePublishRequest",
        "description": "Extended schedule publish request with notification channels"
      },
      "modules__staff__schemas__scheduling_schemas__SchedulePublishRequest": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "title": "End Date"
          },
          "send_notifications": {
            "type": "boolean",
            "title": "Send Notifications",
            "default": true
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "start_date",
          "end_date"
        ],
        "title": "SchedulePublishRequest"
      },
      "modules__tables__models__table_models__ReservationStatus": {
        "type": "string",
        "enum": [
          "pending",
          "confirmed",
          "seated",
          "completed",
          "cancelled",
          "no_show"
        ],
        "title": "ReservationStatus",
        "description": "Reservation status"
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "VALIDATION_ERROR"
              },
              "message": {
                "type": "string",
                "example": "Invalid request data"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              },
              "request_id": {
                "type": "string",
                "example": "req_xyz789"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "error"
        ]
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "example": 1
          },
          "page_size": {
            "type": "integer",
            "example": 20
          },
          "total_pages": {
            "type": "integer",
            "example": 5
          },
          "total_count": {
            "type": "integer",
            "example": 98
          },
          "has_next": {
            "type": "boolean",
            "example": true
          },
          "has_previous": {
            "type": "boolean",
            "example": false
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT authentication token obtained from /auth/login endpoint"
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for server-to-server authentication"
      }
    },
    "parameters": {
      "PageParam": {
        "name": "page",
        "in": "query",
        "description": "Page number for pagination",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 1,
          "minimum": 1
        }
      },
      "PageSizeParam": {
        "name": "page_size",
        "in": "query",
        "description": "Number of items per page",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 20,
          "minimum": 1,
          "maximum": 100
        }
      },
      "SearchParam": {
        "name": "search",
        "in": "query",
        "description": "Search query for filtering results",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "SortByParam": {
        "name": "sort_by",
        "in": "query",
        "description": "Field to sort results by",
        "required": false,
        "schema": {
          "type": "string",
          "default": "created_at"
        }
      },
      "SortOrderParam": {
        "name": "sort_order",
        "in": "query",
        "description": "Sort order direction",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "desc"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication and authorization endpoints",
      "externalDocs": {
        "description": "Authentication guide",
        "url": "https://docs.auraconnect.ai/auth"
      }
    },
    {
      "name": "Staff Management",
      "description": "Employee management, scheduling, and attendance tracking",
      "externalDocs": {
        "description": "Staff management guide",
        "url": "https://docs.auraconnect.ai/staff"
      }
    },
    {
      "name": "Orders",
      "description": "Order creation, management, and tracking",
      "externalDocs": {
        "description": "Orders API reference",
        "url": "https://docs.auraconnect.ai/api/orders"
      }
    },
    {
      "name": "Menu Management",
      "description": "Menu items, categories, modifiers, and recipes",
      "externalDocs": {
        "description": "Menu management guide",
        "url": "https://docs.auraconnect.ai/menu"
      }
    },
    {
      "name": "Inventory",
      "description": "Inventory tracking, stock management, and vendor integration",
      "externalDocs": {
        "description": "Inventory guide",
        "url": "https://docs.auraconnect.ai/inventory"
      }
    },
    {
      "name": "Payroll",
      "description": "Payroll processing, tax calculations, and payment management",
      "externalDocs": {
        "description": "Payroll documentation",
        "url": "https://docs.auraconnect.ai/payroll"
      }
    },
    {
      "name": "Analytics",
      "description": "Business analytics, reports, and AI-powered insights",
      "externalDocs": {
        "description": "Analytics guide",
        "url": "https://docs.auraconnect.ai/analytics"
      }
    },
    {
      "name": "Customer Management",
      "description": "Customer profiles, loyalty programs, and feedback",
      "externalDocs": {
        "description": "Customer management guide",
        "url": "https://docs.auraconnect.ai/customers"
      }
    },
    {
      "name": "POS Integration",
      "description": "Point of Sale system integrations and synchronization",
      "externalDocs": {
        "description": "POS integration guide",
        "url": "https://docs.auraconnect.ai/pos"
      }
    },
    {
      "name": "Payments",
      "description": "Payment processing, refunds, and reconciliation",
      "externalDocs": {
        "description": "Payments guide",
        "url": "https://docs.auraconnect.ai/payments"
      }
    }
  ],
  "webhooks": {
    "orderCreated": {
      "post": {
        "summary": "Order Created",
        "description": "Triggered when a new order is created",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "example": "order.created"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "order_number": {
                        "type": "string"
                      },
                      "total_amount": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          }
        }
      }
    },
    "paymentCompleted": {
      "post": {
        "summary": "Payment Completed",
        "description": "Triggered when a payment is successfully processed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "example": "payment.completed"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "payment_id": {
                        "type": "string"
                      },
                      "order_id": {
                        "type": "integer"
                      },
                      "amount": {
                        "type": "string"
                      },
                      "payment_method": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "AuraConnect API Documentation",
    "url": "https://docs.auraconnect.ai/api"
  }
}